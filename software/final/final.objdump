
final.elf:     file format elf32-littlenios2
final.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000148d8 memsz 0x000148d8 flags r-x
    LOAD off    0x000158f8 vaddr 0x100148f8 paddr 0x100209f0 align 2**12
         filesz 0x0000c0f8 memsz 0x0000c0f8 flags rw-
    LOAD off    0x00021ae8 vaddr 0x1002cae8 paddr 0x1002cae8 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001438c  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003b0  10014548  10014548  00015548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000c0f8  100148f8  100209f0  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  1002cae8  1002cae8  00021ae8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000219f0  2**0
                  CONTENTS
  7 .sdram        00000000  1002cc44  1002cc44  000219f0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000219f0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ea0  00000000  00000000  00021a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025a89  00000000  00000000  000228b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009b8c  00000000  00000000  00048341  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d137  00000000  00000000  00051ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000024cc  00000000  00000000  0005f004  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000038bd  00000000  00000000  000614d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018d52  00000000  00000000  00064d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0007dae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001420  00000000  00000000  0007db20  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000824a4  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000824a7  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000824b3  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000824b4  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000824b5  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000824b9  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000824bd  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000824c1  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000824cc  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000824d7  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000824e2  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001b  00000000  00000000  000824ed  2**0
                  CONTENTS, READONLY
 30 .jdi          000042f2  00000000  00000000  00082508  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000941aa  00000000  00000000  000867fa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
10014548 l    d  .rodata	00000000 .rodata
100148f8 l    d  .rwdata	00000000 .rwdata
1002cae8 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1002cc44 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_pow.c
100145dc l     O .rodata	00000010 bp
100145bc l     O .rodata	00000010 dp_l
100145cc l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
100145ec l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10005348 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
1001ef00 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 vfprintf.c
10014742 l     O .rodata	00000010 zeroes.4181
10014752 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10009f38 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000bae0 l     F .text	00000008 __fp_lock
1000bae8 l     F .text	00000008 __fp_unlock
1000bafc l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
1001f344 l     O .rwdata	00000020 lc_ctype_charset
1001f324 l     O .rwdata	00000020 lc_message_charset
1001f364 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10014780 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000e4b0 l     F .text	000000fc __sprint_r.part.0
100148b4 l     O .rodata	00000010 blanks.4125
100148a4 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
10011d04 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10011e2c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10011e58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10011f60 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1001205c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10012140 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10012324 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100209e0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
100125d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10012728 l     F .text	00000038 alt_dev_reg
1001f94c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10012a04 l     F .text	00000204 altera_avalon_jtag_uart_irq
10012c08 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100134dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10013974 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10013acc l     F .text	00000050 alt_get_errno
10013b1c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1000e06c g     F .text	00000074 _mprec_log10
1000e158 g     F .text	0000008c __any_on
10010380 g     F .text	00000054 _isatty_r
1001478c g     O .rodata	00000028 __mprec_tinytens
1001226c g     F .text	00000078 alt_main
1002cb44 g     O .bss	00000100 alt_irq
10004ec4 g     F .text	00000014 fabs
100103d4 g     F .text	0000005c _lseek_r
10003a34 g     F .text	00000130 sqrt
100209f0 g       *ABS*	00000000 __flash_rwdata_start
10006690 g     F .text	00000084 .hidden __eqdf2
1002cc44 g       *ABS*	00000000 __alt_heap_start
10007c30 g     F .text	0000003c printf
10010cf8 g     F .text	0000009c _wcrtomb_r
1000e310 g     F .text	0000005c __sseek
1000be44 g     F .text	00000010 __sinit
10010b88 g     F .text	00000154 __swbuf_r
1000c418 g     F .text	0000007c _setlocale_r
1000bc9c g     F .text	00000078 __sfmoreglue
10012304 g     F .text	00000020 __malloc_unlock
10010430 g     F .text	0000015c memmove
1000be2c g     F .text	00000018 _cleanup
1000d19c g     F .text	000000a8 _Balloc
10006714 g     F .text	000000e0 .hidden __gtdf2
10007bf4 g     F .text	00000010 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000fe84 g     F .text	00000058 _fstat_r
1002cb00 g     O .bss	00000004 errno
1000e28c g     F .text	00000008 __seofread
1002cb08 g     O .bss	00000004 alt_argv
100289ac g       *ABS*	00000000 _gp
100125a8 g     F .text	00000030 usleep
1001f7cc g     O .rwdata	00000180 alt_fd_list
10013f2c g     F .text	00000090 alt_find_dev
1000cf40 g     F .text	00000138 memcpy
1000baf0 g     F .text	0000000c _cleanup_r
10007a98 g     F .text	000000d0 .hidden __floatsidf
10013a54 g     F .text	00000078 alt_io_redirect
100067f4 g     F .text	000000e0 .hidden __ltdf2
10014548 g       *ABS*	00000000 __DTOR_END__
10004ef4 g     F .text	00000074 __fpclassifyd
1000dfc8 g     F .text	000000a4 __ratio
1000f9e8 g     F .text	00000024 __vfiprintf_internal
10012e04 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10007c04 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10005464 g     F .text	00000008 .hidden __udivsi3
10011fb0 g     F .text	000000ac isatty
100147dc g     O .rodata	000000c8 __mprec_tens
1000c494 g     F .text	0000000c __locale_charset
1002cafc g     O .bss	00000004 __malloc_top_pad
100209b8 g     O .rwdata	00000004 __mb_cur_max
1000c4c4 g     F .text	0000000c _localeconv_r
1000fedc g     F .text	000004a4 __sfvwrite_r
1000d5c4 g     F .text	0000003c __i2b
1000e1e4 g     F .text	00000054 _sbrk_r
1001058c g     F .text	0000005c _read_r
100209d8 g     O .rwdata	00000004 alt_max_fd
1000fb94 g     F .text	00000100 _fclose_r
1000bab0 g     F .text	00000030 fflush
1002caf8 g     O .bss	00000004 __malloc_max_sbrked_mem
10005474 g     F .text	0000089c .hidden __adddf3
10000290 g     F .text	0000006c initialPutPixel
1000dd70 g     F .text	0000011c __b2d
10011644 g     F .text	0000061c .hidden __umoddi3
10012190 g     F .text	000000dc lseek
100209ac g     O .rwdata	00000004 __fdlib_version
100209b0 g     O .rwdata	00000004 _global_impure_ptr
100105e8 g     F .text	000005a0 _realloc_r
1002cc44 g       *ABS*	00000000 __bss_end
10013884 g     F .text	000000f0 alt_iic_isr_register
10013e08 g     F .text	00000104 alt_tick
10011004 g     F .text	00000640 .hidden __udivdi3
1000fca8 g     F .text	00000184 _fputwc_r
100002fc g     F .text	00000098 getPixel
100147b4 g     O .rodata	00000028 __mprec_bigtens
1000d3a8 g     F .text	00000104 __s2b
10011c60 g     F .text	000000a4 .hidden __floatunsidf
1000db18 g     F .text	00000060 __mcmp
1000be64 g     F .text	00000018 __fp_lock_all
10013838 g     F .text	0000004c alt_ic_irq_enabled
10013d70 g     F .text	00000098 alt_alarm_stop
1002cb10 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
1001f7a4 g     O .rwdata	00000028 alt_dev_null
10000600 g     F .text	00000214 Bresenham
10004f7c g     F .text	000001e4 rint
100134c0 g     F .text	0000001c alt_dcache_flush_all
1000d4ac g     F .text	00000068 __hi0bits
10007a10 g     F .text	00000088 .hidden __fixdfsi
100209f0 g       *ABS*	00000000 __ram_rwdata_end
100209d0 g     O .rwdata	00000008 alt_dev_list
10012628 g     F .text	00000100 write
100148f8 g       *ABS*	00000000 __ram_rodata_end
10011ea8 g     F .text	000000b8 fstat
100067f4 g     F .text	000000e0 .hidden __ledf2
1000d890 g     F .text	00000140 __pow5mult
1000e5c4 g     F .text	00001424 ___vfiprintf_internal_r
1002caf0 g     O .bss	00000004 __nlocale_changed
1000546c g     F .text	00000008 .hidden __umodsi3
1002cc44 g       *ABS*	00000000 end
10012940 g     F .text	000000c4 altera_avalon_jtag_uart_init
10014548 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10007b68 g     F .text	00000064 .hidden __clzsi2
10013010 g     F .text	00000218 altera_avalon_jtag_uart_write
1000be54 g     F .text	00000004 __sfp_lock_acquire
1000ce58 g     F .text	000000e8 memchr
10007ce8 g     F .text	000020fc ___vfprintf_internal_r
1000bfb8 g     F .text	000002f0 _free_r
1000c4a0 g     F .text	00000010 __locale_mb_cur_max
10014380 g     F .text	00000194 __call_exitprocs
1002caec g     O .bss	00000004 __mlocale_changed
100209bc g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
1002cb14 g     O .bss	00000004 _alt_tick_rate
10007c84 g     F .text	00000064 rand
1000d9d0 g     F .text	00000148 __lshift
1002cb18 g     O .bss	00000004 _alt_nticks
10012374 g     F .text	00000104 read
10012794 g     F .text	00000048 alt_sys_init
1001426c g     F .text	00000114 __register_exitproc
1000d600 g     F .text	00000290 __multiply
10003b64 g     F .text	000010cc __ieee754_pow
10012cb0 g     F .text	00000068 altera_avalon_jtag_uart_close
10003590 g     F .text	000004a4 pow
10007bcc g     F .text	00000028 .hidden __mulsi3
100148f8 g       *ABS*	00000000 __ram_rwdata_start
10014548 g       *ABS*	00000000 __ram_rodata_start
1002cb1c g     O .bss	00000028 __malloc_current_mallinfo
1000de8c g     F .text	0000013c __d2b
100127dc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100140d0 g     F .text	000000d4 alt_get_fd
10013368 g     F .text	00000158 alt_busy_sleep
1000fa68 g     F .text	00000054 _close_r
100141f0 g     F .text	0000007c memcmp
1001289c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1002cc44 g       *ABS*	00000000 __alt_stack_base
100128ec g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10009e08 g     F .text	00000130 __swsetup_r
10000394 g     F .text	00000180 initialScreen
10005d10 g     F .text	00000980 .hidden __divdf3
1000bd14 g     F .text	00000118 __sfp
1000e0e0 g     F .text	00000078 __copybits
1001f39c g     O .rwdata	00000408 __malloc_av_
1000be60 g     F .text	00000004 __sinit_lock_release
100068d4 g     F .text	0000086c .hidden __muldf3
1000e238 g     F .text	00000054 __sread
10013fbc g     F .text	00000114 alt_find_file
1001352c g     F .text	000000a4 alt_dev_llist_insert
100122e4 g     F .text	00000020 __malloc_lock
100124f8 g     F .text	000000b0 sbrk
1000b888 g     F .text	00000228 _fflush_r
1000fabc g     F .text	000000d8 _calloc_r
1002cae8 g       *ABS*	00000000 __bss_start
1000d078 g     F .text	00000124 memset
10001144 g     F .text	0000244c main
1002cb0c g     O .bss	00000004 alt_envp
1002caf4 g     O .bss	00000004 __malloc_max_total_mem
1001283c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10010cdc g     F .text	0000001c __swbuf
10007c6c g     F .text	00000018 srand
1000e36c g     F .text	00000008 __sclose
10004f68 g     F .text	00000008 matherr
18000000 g       *ABS*	00000000 __alt_heap_limit
1000fc94 g     F .text	00000014 fclose
10000514 g     F .text	000000ec linehelper
1000a160 g     F .text	00001728 _dtoa_r
1000c6b0 g     F .text	000007a8 _malloc_r
10010e6c g     F .text	00000030 __ascii_wctomb
100209dc g     O .rwdata	00000004 alt_errno
1000c2a8 g     F .text	000000b8 _fwalk
100053b4 g     F .text	00000054 .hidden __divsi3
1000be94 g     F .text	00000124 _malloc_trim_r
10014548 g       *ABS*	00000000 __CTOR_END__
10004ed8 g     F .text	0000001c finite
1000e374 g     F .text	000000a4 strcmp
10014548 g       *ABS*	00000000 __flash_rodata_start
10014548 g       *ABS*	00000000 __DTOR_LIST__
10000814 g     F .text	00000208 circlehelper
1000532c g     F .text	0000001c copysign
1000024c g     F .text	00000044 delay
10006690 g     F .text	00000084 .hidden __nedf2
10012760 g     F .text	00000034 alt_irq_init
10012478 g     F .text	00000080 alt_release_fd
100001f8 g     F .text	00000054 maxmin
100145fc g     O .rodata	00000100 .hidden __clz_tab
1002cae8 g     O .bss	00000004 _PathLocale
100141a4 g     F .text	00000014 atexit
1000fa0c g     F .text	0000005c _write_r
1000c4d0 g     F .text	0000001c setlocale
100209b4 g     O .rwdata	00000004 _impure_ptr
1002cb04 g     O .bss	00000004 alt_argc
10005160 g     F .text	000001cc scalbn
1001362c g     F .text	0000005c _do_dtors
1000c4bc g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000dd10 g     F .text	00000060 __ulp
1000be7c g     F .text	00000018 __fp_unlock_all
100209c8 g     O .rwdata	00000008 alt_fs_list
10004f70 g     F .text	0000000c nan
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000c4ec g     F .text	0000000c localeconv
10004c30 g     F .text	00000294 __ieee754_sqrt
100136a4 g     F .text	00000050 alt_ic_isr_register
100209f0 g       *ABS*	00000000 _edata
1002cc44 g       *ABS*	00000000 _end
100148f8 g     O .rwdata	0000a608 background_image
10000e60 g     F .text	000000b4 DrawSquare
100001bc g       *ABS*	00000000 __ram_exceptions_end
10012d18 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10013794 g     F .text	000000a4 alt_ic_irq_disable
1000e294 g     F .text	0000007c __swrite
100209c0 g     O .rwdata	00000004 __malloc_trim_threshold
10013f0c g     F .text	00000020 altera_nios2_qsys_irq_init
1000c4b0 g     F .text	0000000c __locale_msgcharset
100141b8 g     F .text	00000038 exit
10000a1c g     F .text	00000358 DrawCircle
1000c360 g     F .text	000000b8 _fwalk_reent
1000db78 g     F .text	00000198 __mdiff
10005408 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000be58 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10014514 g     F .text	00000034 _exit
10013228 g     F .text	00000140 alt_alarm_start
10010ef8 g     F .text	0000010c .hidden __muldi3
1000c4f8 g     F .text	000001b8 __smakebuf_r
1000e418 g     F .text	00000098 strlen
10013c10 g     F .text	00000160 open
10006714 g     F .text	000000e0 .hidden __gedf2
100209c4 g     O .rwdata	00000004 __wctomb
1000e5ac g     F .text	00000018 __sprint_r
10013688 g     F .text	0000001c alt_icache_flush_all
100209e4 g     O .rwdata	00000004 alt_priority_mask
100136f4 g     F .text	000000a0 alt_ic_irq_enable
10009de4 g     F .text	00000024 __vfprintf_internal
10010e9c g     F .text	0000005c _wctomb_r
10007140 g     F .text	000008d0 .hidden __subdf3
1000d514 g     F .text	000000b0 __lo0bits
10000f14 g     F .text	00000230 polygonhelper
100209e8 g     O .rwdata	00000008 alt_alarm_list
100135d0 g     F .text	0000005c _do_ctors
10010d94 g     F .text	000000d8 wcrtomb
10011d54 g     F .text	000000d8 close
100120c0 g     F .text	00000080 alt_load
10000d74 g     F .text	000000ec squarehelper
1000fe2c g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
1000be5c g     F .text	00000004 __sinit_lock_acquire
1000d26c g     F .text	0000013c __multadd
1000d244 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001426 	beq	r2,zero,1000017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	008400f4 	movhi	r2,4099
10000130:	10b2d104 	addi	r2,r2,-13500
10000134:	e0fffd17 	ldw	r3,-12(fp)
10000138:	180690fa 	slli	r3,r3,3
1000013c:	10c5883a 	add	r2,r2,r3
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	008400f4 	movhi	r2,4099
10000148:	10b2d104 	addi	r2,r2,-13500
1000014c:	e13ffd17 	ldw	r4,-12(fp)
10000150:	200890fa 	slli	r4,r4,3
10000154:	1105883a 	add	r2,r2,r4
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
10000178:	00000706 	br	10000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000017c:	e0bffc17 	ldw	r2,-16(fp)
10000180:	1085883a 	add	r2,r2,r2
10000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000188:	e0bffd17 	ldw	r2,-12(fp)
1000018c:	10800044 	addi	r2,r2,1
10000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
10000194:	003fe106 	br	1000011c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
10000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000019c:	e0bffb17 	ldw	r2,-20(fp)
100001a0:	103fdb1e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	068400b4 	movhi	gp,4098
    ori gp, gp, %lo(_gp)
100001c8:	d6a26b14 	ori	gp,gp,35244
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	008400b4 	movhi	r2,4098
    ori r2, r2, %lo(__bss_start)
100001d0:	10b2ba14 	ori	r2,r2,51944

    movhi r3, %hi(__bss_end)
100001d4:	00c400b4 	movhi	r3,4098
    ori r3, r3, %lo(__bss_end)
100001d8:	18f31114 	ori	r3,r3,52292

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	00120c00 	call	100120c0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	001226c0 	call	1001226c <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <maxmin>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int maxmin(int no, int max, int min)
{
100001f8:	defffc04 	addi	sp,sp,-16
100001fc:	df000315 	stw	fp,12(sp)
10000200:	df000304 	addi	fp,sp,12
10000204:	e13ffd15 	stw	r4,-12(fp)
10000208:	e17ffe15 	stw	r5,-8(fp)
1000020c:	e1bfff15 	stw	r6,-4(fp)
 if(no>max) {no=max;}
10000210:	e0bffd17 	ldw	r2,-12(fp)
10000214:	e0fffe17 	ldw	r3,-8(fp)
10000218:	1880020e 	bge	r3,r2,10000224 <maxmin+0x2c>
1000021c:	e0bffe17 	ldw	r2,-8(fp)
10000220:	e0bffd15 	stw	r2,-12(fp)
 if(no<min) {no=min;}
10000224:	e0fffd17 	ldw	r3,-12(fp)
10000228:	e0bfff17 	ldw	r2,-4(fp)
1000022c:	1880020e 	bge	r3,r2,10000238 <maxmin+0x40>
10000230:	e0bfff17 	ldw	r2,-4(fp)
10000234:	e0bffd15 	stw	r2,-12(fp)

 return(no);
10000238:	e0bffd17 	ldw	r2,-12(fp)
}
1000023c:	e037883a 	mov	sp,fp
10000240:	df000017 	ldw	fp,0(sp)
10000244:	dec00104 	addi	sp,sp,4
10000248:	f800283a 	ret

1000024c <delay>:

void delay()
{
1000024c:	defffd04 	addi	sp,sp,-12
10000250:	df000215 	stw	fp,8(sp)
10000254:	df000204 	addi	fp,sp,8
    int i,max;
    max = 1000;
10000258:	0080fa04 	movi	r2,1000
1000025c:	e0bfff15 	stw	r2,-4(fp)
    for(i=0;i<max;i++);
10000260:	e03ffe15 	stw	zero,-8(fp)
10000264:	00000306 	br	10000274 <delay+0x28>
10000268:	e0bffe17 	ldw	r2,-8(fp)
1000026c:	10800044 	addi	r2,r2,1
10000270:	e0bffe15 	stw	r2,-8(fp)
10000274:	e0fffe17 	ldw	r3,-8(fp)
10000278:	e0bfff17 	ldw	r2,-4(fp)
1000027c:	18bffa16 	blt	r3,r2,10000268 <__alt_data_end+0xf8000268>
}
10000280:	e037883a 	mov	sp,fp
10000284:	df000017 	ldw	fp,0(sp)
10000288:	dec00104 	addi	sp,sp,4
1000028c:	f800283a 	ret

10000290 <initialPutPixel>:

void initialPutPixel(int x,int y, int color)
{
10000290:	defffb04 	addi	sp,sp,-20
10000294:	df000415 	stw	fp,16(sp)
10000298:	df000404 	addi	fp,sp,16
1000029c:	e13ffd15 	stw	r4,-12(fp)
100002a0:	e17ffe15 	stw	r5,-8(fp)
100002a4:	e1bfff15 	stw	r6,-4(fp)
    int command = 1;
100002a8:	00800044 	movi	r2,1
100002ac:	e0bffc15 	stw	r2,-16(fp)
    IOWR(CURRX_BASE,0,x);
100002b0:	00800c04 	movi	r2,48
100002b4:	e0fffd17 	ldw	r3,-12(fp)
100002b8:	10c00035 	stwio	r3,0(r2)
    IOWR(CURRY_BASE,0,y);
100002bc:	00800804 	movi	r2,32
100002c0:	e0fffe17 	ldw	r3,-8(fp)
100002c4:	10c00035 	stwio	r3,0(r2)
    IOWR(COLOR_FROM_BASE,0,color);
100002c8:	00801804 	movi	r2,96
100002cc:	e0ffff17 	ldw	r3,-4(fp)
100002d0:	10c00035 	stwio	r3,0(r2)
    IOWR(COMMAND_BASE,0,command);
100002d4:	00801004 	movi	r2,64
100002d8:	e0fffc17 	ldw	r3,-16(fp)
100002dc:	10c00035 	stwio	r3,0(r2)
    IOWR(COMMAND_BASE,0,0);
100002e0:	0007883a 	mov	r3,zero
100002e4:	00801004 	movi	r2,64
100002e8:	10c00035 	stwio	r3,0(r2)
    //delay();
}
100002ec:	e037883a 	mov	sp,fp
100002f0:	df000017 	ldw	fp,0(sp)
100002f4:	dec00104 	addi	sp,sp,4
100002f8:	f800283a 	ret

100002fc <getPixel>:

int getPixel(int x, int y)
{
100002fc:	defffa04 	addi	sp,sp,-24
10000300:	dfc00515 	stw	ra,20(sp)
10000304:	df000415 	stw	fp,16(sp)
10000308:	df000404 	addi	fp,sp,16
1000030c:	e13ffe15 	stw	r4,-8(fp)
10000310:	e17fff15 	stw	r5,-4(fp)
	int command = 0;
10000314:	e03ffc15 	stw	zero,-16(fp)
	IOWR(CURRX_BASE,0,x);
10000318:	00800c04 	movi	r2,48
1000031c:	e0fffe17 	ldw	r3,-8(fp)
10000320:	10c00035 	stwio	r3,0(r2)
	IOWR(CURRY_BASE,0,y);
10000324:	00800804 	movi	r2,32
10000328:	e0ffff17 	ldw	r3,-4(fp)
1000032c:	10c00035 	stwio	r3,0(r2)
	IOWR(COMMAND_BASE,0,command);
10000330:	00801004 	movi	r2,64
10000334:	e0fffc17 	ldw	r3,-16(fp)
10000338:	10c00035 	stwio	r3,0(r2)
	IOWR(OTG_HPI_W_BASE, 0, 1);
1000033c:	00c00044 	movi	r3,1
10000340:	00802404 	movi	r2,144
10000344:	10c00035 	stwio	r3,0(r2)
	int val = IORD(COLOR_TO_BASE,0);
10000348:	00801404 	movi	r2,80
1000034c:	10800037 	ldwio	r2,0(r2)
10000350:	e0bffd15 	stw	r2,-12(fp)
	delay();
10000354:	000024c0 	call	1000024c <delay>
	usleep(10000);
10000358:	0109c404 	movi	r4,10000
1000035c:	00125a80 	call	100125a8 <usleep>
	IOWR(OTG_HPI_W_BASE, 0, 0);
10000360:	0007883a 	mov	r3,zero
10000364:	00802404 	movi	r2,144
10000368:	10c00035 	stwio	r3,0(r2)
	printf("%d", val);
1000036c:	01040074 	movhi	r4,4097
10000370:	21115204 	addi	r4,r4,17736
10000374:	e17ffd17 	ldw	r5,-12(fp)
10000378:	0007c300 	call	10007c30 <printf>
	return val;
1000037c:	e0bffd17 	ldw	r2,-12(fp)
}
10000380:	e037883a 	mov	sp,fp
10000384:	dfc00117 	ldw	ra,4(sp)
10000388:	df000017 	ldw	fp,0(sp)
1000038c:	dec00204 	addi	sp,sp,8
10000390:	f800283a 	ret

10000394 <initialScreen>:
void initialScreen()
{
10000394:	defff904 	addi	sp,sp,-28
10000398:	dfc00615 	stw	ra,24(sp)
1000039c:	df000515 	stw	fp,20(sp)
100003a0:	df000504 	addi	fp,sp,20
    unsigned int x,y,i,b,c,j;
    i=0;
100003a4:	e03ffd15 	stw	zero,-12(fp)
    j=0;
100003a8:	e03ffe15 	stw	zero,-8(fp)
    for(y=0;y<480;y++)
100003ac:	e03ffc15 	stw	zero,-16(fp)
100003b0:	00005006 	br	100004f4 <initialScreen+0x160>
    {
        for(x=0;x<640;x++)
100003b4:	e03ffb15 	stw	zero,-20(fp)
100003b8:	00004206 	br	100004c4 <initialScreen+0x130>
        {
           if(background_image[j][1] == 0)
100003bc:	00840074 	movhi	r2,4097
100003c0:	10923e04 	addi	r2,r2,18680
100003c4:	e0fffe17 	ldw	r3,-8(fp)
100003c8:	180690fa 	slli	r3,r3,3
100003cc:	10c5883a 	add	r2,r2,r3
100003d0:	10800104 	addi	r2,r2,4
100003d4:	10800017 	ldw	r2,0(r2)
100003d8:	1000031e 	bne	r2,zero,100003e8 <initialScreen+0x54>
        	   j++;
100003dc:	e0bffe17 	ldw	r2,-8(fp)
100003e0:	10800044 	addi	r2,r2,1
100003e4:	e0bffe15 	stw	r2,-8(fp)

        	 b= background_image[j][0] << 8;
100003e8:	00840074 	movhi	r2,4097
100003ec:	10923e04 	addi	r2,r2,18680
100003f0:	e0fffe17 	ldw	r3,-8(fp)
100003f4:	180690fa 	slli	r3,r3,3
100003f8:	10c5883a 	add	r2,r2,r3
100003fc:	10800017 	ldw	r2,0(r2)
10000400:	1004923a 	slli	r2,r2,8
10000404:	e0bfff15 	stw	r2,-4(fp)
        	 background_image[j][1] -=1;
10000408:	00840074 	movhi	r2,4097
1000040c:	10923e04 	addi	r2,r2,18680
10000410:	e0fffe17 	ldw	r3,-8(fp)
10000414:	180690fa 	slli	r3,r3,3
10000418:	10c5883a 	add	r2,r2,r3
1000041c:	10800104 	addi	r2,r2,4
10000420:	10800017 	ldw	r2,0(r2)
10000424:	10ffffc4 	addi	r3,r2,-1
10000428:	00840074 	movhi	r2,4097
1000042c:	10923e04 	addi	r2,r2,18680
10000430:	e13ffe17 	ldw	r4,-8(fp)
10000434:	200890fa 	slli	r4,r4,3
10000438:	1105883a 	add	r2,r2,r4
1000043c:	10800104 	addi	r2,r2,4
10000440:	10c00015 	stw	r3,0(r2)
        	 if(background_image[j][1] == 0)
10000444:	00840074 	movhi	r2,4097
10000448:	10923e04 	addi	r2,r2,18680
1000044c:	e0fffe17 	ldw	r3,-8(fp)
10000450:	180690fa 	slli	r3,r3,3
10000454:	10c5883a 	add	r2,r2,r3
10000458:	10800104 	addi	r2,r2,4
1000045c:	10800017 	ldw	r2,0(r2)
10000460:	1000031e 	bne	r2,zero,10000470 <initialScreen+0xdc>
        	         	   j++;
10000464:	e0bffe17 	ldw	r2,-8(fp)
10000468:	10800044 	addi	r2,r2,1
1000046c:	e0bffe15 	stw	r2,-8(fp)

        	 b = b | background_image[j][0];
10000470:	00840074 	movhi	r2,4097
10000474:	10923e04 	addi	r2,r2,18680
10000478:	e0fffe17 	ldw	r3,-8(fp)
1000047c:	180690fa 	slli	r3,r3,3
10000480:	10c5883a 	add	r2,r2,r3
10000484:	10800017 	ldw	r2,0(r2)
10000488:	e0ffff17 	ldw	r3,-4(fp)
1000048c:	1884b03a 	or	r2,r3,r2
10000490:	e0bfff15 	stw	r2,-4(fp)

            initialPutPixel(x,y,b);//0xe0e0 + (y<<8 | y));
10000494:	e13ffb17 	ldw	r4,-20(fp)
10000498:	e0fffc17 	ldw	r3,-16(fp)
1000049c:	e0bfff17 	ldw	r2,-4(fp)
100004a0:	180b883a 	mov	r5,r3
100004a4:	100d883a 	mov	r6,r2
100004a8:	00002900 	call	10000290 <initialPutPixel>
            i=i+1;
100004ac:	e0bffd17 	ldw	r2,-12(fp)
100004b0:	10800044 	addi	r2,r2,1
100004b4:	e0bffd15 	stw	r2,-12(fp)
    unsigned int x,y,i,b,c,j;
    i=0;
    j=0;
    for(y=0;y<480;y++)
    {
        for(x=0;x<640;x++)
100004b8:	e0bffb17 	ldw	r2,-20(fp)
100004bc:	10800044 	addi	r2,r2,1
100004c0:	e0bffb15 	stw	r2,-20(fp)
100004c4:	e0bffb17 	ldw	r2,-20(fp)
100004c8:	1080a030 	cmpltui	r2,r2,640
100004cc:	103fbb1e 	bne	r2,zero,100003bc <__alt_data_end+0xf80003bc>

            initialPutPixel(x,y,b);//0xe0e0 + (y<<8 | y));
            i=i+1;
           // printf()
        }
        printf("%d\n", y);
100004d0:	01040074 	movhi	r4,4097
100004d4:	21115304 	addi	r4,r4,17740
100004d8:	e17ffc17 	ldw	r5,-16(fp)
100004dc:	0007c300 	call	10007c30 <printf>
        usleep(10);
100004e0:	01000284 	movi	r4,10
100004e4:	00125a80 	call	100125a8 <usleep>
void initialScreen()
{
    unsigned int x,y,i,b,c,j;
    i=0;
    j=0;
    for(y=0;y<480;y++)
100004e8:	e0bffc17 	ldw	r2,-16(fp)
100004ec:	10800044 	addi	r2,r2,1
100004f0:	e0bffc15 	stw	r2,-16(fp)
100004f4:	e0bffc17 	ldw	r2,-16(fp)
100004f8:	10807830 	cmpltui	r2,r2,480
100004fc:	103fad1e 	bne	r2,zero,100003b4 <__alt_data_end+0xf80003b4>
           // printf()
        }
        printf("%d\n", y);
        usleep(10);
    }
}
10000500:	e037883a 	mov	sp,fp
10000504:	dfc00117 	ldw	ra,4(sp)
10000508:	df000017 	ldw	fp,0(sp)
1000050c:	dec00204 	addi	sp,sp,8
10000510:	f800283a 	ret

10000514 <linehelper>:
int linehelper(int x, int y, int color)
{
10000514:	defff504 	addi	sp,sp,-44
10000518:	dfc00a15 	stw	ra,40(sp)
1000051c:	df000915 	stw	fp,36(sp)
10000520:	df000904 	addi	fp,sp,36
10000524:	e13ffd15 	stw	r4,-12(fp)
10000528:	e17ffe15 	stw	r5,-8(fp)
1000052c:	e1bfff15 	stw	r6,-4(fp)
	int i =0;
10000530:	e03ff815 	stw	zero,-32(fp)
		for(i=0; i<1000;i++);
10000534:	e03ff815 	stw	zero,-32(fp)
10000538:	00000306 	br	10000548 <linehelper+0x34>
1000053c:	e0bff817 	ldw	r2,-32(fp)
10000540:	10800044 	addi	r2,r2,1
10000544:	e0bff815 	stw	r2,-32(fp)
10000548:	e0bff817 	ldw	r2,-32(fp)
1000054c:	1080fa10 	cmplti	r2,r2,1000
10000550:	103ffa1e 	bne	r2,zero,1000053c <__alt_data_end+0xf800053c>
		int but = 0;
10000554:	e03ffa15 	stw	zero,-24(fp)
		int flag = 0;
10000558:	e03ff915 	stw	zero,-28(fp)
		int end_x,end_y;
		while(1)
		{
			but = IORD(BUTTON_BASE, 0);
1000055c:	00801c04 	movi	r2,112
10000560:	10800037 	ldwio	r2,0(r2)
10000564:	e0bffa15 	stw	r2,-24(fp)
			if(but == 0)
10000568:	e0bffa17 	ldw	r2,-24(fp)
1000056c:	1000021e 	bne	r2,zero,10000578 <linehelper+0x64>
				flag = 1;
10000570:	00800044 	movi	r2,1
10000574:	e0bff915 	stw	r2,-28(fp)
			if(flag == 1 && but == 1)
10000578:	e0bff917 	ldw	r2,-28(fp)
1000057c:	10800058 	cmpnei	r2,r2,1
10000580:	1000191e 	bne	r2,zero,100005e8 <linehelper+0xd4>
10000584:	e0bffa17 	ldw	r2,-24(fp)
10000588:	10800058 	cmpnei	r2,r2,1
1000058c:	1000161e 	bne	r2,zero,100005e8 <linehelper+0xd4>
			{
				end_x = IORD(PX_BASE, 0);
10000590:	00802804 	movi	r2,160
10000594:	10800037 	ldwio	r2,0(r2)
10000598:	e0bffb15 	stw	r2,-20(fp)
			    end_y = IORD(PY_BASE, 0);
1000059c:	00802004 	movi	r2,128
100005a0:	10800037 	ldwio	r2,0(r2)
100005a4:	e0bffc15 	stw	r2,-16(fp)

				printf("making rect 1");
100005a8:	01040074 	movhi	r4,4097
100005ac:	21115404 	addi	r4,r4,17744
100005b0:	0007c300 	call	10007c30 <printf>
				//flag_square = 1;

				Bresenham(x,y,end_x,end_y,color);
100005b4:	e0bfff17 	ldw	r2,-4(fp)
100005b8:	d8800015 	stw	r2,0(sp)
100005bc:	e13ffd17 	ldw	r4,-12(fp)
100005c0:	e17ffe17 	ldw	r5,-8(fp)
100005c4:	e1bffb17 	ldw	r6,-20(fp)
100005c8:	e1fffc17 	ldw	r7,-16(fp)
100005cc:	00006000 	call	10000600 <Bresenham>
				while(IORD(BUTTON_BASE,0));
100005d0:	0001883a 	nop
100005d4:	00801c04 	movi	r2,112
100005d8:	10800037 	ldwio	r2,0(r2)
100005dc:	103ffd1e 	bne	r2,zero,100005d4 <__alt_data_end+0xf80005d4>
				return 0;
100005e0:	0005883a 	mov	r2,zero
100005e4:	00000106 	br	100005ec <linehelper+0xd8>
			}

		}
100005e8:	003fdc06 	br	1000055c <__alt_data_end+0xf800055c>
}
100005ec:	e037883a 	mov	sp,fp
100005f0:	dfc00117 	ldw	ra,4(sp)
100005f4:	df000017 	ldw	fp,0(sp)
100005f8:	dec00204 	addi	sp,sp,8
100005fc:	f800283a 	ret

10000600 <Bresenham>:
void Bresenham(int x1, int y1, int x2, int y2,int color)
{
10000600:	deffed04 	addi	sp,sp,-76
10000604:	dfc01215 	stw	ra,72(sp)
10000608:	df001115 	stw	fp,68(sp)
1000060c:	df001104 	addi	fp,sp,68
10000610:	e13ffc15 	stw	r4,-16(fp)
10000614:	e17ffd15 	stw	r5,-12(fp)
10000618:	e1bffe15 	stw	r6,-8(fp)
1000061c:	e1ffff15 	stw	r7,-4(fp)
            int slope;
            int dx, dy, incE, incNE, d, x, y;
            int flag_dydx = 0, temp1,steep;
10000620:	e03ff515 	stw	zero,-44(fp)
            int abs_dx , abs_dy;
            // Reverse lines where x1 > x2

            abs_dx = abs(x2 - x1);
10000624:	e0fffe17 	ldw	r3,-8(fp)
10000628:	e0bffc17 	ldw	r2,-16(fp)
1000062c:	1885c83a 	sub	r2,r3,r2
10000630:	1000010e 	bge	r2,zero,10000638 <Bresenham+0x38>
10000634:	0085c83a 	sub	r2,zero,r2
10000638:	e0bff615 	stw	r2,-40(fp)
            abs_dy = abs(y2 - y1);
1000063c:	e0ffff17 	ldw	r3,-4(fp)
10000640:	e0bffd17 	ldw	r2,-12(fp)
10000644:	1885c83a 	sub	r2,r3,r2
10000648:	1000010e 	bge	r2,zero,10000650 <Bresenham+0x50>
1000064c:	0085c83a 	sub	r2,zero,r2
10000650:	e0bff715 	stw	r2,-36(fp)
            if(abs_dy > abs_dx)
10000654:	e0bff717 	ldw	r2,-36(fp)
10000658:	e0fff617 	ldw	r3,-40(fp)
1000065c:	1880030e 	bge	r3,r2,1000066c <Bresenham+0x6c>
            {
                steep = 1;
10000660:	00800044 	movi	r2,1
10000664:	e0bff415 	stw	r2,-48(fp)
10000668:	00000106 	br	10000670 <Bresenham+0x70>
            }
            else
            {
                steep = 0;
1000066c:	e03ff415 	stw	zero,-48(fp)
            }

            if(steep ==1)
10000670:	e0bff417 	ldw	r2,-48(fp)
10000674:	10800058 	cmpnei	r2,r2,1
10000678:	10000c1e 	bne	r2,zero,100006ac <Bresenham+0xac>
            {

               //swap(x1,y1) and swap(x2,y1)
                temp1 = x1;
1000067c:	e0bffc17 	ldw	r2,-16(fp)
10000680:	e0bff815 	stw	r2,-32(fp)
                x1 = y1;
10000684:	e0bffd17 	ldw	r2,-12(fp)
10000688:	e0bffc15 	stw	r2,-16(fp)
                y1 = temp1;
1000068c:	e0bff817 	ldw	r2,-32(fp)
10000690:	e0bffd15 	stw	r2,-12(fp)

                temp1 = x2;
10000694:	e0bffe17 	ldw	r2,-8(fp)
10000698:	e0bff815 	stw	r2,-32(fp)
                x2 = y2;
1000069c:	e0bfff17 	ldw	r2,-4(fp)
100006a0:	e0bffe15 	stw	r2,-8(fp)
                y2 = temp1;
100006a4:	e0bff817 	ldw	r2,-32(fp)
100006a8:	e0bfff15 	stw	r2,-4(fp)


            }
             if (x1 > x2)
100006ac:	e0bffc17 	ldw	r2,-16(fp)
100006b0:	e0fffe17 	ldw	r3,-8(fp)
100006b4:	18800c0e 	bge	r3,r2,100006e8 <Bresenham+0xe8>
            {
                //Bresenham(x2, y2, x1, y1);
                temp1 = x1;
100006b8:	e0bffc17 	ldw	r2,-16(fp)
100006bc:	e0bff815 	stw	r2,-32(fp)
                x1 = x2;
100006c0:	e0bffe17 	ldw	r2,-8(fp)
100006c4:	e0bffc15 	stw	r2,-16(fp)
                x2 = temp1;
100006c8:	e0bff817 	ldw	r2,-32(fp)
100006cc:	e0bffe15 	stw	r2,-8(fp)

                temp1 = y1;
100006d0:	e0bffd17 	ldw	r2,-12(fp)
100006d4:	e0bff815 	stw	r2,-32(fp)
                y1 = y2;
100006d8:	e0bfff17 	ldw	r2,-4(fp)
100006dc:	e0bffd15 	stw	r2,-12(fp)
                y2 = temp1;
100006e0:	e0bff817 	ldw	r2,-32(fp)
100006e4:	e0bfff15 	stw	r2,-4(fp)
                //return;
            }
            dx = x2 - x1;
100006e8:	e0fffe17 	ldw	r3,-8(fp)
100006ec:	e0bffc17 	ldw	r2,-16(fp)
100006f0:	1885c83a 	sub	r2,r3,r2
100006f4:	e0bff915 	stw	r2,-28(fp)
            dy = y2 - y1;
100006f8:	e0ffff17 	ldw	r3,-4(fp)
100006fc:	e0bffd17 	ldw	r2,-12(fp)
10000700:	1885c83a 	sub	r2,r3,r2
10000704:	e0bff015 	stw	r2,-64(fp)
            // Adjust y-increment for negatively sloped lines
            if (dy < 0)
10000708:	e0bff017 	ldw	r2,-64(fp)
1000070c:	1000060e 	bge	r2,zero,10000728 <Bresenham+0x128>
            {
                slope = -1;
10000710:	00bfffc4 	movi	r2,-1
10000714:	e0bfef15 	stw	r2,-68(fp)
                dy = -dy;
10000718:	e0bff017 	ldw	r2,-64(fp)
1000071c:	0085c83a 	sub	r2,zero,r2
10000720:	e0bff015 	stw	r2,-64(fp)
10000724:	00000206 	br	10000730 <Bresenham+0x130>
            }
            else
            {
                slope = 1;
10000728:	00800044 	movi	r2,1
1000072c:	e0bfef15 	stw	r2,-68(fp)
            }
            // Bresenham constants
            incE = 2 * dy;
10000730:	e0bff017 	ldw	r2,-64(fp)
10000734:	1085883a 	add	r2,r2,r2
10000738:	e0bffa15 	stw	r2,-24(fp)
            incNE = 2 * dy - 2 * dx;
1000073c:	e0fff017 	ldw	r3,-64(fp)
10000740:	e0bff917 	ldw	r2,-28(fp)
10000744:	1885c83a 	sub	r2,r3,r2
10000748:	1085883a 	add	r2,r2,r2
1000074c:	e0bffb15 	stw	r2,-20(fp)
            d = 2 * dy - dx;
10000750:	e0bff017 	ldw	r2,-64(fp)
10000754:	1085883a 	add	r2,r2,r2
10000758:	1007883a 	mov	r3,r2
1000075c:	e0bff917 	ldw	r2,-28(fp)
10000760:	1885c83a 	sub	r2,r3,r2
10000764:	e0bff115 	stw	r2,-60(fp)
            y = y1;
10000768:	e0bffd17 	ldw	r2,-12(fp)
1000076c:	e0bff315 	stw	r2,-52(fp)
            // Blit
            for (x = x1; x <= x2; x++)
10000770:	e0bffc17 	ldw	r2,-16(fp)
10000774:	e0bff215 	stw	r2,-56(fp)
10000778:	00001e06 	br	100007f4 <Bresenham+0x1f4>
            {
               if(steep == 1)
1000077c:	e0bff417 	ldw	r2,-48(fp)
10000780:	10800058 	cmpnei	r2,r2,1
10000784:	1000051e 	bne	r2,zero,1000079c <Bresenham+0x19c>
               {
                 initialPutPixel(y,x,color);
10000788:	e13ff317 	ldw	r4,-52(fp)
1000078c:	e17ff217 	ldw	r5,-56(fp)
10000790:	e1800217 	ldw	r6,8(fp)
10000794:	00002900 	call	10000290 <initialPutPixel>
10000798:	00000406 	br	100007ac <Bresenham+0x1ac>
               }
               else
               {
            	   initialPutPixel(x,y,color);
1000079c:	e13ff217 	ldw	r4,-56(fp)
100007a0:	e17ff317 	ldw	r5,-52(fp)
100007a4:	e1800217 	ldw	r6,8(fp)
100007a8:	00002900 	call	10000290 <initialPutPixel>
               }
                if (d <= 0)
100007ac:	e0bff117 	ldw	r2,-60(fp)
100007b0:	00800516 	blt	zero,r2,100007c8 <Bresenham+0x1c8>
                {
                    d += incE;
100007b4:	e0fff117 	ldw	r3,-60(fp)
100007b8:	e0bffa17 	ldw	r2,-24(fp)
100007bc:	1885883a 	add	r2,r3,r2
100007c0:	e0bff115 	stw	r2,-60(fp)
100007c4:	00000806 	br	100007e8 <Bresenham+0x1e8>
                }
                else
                {
                    d += incNE;
100007c8:	e0fff117 	ldw	r3,-60(fp)
100007cc:	e0bffb17 	ldw	r2,-20(fp)
100007d0:	1885883a 	add	r2,r3,r2
100007d4:	e0bff115 	stw	r2,-60(fp)
                    y += slope;
100007d8:	e0fff317 	ldw	r3,-52(fp)
100007dc:	e0bfef17 	ldw	r2,-68(fp)
100007e0:	1885883a 	add	r2,r3,r2
100007e4:	e0bff315 	stw	r2,-52(fp)
            incE = 2 * dy;
            incNE = 2 * dy - 2 * dx;
            d = 2 * dy - dx;
            y = y1;
            // Blit
            for (x = x1; x <= x2; x++)
100007e8:	e0bff217 	ldw	r2,-56(fp)
100007ec:	10800044 	addi	r2,r2,1
100007f0:	e0bff215 	stw	r2,-56(fp)
100007f4:	e0bff217 	ldw	r2,-56(fp)
100007f8:	e0fffe17 	ldw	r3,-8(fp)
100007fc:	18bfdf0e 	bge	r3,r2,1000077c <__alt_data_end+0xf800077c>
                    d += incNE;
                    y += slope;

                }
            }
}
10000800:	e037883a 	mov	sp,fp
10000804:	dfc00117 	ldw	ra,4(sp)
10000808:	df000017 	ldw	fp,0(sp)
1000080c:	dec00204 	addi	sp,sp,8
10000810:	f800283a 	ret

10000814 <circlehelper>:

int circlehelper(int x,int y, int color)
{
10000814:	defff104 	addi	sp,sp,-60
10000818:	dfc00e15 	stw	ra,56(sp)
1000081c:	df000d15 	stw	fp,52(sp)
10000820:	dc400c15 	stw	r17,48(sp)
10000824:	dc000b15 	stw	r16,44(sp)
10000828:	df000d04 	addi	fp,sp,52
1000082c:	e13ffb15 	stw	r4,-20(fp)
10000830:	e17ffc15 	stw	r5,-16(fp)
10000834:	e1bffd15 	stw	r6,-12(fp)
	int i =0;
10000838:	e03ff315 	stw	zero,-52(fp)
		for(i=0; i<1000;i++);
1000083c:	e03ff315 	stw	zero,-52(fp)
10000840:	00000306 	br	10000850 <circlehelper+0x3c>
10000844:	e0bff317 	ldw	r2,-52(fp)
10000848:	10800044 	addi	r2,r2,1
1000084c:	e0bff315 	stw	r2,-52(fp)
10000850:	e0bff317 	ldw	r2,-52(fp)
10000854:	1080fa10 	cmplti	r2,r2,1000
10000858:	103ffa1e 	bne	r2,zero,10000844 <__alt_data_end+0xf8000844>
		int but = 0;
1000085c:	e03ff515 	stw	zero,-44(fp)
		int flag = 0;
10000860:	e03ff415 	stw	zero,-48(fp)
		int end_x,end_y,center_x,center_y, rad;
		while(1)
		{
			but = IORD(BUTTON_BASE, 0);
10000864:	00801c04 	movi	r2,112
10000868:	10800037 	ldwio	r2,0(r2)
1000086c:	e0bff515 	stw	r2,-44(fp)
			if(but == 0)
10000870:	e0bff517 	ldw	r2,-44(fp)
10000874:	1000021e 	bne	r2,zero,10000880 <circlehelper+0x6c>
				flag = 1;
10000878:	00800044 	movi	r2,1
1000087c:	e0bff415 	stw	r2,-48(fp)
			if(flag == 1 && but == 1)
10000880:	e0bff417 	ldw	r2,-48(fp)
10000884:	10800058 	cmpnei	r2,r2,1
10000888:	10005c1e 	bne	r2,zero,100009fc <circlehelper+0x1e8>
1000088c:	e0bff517 	ldw	r2,-44(fp)
10000890:	10800058 	cmpnei	r2,r2,1
10000894:	1000591e 	bne	r2,zero,100009fc <circlehelper+0x1e8>
			{
				end_x = IORD(PX_BASE, 0);
10000898:	00802804 	movi	r2,160
1000089c:	10800037 	ldwio	r2,0(r2)
100008a0:	e0bff615 	stw	r2,-40(fp)
			    end_y = IORD(PY_BASE, 0);
100008a4:	00802004 	movi	r2,128
100008a8:	10800037 	ldwio	r2,0(r2)
100008ac:	e0bff715 	stw	r2,-36(fp)
			     center_x = (x + end_x)/2;
100008b0:	e0fffb17 	ldw	r3,-20(fp)
100008b4:	e0bff617 	ldw	r2,-40(fp)
100008b8:	1885883a 	add	r2,r3,r2
100008bc:	1006d7fa 	srli	r3,r2,31
100008c0:	1885883a 	add	r2,r3,r2
100008c4:	1005d07a 	srai	r2,r2,1
100008c8:	e0bff815 	stw	r2,-32(fp)
			     center_y = (y + end_y)/2;
100008cc:	e0fffc17 	ldw	r3,-16(fp)
100008d0:	e0bff717 	ldw	r2,-36(fp)
100008d4:	1885883a 	add	r2,r3,r2
100008d8:	1006d7fa 	srli	r3,r2,31
100008dc:	1885883a 	add	r2,r3,r2
100008e0:	1005d07a 	srai	r2,r2,1
100008e4:	e0bff915 	stw	r2,-28(fp)
			     rad = sqrt(pow((x-end_x),2)+pow((y-end_y),2))/2;
100008e8:	e0fffb17 	ldw	r3,-20(fp)
100008ec:	e0bff617 	ldw	r2,-40(fp)
100008f0:	1885c83a 	sub	r2,r3,r2
100008f4:	1009883a 	mov	r4,r2
100008f8:	0007a980 	call	10007a98 <__floatsidf>
100008fc:	100b883a 	mov	r5,r2
10000900:	180d883a 	mov	r6,r3
10000904:	2809883a 	mov	r4,r5
10000908:	300b883a 	mov	r5,r6
1000090c:	000d883a 	mov	r6,zero
10000910:	01d00034 	movhi	r7,16384
10000914:	00035900 	call	10003590 <pow>
10000918:	1021883a 	mov	r16,r2
1000091c:	1823883a 	mov	r17,r3
10000920:	e0fffc17 	ldw	r3,-16(fp)
10000924:	e0bff717 	ldw	r2,-36(fp)
10000928:	1885c83a 	sub	r2,r3,r2
1000092c:	1009883a 	mov	r4,r2
10000930:	0007a980 	call	10007a98 <__floatsidf>
10000934:	100b883a 	mov	r5,r2
10000938:	180d883a 	mov	r6,r3
1000093c:	2809883a 	mov	r4,r5
10000940:	300b883a 	mov	r5,r6
10000944:	000d883a 	mov	r6,zero
10000948:	01d00034 	movhi	r7,16384
1000094c:	00035900 	call	10003590 <pow>
10000950:	100f883a 	mov	r7,r2
10000954:	1811883a 	mov	r8,r3
10000958:	8009883a 	mov	r4,r16
1000095c:	880b883a 	mov	r5,r17
10000960:	380d883a 	mov	r6,r7
10000964:	400f883a 	mov	r7,r8
10000968:	00054740 	call	10005474 <__adddf3>
1000096c:	1009883a 	mov	r4,r2
10000970:	180b883a 	mov	r5,r3
10000974:	2005883a 	mov	r2,r4
10000978:	2807883a 	mov	r3,r5
1000097c:	1009883a 	mov	r4,r2
10000980:	180b883a 	mov	r5,r3
10000984:	0003a340 	call	10003a34 <sqrt>
10000988:	100b883a 	mov	r5,r2
1000098c:	180d883a 	mov	r6,r3
10000990:	2809883a 	mov	r4,r5
10000994:	300b883a 	mov	r5,r6
10000998:	000d883a 	mov	r6,zero
1000099c:	01d00034 	movhi	r7,16384
100009a0:	0005d100 	call	10005d10 <__divdf3>
100009a4:	1009883a 	mov	r4,r2
100009a8:	180b883a 	mov	r5,r3
100009ac:	2005883a 	mov	r2,r4
100009b0:	2807883a 	mov	r3,r5
100009b4:	1009883a 	mov	r4,r2
100009b8:	180b883a 	mov	r5,r3
100009bc:	0007a100 	call	10007a10 <__fixdfsi>
100009c0:	e0bffa15 	stw	r2,-24(fp)
//				 }
//				 else
//				 {
//					 rad = (int)(x - end_x)/2;
//				 }
			     printf("making rect 1");
100009c4:	01040074 	movhi	r4,4097
100009c8:	21115404 	addi	r4,r4,17744
100009cc:	0007c300 	call	10007c30 <printf>
				//flag_square = 1;

				DrawCircle(center_x,center_y,rad,color);
100009d0:	e13ff817 	ldw	r4,-32(fp)
100009d4:	e17ff917 	ldw	r5,-28(fp)
100009d8:	e1bffa17 	ldw	r6,-24(fp)
100009dc:	e1fffd17 	ldw	r7,-12(fp)
100009e0:	0000a1c0 	call	10000a1c <DrawCircle>
				while(IORD(BUTTON_BASE,0));
100009e4:	0001883a 	nop
100009e8:	00801c04 	movi	r2,112
100009ec:	10800037 	ldwio	r2,0(r2)
100009f0:	103ffd1e 	bne	r2,zero,100009e8 <__alt_data_end+0xf80009e8>
				return 0;
100009f4:	0005883a 	mov	r2,zero
100009f8:	00000106 	br	10000a00 <circlehelper+0x1ec>
			}

		}
100009fc:	003f9906 	br	10000864 <__alt_data_end+0xf8000864>
}
10000a00:	e6fffe04 	addi	sp,fp,-8
10000a04:	dfc00317 	ldw	ra,12(sp)
10000a08:	df000217 	ldw	fp,8(sp)
10000a0c:	dc400117 	ldw	r17,4(sp)
10000a10:	dc000017 	ldw	r16,0(sp)
10000a14:	dec00404 	addi	sp,sp,16
10000a18:	f800283a 	ret

10000a1c <DrawCircle>:
void DrawCircle( int x0, int y0, int radius, int color)
{
10000a1c:	defff304 	addi	sp,sp,-52
10000a20:	dfc00c15 	stw	ra,48(sp)
10000a24:	df000b15 	stw	fp,44(sp)
10000a28:	df000b04 	addi	fp,sp,44
10000a2c:	e13ffc15 	stw	r4,-16(fp)
10000a30:	e17ffd15 	stw	r5,-12(fp)
10000a34:	e1bffe15 	stw	r6,-8(fp)
10000a38:	e1ffff15 	stw	r7,-4(fp)
	int x_plus, y_plus;
	   int f = 1 - radius;
10000a3c:	00c00044 	movi	r3,1
10000a40:	e0bffe17 	ldw	r2,-8(fp)
10000a44:	1885c83a 	sub	r2,r3,r2
10000a48:	e0bff515 	stw	r2,-44(fp)
	   int ddF_x = 0;
10000a4c:	e03ff615 	stw	zero,-40(fp)
	   int ddF_y = -2 * radius;
10000a50:	e0fffe17 	ldw	r3,-8(fp)
10000a54:	0005883a 	mov	r2,zero
10000a58:	10c5c83a 	sub	r2,r2,r3
10000a5c:	1085883a 	add	r2,r2,r2
10000a60:	e0bff715 	stw	r2,-36(fp)
	   int x = 0;
10000a64:	e03ff815 	stw	zero,-32(fp)
	   int y = radius;
10000a68:	e0bffe17 	ldw	r2,-8(fp)
10000a6c:	e0bff915 	stw	r2,-28(fp)

	   printf("\n x0 and y0 : %d , %d", x0,y0);
10000a70:	01040074 	movhi	r4,4097
10000a74:	21115804 	addi	r4,r4,17760
10000a78:	e17ffc17 	ldw	r5,-16(fp)
10000a7c:	e1bffd17 	ldw	r6,-12(fp)
10000a80:	0007c300 	call	10007c30 <printf>
	   printf("\n radius : %d \n", radius);
10000a84:	01040074 	movhi	r4,4097
10000a88:	21115e04 	addi	r4,r4,17784
10000a8c:	e17ffe17 	ldw	r5,-8(fp)
10000a90:	0007c300 	call	10007c30 <printf>

	   y_plus = y0 +radius;
10000a94:	e0fffd17 	ldw	r3,-12(fp)
10000a98:	e0bffe17 	ldw	r2,-8(fp)
10000a9c:	1885883a 	add	r2,r3,r2
10000aa0:	e0bffa15 	stw	r2,-24(fp)
	   initialPutPixel(x0, y_plus, color);
10000aa4:	e13ffc17 	ldw	r4,-16(fp)
10000aa8:	e17ffa17 	ldw	r5,-24(fp)
10000aac:	e1bfff17 	ldw	r6,-4(fp)
10000ab0:	00002900 	call	10000290 <initialPutPixel>
	   delay();
10000ab4:	000024c0 	call	1000024c <delay>
	   delay();
10000ab8:	000024c0 	call	1000024c <delay>

	   y_plus = y0 - radius;
10000abc:	e0fffd17 	ldw	r3,-12(fp)
10000ac0:	e0bffe17 	ldw	r2,-8(fp)
10000ac4:	1885c83a 	sub	r2,r3,r2
10000ac8:	e0bffa15 	stw	r2,-24(fp)
	   initialPutPixel(x0, y_plus, color);
10000acc:	e13ffc17 	ldw	r4,-16(fp)
10000ad0:	e17ffa17 	ldw	r5,-24(fp)
10000ad4:	e1bfff17 	ldw	r6,-4(fp)
10000ad8:	00002900 	call	10000290 <initialPutPixel>
	   delay();
10000adc:	000024c0 	call	1000024c <delay>
	   delay();
10000ae0:	000024c0 	call	1000024c <delay>

	   x_plus = x0 + radius;
10000ae4:	e0fffc17 	ldw	r3,-16(fp)
10000ae8:	e0bffe17 	ldw	r2,-8(fp)
10000aec:	1885883a 	add	r2,r3,r2
10000af0:	e0bffb15 	stw	r2,-20(fp)
	   initialPutPixel(x_plus, y0, color);
10000af4:	e13ffb17 	ldw	r4,-20(fp)
10000af8:	e17ffd17 	ldw	r5,-12(fp)
10000afc:	e1bfff17 	ldw	r6,-4(fp)
10000b00:	00002900 	call	10000290 <initialPutPixel>
	   delay();
10000b04:	000024c0 	call	1000024c <delay>
	   delay();
10000b08:	000024c0 	call	1000024c <delay>

	   x_plus = x0 - radius;
10000b0c:	e0fffc17 	ldw	r3,-16(fp)
10000b10:	e0bffe17 	ldw	r2,-8(fp)
10000b14:	1885c83a 	sub	r2,r3,r2
10000b18:	e0bffb15 	stw	r2,-20(fp)
	   initialPutPixel(x_plus, y0, color);
10000b1c:	e13ffb17 	ldw	r4,-20(fp)
10000b20:	e17ffd17 	ldw	r5,-12(fp)
10000b24:	e1bfff17 	ldw	r6,-4(fp)
10000b28:	00002900 	call	10000290 <initialPutPixel>
	   delay();
10000b2c:	000024c0 	call	1000024c <delay>
	   delay();
10000b30:	000024c0 	call	1000024c <delay>

	   while(x < y)
10000b34:	00008706 	br	10000d54 <DrawCircle+0x338>
	   {
	     if(f >= 0)
10000b38:	e0bff517 	ldw	r2,-44(fp)
10000b3c:	10000a16 	blt	r2,zero,10000b68 <DrawCircle+0x14c>
	     {
	       y--;
10000b40:	e0bff917 	ldw	r2,-28(fp)
10000b44:	10bfffc4 	addi	r2,r2,-1
10000b48:	e0bff915 	stw	r2,-28(fp)
	       ddF_y += 2;
10000b4c:	e0bff717 	ldw	r2,-36(fp)
10000b50:	10800084 	addi	r2,r2,2
10000b54:	e0bff715 	stw	r2,-36(fp)
	       f += ddF_y;
10000b58:	e0fff517 	ldw	r3,-44(fp)
10000b5c:	e0bff717 	ldw	r2,-36(fp)
10000b60:	1885883a 	add	r2,r3,r2
10000b64:	e0bff515 	stw	r2,-44(fp)
	     }
	     x++;
10000b68:	e0bff817 	ldw	r2,-32(fp)
10000b6c:	10800044 	addi	r2,r2,1
10000b70:	e0bff815 	stw	r2,-32(fp)
	     ddF_x += 2;
10000b74:	e0bff617 	ldw	r2,-40(fp)
10000b78:	10800084 	addi	r2,r2,2
10000b7c:	e0bff615 	stw	r2,-40(fp)
	     f += ddF_x + 1;
10000b80:	e0bff617 	ldw	r2,-40(fp)
10000b84:	10800044 	addi	r2,r2,1
10000b88:	e0fff517 	ldw	r3,-44(fp)
10000b8c:	1885883a 	add	r2,r3,r2
10000b90:	e0bff515 	stw	r2,-44(fp)

	     x_plus = x0 + x;
10000b94:	e0fffc17 	ldw	r3,-16(fp)
10000b98:	e0bff817 	ldw	r2,-32(fp)
10000b9c:	1885883a 	add	r2,r3,r2
10000ba0:	e0bffb15 	stw	r2,-20(fp)
	     y_plus = y0 + y;
10000ba4:	e0fffd17 	ldw	r3,-12(fp)
10000ba8:	e0bff917 	ldw	r2,-28(fp)
10000bac:	1885883a 	add	r2,r3,r2
10000bb0:	e0bffa15 	stw	r2,-24(fp)
	     initialPutPixel(x_plus, y_plus, color);
10000bb4:	e13ffb17 	ldw	r4,-20(fp)
10000bb8:	e17ffa17 	ldw	r5,-24(fp)
10000bbc:	e1bfff17 	ldw	r6,-4(fp)
10000bc0:	00002900 	call	10000290 <initialPutPixel>
	     delay();
10000bc4:	000024c0 	call	1000024c <delay>
	     delay();
10000bc8:	000024c0 	call	1000024c <delay>

	     x_plus = x0 - x;
10000bcc:	e0fffc17 	ldw	r3,-16(fp)
10000bd0:	e0bff817 	ldw	r2,-32(fp)
10000bd4:	1885c83a 	sub	r2,r3,r2
10000bd8:	e0bffb15 	stw	r2,-20(fp)
	     y_plus = y0 + y;
10000bdc:	e0fffd17 	ldw	r3,-12(fp)
10000be0:	e0bff917 	ldw	r2,-28(fp)
10000be4:	1885883a 	add	r2,r3,r2
10000be8:	e0bffa15 	stw	r2,-24(fp)
	     initialPutPixel(x_plus, y_plus, color);
10000bec:	e13ffb17 	ldw	r4,-20(fp)
10000bf0:	e17ffa17 	ldw	r5,-24(fp)
10000bf4:	e1bfff17 	ldw	r6,-4(fp)
10000bf8:	00002900 	call	10000290 <initialPutPixel>
	     delay();
10000bfc:	000024c0 	call	1000024c <delay>
	     delay();
10000c00:	000024c0 	call	1000024c <delay>

	     x_plus = x0 + x;
10000c04:	e0fffc17 	ldw	r3,-16(fp)
10000c08:	e0bff817 	ldw	r2,-32(fp)
10000c0c:	1885883a 	add	r2,r3,r2
10000c10:	e0bffb15 	stw	r2,-20(fp)
	     y_plus = y0 - y;
10000c14:	e0fffd17 	ldw	r3,-12(fp)
10000c18:	e0bff917 	ldw	r2,-28(fp)
10000c1c:	1885c83a 	sub	r2,r3,r2
10000c20:	e0bffa15 	stw	r2,-24(fp)
	     initialPutPixel(x_plus, y_plus, color);
10000c24:	e13ffb17 	ldw	r4,-20(fp)
10000c28:	e17ffa17 	ldw	r5,-24(fp)
10000c2c:	e1bfff17 	ldw	r6,-4(fp)
10000c30:	00002900 	call	10000290 <initialPutPixel>
	     delay();
10000c34:	000024c0 	call	1000024c <delay>
	     delay();
10000c38:	000024c0 	call	1000024c <delay>

	     x_plus = x0 - x;
10000c3c:	e0fffc17 	ldw	r3,-16(fp)
10000c40:	e0bff817 	ldw	r2,-32(fp)
10000c44:	1885c83a 	sub	r2,r3,r2
10000c48:	e0bffb15 	stw	r2,-20(fp)
	     y_plus = y0 - y;
10000c4c:	e0fffd17 	ldw	r3,-12(fp)
10000c50:	e0bff917 	ldw	r2,-28(fp)
10000c54:	1885c83a 	sub	r2,r3,r2
10000c58:	e0bffa15 	stw	r2,-24(fp)
	     initialPutPixel(x_plus, y_plus, color);
10000c5c:	e13ffb17 	ldw	r4,-20(fp)
10000c60:	e17ffa17 	ldw	r5,-24(fp)
10000c64:	e1bfff17 	ldw	r6,-4(fp)
10000c68:	00002900 	call	10000290 <initialPutPixel>
	     delay();
10000c6c:	000024c0 	call	1000024c <delay>
	     delay();
10000c70:	000024c0 	call	1000024c <delay>

	     x_plus = x0 + y;
10000c74:	e0fffc17 	ldw	r3,-16(fp)
10000c78:	e0bff917 	ldw	r2,-28(fp)
10000c7c:	1885883a 	add	r2,r3,r2
10000c80:	e0bffb15 	stw	r2,-20(fp)
	     y_plus = y0 + x;
10000c84:	e0fffd17 	ldw	r3,-12(fp)
10000c88:	e0bff817 	ldw	r2,-32(fp)
10000c8c:	1885883a 	add	r2,r3,r2
10000c90:	e0bffa15 	stw	r2,-24(fp)
	     initialPutPixel(x_plus, y_plus, color);
10000c94:	e13ffb17 	ldw	r4,-20(fp)
10000c98:	e17ffa17 	ldw	r5,-24(fp)
10000c9c:	e1bfff17 	ldw	r6,-4(fp)
10000ca0:	00002900 	call	10000290 <initialPutPixel>
	     delay();
10000ca4:	000024c0 	call	1000024c <delay>
	     delay();
10000ca8:	000024c0 	call	1000024c <delay>


	     x_plus = x0 - y;
10000cac:	e0fffc17 	ldw	r3,-16(fp)
10000cb0:	e0bff917 	ldw	r2,-28(fp)
10000cb4:	1885c83a 	sub	r2,r3,r2
10000cb8:	e0bffb15 	stw	r2,-20(fp)
	     y_plus = y0 + x;
10000cbc:	e0fffd17 	ldw	r3,-12(fp)
10000cc0:	e0bff817 	ldw	r2,-32(fp)
10000cc4:	1885883a 	add	r2,r3,r2
10000cc8:	e0bffa15 	stw	r2,-24(fp)
	     initialPutPixel(x_plus, y_plus, color);
10000ccc:	e13ffb17 	ldw	r4,-20(fp)
10000cd0:	e17ffa17 	ldw	r5,-24(fp)
10000cd4:	e1bfff17 	ldw	r6,-4(fp)
10000cd8:	00002900 	call	10000290 <initialPutPixel>
	     delay();
10000cdc:	000024c0 	call	1000024c <delay>
	     delay();
10000ce0:	000024c0 	call	1000024c <delay>

	     x_plus = x0 + y;
10000ce4:	e0fffc17 	ldw	r3,-16(fp)
10000ce8:	e0bff917 	ldw	r2,-28(fp)
10000cec:	1885883a 	add	r2,r3,r2
10000cf0:	e0bffb15 	stw	r2,-20(fp)
	     y_plus = y0 - x;
10000cf4:	e0fffd17 	ldw	r3,-12(fp)
10000cf8:	e0bff817 	ldw	r2,-32(fp)
10000cfc:	1885c83a 	sub	r2,r3,r2
10000d00:	e0bffa15 	stw	r2,-24(fp)
	     initialPutPixel(x_plus, y_plus, color);
10000d04:	e13ffb17 	ldw	r4,-20(fp)
10000d08:	e17ffa17 	ldw	r5,-24(fp)
10000d0c:	e1bfff17 	ldw	r6,-4(fp)
10000d10:	00002900 	call	10000290 <initialPutPixel>
	     delay();
10000d14:	000024c0 	call	1000024c <delay>
	     delay();
10000d18:	000024c0 	call	1000024c <delay>

	     x_plus = x0 - y;
10000d1c:	e0fffc17 	ldw	r3,-16(fp)
10000d20:	e0bff917 	ldw	r2,-28(fp)
10000d24:	1885c83a 	sub	r2,r3,r2
10000d28:	e0bffb15 	stw	r2,-20(fp)
	     y_plus = y0 - x;
10000d2c:	e0fffd17 	ldw	r3,-12(fp)
10000d30:	e0bff817 	ldw	r2,-32(fp)
10000d34:	1885c83a 	sub	r2,r3,r2
10000d38:	e0bffa15 	stw	r2,-24(fp)
	     initialPutPixel(x_plus, y_plus, color);
10000d3c:	e13ffb17 	ldw	r4,-20(fp)
10000d40:	e17ffa17 	ldw	r5,-24(fp)
10000d44:	e1bfff17 	ldw	r6,-4(fp)
10000d48:	00002900 	call	10000290 <initialPutPixel>
	     delay();
10000d4c:	000024c0 	call	1000024c <delay>
	     delay();
10000d50:	000024c0 	call	1000024c <delay>
	   x_plus = x0 - radius;
	   initialPutPixel(x_plus, y0, color);
	   delay();
	   delay();

	   while(x < y)
10000d54:	e0fff817 	ldw	r3,-32(fp)
10000d58:	e0bff917 	ldw	r2,-28(fp)
10000d5c:	18bf7616 	blt	r3,r2,10000b38 <__alt_data_end+0xf8000b38>
	     initialPutPixel(x_plus, y_plus, color);
	     delay();
	     delay();

	   }
}
10000d60:	e037883a 	mov	sp,fp
10000d64:	dfc00117 	ldw	ra,4(sp)
10000d68:	df000017 	ldw	fp,0(sp)
10000d6c:	dec00204 	addi	sp,sp,8
10000d70:	f800283a 	ret

10000d74 <squarehelper>:
int squarehelper ( int x1, int x2, int color)
{
10000d74:	defff504 	addi	sp,sp,-44
10000d78:	dfc00a15 	stw	ra,40(sp)
10000d7c:	df000915 	stw	fp,36(sp)
10000d80:	df000904 	addi	fp,sp,36
10000d84:	e13ffd15 	stw	r4,-12(fp)
10000d88:	e17ffe15 	stw	r5,-8(fp)
10000d8c:	e1bfff15 	stw	r6,-4(fp)
	int i =0;
10000d90:	e03ff815 	stw	zero,-32(fp)
	for(i=0; i<1000;i++);
10000d94:	e03ff815 	stw	zero,-32(fp)
10000d98:	00000306 	br	10000da8 <squarehelper+0x34>
10000d9c:	e0bff817 	ldw	r2,-32(fp)
10000da0:	10800044 	addi	r2,r2,1
10000da4:	e0bff815 	stw	r2,-32(fp)
10000da8:	e0bff817 	ldw	r2,-32(fp)
10000dac:	1080fa10 	cmplti	r2,r2,1000
10000db0:	103ffa1e 	bne	r2,zero,10000d9c <__alt_data_end+0xf8000d9c>
	int but = 0;
10000db4:	e03ffa15 	stw	zero,-24(fp)
	int flag = 0;
10000db8:	e03ff915 	stw	zero,-28(fp)
	int end_x,end_y;
	while(1)
	{
		but = IORD(BUTTON_BASE, 0);
10000dbc:	00801c04 	movi	r2,112
10000dc0:	10800037 	ldwio	r2,0(r2)
10000dc4:	e0bffa15 	stw	r2,-24(fp)
		if(but == 0)
10000dc8:	e0bffa17 	ldw	r2,-24(fp)
10000dcc:	1000021e 	bne	r2,zero,10000dd8 <squarehelper+0x64>
			flag = 1;
10000dd0:	00800044 	movi	r2,1
10000dd4:	e0bff915 	stw	r2,-28(fp)
		if(flag == 1 && but == 1)
10000dd8:	e0bff917 	ldw	r2,-28(fp)
10000ddc:	10800058 	cmpnei	r2,r2,1
10000de0:	1000191e 	bne	r2,zero,10000e48 <squarehelper+0xd4>
10000de4:	e0bffa17 	ldw	r2,-24(fp)
10000de8:	10800058 	cmpnei	r2,r2,1
10000dec:	1000161e 	bne	r2,zero,10000e48 <squarehelper+0xd4>
		{
			end_x = IORD(PX_BASE, 0);
10000df0:	00802804 	movi	r2,160
10000df4:	10800037 	ldwio	r2,0(r2)
10000df8:	e0bffb15 	stw	r2,-20(fp)
		    end_y = IORD(PY_BASE, 0);
10000dfc:	00802004 	movi	r2,128
10000e00:	10800037 	ldwio	r2,0(r2)
10000e04:	e0bffc15 	stw	r2,-16(fp)

			printf("making rect 1");
10000e08:	01040074 	movhi	r4,4097
10000e0c:	21115404 	addi	r4,r4,17744
10000e10:	0007c300 	call	10007c30 <printf>
			//flag_square = 1;

			DrawSquare(x1,x2,end_x,end_y,color);
10000e14:	e0bfff17 	ldw	r2,-4(fp)
10000e18:	d8800015 	stw	r2,0(sp)
10000e1c:	e13ffd17 	ldw	r4,-12(fp)
10000e20:	e17ffe17 	ldw	r5,-8(fp)
10000e24:	e1bffb17 	ldw	r6,-20(fp)
10000e28:	e1fffc17 	ldw	r7,-16(fp)
10000e2c:	0000e600 	call	10000e60 <DrawSquare>
			while(IORD(BUTTON_BASE,0));
10000e30:	0001883a 	nop
10000e34:	00801c04 	movi	r2,112
10000e38:	10800037 	ldwio	r2,0(r2)
10000e3c:	103ffd1e 	bne	r2,zero,10000e34 <__alt_data_end+0xf8000e34>
			return 0;
10000e40:	0005883a 	mov	r2,zero
10000e44:	00000106 	br	10000e4c <squarehelper+0xd8>
		}

	}
10000e48:	003fdc06 	br	10000dbc <__alt_data_end+0xf8000dbc>


}
10000e4c:	e037883a 	mov	sp,fp
10000e50:	dfc00117 	ldw	ra,4(sp)
10000e54:	df000017 	ldw	fp,0(sp)
10000e58:	dec00204 	addi	sp,sp,8
10000e5c:	f800283a 	ret

10000e60 <DrawSquare>:
void DrawSquare(int x1, int y1, int x2, int y2,int color)
{
10000e60:	defff904 	addi	sp,sp,-28
10000e64:	dfc00615 	stw	ra,24(sp)
10000e68:	df000515 	stw	fp,20(sp)
10000e6c:	df000504 	addi	fp,sp,20
10000e70:	e13ffc15 	stw	r4,-16(fp)
10000e74:	e17ffd15 	stw	r5,-12(fp)
10000e78:	e1bffe15 	stw	r6,-8(fp)
10000e7c:	e1ffff15 	stw	r7,-4(fp)
            Bresenham(x1,y1,x1,y2,color);
10000e80:	e0800217 	ldw	r2,8(fp)
10000e84:	d8800015 	stw	r2,0(sp)
10000e88:	e13ffc17 	ldw	r4,-16(fp)
10000e8c:	e17ffd17 	ldw	r5,-12(fp)
10000e90:	e1bffc17 	ldw	r6,-16(fp)
10000e94:	e1ffff17 	ldw	r7,-4(fp)
10000e98:	00006000 	call	10000600 <Bresenham>
            delay();
10000e9c:	000024c0 	call	1000024c <delay>
            Bresenham(x1,y2,x2,y2,color);
10000ea0:	e0800217 	ldw	r2,8(fp)
10000ea4:	d8800015 	stw	r2,0(sp)
10000ea8:	e13ffc17 	ldw	r4,-16(fp)
10000eac:	e17fff17 	ldw	r5,-4(fp)
10000eb0:	e1bffe17 	ldw	r6,-8(fp)
10000eb4:	e1ffff17 	ldw	r7,-4(fp)
10000eb8:	00006000 	call	10000600 <Bresenham>
            delay();
10000ebc:	000024c0 	call	1000024c <delay>
            Bresenham(x2,y2,x2,y1,color);
10000ec0:	e0800217 	ldw	r2,8(fp)
10000ec4:	d8800015 	stw	r2,0(sp)
10000ec8:	e13ffe17 	ldw	r4,-8(fp)
10000ecc:	e17fff17 	ldw	r5,-4(fp)
10000ed0:	e1bffe17 	ldw	r6,-8(fp)
10000ed4:	e1fffd17 	ldw	r7,-12(fp)
10000ed8:	00006000 	call	10000600 <Bresenham>
            delay();
10000edc:	000024c0 	call	1000024c <delay>
            Bresenham(x2,y1,x1,y1,color);
10000ee0:	e0800217 	ldw	r2,8(fp)
10000ee4:	d8800015 	stw	r2,0(sp)
10000ee8:	e13ffe17 	ldw	r4,-8(fp)
10000eec:	e17ffd17 	ldw	r5,-12(fp)
10000ef0:	e1bffc17 	ldw	r6,-16(fp)
10000ef4:	e1fffd17 	ldw	r7,-12(fp)
10000ef8:	00006000 	call	10000600 <Bresenham>
            delay();
10000efc:	000024c0 	call	1000024c <delay>
}
10000f00:	e037883a 	mov	sp,fp
10000f04:	dfc00117 	ldw	ra,4(sp)
10000f08:	df000017 	ldw	fp,0(sp)
10000f0c:	dec00204 	addi	sp,sp,8
10000f10:	f800283a 	ret

10000f14 <polygonhelper>:
int polygonhelper(int start_x, int start_y, int color)
{
10000f14:	defff304 	addi	sp,sp,-52
10000f18:	dfc00c15 	stw	ra,48(sp)
10000f1c:	df000b15 	stw	fp,44(sp)
10000f20:	df000b04 	addi	fp,sp,44
10000f24:	e13ffd15 	stw	r4,-12(fp)
10000f28:	e17ffe15 	stw	r5,-8(fp)
10000f2c:	e1bfff15 	stw	r6,-4(fp)
	int i =0;
10000f30:	e03ff615 	stw	zero,-40(fp)
		for(i=0; i<1000;i++);
10000f34:	e03ff615 	stw	zero,-40(fp)
10000f38:	00000306 	br	10000f48 <polygonhelper+0x34>
10000f3c:	e0bff617 	ldw	r2,-40(fp)
10000f40:	10800044 	addi	r2,r2,1
10000f44:	e0bff615 	stw	r2,-40(fp)
10000f48:	e0bff617 	ldw	r2,-40(fp)
10000f4c:	1080fa10 	cmplti	r2,r2,1000
10000f50:	103ffa1e 	bne	r2,zero,10000f3c <__alt_data_end+0xf8000f3c>
		int but = 0;
10000f54:	e03ff915 	stw	zero,-28(fp)
		int flag = 0;
10000f58:	e03ff715 	stw	zero,-36(fp)
		int end_x,end_y;
		int initial_x = start_x;
10000f5c:	e0bffd17 	ldw	r2,-12(fp)
10000f60:	e0bff815 	stw	r2,-32(fp)
		int initial_y = start_y;
10000f64:	e0bffe17 	ldw	r2,-8(fp)
10000f68:	e0bffa15 	stw	r2,-24(fp)
		while(1)
		{
			but = IORD(BUTTON_BASE, 0);
10000f6c:	00801c04 	movi	r2,112
10000f70:	10800037 	ldwio	r2,0(r2)
10000f74:	e0bff915 	stw	r2,-28(fp)
			if(but == 0)
10000f78:	e0bff917 	ldw	r2,-28(fp)
10000f7c:	1000021e 	bne	r2,zero,10000f88 <polygonhelper+0x74>
				flag = 1;
10000f80:	00800044 	movi	r2,1
10000f84:	e0bff715 	stw	r2,-36(fp)
			if(flag == 1 && but == 1)
10000f88:	e0bff717 	ldw	r2,-36(fp)
10000f8c:	10800058 	cmpnei	r2,r2,1
10000f90:	1000661e 	bne	r2,zero,1000112c <polygonhelper+0x218>
10000f94:	e0bff917 	ldw	r2,-28(fp)
10000f98:	10800058 	cmpnei	r2,r2,1
10000f9c:	1000631e 	bne	r2,zero,1000112c <polygonhelper+0x218>
			{
				end_x = IORD(PX_BASE, 0);
10000fa0:	00802804 	movi	r2,160
10000fa4:	10800037 	ldwio	r2,0(r2)
10000fa8:	e0bffb15 	stw	r2,-20(fp)
			    end_y = IORD(PY_BASE, 0);
10000fac:	00802004 	movi	r2,128
10000fb0:	10800037 	ldwio	r2,0(r2)
10000fb4:	e0bffc15 	stw	r2,-16(fp)

				printf("making rect 1");
10000fb8:	01040074 	movhi	r4,4097
10000fbc:	21115404 	addi	r4,r4,17744
10000fc0:	0007c300 	call	10007c30 <printf>
				//flag_square = 1;

				Bresenham(initial_x,initial_y,end_x,end_y,color);
10000fc4:	e0bfff17 	ldw	r2,-4(fp)
10000fc8:	d8800015 	stw	r2,0(sp)
10000fcc:	e13ff817 	ldw	r4,-32(fp)
10000fd0:	e17ffa17 	ldw	r5,-24(fp)
10000fd4:	e1bffb17 	ldw	r6,-20(fp)
10000fd8:	e1fffc17 	ldw	r7,-16(fp)
10000fdc:	00006000 	call	10000600 <Bresenham>
				initial_x = end_x;
10000fe0:	e0bffb17 	ldw	r2,-20(fp)
10000fe4:	e0bff815 	stw	r2,-32(fp)
				initial_x = end_x;
10000fe8:	e0bffb17 	ldw	r2,-20(fp)
10000fec:	e0bff815 	stw	r2,-32(fp)

				if((end_x == start_x && end_y == start_y)     ||
10000ff0:	e0fffb17 	ldw	r3,-20(fp)
10000ff4:	e0bffd17 	ldw	r2,-12(fp)
10000ff8:	1880031e 	bne	r3,r2,10001008 <polygonhelper+0xf4>
10000ffc:	e0fffc17 	ldw	r3,-16(fp)
10001000:	e0bffe17 	ldw	r2,-8(fp)
10001004:	18803c26 	beq	r3,r2,100010f8 <polygonhelper+0x1e4>
10001008:	e0fffb17 	ldw	r3,-20(fp)
1000100c:	e0bffd17 	ldw	r2,-12(fp)
10001010:	1880041e 	bne	r3,r2,10001024 <polygonhelper+0x110>
                        (end_x == start_x && end_y == start_y+1)   ||
10001014:	e0bffe17 	ldw	r2,-8(fp)
10001018:	10c00044 	addi	r3,r2,1
1000101c:	e0bffc17 	ldw	r2,-16(fp)
10001020:	18803526 	beq	r3,r2,100010f8 <polygonhelper+0x1e4>
10001024:	e0fffb17 	ldw	r3,-20(fp)
10001028:	e0bffd17 	ldw	r2,-12(fp)
1000102c:	1880041e 	bne	r3,r2,10001040 <polygonhelper+0x12c>
                        (end_x == start_x && end_y == start_y-1)   ||
10001030:	e0bffe17 	ldw	r2,-8(fp)
10001034:	10ffffc4 	addi	r3,r2,-1
10001038:	e0bffc17 	ldw	r2,-16(fp)
1000103c:	18802e26 	beq	r3,r2,100010f8 <polygonhelper+0x1e4>
                        (end_x == start_x+1 && end_y == start_y)   ||
10001040:	e0bffd17 	ldw	r2,-12(fp)
10001044:	10c00044 	addi	r3,r2,1
				initial_x = end_x;
				initial_x = end_x;

				if((end_x == start_x && end_y == start_y)     ||
                        (end_x == start_x && end_y == start_y+1)   ||
                        (end_x == start_x && end_y == start_y-1)   ||
10001048:	e0bffb17 	ldw	r2,-20(fp)
1000104c:	1880031e 	bne	r3,r2,1000105c <polygonhelper+0x148>
                        (end_x == start_x+1 && end_y == start_y)   ||
10001050:	e0fffc17 	ldw	r3,-16(fp)
10001054:	e0bffe17 	ldw	r2,-8(fp)
10001058:	18802726 	beq	r3,r2,100010f8 <polygonhelper+0x1e4>
                        (end_x == start_x+1 && end_y == start_y+1) ||
1000105c:	e0bffd17 	ldw	r2,-12(fp)
10001060:	10c00044 	addi	r3,r2,1
				initial_x = end_x;

				if((end_x == start_x && end_y == start_y)     ||
                        (end_x == start_x && end_y == start_y+1)   ||
                        (end_x == start_x && end_y == start_y-1)   ||
                        (end_x == start_x+1 && end_y == start_y)   ||
10001064:	e0bffb17 	ldw	r2,-20(fp)
10001068:	1880041e 	bne	r3,r2,1000107c <polygonhelper+0x168>
                        (end_x == start_x+1 && end_y == start_y+1) ||
1000106c:	e0bffe17 	ldw	r2,-8(fp)
10001070:	10c00044 	addi	r3,r2,1
10001074:	e0bffc17 	ldw	r2,-16(fp)
10001078:	18801f26 	beq	r3,r2,100010f8 <polygonhelper+0x1e4>
                        (end_x == start_x+1 && end_y == start_y-1) ||
1000107c:	e0bffd17 	ldw	r2,-12(fp)
10001080:	10c00044 	addi	r3,r2,1

				if((end_x == start_x && end_y == start_y)     ||
                        (end_x == start_x && end_y == start_y+1)   ||
                        (end_x == start_x && end_y == start_y-1)   ||
                        (end_x == start_x+1 && end_y == start_y)   ||
                        (end_x == start_x+1 && end_y == start_y+1) ||
10001084:	e0bffb17 	ldw	r2,-20(fp)
10001088:	1880041e 	bne	r3,r2,1000109c <polygonhelper+0x188>
                        (end_x == start_x+1 && end_y == start_y-1) ||
1000108c:	e0bffe17 	ldw	r2,-8(fp)
10001090:	10ffffc4 	addi	r3,r2,-1
10001094:	e0bffc17 	ldw	r2,-16(fp)
10001098:	18801726 	beq	r3,r2,100010f8 <polygonhelper+0x1e4>
                        (end_x == start_x-1 && end_y == start_y)   ||
1000109c:	e0bffd17 	ldw	r2,-12(fp)
100010a0:	10ffffc4 	addi	r3,r2,-1
				if((end_x == start_x && end_y == start_y)     ||
                        (end_x == start_x && end_y == start_y+1)   ||
                        (end_x == start_x && end_y == start_y-1)   ||
                        (end_x == start_x+1 && end_y == start_y)   ||
                        (end_x == start_x+1 && end_y == start_y+1) ||
                        (end_x == start_x+1 && end_y == start_y-1) ||
100010a4:	e0bffb17 	ldw	r2,-20(fp)
100010a8:	1880031e 	bne	r3,r2,100010b8 <polygonhelper+0x1a4>
                        (end_x == start_x-1 && end_y == start_y)   ||
100010ac:	e0fffc17 	ldw	r3,-16(fp)
100010b0:	e0bffe17 	ldw	r2,-8(fp)
100010b4:	18801026 	beq	r3,r2,100010f8 <polygonhelper+0x1e4>
                        (end_x == start_x-1 && end_y == start_y+1) ||
100010b8:	e0bffd17 	ldw	r2,-12(fp)
100010bc:	10ffffc4 	addi	r3,r2,-1
                        (end_x == start_x && end_y == start_y+1)   ||
                        (end_x == start_x && end_y == start_y-1)   ||
                        (end_x == start_x+1 && end_y == start_y)   ||
                        (end_x == start_x+1 && end_y == start_y+1) ||
                        (end_x == start_x+1 && end_y == start_y-1) ||
                        (end_x == start_x-1 && end_y == start_y)   ||
100010c0:	e0bffb17 	ldw	r2,-20(fp)
100010c4:	1880041e 	bne	r3,r2,100010d8 <polygonhelper+0x1c4>
                        (end_x == start_x-1 && end_y == start_y+1) ||
100010c8:	e0bffe17 	ldw	r2,-8(fp)
100010cc:	10c00044 	addi	r3,r2,1
100010d0:	e0bffc17 	ldw	r2,-16(fp)
100010d4:	18800826 	beq	r3,r2,100010f8 <polygonhelper+0x1e4>
                        (end_x == start_x-1 && end_y == start_y-1)
100010d8:	e0bffd17 	ldw	r2,-12(fp)
100010dc:	10ffffc4 	addi	r3,r2,-1
                        (end_x == start_x && end_y == start_y-1)   ||
                        (end_x == start_x+1 && end_y == start_y)   ||
                        (end_x == start_x+1 && end_y == start_y+1) ||
                        (end_x == start_x+1 && end_y == start_y-1) ||
                        (end_x == start_x-1 && end_y == start_y)   ||
                        (end_x == start_x-1 && end_y == start_y+1) ||
100010e0:	e0bffb17 	ldw	r2,-20(fp)
100010e4:	1880111e 	bne	r3,r2,1000112c <polygonhelper+0x218>
                        (end_x == start_x-1 && end_y == start_y-1)
100010e8:	e0bffe17 	ldw	r2,-8(fp)
100010ec:	10ffffc4 	addi	r3,r2,-1
100010f0:	e0bffc17 	ldw	r2,-16(fp)
100010f4:	18800d1e 	bne	r3,r2,1000112c <polygonhelper+0x218>
                      )
				{
					Bresenham(start_x, start_y,initial_x,initial_y,color);
100010f8:	e0bfff17 	ldw	r2,-4(fp)
100010fc:	d8800015 	stw	r2,0(sp)
10001100:	e13ffd17 	ldw	r4,-12(fp)
10001104:	e17ffe17 	ldw	r5,-8(fp)
10001108:	e1bff817 	ldw	r6,-32(fp)
1000110c:	e1fffa17 	ldw	r7,-24(fp)
10001110:	00006000 	call	10000600 <Bresenham>
					while(IORD(BUTTON_BASE,0));
10001114:	0001883a 	nop
10001118:	00801c04 	movi	r2,112
1000111c:	10800037 	ldwio	r2,0(r2)
10001120:	103ffd1e 	bne	r2,zero,10001118 <__alt_data_end+0xf8001118>
					return 0;
10001124:	0005883a 	mov	r2,zero
10001128:	00000106 	br	10001130 <polygonhelper+0x21c>
				}
			}

		}
1000112c:	003f8f06 	br	10000f6c <__alt_data_end+0xf8000f6c>


}
10001130:	e037883a 	mov	sp,fp
10001134:	dfc00117 	ldw	ra,4(sp)
10001138:	df000017 	ldw	fp,0(sp)
1000113c:	dec00204 	addi	sp,sp,8
10001140:	f800283a 	ret

10001144 <main>:
int main(void)
{
10001144:	deffdf04 	addi	sp,sp,-132
10001148:	dfc02015 	stw	ra,128(sp)
1000114c:	df001f15 	stw	fp,124(sp)
10001150:	df001f04 	addi	fp,sp,124
	//IO_init();
	IOWR(OTG_HPI_W_BASE, 0 , 0);
10001154:	0007883a 	mov	r3,zero
10001158:	00802404 	movi	r2,144
1000115c:	10c00035 	stwio	r3,0(r2)
	initialScreen();
10001160:	00003940 	call	10000394 <initialScreen>
	int a,b;
	int flag_line = 0, flag_square = 0;
10001164:	e03fe415 	stw	zero,-112(fp)
10001168:	e03ff715 	stw	zero,-36(fp)
	//pencil
	for(a = 13; a < 35; a++)
1000116c:	00800344 	movi	r2,13
10001170:	e0bfe215 	stw	r2,-120(fp)
10001174:	00001c06 	br	100011e8 <main+0xa4>
								for(b = 30; b < 54; b++)
10001178:	00800784 	movi	r2,30
1000117c:	e0bfe315 	stw	r2,-116(fp)
10001180:	00001306 	br	100011d0 <main+0x8c>
								{
									initialPutPixel(13, b, 0x0000);
10001184:	01000344 	movi	r4,13
10001188:	e17fe317 	ldw	r5,-116(fp)
1000118c:	000d883a 	mov	r6,zero
10001190:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(35, b, 0x0000);
10001194:	010008c4 	movi	r4,35
10001198:	e17fe317 	ldw	r5,-116(fp)
1000119c:	000d883a 	mov	r6,zero
100011a0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 30, 0x0000);
100011a4:	e13fe217 	ldw	r4,-120(fp)
100011a8:	01400784 	movi	r5,30
100011ac:	000d883a 	mov	r6,zero
100011b0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 54, 0x0000);
100011b4:	e13fe217 	ldw	r4,-120(fp)
100011b8:	01400d84 	movi	r5,54
100011bc:	000d883a 	mov	r6,zero
100011c0:	00002900 	call	10000290 <initialPutPixel>
	initialScreen();
	int a,b;
	int flag_line = 0, flag_square = 0;
	//pencil
	for(a = 13; a < 35; a++)
								for(b = 30; b < 54; b++)
100011c4:	e0bfe317 	ldw	r2,-116(fp)
100011c8:	10800044 	addi	r2,r2,1
100011cc:	e0bfe315 	stw	r2,-116(fp)
100011d0:	e0bfe317 	ldw	r2,-116(fp)
100011d4:	10800d90 	cmplti	r2,r2,54
100011d8:	103fea1e 	bne	r2,zero,10001184 <__alt_data_end+0xf8001184>
	IOWR(OTG_HPI_W_BASE, 0 , 0);
	initialScreen();
	int a,b;
	int flag_line = 0, flag_square = 0;
	//pencil
	for(a = 13; a < 35; a++)
100011dc:	e0bfe217 	ldw	r2,-120(fp)
100011e0:	10800044 	addi	r2,r2,1
100011e4:	e0bfe215 	stw	r2,-120(fp)
100011e8:	e0bfe217 	ldw	r2,-120(fp)
100011ec:	108008d0 	cmplti	r2,r2,35
100011f0:	103fe11e 	bne	r2,zero,10001178 <__alt_data_end+0xf8001178>
									initialPutPixel(35, b, 0x0000);
									initialPutPixel(a, 30, 0x0000);
									initialPutPixel(a, 54, 0x0000);
								}
	//line
	for(a = 13; a < 35; a++)
100011f4:	00800344 	movi	r2,13
100011f8:	e0bfe215 	stw	r2,-120(fp)
100011fc:	00001c06 	br	10001270 <main+0x12c>
								for(b = 58; b < 82; b++)
10001200:	00800e84 	movi	r2,58
10001204:	e0bfe315 	stw	r2,-116(fp)
10001208:	00001306 	br	10001258 <main+0x114>
								{
									initialPutPixel(13, b, 0x0000);
1000120c:	01000344 	movi	r4,13
10001210:	e17fe317 	ldw	r5,-116(fp)
10001214:	000d883a 	mov	r6,zero
10001218:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(35, b, 0x0000);
1000121c:	010008c4 	movi	r4,35
10001220:	e17fe317 	ldw	r5,-116(fp)
10001224:	000d883a 	mov	r6,zero
10001228:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 58, 0x0000);
1000122c:	e13fe217 	ldw	r4,-120(fp)
10001230:	01400e84 	movi	r5,58
10001234:	000d883a 	mov	r6,zero
10001238:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 82, 0x0000);
1000123c:	e13fe217 	ldw	r4,-120(fp)
10001240:	01401484 	movi	r5,82
10001244:	000d883a 	mov	r6,zero
10001248:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 30, 0x0000);
									initialPutPixel(a, 54, 0x0000);
								}
	//line
	for(a = 13; a < 35; a++)
								for(b = 58; b < 82; b++)
1000124c:	e0bfe317 	ldw	r2,-116(fp)
10001250:	10800044 	addi	r2,r2,1
10001254:	e0bfe315 	stw	r2,-116(fp)
10001258:	e0bfe317 	ldw	r2,-116(fp)
1000125c:	10801490 	cmplti	r2,r2,82
10001260:	103fea1e 	bne	r2,zero,1000120c <__alt_data_end+0xf800120c>
									initialPutPixel(35, b, 0x0000);
									initialPutPixel(a, 30, 0x0000);
									initialPutPixel(a, 54, 0x0000);
								}
	//line
	for(a = 13; a < 35; a++)
10001264:	e0bfe217 	ldw	r2,-120(fp)
10001268:	10800044 	addi	r2,r2,1
1000126c:	e0bfe215 	stw	r2,-120(fp)
10001270:	e0bfe217 	ldw	r2,-120(fp)
10001274:	108008d0 	cmplti	r2,r2,35
10001278:	103fe11e 	bne	r2,zero,10001200 <__alt_data_end+0xf8001200>
									initialPutPixel(35, b, 0x0000);
									initialPutPixel(a, 58, 0x0000);
									initialPutPixel(a, 82, 0x0000);
								}
	//rect
	for(a = 13; a < 35; a++)
1000127c:	00800344 	movi	r2,13
10001280:	e0bfe215 	stw	r2,-120(fp)
10001284:	00001c06 	br	100012f8 <main+0x1b4>
								for(b = 86; b < 110; b++)
10001288:	00801584 	movi	r2,86
1000128c:	e0bfe315 	stw	r2,-116(fp)
10001290:	00001306 	br	100012e0 <main+0x19c>
								{
									initialPutPixel(13, b, 0x0000);
10001294:	01000344 	movi	r4,13
10001298:	e17fe317 	ldw	r5,-116(fp)
1000129c:	000d883a 	mov	r6,zero
100012a0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(35, b, 0x0000);
100012a4:	010008c4 	movi	r4,35
100012a8:	e17fe317 	ldw	r5,-116(fp)
100012ac:	000d883a 	mov	r6,zero
100012b0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 86, 0x0000);
100012b4:	e13fe217 	ldw	r4,-120(fp)
100012b8:	01401584 	movi	r5,86
100012bc:	000d883a 	mov	r6,zero
100012c0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 110, 0x0000);
100012c4:	e13fe217 	ldw	r4,-120(fp)
100012c8:	01401b84 	movi	r5,110
100012cc:	000d883a 	mov	r6,zero
100012d0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 58, 0x0000);
									initialPutPixel(a, 82, 0x0000);
								}
	//rect
	for(a = 13; a < 35; a++)
								for(b = 86; b < 110; b++)
100012d4:	e0bfe317 	ldw	r2,-116(fp)
100012d8:	10800044 	addi	r2,r2,1
100012dc:	e0bfe315 	stw	r2,-116(fp)
100012e0:	e0bfe317 	ldw	r2,-116(fp)
100012e4:	10801b90 	cmplti	r2,r2,110
100012e8:	103fea1e 	bne	r2,zero,10001294 <__alt_data_end+0xf8001294>
									initialPutPixel(35, b, 0x0000);
									initialPutPixel(a, 58, 0x0000);
									initialPutPixel(a, 82, 0x0000);
								}
	//rect
	for(a = 13; a < 35; a++)
100012ec:	e0bfe217 	ldw	r2,-120(fp)
100012f0:	10800044 	addi	r2,r2,1
100012f4:	e0bfe215 	stw	r2,-120(fp)
100012f8:	e0bfe217 	ldw	r2,-120(fp)
100012fc:	108008d0 	cmplti	r2,r2,35
10001300:	103fe11e 	bne	r2,zero,10001288 <__alt_data_end+0xf8001288>
									initialPutPixel(35, b, 0x0000);
									initialPutPixel(a, 86, 0x0000);
									initialPutPixel(a, 110, 0x0000);
								}
	//circle
	for(a = 13; a < 35; a++)
10001304:	00800344 	movi	r2,13
10001308:	e0bfe215 	stw	r2,-120(fp)
1000130c:	00001c06 	br	10001380 <main+0x23c>
								for(b = 114; b < 138; b++)
10001310:	00801c84 	movi	r2,114
10001314:	e0bfe315 	stw	r2,-116(fp)
10001318:	00001306 	br	10001368 <main+0x224>
								{
									initialPutPixel(13, b, 0x0000);
1000131c:	01000344 	movi	r4,13
10001320:	e17fe317 	ldw	r5,-116(fp)
10001324:	000d883a 	mov	r6,zero
10001328:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(35, b, 0x0000);
1000132c:	010008c4 	movi	r4,35
10001330:	e17fe317 	ldw	r5,-116(fp)
10001334:	000d883a 	mov	r6,zero
10001338:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 114, 0x0000);
1000133c:	e13fe217 	ldw	r4,-120(fp)
10001340:	01401c84 	movi	r5,114
10001344:	000d883a 	mov	r6,zero
10001348:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 138, 0x0000);
1000134c:	e13fe217 	ldw	r4,-120(fp)
10001350:	01402284 	movi	r5,138
10001354:	000d883a 	mov	r6,zero
10001358:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 86, 0x0000);
									initialPutPixel(a, 110, 0x0000);
								}
	//circle
	for(a = 13; a < 35; a++)
								for(b = 114; b < 138; b++)
1000135c:	e0bfe317 	ldw	r2,-116(fp)
10001360:	10800044 	addi	r2,r2,1
10001364:	e0bfe315 	stw	r2,-116(fp)
10001368:	e0bfe317 	ldw	r2,-116(fp)
1000136c:	10802290 	cmplti	r2,r2,138
10001370:	103fea1e 	bne	r2,zero,1000131c <__alt_data_end+0xf800131c>
									initialPutPixel(35, b, 0x0000);
									initialPutPixel(a, 86, 0x0000);
									initialPutPixel(a, 110, 0x0000);
								}
	//circle
	for(a = 13; a < 35; a++)
10001374:	e0bfe217 	ldw	r2,-120(fp)
10001378:	10800044 	addi	r2,r2,1
1000137c:	e0bfe215 	stw	r2,-120(fp)
10001380:	e0bfe217 	ldw	r2,-120(fp)
10001384:	108008d0 	cmplti	r2,r2,35
10001388:	103fe11e 	bne	r2,zero,10001310 <__alt_data_end+0xf8001310>
									initialPutPixel(35, b, 0x0000);
									initialPutPixel(a, 114, 0x0000);
									initialPutPixel(a, 138, 0x0000);
								}
	//polygon
	for(a = 13; a < 35; a++)
1000138c:	00800344 	movi	r2,13
10001390:	e0bfe215 	stw	r2,-120(fp)
10001394:	00001c06 	br	10001408 <main+0x2c4>
								for(b = 142; b < 166; b++)
10001398:	00802384 	movi	r2,142
1000139c:	e0bfe315 	stw	r2,-116(fp)
100013a0:	00001306 	br	100013f0 <main+0x2ac>
								{
									initialPutPixel(13, b, 0x0000);
100013a4:	01000344 	movi	r4,13
100013a8:	e17fe317 	ldw	r5,-116(fp)
100013ac:	000d883a 	mov	r6,zero
100013b0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(35, b, 0x0000);
100013b4:	010008c4 	movi	r4,35
100013b8:	e17fe317 	ldw	r5,-116(fp)
100013bc:	000d883a 	mov	r6,zero
100013c0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 142, 0x0000);
100013c4:	e13fe217 	ldw	r4,-120(fp)
100013c8:	01402384 	movi	r5,142
100013cc:	000d883a 	mov	r6,zero
100013d0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 166, 0x0000);
100013d4:	e13fe217 	ldw	r4,-120(fp)
100013d8:	01402984 	movi	r5,166
100013dc:	000d883a 	mov	r6,zero
100013e0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 114, 0x0000);
									initialPutPixel(a, 138, 0x0000);
								}
	//polygon
	for(a = 13; a < 35; a++)
								for(b = 142; b < 166; b++)
100013e4:	e0bfe317 	ldw	r2,-116(fp)
100013e8:	10800044 	addi	r2,r2,1
100013ec:	e0bfe315 	stw	r2,-116(fp)
100013f0:	e0bfe317 	ldw	r2,-116(fp)
100013f4:	10802990 	cmplti	r2,r2,166
100013f8:	103fea1e 	bne	r2,zero,100013a4 <__alt_data_end+0xf80013a4>
									initialPutPixel(35, b, 0x0000);
									initialPutPixel(a, 114, 0x0000);
									initialPutPixel(a, 138, 0x0000);
								}
	//polygon
	for(a = 13; a < 35; a++)
100013fc:	e0bfe217 	ldw	r2,-120(fp)
10001400:	10800044 	addi	r2,r2,1
10001404:	e0bfe215 	stw	r2,-120(fp)
10001408:	e0bfe217 	ldw	r2,-120(fp)
1000140c:	108008d0 	cmplti	r2,r2,35
10001410:	103fe11e 	bne	r2,zero,10001398 <__alt_data_end+0xf8001398>
									initialPutPixel(35, b, 0x0000);
									initialPutPixel(a, 142, 0x0000);
									initialPutPixel(a, 166, 0x0000);
								}
	//eraser
	for(a = 13; a < 35; a++)
10001414:	00800344 	movi	r2,13
10001418:	e0bfe215 	stw	r2,-120(fp)
1000141c:	00001c06 	br	10001490 <main+0x34c>
								for(b = 170; b < 194; b++)
10001420:	00802a84 	movi	r2,170
10001424:	e0bfe315 	stw	r2,-116(fp)
10001428:	00001306 	br	10001478 <main+0x334>
								{
									initialPutPixel(13, b, 0x0000);
1000142c:	01000344 	movi	r4,13
10001430:	e17fe317 	ldw	r5,-116(fp)
10001434:	000d883a 	mov	r6,zero
10001438:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(35, b, 0x0000);
1000143c:	010008c4 	movi	r4,35
10001440:	e17fe317 	ldw	r5,-116(fp)
10001444:	000d883a 	mov	r6,zero
10001448:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 170, 0x0000);
1000144c:	e13fe217 	ldw	r4,-120(fp)
10001450:	01402a84 	movi	r5,170
10001454:	000d883a 	mov	r6,zero
10001458:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 194, 0x0000);
1000145c:	e13fe217 	ldw	r4,-120(fp)
10001460:	01403084 	movi	r5,194
10001464:	000d883a 	mov	r6,zero
10001468:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 142, 0x0000);
									initialPutPixel(a, 166, 0x0000);
								}
	//eraser
	for(a = 13; a < 35; a++)
								for(b = 170; b < 194; b++)
1000146c:	e0bfe317 	ldw	r2,-116(fp)
10001470:	10800044 	addi	r2,r2,1
10001474:	e0bfe315 	stw	r2,-116(fp)
10001478:	e0bfe317 	ldw	r2,-116(fp)
1000147c:	10803090 	cmplti	r2,r2,194
10001480:	103fea1e 	bne	r2,zero,1000142c <__alt_data_end+0xf800142c>
									initialPutPixel(35, b, 0x0000);
									initialPutPixel(a, 142, 0x0000);
									initialPutPixel(a, 166, 0x0000);
								}
	//eraser
	for(a = 13; a < 35; a++)
10001484:	e0bfe217 	ldw	r2,-120(fp)
10001488:	10800044 	addi	r2,r2,1
1000148c:	e0bfe215 	stw	r2,-120(fp)
10001490:	e0bfe217 	ldw	r2,-120(fp)
10001494:	108008d0 	cmplti	r2,r2,35
10001498:	103fe11e 	bne	r2,zero,10001420 <__alt_data_end+0xf8001420>
									initialPutPixel(35, b, 0x0000);
									initialPutPixel(a, 170, 0x0000);
									initialPutPixel(a, 194, 0x0000);
								}
	//spray
	for(a = 13; a < 35; a++)
1000149c:	00800344 	movi	r2,13
100014a0:	e0bfe215 	stw	r2,-120(fp)
100014a4:	00001c06 	br	10001518 <main+0x3d4>
								for(b = 198; b < 222; b++)
100014a8:	00803184 	movi	r2,198
100014ac:	e0bfe315 	stw	r2,-116(fp)
100014b0:	00001306 	br	10001500 <main+0x3bc>
								{
									initialPutPixel(13, b, 0x0000);
100014b4:	01000344 	movi	r4,13
100014b8:	e17fe317 	ldw	r5,-116(fp)
100014bc:	000d883a 	mov	r6,zero
100014c0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(35, b, 0x0000);
100014c4:	010008c4 	movi	r4,35
100014c8:	e17fe317 	ldw	r5,-116(fp)
100014cc:	000d883a 	mov	r6,zero
100014d0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 198, 0x0000);
100014d4:	e13fe217 	ldw	r4,-120(fp)
100014d8:	01403184 	movi	r5,198
100014dc:	000d883a 	mov	r6,zero
100014e0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 222, 0x0000);
100014e4:	e13fe217 	ldw	r4,-120(fp)
100014e8:	01403784 	movi	r5,222
100014ec:	000d883a 	mov	r6,zero
100014f0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 170, 0x0000);
									initialPutPixel(a, 194, 0x0000);
								}
	//spray
	for(a = 13; a < 35; a++)
								for(b = 198; b < 222; b++)
100014f4:	e0bfe317 	ldw	r2,-116(fp)
100014f8:	10800044 	addi	r2,r2,1
100014fc:	e0bfe315 	stw	r2,-116(fp)
10001500:	e0bfe317 	ldw	r2,-116(fp)
10001504:	10803790 	cmplti	r2,r2,222
10001508:	103fea1e 	bne	r2,zero,100014b4 <__alt_data_end+0xf80014b4>
									initialPutPixel(35, b, 0x0000);
									initialPutPixel(a, 170, 0x0000);
									initialPutPixel(a, 194, 0x0000);
								}
	//spray
	for(a = 13; a < 35; a++)
1000150c:	e0bfe217 	ldw	r2,-120(fp)
10001510:	10800044 	addi	r2,r2,1
10001514:	e0bfe215 	stw	r2,-120(fp)
10001518:	e0bfe217 	ldw	r2,-120(fp)
1000151c:	108008d0 	cmplti	r2,r2,35
10001520:	103fe11e 	bne	r2,zero,100014a8 <__alt_data_end+0xf80014a8>
									initialPutPixel(35, b, 0x0000);
									initialPutPixel(a, 198, 0x0000);
									initialPutPixel(a, 222, 0x0000);
								}
	//fill
	for(a = 13; a < 35; a++)
10001524:	00800344 	movi	r2,13
10001528:	e0bfe215 	stw	r2,-120(fp)
1000152c:	00001006 	br	10001570 <main+0x42c>
								for(b = 226; b < 250; b++)
10001530:	00803884 	movi	r2,226
10001534:	e0bfe315 	stw	r2,-116(fp)
10001538:	00000706 	br	10001558 <main+0x414>
								{
									initialPutPixel(a, b, 0xb6b6);
1000153c:	e13fe217 	ldw	r4,-120(fp)
10001540:	e17fe317 	ldw	r5,-116(fp)
10001544:	01adad94 	movui	r6,46774
10001548:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 198, 0x0000);
									initialPutPixel(a, 222, 0x0000);
								}
	//fill
	for(a = 13; a < 35; a++)
								for(b = 226; b < 250; b++)
1000154c:	e0bfe317 	ldw	r2,-116(fp)
10001550:	10800044 	addi	r2,r2,1
10001554:	e0bfe315 	stw	r2,-116(fp)
10001558:	e0bfe317 	ldw	r2,-116(fp)
1000155c:	10803e90 	cmplti	r2,r2,250
10001560:	103ff61e 	bne	r2,zero,1000153c <__alt_data_end+0xf800153c>
									initialPutPixel(35, b, 0x0000);
									initialPutPixel(a, 198, 0x0000);
									initialPutPixel(a, 222, 0x0000);
								}
	//fill
	for(a = 13; a < 35; a++)
10001564:	e0bfe217 	ldw	r2,-120(fp)
10001568:	10800044 	addi	r2,r2,1
1000156c:	e0bfe215 	stw	r2,-120(fp)
10001570:	e0bfe217 	ldw	r2,-120(fp)
10001574:	108008d0 	cmplti	r2,r2,35
10001578:	103fed1e 	bne	r2,zero,10001530 <__alt_data_end+0xf8001530>
								{
									initialPutPixel(a, b, 0xb6b6);

								}
	//pick
	for(a = 13; a < 35; a++)
1000157c:	00800344 	movi	r2,13
10001580:	e0bfe215 	stw	r2,-120(fp)
10001584:	00001006 	br	100015c8 <main+0x484>
								for(b = 250; b < 280; b++)
10001588:	00803e84 	movi	r2,250
1000158c:	e0bfe315 	stw	r2,-116(fp)
10001590:	00000706 	br	100015b0 <main+0x46c>
								{
									initialPutPixel(a, b, 0xb6b6);
10001594:	e13fe217 	ldw	r4,-120(fp)
10001598:	e17fe317 	ldw	r5,-116(fp)
1000159c:	01adad94 	movui	r6,46774
100015a0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, b, 0xb6b6);

								}
	//pick
	for(a = 13; a < 35; a++)
								for(b = 250; b < 280; b++)
100015a4:	e0bfe317 	ldw	r2,-116(fp)
100015a8:	10800044 	addi	r2,r2,1
100015ac:	e0bfe315 	stw	r2,-116(fp)
100015b0:	e0bfe317 	ldw	r2,-116(fp)
100015b4:	10804610 	cmplti	r2,r2,280
100015b8:	103ff61e 	bne	r2,zero,10001594 <__alt_data_end+0xf8001594>
								{
									initialPutPixel(a, b, 0xb6b6);

								}
	//pick
	for(a = 13; a < 35; a++)
100015bc:	e0bfe217 	ldw	r2,-120(fp)
100015c0:	10800044 	addi	r2,r2,1
100015c4:	e0bfe215 	stw	r2,-120(fp)
100015c8:	e0bfe217 	ldw	r2,-120(fp)
100015cc:	108008d0 	cmplti	r2,r2,35
100015d0:	103fed1e 	bne	r2,zero,10001588 <__alt_data_end+0xf8001588>
								{
									initialPutPixel(a, b, 0xb6b6);

								}
	//clear
	for(a = 13; a < 35; a++)
100015d4:	00800344 	movi	r2,13
100015d8:	e0bfe215 	stw	r2,-120(fp)
100015dc:	00001c06 	br	10001650 <main+0x50c>
								for(b = 282; b < 306; b++)
100015e0:	00804684 	movi	r2,282
100015e4:	e0bfe315 	stw	r2,-116(fp)
100015e8:	00001306 	br	10001638 <main+0x4f4>
								{
									initialPutPixel(13, b, 0x0000);
100015ec:	01000344 	movi	r4,13
100015f0:	e17fe317 	ldw	r5,-116(fp)
100015f4:	000d883a 	mov	r6,zero
100015f8:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(35, b, 0x0000);
100015fc:	010008c4 	movi	r4,35
10001600:	e17fe317 	ldw	r5,-116(fp)
10001604:	000d883a 	mov	r6,zero
10001608:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 282, 0x0000);
1000160c:	e13fe217 	ldw	r4,-120(fp)
10001610:	01404684 	movi	r5,282
10001614:	000d883a 	mov	r6,zero
10001618:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 306, 0x0000);
1000161c:	e13fe217 	ldw	r4,-120(fp)
10001620:	01404c84 	movi	r5,306
10001624:	000d883a 	mov	r6,zero
10001628:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, b, 0xb6b6);

								}
	//clear
	for(a = 13; a < 35; a++)
								for(b = 282; b < 306; b++)
1000162c:	e0bfe317 	ldw	r2,-116(fp)
10001630:	10800044 	addi	r2,r2,1
10001634:	e0bfe315 	stw	r2,-116(fp)
10001638:	e0bfe317 	ldw	r2,-116(fp)
1000163c:	10804c90 	cmplti	r2,r2,306
10001640:	103fea1e 	bne	r2,zero,100015ec <__alt_data_end+0xf80015ec>
								{
									initialPutPixel(a, b, 0xb6b6);

								}
	//clear
	for(a = 13; a < 35; a++)
10001644:	e0bfe217 	ldw	r2,-120(fp)
10001648:	10800044 	addi	r2,r2,1
1000164c:	e0bfe215 	stw	r2,-120(fp)
10001650:	e0bfe217 	ldw	r2,-120(fp)
10001654:	108008d0 	cmplti	r2,r2,35
10001658:	103fe11e 	bne	r2,zero,100015e0 <__alt_data_end+0xf80015e0>
//		alt_u8 toggle = 0;
//		alt_u8 data_size;
//		alt_u8 hot_plug_count;
//		alt_u16 code;
//		int button_value;
		alt_u16 px = 320;
1000165c:	00805004 	movi	r2,320
10001660:	e0bff80d 	sth	r2,-32(fp)
		alt_u16 py = 240;
10001664:	00803c04 	movi	r2,240
10001668:	e0bff88d 	sth	r2,-30(fp)
//		signed char  dx = 0;
//		signed char  dy = 0;
		alt_u8  pbutton = 0;
1000166c:	e03ff905 	stb	zero,-28(fp)
		int cursor_type,ink;
		int start_x, start_y, end_x, end_y;
		cursor_type= 0;
10001670:	e03fe515 	stw	zero,-108(fp)
		ink = 0x0000;
10001674:	e03fe615 	stw	zero,-104(fp)
		for(a = 12; a < 29; a++)
10001678:	00800304 	movi	r2,12
1000167c:	e0bfe215 	stw	r2,-120(fp)
10001680:	00001006 	br	100016c4 <main+0x580>
					for(b = 447; b<463; b++)
10001684:	00806fc4 	movi	r2,447
10001688:	e0bfe315 	stw	r2,-116(fp)
1000168c:	00000706 	br	100016ac <main+0x568>
					{
						initialPutPixel(a,b,ink);
10001690:	e13fe217 	ldw	r4,-120(fp)
10001694:	e17fe317 	ldw	r5,-116(fp)
10001698:	e1bfe617 	ldw	r6,-104(fp)
1000169c:	00002900 	call	10000290 <initialPutPixel>
		int cursor_type,ink;
		int start_x, start_y, end_x, end_y;
		cursor_type= 0;
		ink = 0x0000;
		for(a = 12; a < 29; a++)
					for(b = 447; b<463; b++)
100016a0:	e0bfe317 	ldw	r2,-116(fp)
100016a4:	10800044 	addi	r2,r2,1
100016a8:	e0bfe315 	stw	r2,-116(fp)
100016ac:	e0bfe317 	ldw	r2,-116(fp)
100016b0:	108073d0 	cmplti	r2,r2,463
100016b4:	103ff61e 	bne	r2,zero,10001690 <__alt_data_end+0xf8001690>
		alt_u8  pbutton = 0;
		int cursor_type,ink;
		int start_x, start_y, end_x, end_y;
		cursor_type= 0;
		ink = 0x0000;
		for(a = 12; a < 29; a++)
100016b8:	e0bfe217 	ldw	r2,-120(fp)
100016bc:	10800044 	addi	r2,r2,1
100016c0:	e0bfe215 	stw	r2,-120(fp)
100016c4:	e0bfe217 	ldw	r2,-120(fp)
100016c8:	10800750 	cmplti	r2,r2,29
100016cc:	103fed1e 	bne	r2,zero,10001684 <__alt_data_end+0xf8001684>
					for(b = 447; b<463; b++)
					{
						initialPutPixel(a,b,ink);
					}
				for(a = 13; a < 35; a++)
100016d0:	00800344 	movi	r2,13
100016d4:	e0bfe215 	stw	r2,-120(fp)
100016d8:	00001c06 	br	1000174c <main+0x608>
					for(b = 30; b < 54; b++)
100016dc:	00800784 	movi	r2,30
100016e0:	e0bfe315 	stw	r2,-116(fp)
100016e4:	00001306 	br	10001734 <main+0x5f0>
					{
						initialPutPixel(13, b, 0xe0e0);
100016e8:	01000344 	movi	r4,13
100016ec:	e17fe317 	ldw	r5,-116(fp)
100016f0:	01b83814 	movui	r6,57568
100016f4:	00002900 	call	10000290 <initialPutPixel>
						initialPutPixel(35, b, 0xe0e0);
100016f8:	010008c4 	movi	r4,35
100016fc:	e17fe317 	ldw	r5,-116(fp)
10001700:	01b83814 	movui	r6,57568
10001704:	00002900 	call	10000290 <initialPutPixel>
						initialPutPixel(a, 30, 0xe0e0);
10001708:	e13fe217 	ldw	r4,-120(fp)
1000170c:	01400784 	movi	r5,30
10001710:	01b83814 	movui	r6,57568
10001714:	00002900 	call	10000290 <initialPutPixel>
						initialPutPixel(a, 54, 0xe0e0);
10001718:	e13fe217 	ldw	r4,-120(fp)
1000171c:	01400d84 	movi	r5,54
10001720:	01b83814 	movui	r6,57568
10001724:	00002900 	call	10000290 <initialPutPixel>
					for(b = 447; b<463; b++)
					{
						initialPutPixel(a,b,ink);
					}
				for(a = 13; a < 35; a++)
					for(b = 30; b < 54; b++)
10001728:	e0bfe317 	ldw	r2,-116(fp)
1000172c:	10800044 	addi	r2,r2,1
10001730:	e0bfe315 	stw	r2,-116(fp)
10001734:	e0bfe317 	ldw	r2,-116(fp)
10001738:	10800d90 	cmplti	r2,r2,54
1000173c:	103fea1e 	bne	r2,zero,100016e8 <__alt_data_end+0xf80016e8>
		for(a = 12; a < 29; a++)
					for(b = 447; b<463; b++)
					{
						initialPutPixel(a,b,ink);
					}
				for(a = 13; a < 35; a++)
10001740:	e0bfe217 	ldw	r2,-120(fp)
10001744:	10800044 	addi	r2,r2,1
10001748:	e0bfe215 	stw	r2,-120(fp)
1000174c:	e0bfe217 	ldw	r2,-120(fp)
10001750:	108008d0 	cmplti	r2,r2,35
10001754:	103fe11e 	bne	r2,zero,100016dc <__alt_data_end+0xf80016dc>
						initialPutPixel(a, 30, 0xe0e0);
						initialPutPixel(a, 54, 0xe0e0);
					}
	while(1)
	{
		px = IORD(PX_BASE, 0);
10001758:	00802804 	movi	r2,160
1000175c:	10800037 	ldwio	r2,0(r2)
10001760:	e0bff80d 	sth	r2,-32(fp)
		py = IORD(PY_BASE, 0);
10001764:	00802004 	movi	r2,128
10001768:	10800037 	ldwio	r2,0(r2)
1000176c:	e0bff88d 	sth	r2,-30(fp)
		IOWR(OTG_HPI_W_BASE, 0 , 0);
10001770:	0007883a 	mov	r3,zero
10001774:	00802404 	movi	r2,144
10001778:	10c00035 	stwio	r3,0(r2)
		pbutton = IORD(BUTTON_BASE, 0);
1000177c:	00801c04 	movi	r2,112
10001780:	10800037 	ldwio	r2,0(r2)
10001784:	e0bff905 	stb	r2,-28(fp)


	//	printf("%d\n", flag_square);
		if(pbutton == 1)
10001788:	e0bff903 	ldbu	r2,-28(fp)
1000178c:	10800058 	cmpnei	r2,r2,1
10001790:	1007771e 	bne	r2,zero,10003570 <main+0x242c>
//			initialPutPixel(px, py+1, 0xffff);

			 int i, j1, j2, k;

			// drawing area
			if(px > 47 && px <633 && py > 31 && py < 425)
10001794:	e0bff80b 	ldhu	r2,-32(fp)
10001798:	10800c30 	cmpltui	r2,r2,48
1000179c:	1000e71e 	bne	r2,zero,10001b3c <main+0x9f8>
100017a0:	e0bff80b 	ldhu	r2,-32(fp)
100017a4:	10809e68 	cmpgeui	r2,r2,633
100017a8:	1000e41e 	bne	r2,zero,10001b3c <main+0x9f8>
100017ac:	e0bff88b 	ldhu	r2,-30(fp)
100017b0:	10800830 	cmpltui	r2,r2,32
100017b4:	1000e11e 	bne	r2,zero,10001b3c <main+0x9f8>
100017b8:	e0bff88b 	ldhu	r2,-30(fp)
100017bc:	10806a68 	cmpgeui	r2,r2,425
100017c0:	1000de1e 	bne	r2,zero,10001b3c <main+0x9f8>
			{
				//Functionality
				switch(cursor_type)
100017c4:	e0bfe517 	ldw	r2,-108(fp)
100017c8:	10800268 	cmpgeui	r2,r2,9
100017cc:	1007671e 	bne	r2,zero,1000356c <main+0x2428>
100017d0:	e0bfe517 	ldw	r2,-108(fp)
100017d4:	100690ba 	slli	r3,r2,2
100017d8:	00840034 	movhi	r2,4096
100017dc:	1085fb04 	addi	r2,r2,6124
100017e0:	1885883a 	add	r2,r3,r2
100017e4:	10800017 	ldw	r2,0(r2)
100017e8:	1000683a 	jmp	r2
100017ec:	10001810 	cmplti	zero,r2,96
100017f0:	1000182c 	andhi	zero,r2,96
100017f4:	10001870 	cmpltui	zero,r2,97
100017f8:	100018ec 	andhi	zero,r2,99
100017fc:	10001928 	cmpgeui	zero,r2,100
10001800:	100019c0 	call	1100019c <__alt_heap_start+0xfd3558>
10001804:	100019dc 	xori	zero,r2,103
10001808:	10001b34 	orhi	zero,r2,108
1000180c:	10001b34 	orhi	zero,r2,108
				{
				case pencil: initialPutPixel(px, py, ink);
10001810:	e0fff80b 	ldhu	r3,-32(fp)
10001814:	e0bff88b 	ldhu	r2,-30(fp)
10001818:	1809883a 	mov	r4,r3
1000181c:	100b883a 	mov	r5,r2
10001820:	e1bfe617 	ldw	r6,-104(fp)
10001824:	00002900 	call	10000290 <initialPutPixel>
							 break;
10001828:	0000c306 	br	10001b38 <main+0x9f4>

				case line:// if(flag_line == 1)
						  {
								//printf("FLAG 1");
								start_x = px;
1000182c:	e0bff80b 	ldhu	r2,-32(fp)
10001830:	e0bfe715 	stw	r2,-100(fp)
								start_y = py;
10001834:	e0bff88b 	ldhu	r2,-30(fp)
10001838:	e0bfe815 	stw	r2,-96(fp)
								initialPutPixel(px,py,ink);
1000183c:	e0fff80b 	ldhu	r3,-32(fp)
10001840:	e0bff88b 	ldhu	r2,-30(fp)
10001844:	1809883a 	mov	r4,r3
10001848:	100b883a 	mov	r5,r2
1000184c:	e1bfe617 	ldw	r6,-104(fp)
10001850:	00002900 	call	10000290 <initialPutPixel>
								//flag_line = 2;
								usleep(5000);
10001854:	0104e204 	movi	r4,5000
10001858:	00125a80 	call	100125a8 <usleep>
								linehelper(start_x, start_y, ink);
1000185c:	e13fe717 	ldw	r4,-100(fp)
10001860:	e17fe817 	ldw	r5,-96(fp)
10001864:	e1bfe617 	ldw	r6,-104(fp)
10001868:	00005140 	call	10000514 <linehelper>
								continue;
1000186c:	00074706 	br	1000358c <main+0x2448>
//						  }
						  break;
				case rect:
						 //if (flag_square == 1)
						 {
							start_x = px;
10001870:	e0bff80b 	ldhu	r2,-32(fp)
10001874:	e0bfe715 	stw	r2,-100(fp)
							start_y = py;
10001878:	e0bff88b 	ldhu	r2,-30(fp)
1000187c:	e0bfe815 	stw	r2,-96(fp)
							initialPutPixel(px,py,ink);
10001880:	e0fff80b 	ldhu	r3,-32(fp)
10001884:	e0bff88b 	ldhu	r2,-30(fp)
10001888:	1809883a 	mov	r4,r3
1000188c:	100b883a 	mov	r5,r2
10001890:	e1bfe617 	ldw	r6,-104(fp)
10001894:	00002900 	call	10000290 <initialPutPixel>
							printf("making rect 2");
10001898:	01040074 	movhi	r4,4097
1000189c:	21116204 	addi	r4,r4,17800
100018a0:	0007c300 	call	10007c30 <printf>
							flag_square = 2;
100018a4:	00800084 	movi	r2,2
100018a8:	e0bff715 	stw	r2,-36(fp)
							usleep(5000);
100018ac:	0104e204 	movi	r4,5000
100018b0:	00125a80 	call	100125a8 <usleep>
							for(a=0;a<1000;a++);
100018b4:	e03fe215 	stw	zero,-120(fp)
100018b8:	00000306 	br	100018c8 <main+0x784>
100018bc:	e0bfe217 	ldw	r2,-120(fp)
100018c0:	10800044 	addi	r2,r2,1
100018c4:	e0bfe215 	stw	r2,-120(fp)
100018c8:	e0bfe217 	ldw	r2,-120(fp)
100018cc:	1080fa10 	cmplti	r2,r2,1000
100018d0:	103ffa1e 	bne	r2,zero,100018bc <__alt_data_end+0xf80018bc>
							flag_square = squarehelper(start_x, start_y, ink);
100018d4:	e13fe717 	ldw	r4,-100(fp)
100018d8:	e17fe817 	ldw	r5,-96(fp)
100018dc:	e1bfe617 	ldw	r6,-104(fp)
100018e0:	0000d740 	call	10000d74 <squarehelper>
100018e4:	e0bff715 	stw	r2,-36(fp)

							continue;
100018e8:	00072806 	br	1000358c <main+0x2448>
//							DrawSquare(start_x,start_y,end_x,end_y,ink);
//
//						  }
						 break;
				case circle:
							start_x = px;
100018ec:	e0bff80b 	ldhu	r2,-32(fp)
100018f0:	e0bfe715 	stw	r2,-100(fp)
							start_y = py;
100018f4:	e0bff88b 	ldhu	r2,-30(fp)
100018f8:	e0bfe815 	stw	r2,-96(fp)
							initialPutPixel(px,py,ink);
100018fc:	e0fff80b 	ldhu	r3,-32(fp)
10001900:	e0bff88b 	ldhu	r2,-30(fp)
10001904:	1809883a 	mov	r4,r3
10001908:	100b883a 	mov	r5,r2
1000190c:	e1bfe617 	ldw	r6,-104(fp)
10001910:	00002900 	call	10000290 <initialPutPixel>
							circlehelper(start_x,start_y, ink);
10001914:	e13fe717 	ldw	r4,-100(fp)
10001918:	e17fe817 	ldw	r5,-96(fp)
1000191c:	e1bfe617 	ldw	r6,-104(fp)
10001920:	00008140 	call	10000814 <circlehelper>

							break;
10001924:	00008406 	br	10001b38 <main+0x9f4>
				case polygon:
//							start_x = px;
//							start_y =py;
//							initialPutPixel(px,py,ink);
//							polygonhelper(start_x, start_y, ink);
					 if(flag_line == 1)
10001928:	e0bfe417 	ldw	r2,-112(fp)
1000192c:	10800058 	cmpnei	r2,r2,1
10001930:	10000f1e 	bne	r2,zero,10001970 <main+0x82c>
											  {
													//printf("FLAG 1");
													start_x = px;
10001934:	e0bff80b 	ldhu	r2,-32(fp)
10001938:	e0bfe715 	stw	r2,-100(fp)
													start_y = py;
1000193c:	e0bff88b 	ldhu	r2,-30(fp)
10001940:	e0bfe815 	stw	r2,-96(fp)
													initialPutPixel(px,py,ink);
10001944:	e0fff80b 	ldhu	r3,-32(fp)
10001948:	e0bff88b 	ldhu	r2,-30(fp)
1000194c:	1809883a 	mov	r4,r3
10001950:	100b883a 	mov	r5,r2
10001954:	e1bfe617 	ldw	r6,-104(fp)
10001958:	00002900 	call	10000290 <initialPutPixel>
													flag_line = 2;
1000195c:	00800084 	movi	r2,2
10001960:	e0bfe415 	stw	r2,-112(fp)
													usleep(5000);
10001964:	0104e204 	movi	r4,5000
10001968:	00125a80 	call	100125a8 <usleep>
													//flag_line = linehelper(start_x, start_y, ink);
													continue;
1000196c:	00070706 	br	1000358c <main+0x2448>
											  }
											  if(flag_line == 2)
10001970:	e0bfe417 	ldw	r2,-112(fp)
10001974:	10800098 	cmpnei	r2,r2,2
10001978:	1000101e 	bne	r2,zero,100019bc <main+0x878>
											  {
												   // printf("FLAG 2");
												  	end_x = px;
1000197c:	e0bff80b 	ldhu	r2,-32(fp)
10001980:	e0bffa15 	stw	r2,-24(fp)
													end_y = py;
10001984:	e0bff88b 	ldhu	r2,-30(fp)
10001988:	e0bffb15 	stw	r2,-20(fp)
													//flag_line = 1;
													Bresenham(start_x, start_y, end_x, end_y, ink);
1000198c:	e0bfe617 	ldw	r2,-104(fp)
10001990:	d8800015 	stw	r2,0(sp)
10001994:	e13fe717 	ldw	r4,-100(fp)
10001998:	e17fe817 	ldw	r5,-96(fp)
1000199c:	e1bffa17 	ldw	r6,-24(fp)
100019a0:	e1fffb17 	ldw	r7,-20(fp)
100019a4:	00006000 	call	10000600 <Bresenham>
													start_x = end_x;
100019a8:	e0bffa17 	ldw	r2,-24(fp)
100019ac:	e0bfe715 	stw	r2,-100(fp)
													start_y = end_y;
100019b0:	e0bffb17 	ldw	r2,-20(fp)
100019b4:	e0bfe815 	stw	r2,-96(fp)
													//usleep(5000);

											  }
							break;
100019b8:	00005f06 	br	10001b38 <main+0x9f4>
100019bc:	00005e06 	br	10001b38 <main+0x9f4>
				case eraser: initialPutPixel(px,py, 0xffff);
100019c0:	e0fff80b 	ldhu	r3,-32(fp)
100019c4:	e0bff88b 	ldhu	r2,-30(fp)
100019c8:	1809883a 	mov	r4,r3
100019cc:	100b883a 	mov	r5,r2
100019d0:	01bfffd4 	movui	r6,65535
100019d4:	00002900 	call	10000290 <initialPutPixel>
							 break;
100019d8:	00005706 	br	10001b38 <main+0x9f4>
				case spray :

							 j1 = py;
100019dc:	e0bff88b 	ldhu	r2,-30(fp)
100019e0:	e0bfea15 	stw	r2,-88(fp)
							 j2 = py;
100019e4:	e0bff88b 	ldhu	r2,-30(fp)
100019e8:	e0bfeb15 	stw	r2,-84(fp)
							 for(k = 4; k>=0; k--)
100019ec:	00800104 	movi	r2,4
100019f0:	e0bfec15 	stw	r2,-80(fp)
100019f4:	00004c06 	br	10001b28 <main+0x9e4>
							 {
								 for(i = px - k; i<= px + k; i++)
100019f8:	e0fff80b 	ldhu	r3,-32(fp)
100019fc:	e0bfec17 	ldw	r2,-80(fp)
10001a00:	1885c83a 	sub	r2,r3,r2
10001a04:	e0bfe915 	stw	r2,-92(fp)
10001a08:	00003906 	br	10001af0 <main+0x9ac>
								 {
									 if(rand()/(int)(((unsigned)RAND_MAX +1)/2))
10001a0c:	0007c840 	call	10007c84 <rand>
10001a10:	1007883a 	mov	r3,r2
10001a14:	00900034 	movhi	r2,16384
10001a18:	10bfffc4 	addi	r2,r2,-1
10001a1c:	1887883a 	add	r3,r3,r2
10001a20:	00a00034 	movhi	r2,32768
10001a24:	10bfff84 	addi	r2,r2,-2
10001a28:	10c0132e 	bgeu	r2,r3,10001a78 <main+0x934>
									 {
										 int randx = rand() % 5 ;
10001a2c:	0007c840 	call	10007c84 <rand>
10001a30:	1009883a 	mov	r4,r2
10001a34:	01400144 	movi	r5,5
10001a38:	00054080 	call	10005408 <__modsi3>
10001a3c:	e0bffc15 	stw	r2,-16(fp)
										 int randy = rand() % 5 ;
10001a40:	0007c840 	call	10007c84 <rand>
10001a44:	1009883a 	mov	r4,r2
10001a48:	01400144 	movi	r5,5
10001a4c:	00054080 	call	10005408 <__modsi3>
10001a50:	e0bffd15 	stw	r2,-12(fp)
										 initialPutPixel(i + randx, j1+randy, ink);
10001a54:	e0ffe917 	ldw	r3,-92(fp)
10001a58:	e0bffc17 	ldw	r2,-16(fp)
10001a5c:	1889883a 	add	r4,r3,r2
10001a60:	e0ffea17 	ldw	r3,-88(fp)
10001a64:	e0bffd17 	ldw	r2,-12(fp)
10001a68:	1885883a 	add	r2,r3,r2
10001a6c:	100b883a 	mov	r5,r2
10001a70:	e1bfe617 	ldw	r6,-104(fp)
10001a74:	00002900 	call	10000290 <initialPutPixel>
									 }
									 if(rand()/(int)(((unsigned)RAND_MAX +1)/2))
10001a78:	0007c840 	call	10007c84 <rand>
10001a7c:	1007883a 	mov	r3,r2
10001a80:	00900034 	movhi	r2,16384
10001a84:	10bfffc4 	addi	r2,r2,-1
10001a88:	1887883a 	add	r3,r3,r2
10001a8c:	00a00034 	movhi	r2,32768
10001a90:	10bfff84 	addi	r2,r2,-2
10001a94:	10c0132e 	bgeu	r2,r3,10001ae4 <main+0x9a0>
									 {
										 int randx = rand() % 5 ;
10001a98:	0007c840 	call	10007c84 <rand>
10001a9c:	1009883a 	mov	r4,r2
10001aa0:	01400144 	movi	r5,5
10001aa4:	00054080 	call	10005408 <__modsi3>
10001aa8:	e0bffe15 	stw	r2,-8(fp)
										 int randy = rand() % 5 ;
10001aac:	0007c840 	call	10007c84 <rand>
10001ab0:	1009883a 	mov	r4,r2
10001ab4:	01400144 	movi	r5,5
10001ab8:	00054080 	call	10005408 <__modsi3>
10001abc:	e0bfff15 	stw	r2,-4(fp)
										 initialPutPixel(i+randx, j2+randy, ink);
10001ac0:	e0ffe917 	ldw	r3,-92(fp)
10001ac4:	e0bffe17 	ldw	r2,-8(fp)
10001ac8:	1889883a 	add	r4,r3,r2
10001acc:	e0ffeb17 	ldw	r3,-84(fp)
10001ad0:	e0bfff17 	ldw	r2,-4(fp)
10001ad4:	1885883a 	add	r2,r3,r2
10001ad8:	100b883a 	mov	r5,r2
10001adc:	e1bfe617 	ldw	r6,-104(fp)
10001ae0:	00002900 	call	10000290 <initialPutPixel>

							 j1 = py;
							 j2 = py;
							 for(k = 4; k>=0; k--)
							 {
								 for(i = px - k; i<= px + k; i++)
10001ae4:	e0bfe917 	ldw	r2,-92(fp)
10001ae8:	10800044 	addi	r2,r2,1
10001aec:	e0bfe915 	stw	r2,-92(fp)
10001af0:	e0fff80b 	ldhu	r3,-32(fp)
10001af4:	e0bfec17 	ldw	r2,-80(fp)
10001af8:	1887883a 	add	r3,r3,r2
10001afc:	e0bfe917 	ldw	r2,-92(fp)
10001b00:	18bfc20e 	bge	r3,r2,10001a0c <__alt_data_end+0xf8001a0c>
										 initialPutPixel(i+randx, j2+randy, ink);

									 }

								 }
								 j1--;
10001b04:	e0bfea17 	ldw	r2,-88(fp)
10001b08:	10bfffc4 	addi	r2,r2,-1
10001b0c:	e0bfea15 	stw	r2,-88(fp)
								 j2++;
10001b10:	e0bfeb17 	ldw	r2,-84(fp)
10001b14:	10800044 	addi	r2,r2,1
10001b18:	e0bfeb15 	stw	r2,-84(fp)
							 break;
				case spray :

							 j1 = py;
							 j2 = py;
							 for(k = 4; k>=0; k--)
10001b1c:	e0bfec17 	ldw	r2,-80(fp)
10001b20:	10bfffc4 	addi	r2,r2,-1
10001b24:	e0bfec15 	stw	r2,-80(fp)
10001b28:	e0bfec17 	ldw	r2,-80(fp)
10001b2c:	103fb20e 	bge	r2,zero,100019f8 <__alt_data_end+0xf80019f8>

								 }
								 j1--;
								 j2++;
							 }
							 break;
10001b30:	00000106 	br	10001b38 <main+0x9f4>
//									}
//								}
							break;

				case pick:
							break;
10001b34:	0001883a 	nop


				}
			}
10001b38:	00068c06 	br	1000356c <main+0x2428>

			else
			{
				if((px >= 45 && px <= 59)  && (py >= 457 && py <= 469))
10001b3c:	e0bff80b 	ldhu	r2,-32(fp)
10001b40:	10800b70 	cmpltui	r2,r2,45
10001b44:	1000221e 	bne	r2,zero,10001bd0 <main+0xa8c>
10001b48:	e0bff80b 	ldhu	r2,-32(fp)
10001b4c:	10800f28 	cmpgeui	r2,r2,60
10001b50:	10001f1e 	bne	r2,zero,10001bd0 <main+0xa8c>
10001b54:	e0bff88b 	ldhu	r2,-30(fp)
10001b58:	10807270 	cmpltui	r2,r2,457
10001b5c:	10001c1e 	bne	r2,zero,10001bd0 <main+0xa8c>
10001b60:	e0bff88b 	ldhu	r2,-30(fp)
10001b64:	108075a8 	cmpgeui	r2,r2,470
10001b68:	1000191e 	bne	r2,zero,10001bd0 <main+0xa8c>
				        {
				            ink = 0xFFFF;
10001b6c:	00bfffd4 	movui	r2,65535
10001b70:	e0bfe615 	stw	r2,-104(fp)
				            for(a = 12; a < 29; a++)
10001b74:	00800304 	movi	r2,12
10001b78:	e0bfe215 	stw	r2,-120(fp)
10001b7c:	00001006 	br	10001bc0 <main+0xa7c>
				            			for(b = 447; b<463; b++)
10001b80:	00806fc4 	movi	r2,447
10001b84:	e0bfe315 	stw	r2,-116(fp)
10001b88:	00000706 	br	10001ba8 <main+0xa64>
				            			{
				            				initialPutPixel(a,b,ink);
10001b8c:	e13fe217 	ldw	r4,-120(fp)
10001b90:	e17fe317 	ldw	r5,-116(fp)
10001b94:	e1bfe617 	ldw	r6,-104(fp)
10001b98:	00002900 	call	10000290 <initialPutPixel>
			{
				if((px >= 45 && px <= 59)  && (py >= 457 && py <= 469))
				        {
				            ink = 0xFFFF;
				            for(a = 12; a < 29; a++)
				            			for(b = 447; b<463; b++)
10001b9c:	e0bfe317 	ldw	r2,-116(fp)
10001ba0:	10800044 	addi	r2,r2,1
10001ba4:	e0bfe315 	stw	r2,-116(fp)
10001ba8:	e0bfe317 	ldw	r2,-116(fp)
10001bac:	108073d0 	cmplti	r2,r2,463
10001bb0:	103ff61e 	bne	r2,zero,10001b8c <__alt_data_end+0xf8001b8c>
			else
			{
				if((px >= 45 && px <= 59)  && (py >= 457 && py <= 469))
				        {
				            ink = 0xFFFF;
				            for(a = 12; a < 29; a++)
10001bb4:	e0bfe217 	ldw	r2,-120(fp)
10001bb8:	10800044 	addi	r2,r2,1
10001bbc:	e0bfe215 	stw	r2,-120(fp)
10001bc0:	e0bfe217 	ldw	r2,-120(fp)
10001bc4:	10800750 	cmplti	r2,r2,29
10001bc8:	103fed1e 	bne	r2,zero,10001b80 <__alt_data_end+0xf8001b80>
				}
			}

			else
			{
				if((px >= 45 && px <= 59)  && (py >= 457 && py <= 469))
10001bcc:	0004ec06 	br	10002f80 <main+0x1e3c>
				            			{
				            				initialPutPixel(a,b,ink);
				            			}

				        }
				else if((px >= 62 && px <= 75)  && (py >= 457 && py <= 469))
10001bd0:	e0bff80b 	ldhu	r2,-32(fp)
10001bd4:	10800fb0 	cmpltui	r2,r2,62
10001bd8:	1000221e 	bne	r2,zero,10001c64 <main+0xb20>
10001bdc:	e0bff80b 	ldhu	r2,-32(fp)
10001be0:	10801328 	cmpgeui	r2,r2,76
10001be4:	10001f1e 	bne	r2,zero,10001c64 <main+0xb20>
10001be8:	e0bff88b 	ldhu	r2,-30(fp)
10001bec:	10807270 	cmpltui	r2,r2,457
10001bf0:	10001c1e 	bne	r2,zero,10001c64 <main+0xb20>
10001bf4:	e0bff88b 	ldhu	r2,-30(fp)
10001bf8:	108075a8 	cmpgeui	r2,r2,470
10001bfc:	1000191e 	bne	r2,zero,10001c64 <main+0xb20>
				{
					ink = 0xB6B6;
10001c00:	00adad94 	movui	r2,46774
10001c04:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
10001c08:	00800304 	movi	r2,12
10001c0c:	e0bfe215 	stw	r2,-120(fp)
10001c10:	00001006 	br	10001c54 <main+0xb10>
								for(b = 447; b<463; b++)
10001c14:	00806fc4 	movi	r2,447
10001c18:	e0bfe315 	stw	r2,-116(fp)
10001c1c:	00000706 	br	10001c3c <main+0xaf8>
								{
									initialPutPixel(a,b,ink);
10001c20:	e13fe217 	ldw	r4,-120(fp)
10001c24:	e17fe317 	ldw	r5,-116(fp)
10001c28:	e1bfe617 	ldw	r6,-104(fp)
10001c2c:	00002900 	call	10000290 <initialPutPixel>
				        }
				else if((px >= 62 && px <= 75)  && (py >= 457 && py <= 469))
				{
					ink = 0xB6B6;
					for(a = 12; a < 29; a++)
								for(b = 447; b<463; b++)
10001c30:	e0bfe317 	ldw	r2,-116(fp)
10001c34:	10800044 	addi	r2,r2,1
10001c38:	e0bfe315 	stw	r2,-116(fp)
10001c3c:	e0bfe317 	ldw	r2,-116(fp)
10001c40:	108073d0 	cmplti	r2,r2,463
10001c44:	103ff61e 	bne	r2,zero,10001c20 <__alt_data_end+0xf8001c20>

				        }
				else if((px >= 62 && px <= 75)  && (py >= 457 && py <= 469))
				{
					ink = 0xB6B6;
					for(a = 12; a < 29; a++)
10001c48:	e0bfe217 	ldw	r2,-120(fp)
10001c4c:	10800044 	addi	r2,r2,1
10001c50:	e0bfe215 	stw	r2,-120(fp)
10001c54:	e0bfe217 	ldw	r2,-120(fp)
10001c58:	10800750 	cmplti	r2,r2,29
10001c5c:	103fed1e 	bne	r2,zero,10001c14 <__alt_data_end+0xf8001c14>
				            			{
				            				initialPutPixel(a,b,ink);
				            			}

				        }
				else if((px >= 62 && px <= 75)  && (py >= 457 && py <= 469))
10001c60:	0004c706 	br	10002f80 <main+0x1e3c>
								{
									initialPutPixel(a,b,ink);
								}

				}
				else if((px >= 78 && px <= 90)  && (py >= 457 && py <= 469))
10001c64:	e0bff80b 	ldhu	r2,-32(fp)
10001c68:	108013b0 	cmpltui	r2,r2,78
10001c6c:	1000221e 	bne	r2,zero,10001cf8 <main+0xbb4>
10001c70:	e0bff80b 	ldhu	r2,-32(fp)
10001c74:	108016e8 	cmpgeui	r2,r2,91
10001c78:	10001f1e 	bne	r2,zero,10001cf8 <main+0xbb4>
10001c7c:	e0bff88b 	ldhu	r2,-30(fp)
10001c80:	10807270 	cmpltui	r2,r2,457
10001c84:	10001c1e 	bne	r2,zero,10001cf8 <main+0xbb4>
10001c88:	e0bff88b 	ldhu	r2,-30(fp)
10001c8c:	108075a8 	cmpgeui	r2,r2,470
10001c90:	1000191e 	bne	r2,zero,10001cf8 <main+0xbb4>
				{
					ink = 0xE0E0;
10001c94:	00b83814 	movui	r2,57568
10001c98:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
10001c9c:	00800304 	movi	r2,12
10001ca0:	e0bfe215 	stw	r2,-120(fp)
10001ca4:	00001006 	br	10001ce8 <main+0xba4>
								for(b = 447; b<463; b++)
10001ca8:	00806fc4 	movi	r2,447
10001cac:	e0bfe315 	stw	r2,-116(fp)
10001cb0:	00000706 	br	10001cd0 <main+0xb8c>
								{
									initialPutPixel(a,b,ink);
10001cb4:	e13fe217 	ldw	r4,-120(fp)
10001cb8:	e17fe317 	ldw	r5,-116(fp)
10001cbc:	e1bfe617 	ldw	r6,-104(fp)
10001cc0:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 78 && px <= 90)  && (py >= 457 && py <= 469))
				{
					ink = 0xE0E0;
					for(a = 12; a < 29; a++)
								for(b = 447; b<463; b++)
10001cc4:	e0bfe317 	ldw	r2,-116(fp)
10001cc8:	10800044 	addi	r2,r2,1
10001ccc:	e0bfe315 	stw	r2,-116(fp)
10001cd0:	e0bfe317 	ldw	r2,-116(fp)
10001cd4:	108073d0 	cmplti	r2,r2,463
10001cd8:	103ff61e 	bne	r2,zero,10001cb4 <__alt_data_end+0xf8001cb4>

				}
				else if((px >= 78 && px <= 90)  && (py >= 457 && py <= 469))
				{
					ink = 0xE0E0;
					for(a = 12; a < 29; a++)
10001cdc:	e0bfe217 	ldw	r2,-120(fp)
10001ce0:	10800044 	addi	r2,r2,1
10001ce4:	e0bfe215 	stw	r2,-120(fp)
10001ce8:	e0bfe217 	ldw	r2,-120(fp)
10001cec:	10800750 	cmplti	r2,r2,29
10001cf0:	103fed1e 	bne	r2,zero,10001ca8 <__alt_data_end+0xf8001ca8>
								{
									initialPutPixel(a,b,ink);
								}

				}
				else if((px >= 78 && px <= 90)  && (py >= 457 && py <= 469))
10001cf4:	0004a206 	br	10002f80 <main+0x1e3c>
								{
									initialPutPixel(a,b,ink);
								}

				}
				else if((px >= 94 && px <= 107)  && (py >= 457 && py <= 469))
10001cf8:	e0bff80b 	ldhu	r2,-32(fp)
10001cfc:	108017b0 	cmpltui	r2,r2,94
10001d00:	1000221e 	bne	r2,zero,10001d8c <main+0xc48>
10001d04:	e0bff80b 	ldhu	r2,-32(fp)
10001d08:	10801b28 	cmpgeui	r2,r2,108
10001d0c:	10001f1e 	bne	r2,zero,10001d8c <main+0xc48>
10001d10:	e0bff88b 	ldhu	r2,-30(fp)
10001d14:	10807270 	cmpltui	r2,r2,457
10001d18:	10001c1e 	bne	r2,zero,10001d8c <main+0xc48>
10001d1c:	e0bff88b 	ldhu	r2,-30(fp)
10001d20:	108075a8 	cmpgeui	r2,r2,470
10001d24:	1000191e 	bne	r2,zero,10001d8c <main+0xc48>
				{
					ink = 0xFCFC;
10001d28:	00bf3f14 	movui	r2,64764
10001d2c:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
10001d30:	00800304 	movi	r2,12
10001d34:	e0bfe215 	stw	r2,-120(fp)
10001d38:	00001006 	br	10001d7c <main+0xc38>
								for(b = 447; b<463; b++)
10001d3c:	00806fc4 	movi	r2,447
10001d40:	e0bfe315 	stw	r2,-116(fp)
10001d44:	00000706 	br	10001d64 <main+0xc20>
								{
									initialPutPixel(a,b,ink);
10001d48:	e13fe217 	ldw	r4,-120(fp)
10001d4c:	e17fe317 	ldw	r5,-116(fp)
10001d50:	e1bfe617 	ldw	r6,-104(fp)
10001d54:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 94 && px <= 107)  && (py >= 457 && py <= 469))
				{
					ink = 0xFCFC;
					for(a = 12; a < 29; a++)
								for(b = 447; b<463; b++)
10001d58:	e0bfe317 	ldw	r2,-116(fp)
10001d5c:	10800044 	addi	r2,r2,1
10001d60:	e0bfe315 	stw	r2,-116(fp)
10001d64:	e0bfe317 	ldw	r2,-116(fp)
10001d68:	108073d0 	cmplti	r2,r2,463
10001d6c:	103ff61e 	bne	r2,zero,10001d48 <__alt_data_end+0xf8001d48>

				}
				else if((px >= 94 && px <= 107)  && (py >= 457 && py <= 469))
				{
					ink = 0xFCFC;
					for(a = 12; a < 29; a++)
10001d70:	e0bfe217 	ldw	r2,-120(fp)
10001d74:	10800044 	addi	r2,r2,1
10001d78:	e0bfe215 	stw	r2,-120(fp)
10001d7c:	e0bfe217 	ldw	r2,-120(fp)
10001d80:	10800750 	cmplti	r2,r2,29
10001d84:	103fed1e 	bne	r2,zero,10001d3c <__alt_data_end+0xf8001d3c>
								{
									initialPutPixel(a,b,ink);
								}

				}
				else if((px >= 94 && px <= 107)  && (py >= 457 && py <= 469))
10001d88:	00047d06 	br	10002f80 <main+0x1e3c>
								{
									initialPutPixel(a,b,ink);
								}

				}
				else if((px >= 109 && px <= 122)  && (py >= 457 && py <= 469))
10001d8c:	e0bff80b 	ldhu	r2,-32(fp)
10001d90:	10801b70 	cmpltui	r2,r2,109
10001d94:	1000221e 	bne	r2,zero,10001e20 <main+0xcdc>
10001d98:	e0bff80b 	ldhu	r2,-32(fp)
10001d9c:	10801ee8 	cmpgeui	r2,r2,123
10001da0:	10001f1e 	bne	r2,zero,10001e20 <main+0xcdc>
10001da4:	e0bff88b 	ldhu	r2,-30(fp)
10001da8:	10807270 	cmpltui	r2,r2,457
10001dac:	10001c1e 	bne	r2,zero,10001e20 <main+0xcdc>
10001db0:	e0bff88b 	ldhu	r2,-30(fp)
10001db4:	108075a8 	cmpgeui	r2,r2,470
10001db8:	1000191e 	bne	r2,zero,10001e20 <main+0xcdc>
				{
					ink = 0x1C1C;
10001dbc:	00870704 	movi	r2,7196
10001dc0:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
10001dc4:	00800304 	movi	r2,12
10001dc8:	e0bfe215 	stw	r2,-120(fp)
10001dcc:	00001006 	br	10001e10 <main+0xccc>
								for(b = 447; b<463; b++)
10001dd0:	00806fc4 	movi	r2,447
10001dd4:	e0bfe315 	stw	r2,-116(fp)
10001dd8:	00000706 	br	10001df8 <main+0xcb4>
								{
									initialPutPixel(a,b,ink);
10001ddc:	e13fe217 	ldw	r4,-120(fp)
10001de0:	e17fe317 	ldw	r5,-116(fp)
10001de4:	e1bfe617 	ldw	r6,-104(fp)
10001de8:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 109 && px <= 122)  && (py >= 457 && py <= 469))
				{
					ink = 0x1C1C;
					for(a = 12; a < 29; a++)
								for(b = 447; b<463; b++)
10001dec:	e0bfe317 	ldw	r2,-116(fp)
10001df0:	10800044 	addi	r2,r2,1
10001df4:	e0bfe315 	stw	r2,-116(fp)
10001df8:	e0bfe317 	ldw	r2,-116(fp)
10001dfc:	108073d0 	cmplti	r2,r2,463
10001e00:	103ff61e 	bne	r2,zero,10001ddc <__alt_data_end+0xf8001ddc>

				}
				else if((px >= 109 && px <= 122)  && (py >= 457 && py <= 469))
				{
					ink = 0x1C1C;
					for(a = 12; a < 29; a++)
10001e04:	e0bfe217 	ldw	r2,-120(fp)
10001e08:	10800044 	addi	r2,r2,1
10001e0c:	e0bfe215 	stw	r2,-120(fp)
10001e10:	e0bfe217 	ldw	r2,-120(fp)
10001e14:	10800750 	cmplti	r2,r2,29
10001e18:	103fed1e 	bne	r2,zero,10001dd0 <__alt_data_end+0xf8001dd0>
								{
									initialPutPixel(a,b,ink);
								}

				}
				else if((px >= 109 && px <= 122)  && (py >= 457 && py <= 469))
10001e1c:	00045806 	br	10002f80 <main+0x1e3c>
								{
									initialPutPixel(a,b,ink);
								}

				}
				else if((px >= 126 && px <= 139)  && (py >= 457 && py <= 469))
10001e20:	e0bff80b 	ldhu	r2,-32(fp)
10001e24:	10801fb0 	cmpltui	r2,r2,126
10001e28:	1000221e 	bne	r2,zero,10001eb4 <main+0xd70>
10001e2c:	e0bff80b 	ldhu	r2,-32(fp)
10001e30:	10802328 	cmpgeui	r2,r2,140
10001e34:	10001f1e 	bne	r2,zero,10001eb4 <main+0xd70>
10001e38:	e0bff88b 	ldhu	r2,-30(fp)
10001e3c:	10807270 	cmpltui	r2,r2,457
10001e40:	10001c1e 	bne	r2,zero,10001eb4 <main+0xd70>
10001e44:	e0bff88b 	ldhu	r2,-30(fp)
10001e48:	108075a8 	cmpgeui	r2,r2,470
10001e4c:	1000191e 	bne	r2,zero,10001eb4 <main+0xd70>
				{
					ink = 0x1F1F;
10001e50:	0087c7c4 	movi	r2,7967
10001e54:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
10001e58:	00800304 	movi	r2,12
10001e5c:	e0bfe215 	stw	r2,-120(fp)
10001e60:	00001006 	br	10001ea4 <main+0xd60>
								for(b = 447; b<463; b++)
10001e64:	00806fc4 	movi	r2,447
10001e68:	e0bfe315 	stw	r2,-116(fp)
10001e6c:	00000706 	br	10001e8c <main+0xd48>
								{
									initialPutPixel(a,b,ink);
10001e70:	e13fe217 	ldw	r4,-120(fp)
10001e74:	e17fe317 	ldw	r5,-116(fp)
10001e78:	e1bfe617 	ldw	r6,-104(fp)
10001e7c:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 126 && px <= 139)  && (py >= 457 && py <= 469))
				{
					ink = 0x1F1F;
					for(a = 12; a < 29; a++)
								for(b = 447; b<463; b++)
10001e80:	e0bfe317 	ldw	r2,-116(fp)
10001e84:	10800044 	addi	r2,r2,1
10001e88:	e0bfe315 	stw	r2,-116(fp)
10001e8c:	e0bfe317 	ldw	r2,-116(fp)
10001e90:	108073d0 	cmplti	r2,r2,463
10001e94:	103ff61e 	bne	r2,zero,10001e70 <__alt_data_end+0xf8001e70>

				}
				else if((px >= 126 && px <= 139)  && (py >= 457 && py <= 469))
				{
					ink = 0x1F1F;
					for(a = 12; a < 29; a++)
10001e98:	e0bfe217 	ldw	r2,-120(fp)
10001e9c:	10800044 	addi	r2,r2,1
10001ea0:	e0bfe215 	stw	r2,-120(fp)
10001ea4:	e0bfe217 	ldw	r2,-120(fp)
10001ea8:	10800750 	cmplti	r2,r2,29
10001eac:	103fed1e 	bne	r2,zero,10001e64 <__alt_data_end+0xf8001e64>
								{
									initialPutPixel(a,b,ink);
								}

				}
				else if((px >= 126 && px <= 139)  && (py >= 457 && py <= 469))
10001eb0:	00043306 	br	10002f80 <main+0x1e3c>
									initialPutPixel(a,b,ink);
								}


				}
				else if((px >= 142 && px <= 155)  && (py >= 457 && py <= 469))
10001eb4:	e0bff80b 	ldhu	r2,-32(fp)
10001eb8:	108023b0 	cmpltui	r2,r2,142
10001ebc:	1000221e 	bne	r2,zero,10001f48 <main+0xe04>
10001ec0:	e0bff80b 	ldhu	r2,-32(fp)
10001ec4:	10802728 	cmpgeui	r2,r2,156
10001ec8:	10001f1e 	bne	r2,zero,10001f48 <main+0xe04>
10001ecc:	e0bff88b 	ldhu	r2,-30(fp)
10001ed0:	10807270 	cmpltui	r2,r2,457
10001ed4:	10001c1e 	bne	r2,zero,10001f48 <main+0xe04>
10001ed8:	e0bff88b 	ldhu	r2,-30(fp)
10001edc:	108075a8 	cmpgeui	r2,r2,470
10001ee0:	1000191e 	bne	r2,zero,10001f48 <main+0xe04>
				{
					ink = 0x0303;
10001ee4:	0080c0c4 	movi	r2,771
10001ee8:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
10001eec:	00800304 	movi	r2,12
10001ef0:	e0bfe215 	stw	r2,-120(fp)
10001ef4:	00001006 	br	10001f38 <main+0xdf4>
								for(b = 447; b<463; b++)
10001ef8:	00806fc4 	movi	r2,447
10001efc:	e0bfe315 	stw	r2,-116(fp)
10001f00:	00000706 	br	10001f20 <main+0xddc>
								{
									initialPutPixel(a,b,ink);
10001f04:	e13fe217 	ldw	r4,-120(fp)
10001f08:	e17fe317 	ldw	r5,-116(fp)
10001f0c:	e1bfe617 	ldw	r6,-104(fp)
10001f10:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 142 && px <= 155)  && (py >= 457 && py <= 469))
				{
					ink = 0x0303;
					for(a = 12; a < 29; a++)
								for(b = 447; b<463; b++)
10001f14:	e0bfe317 	ldw	r2,-116(fp)
10001f18:	10800044 	addi	r2,r2,1
10001f1c:	e0bfe315 	stw	r2,-116(fp)
10001f20:	e0bfe317 	ldw	r2,-116(fp)
10001f24:	108073d0 	cmplti	r2,r2,463
10001f28:	103ff61e 	bne	r2,zero,10001f04 <__alt_data_end+0xf8001f04>

				}
				else if((px >= 142 && px <= 155)  && (py >= 457 && py <= 469))
				{
					ink = 0x0303;
					for(a = 12; a < 29; a++)
10001f2c:	e0bfe217 	ldw	r2,-120(fp)
10001f30:	10800044 	addi	r2,r2,1
10001f34:	e0bfe215 	stw	r2,-120(fp)
10001f38:	e0bfe217 	ldw	r2,-120(fp)
10001f3c:	10800750 	cmplti	r2,r2,29
10001f40:	103fed1e 	bne	r2,zero,10001ef8 <__alt_data_end+0xf8001ef8>
									initialPutPixel(a,b,ink);
								}


				}
				else if((px >= 142 && px <= 155)  && (py >= 457 && py <= 469))
10001f44:	00040e06 	br	10002f80 <main+0x1e3c>
									initialPutPixel(a,b,ink);
								}


				}
				else if((px >= 158 && px <= 170)  && (py >= 457 && py <= 469))
10001f48:	e0bff80b 	ldhu	r2,-32(fp)
10001f4c:	108027b0 	cmpltui	r2,r2,158
10001f50:	1000221e 	bne	r2,zero,10001fdc <main+0xe98>
10001f54:	e0bff80b 	ldhu	r2,-32(fp)
10001f58:	10802ae8 	cmpgeui	r2,r2,171
10001f5c:	10001f1e 	bne	r2,zero,10001fdc <main+0xe98>
10001f60:	e0bff88b 	ldhu	r2,-30(fp)
10001f64:	10807270 	cmpltui	r2,r2,457
10001f68:	10001c1e 	bne	r2,zero,10001fdc <main+0xe98>
10001f6c:	e0bff88b 	ldhu	r2,-30(fp)
10001f70:	108075a8 	cmpgeui	r2,r2,470
10001f74:	1000191e 	bne	r2,zero,10001fdc <main+0xe98>
				{
					ink = 0xE3E3;
10001f78:	00b8f8d4 	movui	r2,58339
10001f7c:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
10001f80:	00800304 	movi	r2,12
10001f84:	e0bfe215 	stw	r2,-120(fp)
10001f88:	00001006 	br	10001fcc <main+0xe88>
													for(b = 447; b<463; b++)
10001f8c:	00806fc4 	movi	r2,447
10001f90:	e0bfe315 	stw	r2,-116(fp)
10001f94:	00000706 	br	10001fb4 <main+0xe70>
													{
														initialPutPixel(a,b,ink);
10001f98:	e13fe217 	ldw	r4,-120(fp)
10001f9c:	e17fe317 	ldw	r5,-116(fp)
10001fa0:	e1bfe617 	ldw	r6,-104(fp)
10001fa4:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 158 && px <= 170)  && (py >= 457 && py <= 469))
				{
					ink = 0xE3E3;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
10001fa8:	e0bfe317 	ldw	r2,-116(fp)
10001fac:	10800044 	addi	r2,r2,1
10001fb0:	e0bfe315 	stw	r2,-116(fp)
10001fb4:	e0bfe317 	ldw	r2,-116(fp)
10001fb8:	108073d0 	cmplti	r2,r2,463
10001fbc:	103ff61e 	bne	r2,zero,10001f98 <__alt_data_end+0xf8001f98>

				}
				else if((px >= 158 && px <= 170)  && (py >= 457 && py <= 469))
				{
					ink = 0xE3E3;
					for(a = 12; a < 29; a++)
10001fc0:	e0bfe217 	ldw	r2,-120(fp)
10001fc4:	10800044 	addi	r2,r2,1
10001fc8:	e0bfe215 	stw	r2,-120(fp)
10001fcc:	e0bfe217 	ldw	r2,-120(fp)
10001fd0:	10800750 	cmplti	r2,r2,29
10001fd4:	103fed1e 	bne	r2,zero,10001f8c <__alt_data_end+0xf8001f8c>
									initialPutPixel(a,b,ink);
								}


				}
				else if((px >= 158 && px <= 170)  && (py >= 457 && py <= 469))
10001fd8:	0003e906 	br	10002f80 <main+0x1e3c>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 173 && px <= 187)  && (py >= 457 && py <= 469))
10001fdc:	e0bff80b 	ldhu	r2,-32(fp)
10001fe0:	10802b70 	cmpltui	r2,r2,173
10001fe4:	1000221e 	bne	r2,zero,10002070 <main+0xf2c>
10001fe8:	e0bff80b 	ldhu	r2,-32(fp)
10001fec:	10802f28 	cmpgeui	r2,r2,188
10001ff0:	10001f1e 	bne	r2,zero,10002070 <main+0xf2c>
10001ff4:	e0bff88b 	ldhu	r2,-30(fp)
10001ff8:	10807270 	cmpltui	r2,r2,457
10001ffc:	10001c1e 	bne	r2,zero,10002070 <main+0xf2c>
10002000:	e0bff88b 	ldhu	r2,-30(fp)
10002004:	108075a8 	cmpgeui	r2,r2,470
10002008:	1000191e 	bne	r2,zero,10002070 <main+0xf2c>
				{
					ink = 0xFEFE;
1000200c:	00bfbf94 	movui	r2,65278
10002010:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
10002014:	00800304 	movi	r2,12
10002018:	e0bfe215 	stw	r2,-120(fp)
1000201c:	00001006 	br	10002060 <main+0xf1c>
													for(b = 447; b<463; b++)
10002020:	00806fc4 	movi	r2,447
10002024:	e0bfe315 	stw	r2,-116(fp)
10002028:	00000706 	br	10002048 <main+0xf04>
													{
														initialPutPixel(a,b,ink);
1000202c:	e13fe217 	ldw	r4,-120(fp)
10002030:	e17fe317 	ldw	r5,-116(fp)
10002034:	e1bfe617 	ldw	r6,-104(fp)
10002038:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 173 && px <= 187)  && (py >= 457 && py <= 469))
				{
					ink = 0xFEFE;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
1000203c:	e0bfe317 	ldw	r2,-116(fp)
10002040:	10800044 	addi	r2,r2,1
10002044:	e0bfe315 	stw	r2,-116(fp)
10002048:	e0bfe317 	ldw	r2,-116(fp)
1000204c:	108073d0 	cmplti	r2,r2,463
10002050:	103ff61e 	bne	r2,zero,1000202c <__alt_data_end+0xf800202c>

				}
				else if((px >= 173 && px <= 187)  && (py >= 457 && py <= 469))
				{
					ink = 0xFEFE;
					for(a = 12; a < 29; a++)
10002054:	e0bfe217 	ldw	r2,-120(fp)
10002058:	10800044 	addi	r2,r2,1
1000205c:	e0bfe215 	stw	r2,-120(fp)
10002060:	e0bfe217 	ldw	r2,-120(fp)
10002064:	10800750 	cmplti	r2,r2,29
10002068:	103fed1e 	bne	r2,zero,10002020 <__alt_data_end+0xf8002020>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 173 && px <= 187)  && (py >= 457 && py <= 469))
1000206c:	0003c406 	br	10002f80 <main+0x1e3c>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 190 && px <= 203)  && (py >= 457 && py <= 469))
10002070:	e0bff80b 	ldhu	r2,-32(fp)
10002074:	10802fb0 	cmpltui	r2,r2,190
10002078:	1000221e 	bne	r2,zero,10002104 <main+0xfc0>
1000207c:	e0bff80b 	ldhu	r2,-32(fp)
10002080:	10803328 	cmpgeui	r2,r2,204
10002084:	10001f1e 	bne	r2,zero,10002104 <main+0xfc0>
10002088:	e0bff88b 	ldhu	r2,-30(fp)
1000208c:	10807270 	cmpltui	r2,r2,457
10002090:	10001c1e 	bne	r2,zero,10002104 <main+0xfc0>
10002094:	e0bff88b 	ldhu	r2,-30(fp)
10002098:	108075a8 	cmpgeui	r2,r2,470
1000209c:	1000191e 	bne	r2,zero,10002104 <main+0xfc0>
				{
					ink = 0x1E1E;
100020a0:	00878784 	movi	r2,7710
100020a4:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
100020a8:	00800304 	movi	r2,12
100020ac:	e0bfe215 	stw	r2,-120(fp)
100020b0:	00001006 	br	100020f4 <main+0xfb0>
													for(b = 447; b<463; b++)
100020b4:	00806fc4 	movi	r2,447
100020b8:	e0bfe315 	stw	r2,-116(fp)
100020bc:	00000706 	br	100020dc <main+0xf98>
													{
														initialPutPixel(a,b,ink);
100020c0:	e13fe217 	ldw	r4,-120(fp)
100020c4:	e17fe317 	ldw	r5,-116(fp)
100020c8:	e1bfe617 	ldw	r6,-104(fp)
100020cc:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 190 && px <= 203)  && (py >= 457 && py <= 469))
				{
					ink = 0x1E1E;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
100020d0:	e0bfe317 	ldw	r2,-116(fp)
100020d4:	10800044 	addi	r2,r2,1
100020d8:	e0bfe315 	stw	r2,-116(fp)
100020dc:	e0bfe317 	ldw	r2,-116(fp)
100020e0:	108073d0 	cmplti	r2,r2,463
100020e4:	103ff61e 	bne	r2,zero,100020c0 <__alt_data_end+0xf80020c0>

				}
				else if((px >= 190 && px <= 203)  && (py >= 457 && py <= 469))
				{
					ink = 0x1E1E;
					for(a = 12; a < 29; a++)
100020e8:	e0bfe217 	ldw	r2,-120(fp)
100020ec:	10800044 	addi	r2,r2,1
100020f0:	e0bfe215 	stw	r2,-120(fp)
100020f4:	e0bfe217 	ldw	r2,-120(fp)
100020f8:	10800750 	cmplti	r2,r2,29
100020fc:	103fed1e 	bne	r2,zero,100020b4 <__alt_data_end+0xf80020b4>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 190 && px <= 203)  && (py >= 457 && py <= 469))
10002100:	00039f06 	br	10002f80 <main+0x1e3c>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 206 && px <= 219)  && (py >= 457 && py <= 469))
10002104:	e0bff80b 	ldhu	r2,-32(fp)
10002108:	108033b0 	cmpltui	r2,r2,206
1000210c:	1000221e 	bne	r2,zero,10002198 <main+0x1054>
10002110:	e0bff80b 	ldhu	r2,-32(fp)
10002114:	10803728 	cmpgeui	r2,r2,220
10002118:	10001f1e 	bne	r2,zero,10002198 <main+0x1054>
1000211c:	e0bff88b 	ldhu	r2,-30(fp)
10002120:	10807270 	cmpltui	r2,r2,457
10002124:	10001c1e 	bne	r2,zero,10002198 <main+0x1054>
10002128:	e0bff88b 	ldhu	r2,-30(fp)
1000212c:	108075a8 	cmpgeui	r2,r2,470
10002130:	1000191e 	bne	r2,zero,10002198 <main+0x1054>
				{
					ink = 0x9F9F;
10002134:	00a7e7d4 	movui	r2,40863
10002138:	e0bfe615 	stw	r2,-104(fp)

					for(a = 12; a < 29; a++)
1000213c:	00800304 	movi	r2,12
10002140:	e0bfe215 	stw	r2,-120(fp)
10002144:	00001006 	br	10002188 <main+0x1044>
													for(b = 447; b<463; b++)
10002148:	00806fc4 	movi	r2,447
1000214c:	e0bfe315 	stw	r2,-116(fp)
10002150:	00000706 	br	10002170 <main+0x102c>
													{
														initialPutPixel(a,b,ink);
10002154:	e13fe217 	ldw	r4,-120(fp)
10002158:	e17fe317 	ldw	r5,-116(fp)
1000215c:	e1bfe617 	ldw	r6,-104(fp)
10002160:	00002900 	call	10000290 <initialPutPixel>
				else if((px >= 206 && px <= 219)  && (py >= 457 && py <= 469))
				{
					ink = 0x9F9F;

					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
10002164:	e0bfe317 	ldw	r2,-116(fp)
10002168:	10800044 	addi	r2,r2,1
1000216c:	e0bfe315 	stw	r2,-116(fp)
10002170:	e0bfe317 	ldw	r2,-116(fp)
10002174:	108073d0 	cmplti	r2,r2,463
10002178:	103ff61e 	bne	r2,zero,10002154 <__alt_data_end+0xf8002154>
				}
				else if((px >= 206 && px <= 219)  && (py >= 457 && py <= 469))
				{
					ink = 0x9F9F;

					for(a = 12; a < 29; a++)
1000217c:	e0bfe217 	ldw	r2,-120(fp)
10002180:	10800044 	addi	r2,r2,1
10002184:	e0bfe215 	stw	r2,-120(fp)
10002188:	e0bfe217 	ldw	r2,-120(fp)
1000218c:	10800750 	cmplti	r2,r2,29
10002190:	103fed1e 	bne	r2,zero,10002148 <__alt_data_end+0xf8002148>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 206 && px <= 219)  && (py >= 457 && py <= 469))
10002194:	00037a06 	br	10002f80 <main+0x1e3c>
													{
														initialPutPixel(a,b,ink);
													}

				}
				else if((px >= 222 && px <= 235)  && (py >= 457 && py <= 469))
10002198:	e0bff80b 	ldhu	r2,-32(fp)
1000219c:	108037b0 	cmpltui	r2,r2,222
100021a0:	1000221e 	bne	r2,zero,1000222c <main+0x10e8>
100021a4:	e0bff80b 	ldhu	r2,-32(fp)
100021a8:	10803b28 	cmpgeui	r2,r2,236
100021ac:	10001f1e 	bne	r2,zero,1000222c <main+0x10e8>
100021b0:	e0bff88b 	ldhu	r2,-30(fp)
100021b4:	10807270 	cmpltui	r2,r2,457
100021b8:	10001c1e 	bne	r2,zero,1000222c <main+0x10e8>
100021bc:	e0bff88b 	ldhu	r2,-30(fp)
100021c0:	108075a8 	cmpgeui	r2,r2,470
100021c4:	1000191e 	bne	r2,zero,1000222c <main+0x10e8>
				{
					ink = 0x9393;
100021c8:	00a4e4d4 	movui	r2,37779
100021cc:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
100021d0:	00800304 	movi	r2,12
100021d4:	e0bfe215 	stw	r2,-120(fp)
100021d8:	00001006 	br	1000221c <main+0x10d8>
													for(b = 447; b<463; b++)
100021dc:	00806fc4 	movi	r2,447
100021e0:	e0bfe315 	stw	r2,-116(fp)
100021e4:	00000706 	br	10002204 <main+0x10c0>
													{
														initialPutPixel(a,b,ink);
100021e8:	e13fe217 	ldw	r4,-120(fp)
100021ec:	e17fe317 	ldw	r5,-116(fp)
100021f0:	e1bfe617 	ldw	r6,-104(fp)
100021f4:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 222 && px <= 235)  && (py >= 457 && py <= 469))
				{
					ink = 0x9393;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
100021f8:	e0bfe317 	ldw	r2,-116(fp)
100021fc:	10800044 	addi	r2,r2,1
10002200:	e0bfe315 	stw	r2,-116(fp)
10002204:	e0bfe317 	ldw	r2,-116(fp)
10002208:	108073d0 	cmplti	r2,r2,463
1000220c:	103ff61e 	bne	r2,zero,100021e8 <__alt_data_end+0xf80021e8>

				}
				else if((px >= 222 && px <= 235)  && (py >= 457 && py <= 469))
				{
					ink = 0x9393;
					for(a = 12; a < 29; a++)
10002210:	e0bfe217 	ldw	r2,-120(fp)
10002214:	10800044 	addi	r2,r2,1
10002218:	e0bfe215 	stw	r2,-120(fp)
1000221c:	e0bfe217 	ldw	r2,-120(fp)
10002220:	10800750 	cmplti	r2,r2,29
10002224:	103fed1e 	bne	r2,zero,100021dc <__alt_data_end+0xf80021dc>
													{
														initialPutPixel(a,b,ink);
													}

				}
				else if((px >= 222 && px <= 235)  && (py >= 457 && py <= 469))
10002228:	00035506 	br	10002f80 <main+0x1e3c>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 238 && px <= 251)  && (py >= 457 && py <= 469))
1000222c:	e0bff80b 	ldhu	r2,-32(fp)
10002230:	10803bb0 	cmpltui	r2,r2,238
10002234:	1000221e 	bne	r2,zero,100022c0 <main+0x117c>
10002238:	e0bff80b 	ldhu	r2,-32(fp)
1000223c:	10803f28 	cmpgeui	r2,r2,252
10002240:	10001f1e 	bne	r2,zero,100022c0 <main+0x117c>
10002244:	e0bff88b 	ldhu	r2,-30(fp)
10002248:	10807270 	cmpltui	r2,r2,457
1000224c:	10001c1e 	bne	r2,zero,100022c0 <main+0x117c>
10002250:	e0bff88b 	ldhu	r2,-30(fp)
10002254:	108075a8 	cmpgeui	r2,r2,470
10002258:	1000191e 	bne	r2,zero,100022c0 <main+0x117c>
				{
					ink = 0xE2E2;
1000225c:	00b8b894 	movui	r2,58082
10002260:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
10002264:	00800304 	movi	r2,12
10002268:	e0bfe215 	stw	r2,-120(fp)
1000226c:	00001006 	br	100022b0 <main+0x116c>
													for(b = 447; b<463; b++)
10002270:	00806fc4 	movi	r2,447
10002274:	e0bfe315 	stw	r2,-116(fp)
10002278:	00000706 	br	10002298 <main+0x1154>
													{
														initialPutPixel(a,b,ink);
1000227c:	e13fe217 	ldw	r4,-120(fp)
10002280:	e17fe317 	ldw	r5,-116(fp)
10002284:	e1bfe617 	ldw	r6,-104(fp)
10002288:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 238 && px <= 251)  && (py >= 457 && py <= 469))
				{
					ink = 0xE2E2;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
1000228c:	e0bfe317 	ldw	r2,-116(fp)
10002290:	10800044 	addi	r2,r2,1
10002294:	e0bfe315 	stw	r2,-116(fp)
10002298:	e0bfe317 	ldw	r2,-116(fp)
1000229c:	108073d0 	cmplti	r2,r2,463
100022a0:	103ff61e 	bne	r2,zero,1000227c <__alt_data_end+0xf800227c>

				}
				else if((px >= 238 && px <= 251)  && (py >= 457 && py <= 469))
				{
					ink = 0xE2E2;
					for(a = 12; a < 29; a++)
100022a4:	e0bfe217 	ldw	r2,-120(fp)
100022a8:	10800044 	addi	r2,r2,1
100022ac:	e0bfe215 	stw	r2,-120(fp)
100022b0:	e0bfe217 	ldw	r2,-120(fp)
100022b4:	10800750 	cmplti	r2,r2,29
100022b8:	103fed1e 	bne	r2,zero,10002270 <__alt_data_end+0xf8002270>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 238 && px <= 251)  && (py >= 457 && py <= 469))
100022bc:	00033006 	br	10002f80 <main+0x1e3c>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 254 && px <= 267)  && (py >= 457 && py <= 469))
100022c0:	e0bff80b 	ldhu	r2,-32(fp)
100022c4:	10803fb0 	cmpltui	r2,r2,254
100022c8:	1000221e 	bne	r2,zero,10002354 <main+0x1210>
100022cc:	e0bff80b 	ldhu	r2,-32(fp)
100022d0:	10804328 	cmpgeui	r2,r2,268
100022d4:	10001f1e 	bne	r2,zero,10002354 <main+0x1210>
100022d8:	e0bff88b 	ldhu	r2,-30(fp)
100022dc:	10807270 	cmpltui	r2,r2,457
100022e0:	10001c1e 	bne	r2,zero,10002354 <main+0x1210>
100022e4:	e0bff88b 	ldhu	r2,-30(fp)
100022e8:	108075a8 	cmpgeui	r2,r2,470
100022ec:	1000191e 	bne	r2,zero,10002354 <main+0x1210>
				{
					ink = 0xF1F1;
100022f0:	00bc7c54 	movui	r2,61937
100022f4:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
100022f8:	00800304 	movi	r2,12
100022fc:	e0bfe215 	stw	r2,-120(fp)
10002300:	00001006 	br	10002344 <main+0x1200>
													for(b = 447; b<463; b++)
10002304:	00806fc4 	movi	r2,447
10002308:	e0bfe315 	stw	r2,-116(fp)
1000230c:	00000706 	br	1000232c <main+0x11e8>
													{
														initialPutPixel(a,b,ink);
10002310:	e13fe217 	ldw	r4,-120(fp)
10002314:	e17fe317 	ldw	r5,-116(fp)
10002318:	e1bfe617 	ldw	r6,-104(fp)
1000231c:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 254 && px <= 267)  && (py >= 457 && py <= 469))
				{
					ink = 0xF1F1;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
10002320:	e0bfe317 	ldw	r2,-116(fp)
10002324:	10800044 	addi	r2,r2,1
10002328:	e0bfe315 	stw	r2,-116(fp)
1000232c:	e0bfe317 	ldw	r2,-116(fp)
10002330:	108073d0 	cmplti	r2,r2,463
10002334:	103ff61e 	bne	r2,zero,10002310 <__alt_data_end+0xf8002310>

				}
				else if((px >= 254 && px <= 267)  && (py >= 457 && py <= 469))
				{
					ink = 0xF1F1;
					for(a = 12; a < 29; a++)
10002338:	e0bfe217 	ldw	r2,-120(fp)
1000233c:	10800044 	addi	r2,r2,1
10002340:	e0bfe215 	stw	r2,-120(fp)
10002344:	e0bfe217 	ldw	r2,-120(fp)
10002348:	10800750 	cmplti	r2,r2,29
1000234c:	103fed1e 	bne	r2,zero,10002304 <__alt_data_end+0xf8002304>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 254 && px <= 267)  && (py >= 457 && py <= 469))
10002350:	00030b06 	br	10002f80 <main+0x1e3c>


				}

				//Top row
				else if((px >= 45 && px <= 59)  && (py >= 441 && py <= 452))
10002354:	e0bff80b 	ldhu	r2,-32(fp)
10002358:	10800b70 	cmpltui	r2,r2,45
1000235c:	1000211e 	bne	r2,zero,100023e4 <main+0x12a0>
10002360:	e0bff80b 	ldhu	r2,-32(fp)
10002364:	10800f28 	cmpgeui	r2,r2,60
10002368:	10001e1e 	bne	r2,zero,100023e4 <main+0x12a0>
1000236c:	e0bff88b 	ldhu	r2,-30(fp)
10002370:	10806e70 	cmpltui	r2,r2,441
10002374:	10001b1e 	bne	r2,zero,100023e4 <main+0x12a0>
10002378:	e0bff88b 	ldhu	r2,-30(fp)
1000237c:	10807168 	cmpgeui	r2,r2,453
10002380:	1000181e 	bne	r2,zero,100023e4 <main+0x12a0>
				{
					ink = 0x0000;
10002384:	e03fe615 	stw	zero,-104(fp)
					for(a = 12; a < 29; a++)
10002388:	00800304 	movi	r2,12
1000238c:	e0bfe215 	stw	r2,-120(fp)
10002390:	00001006 	br	100023d4 <main+0x1290>
													for(b = 447; b<463; b++)
10002394:	00806fc4 	movi	r2,447
10002398:	e0bfe315 	stw	r2,-116(fp)
1000239c:	00000706 	br	100023bc <main+0x1278>
													{
														initialPutPixel(a,b,ink);
100023a0:	e13fe217 	ldw	r4,-120(fp)
100023a4:	e17fe317 	ldw	r5,-116(fp)
100023a8:	e1bfe617 	ldw	r6,-104(fp)
100023ac:	00002900 	call	10000290 <initialPutPixel>
				//Top row
				else if((px >= 45 && px <= 59)  && (py >= 441 && py <= 452))
				{
					ink = 0x0000;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
100023b0:	e0bfe317 	ldw	r2,-116(fp)
100023b4:	10800044 	addi	r2,r2,1
100023b8:	e0bfe315 	stw	r2,-116(fp)
100023bc:	e0bfe317 	ldw	r2,-116(fp)
100023c0:	108073d0 	cmplti	r2,r2,463
100023c4:	103ff61e 	bne	r2,zero,100023a0 <__alt_data_end+0xf80023a0>

				//Top row
				else if((px >= 45 && px <= 59)  && (py >= 441 && py <= 452))
				{
					ink = 0x0000;
					for(a = 12; a < 29; a++)
100023c8:	e0bfe217 	ldw	r2,-120(fp)
100023cc:	10800044 	addi	r2,r2,1
100023d0:	e0bfe215 	stw	r2,-120(fp)
100023d4:	e0bfe217 	ldw	r2,-120(fp)
100023d8:	10800750 	cmplti	r2,r2,29
100023dc:	103fed1e 	bne	r2,zero,10002394 <__alt_data_end+0xf8002394>


				}

				//Top row
				else if((px >= 45 && px <= 59)  && (py >= 441 && py <= 452))
100023e0:	0002e706 	br	10002f80 <main+0x1e3c>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 62 && px <= 74)  && (py >= 441 && py <= 452))
100023e4:	e0bff80b 	ldhu	r2,-32(fp)
100023e8:	10800fb0 	cmpltui	r2,r2,62
100023ec:	1000221e 	bne	r2,zero,10002478 <main+0x1334>
100023f0:	e0bff80b 	ldhu	r2,-32(fp)
100023f4:	108012e8 	cmpgeui	r2,r2,75
100023f8:	10001f1e 	bne	r2,zero,10002478 <main+0x1334>
100023fc:	e0bff88b 	ldhu	r2,-30(fp)
10002400:	10806e70 	cmpltui	r2,r2,441
10002404:	10001c1e 	bne	r2,zero,10002478 <main+0x1334>
10002408:	e0bff88b 	ldhu	r2,-30(fp)
1000240c:	10807168 	cmpgeui	r2,r2,453
10002410:	1000191e 	bne	r2,zero,10002478 <main+0x1334>
				{
					ink = 0x9292;
10002414:	00a4a494 	movui	r2,37522
10002418:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
1000241c:	00800304 	movi	r2,12
10002420:	e0bfe215 	stw	r2,-120(fp)
10002424:	00001006 	br	10002468 <main+0x1324>
													for(b = 447; b<463; b++)
10002428:	00806fc4 	movi	r2,447
1000242c:	e0bfe315 	stw	r2,-116(fp)
10002430:	00000706 	br	10002450 <main+0x130c>
													{
														initialPutPixel(a,b,ink);
10002434:	e13fe217 	ldw	r4,-120(fp)
10002438:	e17fe317 	ldw	r5,-116(fp)
1000243c:	e1bfe617 	ldw	r6,-104(fp)
10002440:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 62 && px <= 74)  && (py >= 441 && py <= 452))
				{
					ink = 0x9292;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
10002444:	e0bfe317 	ldw	r2,-116(fp)
10002448:	10800044 	addi	r2,r2,1
1000244c:	e0bfe315 	stw	r2,-116(fp)
10002450:	e0bfe317 	ldw	r2,-116(fp)
10002454:	108073d0 	cmplti	r2,r2,463
10002458:	103ff61e 	bne	r2,zero,10002434 <__alt_data_end+0xf8002434>

				}
				else if((px >= 62 && px <= 74)  && (py >= 441 && py <= 452))
				{
					ink = 0x9292;
					for(a = 12; a < 29; a++)
1000245c:	e0bfe217 	ldw	r2,-120(fp)
10002460:	10800044 	addi	r2,r2,1
10002464:	e0bfe215 	stw	r2,-120(fp)
10002468:	e0bfe217 	ldw	r2,-120(fp)
1000246c:	10800750 	cmplti	r2,r2,29
10002470:	103fed1e 	bne	r2,zero,10002428 <__alt_data_end+0xf8002428>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 62 && px <= 74)  && (py >= 441 && py <= 452))
10002474:	0002c206 	br	10002f80 <main+0x1e3c>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 78 && px <= 90)  && (py >= 441 && py <= 452))
10002478:	e0bff80b 	ldhu	r2,-32(fp)
1000247c:	108013b0 	cmpltui	r2,r2,78
10002480:	1000221e 	bne	r2,zero,1000250c <main+0x13c8>
10002484:	e0bff80b 	ldhu	r2,-32(fp)
10002488:	108016e8 	cmpgeui	r2,r2,91
1000248c:	10001f1e 	bne	r2,zero,1000250c <main+0x13c8>
10002490:	e0bff88b 	ldhu	r2,-30(fp)
10002494:	10806e70 	cmpltui	r2,r2,441
10002498:	10001c1e 	bne	r2,zero,1000250c <main+0x13c8>
1000249c:	e0bff88b 	ldhu	r2,-30(fp)
100024a0:	10807168 	cmpgeui	r2,r2,453
100024a4:	1000191e 	bne	r2,zero,1000250c <main+0x13c8>
				{
					ink = 0x8080;
100024a8:	00a02014 	movui	r2,32896
100024ac:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
100024b0:	00800304 	movi	r2,12
100024b4:	e0bfe215 	stw	r2,-120(fp)
100024b8:	00001006 	br	100024fc <main+0x13b8>
													for(b = 447; b<463; b++)
100024bc:	00806fc4 	movi	r2,447
100024c0:	e0bfe315 	stw	r2,-116(fp)
100024c4:	00000706 	br	100024e4 <main+0x13a0>
													{
														initialPutPixel(a,b,ink);
100024c8:	e13fe217 	ldw	r4,-120(fp)
100024cc:	e17fe317 	ldw	r5,-116(fp)
100024d0:	e1bfe617 	ldw	r6,-104(fp)
100024d4:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 78 && px <= 90)  && (py >= 441 && py <= 452))
				{
					ink = 0x8080;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
100024d8:	e0bfe317 	ldw	r2,-116(fp)
100024dc:	10800044 	addi	r2,r2,1
100024e0:	e0bfe315 	stw	r2,-116(fp)
100024e4:	e0bfe317 	ldw	r2,-116(fp)
100024e8:	108073d0 	cmplti	r2,r2,463
100024ec:	103ff61e 	bne	r2,zero,100024c8 <__alt_data_end+0xf80024c8>

				}
				else if((px >= 78 && px <= 90)  && (py >= 441 && py <= 452))
				{
					ink = 0x8080;
					for(a = 12; a < 29; a++)
100024f0:	e0bfe217 	ldw	r2,-120(fp)
100024f4:	10800044 	addi	r2,r2,1
100024f8:	e0bfe215 	stw	r2,-120(fp)
100024fc:	e0bfe217 	ldw	r2,-120(fp)
10002500:	10800750 	cmplti	r2,r2,29
10002504:	103fed1e 	bne	r2,zero,100024bc <__alt_data_end+0xf80024bc>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 78 && px <= 90)  && (py >= 441 && py <= 452))
10002508:	00029d06 	br	10002f80 <main+0x1e3c>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 94 && px <= 107)  && (py >= 441 && py <= 452))
1000250c:	e0bff80b 	ldhu	r2,-32(fp)
10002510:	108017b0 	cmpltui	r2,r2,94
10002514:	1000221e 	bne	r2,zero,100025a0 <main+0x145c>
10002518:	e0bff80b 	ldhu	r2,-32(fp)
1000251c:	10801b28 	cmpgeui	r2,r2,108
10002520:	10001f1e 	bne	r2,zero,100025a0 <main+0x145c>
10002524:	e0bff88b 	ldhu	r2,-30(fp)
10002528:	10806e70 	cmpltui	r2,r2,441
1000252c:	10001c1e 	bne	r2,zero,100025a0 <main+0x145c>
10002530:	e0bff88b 	ldhu	r2,-30(fp)
10002534:	10807168 	cmpgeui	r2,r2,453
10002538:	1000191e 	bne	r2,zero,100025a0 <main+0x145c>
				{
					ink = 0x9090;
1000253c:	00a42414 	movui	r2,37008
10002540:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
10002544:	00800304 	movi	r2,12
10002548:	e0bfe215 	stw	r2,-120(fp)
1000254c:	00001006 	br	10002590 <main+0x144c>
													for(b = 447; b<463; b++)
10002550:	00806fc4 	movi	r2,447
10002554:	e0bfe315 	stw	r2,-116(fp)
10002558:	00000706 	br	10002578 <main+0x1434>
													{
														initialPutPixel(a,b,ink);
1000255c:	e13fe217 	ldw	r4,-120(fp)
10002560:	e17fe317 	ldw	r5,-116(fp)
10002564:	e1bfe617 	ldw	r6,-104(fp)
10002568:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 94 && px <= 107)  && (py >= 441 && py <= 452))
				{
					ink = 0x9090;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
1000256c:	e0bfe317 	ldw	r2,-116(fp)
10002570:	10800044 	addi	r2,r2,1
10002574:	e0bfe315 	stw	r2,-116(fp)
10002578:	e0bfe317 	ldw	r2,-116(fp)
1000257c:	108073d0 	cmplti	r2,r2,463
10002580:	103ff61e 	bne	r2,zero,1000255c <__alt_data_end+0xf800255c>

				}
				else if((px >= 94 && px <= 107)  && (py >= 441 && py <= 452))
				{
					ink = 0x9090;
					for(a = 12; a < 29; a++)
10002584:	e0bfe217 	ldw	r2,-120(fp)
10002588:	10800044 	addi	r2,r2,1
1000258c:	e0bfe215 	stw	r2,-120(fp)
10002590:	e0bfe217 	ldw	r2,-120(fp)
10002594:	10800750 	cmplti	r2,r2,29
10002598:	103fed1e 	bne	r2,zero,10002550 <__alt_data_end+0xf8002550>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 94 && px <= 107)  && (py >= 441 && py <= 452))
1000259c:	00027806 	br	10002f80 <main+0x1e3c>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 109 && px <= 122)  && (py >= 441 && py <= 452))
100025a0:	e0bff80b 	ldhu	r2,-32(fp)
100025a4:	10801b70 	cmpltui	r2,r2,109
100025a8:	1000221e 	bne	r2,zero,10002634 <main+0x14f0>
100025ac:	e0bff80b 	ldhu	r2,-32(fp)
100025b0:	10801ee8 	cmpgeui	r2,r2,123
100025b4:	10001f1e 	bne	r2,zero,10002634 <main+0x14f0>
100025b8:	e0bff88b 	ldhu	r2,-30(fp)
100025bc:	10806e70 	cmpltui	r2,r2,441
100025c0:	10001c1e 	bne	r2,zero,10002634 <main+0x14f0>
100025c4:	e0bff88b 	ldhu	r2,-30(fp)
100025c8:	10807168 	cmpgeui	r2,r2,453
100025cc:	1000191e 	bne	r2,zero,10002634 <main+0x14f0>
				{
					ink = 0x1010;
100025d0:	00840404 	movi	r2,4112
100025d4:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
100025d8:	00800304 	movi	r2,12
100025dc:	e0bfe215 	stw	r2,-120(fp)
100025e0:	00001006 	br	10002624 <main+0x14e0>
													for(b = 447; b<463; b++)
100025e4:	00806fc4 	movi	r2,447
100025e8:	e0bfe315 	stw	r2,-116(fp)
100025ec:	00000706 	br	1000260c <main+0x14c8>
													{
														initialPutPixel(a,b,ink);
100025f0:	e13fe217 	ldw	r4,-120(fp)
100025f4:	e17fe317 	ldw	r5,-116(fp)
100025f8:	e1bfe617 	ldw	r6,-104(fp)
100025fc:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 109 && px <= 122)  && (py >= 441 && py <= 452))
				{
					ink = 0x1010;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
10002600:	e0bfe317 	ldw	r2,-116(fp)
10002604:	10800044 	addi	r2,r2,1
10002608:	e0bfe315 	stw	r2,-116(fp)
1000260c:	e0bfe317 	ldw	r2,-116(fp)
10002610:	108073d0 	cmplti	r2,r2,463
10002614:	103ff61e 	bne	r2,zero,100025f0 <__alt_data_end+0xf80025f0>

				}
				else if((px >= 109 && px <= 122)  && (py >= 441 && py <= 452))
				{
					ink = 0x1010;
					for(a = 12; a < 29; a++)
10002618:	e0bfe217 	ldw	r2,-120(fp)
1000261c:	10800044 	addi	r2,r2,1
10002620:	e0bfe215 	stw	r2,-120(fp)
10002624:	e0bfe217 	ldw	r2,-120(fp)
10002628:	10800750 	cmplti	r2,r2,29
1000262c:	103fed1e 	bne	r2,zero,100025e4 <__alt_data_end+0xf80025e4>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 109 && px <= 122)  && (py >= 441 && py <= 452))
10002630:	00025306 	br	10002f80 <main+0x1e3c>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 126 && px <= 139)  && (py >= 441 && py <= 452))
10002634:	e0bff80b 	ldhu	r2,-32(fp)
10002638:	10801fb0 	cmpltui	r2,r2,126
1000263c:	1000221e 	bne	r2,zero,100026c8 <main+0x1584>
10002640:	e0bff80b 	ldhu	r2,-32(fp)
10002644:	10802328 	cmpgeui	r2,r2,140
10002648:	10001f1e 	bne	r2,zero,100026c8 <main+0x1584>
1000264c:	e0bff88b 	ldhu	r2,-30(fp)
10002650:	10806e70 	cmpltui	r2,r2,441
10002654:	10001c1e 	bne	r2,zero,100026c8 <main+0x1584>
10002658:	e0bff88b 	ldhu	r2,-30(fp)
1000265c:	10807168 	cmpgeui	r2,r2,453
10002660:	1000191e 	bne	r2,zero,100026c8 <main+0x1584>
				{
					ink = 0x1212;
10002664:	00848484 	movi	r2,4626
10002668:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
1000266c:	00800304 	movi	r2,12
10002670:	e0bfe215 	stw	r2,-120(fp)
10002674:	00001006 	br	100026b8 <main+0x1574>
													for(b = 447; b<463; b++)
10002678:	00806fc4 	movi	r2,447
1000267c:	e0bfe315 	stw	r2,-116(fp)
10002680:	00000706 	br	100026a0 <main+0x155c>
													{
														initialPutPixel(a,b,ink);
10002684:	e13fe217 	ldw	r4,-120(fp)
10002688:	e17fe317 	ldw	r5,-116(fp)
1000268c:	e1bfe617 	ldw	r6,-104(fp)
10002690:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 126 && px <= 139)  && (py >= 441 && py <= 452))
				{
					ink = 0x1212;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
10002694:	e0bfe317 	ldw	r2,-116(fp)
10002698:	10800044 	addi	r2,r2,1
1000269c:	e0bfe315 	stw	r2,-116(fp)
100026a0:	e0bfe317 	ldw	r2,-116(fp)
100026a4:	108073d0 	cmplti	r2,r2,463
100026a8:	103ff61e 	bne	r2,zero,10002684 <__alt_data_end+0xf8002684>

				}
				else if((px >= 126 && px <= 139)  && (py >= 441 && py <= 452))
				{
					ink = 0x1212;
					for(a = 12; a < 29; a++)
100026ac:	e0bfe217 	ldw	r2,-120(fp)
100026b0:	10800044 	addi	r2,r2,1
100026b4:	e0bfe215 	stw	r2,-120(fp)
100026b8:	e0bfe217 	ldw	r2,-120(fp)
100026bc:	10800750 	cmplti	r2,r2,29
100026c0:	103fed1e 	bne	r2,zero,10002678 <__alt_data_end+0xf8002678>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 126 && px <= 139)  && (py >= 441 && py <= 452))
100026c4:	00022e06 	br	10002f80 <main+0x1e3c>
													{
														initialPutPixel(a,b,ink);
													}

				}
				else if((px >= 142 && px <= 155)  && (py >= 441 && py <= 452))
100026c8:	e0bff80b 	ldhu	r2,-32(fp)
100026cc:	108023b0 	cmpltui	r2,r2,142
100026d0:	1000221e 	bne	r2,zero,1000275c <main+0x1618>
100026d4:	e0bff80b 	ldhu	r2,-32(fp)
100026d8:	10802728 	cmpgeui	r2,r2,156
100026dc:	10001f1e 	bne	r2,zero,1000275c <main+0x1618>
100026e0:	e0bff88b 	ldhu	r2,-30(fp)
100026e4:	10806e70 	cmpltui	r2,r2,441
100026e8:	10001c1e 	bne	r2,zero,1000275c <main+0x1618>
100026ec:	e0bff88b 	ldhu	r2,-30(fp)
100026f0:	10807168 	cmpgeui	r2,r2,453
100026f4:	1000191e 	bne	r2,zero,1000275c <main+0x1618>
				{
					ink = 0x0202;
100026f8:	00808084 	movi	r2,514
100026fc:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
10002700:	00800304 	movi	r2,12
10002704:	e0bfe215 	stw	r2,-120(fp)
10002708:	00001006 	br	1000274c <main+0x1608>
													for(b = 447; b<463; b++)
1000270c:	00806fc4 	movi	r2,447
10002710:	e0bfe315 	stw	r2,-116(fp)
10002714:	00000706 	br	10002734 <main+0x15f0>
													{
														initialPutPixel(a,b,ink);
10002718:	e13fe217 	ldw	r4,-120(fp)
1000271c:	e17fe317 	ldw	r5,-116(fp)
10002720:	e1bfe617 	ldw	r6,-104(fp)
10002724:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 142 && px <= 155)  && (py >= 441 && py <= 452))
				{
					ink = 0x0202;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
10002728:	e0bfe317 	ldw	r2,-116(fp)
1000272c:	10800044 	addi	r2,r2,1
10002730:	e0bfe315 	stw	r2,-116(fp)
10002734:	e0bfe317 	ldw	r2,-116(fp)
10002738:	108073d0 	cmplti	r2,r2,463
1000273c:	103ff61e 	bne	r2,zero,10002718 <__alt_data_end+0xf8002718>

				}
				else if((px >= 142 && px <= 155)  && (py >= 441 && py <= 452))
				{
					ink = 0x0202;
					for(a = 12; a < 29; a++)
10002740:	e0bfe217 	ldw	r2,-120(fp)
10002744:	10800044 	addi	r2,r2,1
10002748:	e0bfe215 	stw	r2,-120(fp)
1000274c:	e0bfe217 	ldw	r2,-120(fp)
10002750:	10800750 	cmplti	r2,r2,29
10002754:	103fed1e 	bne	r2,zero,1000270c <__alt_data_end+0xf800270c>
													{
														initialPutPixel(a,b,ink);
													}

				}
				else if((px >= 142 && px <= 155)  && (py >= 441 && py <= 452))
10002758:	00020906 	br	10002f80 <main+0x1e3c>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 158 && px <= 170)  && (py >= 441 && py <= 452))
1000275c:	e0bff80b 	ldhu	r2,-32(fp)
10002760:	108027b0 	cmpltui	r2,r2,158
10002764:	1000221e 	bne	r2,zero,100027f0 <main+0x16ac>
10002768:	e0bff80b 	ldhu	r2,-32(fp)
1000276c:	10802ae8 	cmpgeui	r2,r2,171
10002770:	10001f1e 	bne	r2,zero,100027f0 <main+0x16ac>
10002774:	e0bff88b 	ldhu	r2,-30(fp)
10002778:	10806e70 	cmpltui	r2,r2,441
1000277c:	10001c1e 	bne	r2,zero,100027f0 <main+0x16ac>
10002780:	e0bff88b 	ldhu	r2,-30(fp)
10002784:	10807168 	cmpgeui	r2,r2,453
10002788:	1000191e 	bne	r2,zero,100027f0 <main+0x16ac>
				{
					ink = 0x8282;
1000278c:	00a0a094 	movui	r2,33410
10002790:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
10002794:	00800304 	movi	r2,12
10002798:	e0bfe215 	stw	r2,-120(fp)
1000279c:	00001006 	br	100027e0 <main+0x169c>
													for(b = 447; b<463; b++)
100027a0:	00806fc4 	movi	r2,447
100027a4:	e0bfe315 	stw	r2,-116(fp)
100027a8:	00000706 	br	100027c8 <main+0x1684>
													{
														initialPutPixel(a,b,ink);
100027ac:	e13fe217 	ldw	r4,-120(fp)
100027b0:	e17fe317 	ldw	r5,-116(fp)
100027b4:	e1bfe617 	ldw	r6,-104(fp)
100027b8:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 158 && px <= 170)  && (py >= 441 && py <= 452))
				{
					ink = 0x8282;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
100027bc:	e0bfe317 	ldw	r2,-116(fp)
100027c0:	10800044 	addi	r2,r2,1
100027c4:	e0bfe315 	stw	r2,-116(fp)
100027c8:	e0bfe317 	ldw	r2,-116(fp)
100027cc:	108073d0 	cmplti	r2,r2,463
100027d0:	103ff61e 	bne	r2,zero,100027ac <__alt_data_end+0xf80027ac>

				}
				else if((px >= 158 && px <= 170)  && (py >= 441 && py <= 452))
				{
					ink = 0x8282;
					for(a = 12; a < 29; a++)
100027d4:	e0bfe217 	ldw	r2,-120(fp)
100027d8:	10800044 	addi	r2,r2,1
100027dc:	e0bfe215 	stw	r2,-120(fp)
100027e0:	e0bfe217 	ldw	r2,-120(fp)
100027e4:	10800750 	cmplti	r2,r2,29
100027e8:	103fed1e 	bne	r2,zero,100027a0 <__alt_data_end+0xf80027a0>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 158 && px <= 170)  && (py >= 441 && py <= 452))
100027ec:	0001e406 	br	10002f80 <main+0x1e3c>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 173 && px <= 187)  && (py >= 441 && py <= 452))
100027f0:	e0bff80b 	ldhu	r2,-32(fp)
100027f4:	10802b70 	cmpltui	r2,r2,173
100027f8:	1000221e 	bne	r2,zero,10002884 <main+0x1740>
100027fc:	e0bff80b 	ldhu	r2,-32(fp)
10002800:	10802f28 	cmpgeui	r2,r2,188
10002804:	10001f1e 	bne	r2,zero,10002884 <main+0x1740>
10002808:	e0bff88b 	ldhu	r2,-30(fp)
1000280c:	10806e70 	cmpltui	r2,r2,441
10002810:	10001c1e 	bne	r2,zero,10002884 <main+0x1740>
10002814:	e0bff88b 	ldhu	r2,-30(fp)
10002818:	10807168 	cmpgeui	r2,r2,453
1000281c:	1000191e 	bne	r2,zero,10002884 <main+0x1740>
				{
					ink = 0x9191;
10002820:	00a46454 	movui	r2,37265
10002824:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
10002828:	00800304 	movi	r2,12
1000282c:	e0bfe215 	stw	r2,-120(fp)
10002830:	00001006 	br	10002874 <main+0x1730>
													for(b = 447; b<463; b++)
10002834:	00806fc4 	movi	r2,447
10002838:	e0bfe315 	stw	r2,-116(fp)
1000283c:	00000706 	br	1000285c <main+0x1718>
													{
														initialPutPixel(a,b,ink);
10002840:	e13fe217 	ldw	r4,-120(fp)
10002844:	e17fe317 	ldw	r5,-116(fp)
10002848:	e1bfe617 	ldw	r6,-104(fp)
1000284c:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 173 && px <= 187)  && (py >= 441 && py <= 452))
				{
					ink = 0x9191;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
10002850:	e0bfe317 	ldw	r2,-116(fp)
10002854:	10800044 	addi	r2,r2,1
10002858:	e0bfe315 	stw	r2,-116(fp)
1000285c:	e0bfe317 	ldw	r2,-116(fp)
10002860:	108073d0 	cmplti	r2,r2,463
10002864:	103ff61e 	bne	r2,zero,10002840 <__alt_data_end+0xf8002840>

				}
				else if((px >= 173 && px <= 187)  && (py >= 441 && py <= 452))
				{
					ink = 0x9191;
					for(a = 12; a < 29; a++)
10002868:	e0bfe217 	ldw	r2,-120(fp)
1000286c:	10800044 	addi	r2,r2,1
10002870:	e0bfe215 	stw	r2,-120(fp)
10002874:	e0bfe217 	ldw	r2,-120(fp)
10002878:	10800750 	cmplti	r2,r2,29
1000287c:	103fed1e 	bne	r2,zero,10002834 <__alt_data_end+0xf8002834>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 173 && px <= 187)  && (py >= 441 && py <= 452))
10002880:	0001bf06 	br	10002f80 <main+0x1e3c>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 190 && px <= 203)  && (py >= 441 && py <= 452))
10002884:	e0bff80b 	ldhu	r2,-32(fp)
10002888:	10802fb0 	cmpltui	r2,r2,190
1000288c:	1000221e 	bne	r2,zero,10002918 <main+0x17d4>
10002890:	e0bff80b 	ldhu	r2,-32(fp)
10002894:	10803328 	cmpgeui	r2,r2,204
10002898:	10001f1e 	bne	r2,zero,10002918 <main+0x17d4>
1000289c:	e0bff88b 	ldhu	r2,-30(fp)
100028a0:	10806e70 	cmpltui	r2,r2,441
100028a4:	10001c1e 	bne	r2,zero,10002918 <main+0x17d4>
100028a8:	e0bff88b 	ldhu	r2,-30(fp)
100028ac:	10807168 	cmpgeui	r2,r2,453
100028b0:	1000191e 	bne	r2,zero,10002918 <main+0x17d4>
				{
					ink = 0x0909;
100028b4:	00824244 	movi	r2,2313
100028b8:	e0bfe615 	stw	r2,-104(fp)

					for(a = 12; a < 29; a++)
100028bc:	00800304 	movi	r2,12
100028c0:	e0bfe215 	stw	r2,-120(fp)
100028c4:	00001006 	br	10002908 <main+0x17c4>
													for(b = 447; b<463; b++)
100028c8:	00806fc4 	movi	r2,447
100028cc:	e0bfe315 	stw	r2,-116(fp)
100028d0:	00000706 	br	100028f0 <main+0x17ac>
													{
														initialPutPixel(a,b,ink);
100028d4:	e13fe217 	ldw	r4,-120(fp)
100028d8:	e17fe317 	ldw	r5,-116(fp)
100028dc:	e1bfe617 	ldw	r6,-104(fp)
100028e0:	00002900 	call	10000290 <initialPutPixel>
				else if((px >= 190 && px <= 203)  && (py >= 441 && py <= 452))
				{
					ink = 0x0909;

					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
100028e4:	e0bfe317 	ldw	r2,-116(fp)
100028e8:	10800044 	addi	r2,r2,1
100028ec:	e0bfe315 	stw	r2,-116(fp)
100028f0:	e0bfe317 	ldw	r2,-116(fp)
100028f4:	108073d0 	cmplti	r2,r2,463
100028f8:	103ff61e 	bne	r2,zero,100028d4 <__alt_data_end+0xf80028d4>
				}
				else if((px >= 190 && px <= 203)  && (py >= 441 && py <= 452))
				{
					ink = 0x0909;

					for(a = 12; a < 29; a++)
100028fc:	e0bfe217 	ldw	r2,-120(fp)
10002900:	10800044 	addi	r2,r2,1
10002904:	e0bfe215 	stw	r2,-120(fp)
10002908:	e0bfe217 	ldw	r2,-120(fp)
1000290c:	10800750 	cmplti	r2,r2,29
10002910:	103fed1e 	bne	r2,zero,100028c8 <__alt_data_end+0xf80028c8>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 190 && px <= 203)  && (py >= 441 && py <= 452))
10002914:	00019a06 	br	10002f80 <main+0x1e3c>
													{
														initialPutPixel(a,b,ink);
													}

				}
				else if((px >= 206 && px <= 219)  && (py >= 441 && py <= 452))
10002918:	e0bff80b 	ldhu	r2,-32(fp)
1000291c:	108033b0 	cmpltui	r2,r2,206
10002920:	1000221e 	bne	r2,zero,100029ac <main+0x1868>
10002924:	e0bff80b 	ldhu	r2,-32(fp)
10002928:	10803728 	cmpgeui	r2,r2,220
1000292c:	10001f1e 	bne	r2,zero,100029ac <main+0x1868>
10002930:	e0bff88b 	ldhu	r2,-30(fp)
10002934:	10806e70 	cmpltui	r2,r2,441
10002938:	10001c1e 	bne	r2,zero,100029ac <main+0x1868>
1000293c:	e0bff88b 	ldhu	r2,-30(fp)
10002940:	10807168 	cmpgeui	r2,r2,453
10002944:	1000191e 	bne	r2,zero,100029ac <main+0x1868>
				{
					ink = 0x1313;
10002948:	0084c4c4 	movi	r2,4883
1000294c:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
10002950:	00800304 	movi	r2,12
10002954:	e0bfe215 	stw	r2,-120(fp)
10002958:	00001006 	br	1000299c <main+0x1858>
													for(b = 447; b<463; b++)
1000295c:	00806fc4 	movi	r2,447
10002960:	e0bfe315 	stw	r2,-116(fp)
10002964:	00000706 	br	10002984 <main+0x1840>
													{
														initialPutPixel(a,b,ink);
10002968:	e13fe217 	ldw	r4,-120(fp)
1000296c:	e17fe317 	ldw	r5,-116(fp)
10002970:	e1bfe617 	ldw	r6,-104(fp)
10002974:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 206 && px <= 219)  && (py >= 441 && py <= 452))
				{
					ink = 0x1313;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
10002978:	e0bfe317 	ldw	r2,-116(fp)
1000297c:	10800044 	addi	r2,r2,1
10002980:	e0bfe315 	stw	r2,-116(fp)
10002984:	e0bfe317 	ldw	r2,-116(fp)
10002988:	108073d0 	cmplti	r2,r2,463
1000298c:	103ff61e 	bne	r2,zero,10002968 <__alt_data_end+0xf8002968>

				}
				else if((px >= 206 && px <= 219)  && (py >= 441 && py <= 452))
				{
					ink = 0x1313;
					for(a = 12; a < 29; a++)
10002990:	e0bfe217 	ldw	r2,-120(fp)
10002994:	10800044 	addi	r2,r2,1
10002998:	e0bfe215 	stw	r2,-120(fp)
1000299c:	e0bfe217 	ldw	r2,-120(fp)
100029a0:	10800750 	cmplti	r2,r2,29
100029a4:	103fed1e 	bne	r2,zero,1000295c <__alt_data_end+0xf800295c>
													{
														initialPutPixel(a,b,ink);
													}

				}
				else if((px >= 206 && px <= 219)  && (py >= 441 && py <= 452))
100029a8:	00017506 	br	10002f80 <main+0x1e3c>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 222 && px <= 235)  && (py >= 441 && py <= 452))
100029ac:	e0bff80b 	ldhu	r2,-32(fp)
100029b0:	108037b0 	cmpltui	r2,r2,222
100029b4:	1000221e 	bne	r2,zero,10002a40 <main+0x18fc>
100029b8:	e0bff80b 	ldhu	r2,-32(fp)
100029bc:	10803b28 	cmpgeui	r2,r2,236
100029c0:	10001f1e 	bne	r2,zero,10002a40 <main+0x18fc>
100029c4:	e0bff88b 	ldhu	r2,-30(fp)
100029c8:	10806e70 	cmpltui	r2,r2,441
100029cc:	10001c1e 	bne	r2,zero,10002a40 <main+0x18fc>
100029d0:	e0bff88b 	ldhu	r2,-30(fp)
100029d4:	10807168 	cmpgeui	r2,r2,453
100029d8:	1000191e 	bne	r2,zero,10002a40 <main+0x18fc>
				{
					ink = 0x0A0A;
100029dc:	00828284 	movi	r2,2570
100029e0:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
100029e4:	00800304 	movi	r2,12
100029e8:	e0bfe215 	stw	r2,-120(fp)
100029ec:	00001006 	br	10002a30 <main+0x18ec>
													for(b = 447; b<463; b++)
100029f0:	00806fc4 	movi	r2,447
100029f4:	e0bfe315 	stw	r2,-116(fp)
100029f8:	00000706 	br	10002a18 <main+0x18d4>
													{
														initialPutPixel(a,b,ink);
100029fc:	e13fe217 	ldw	r4,-120(fp)
10002a00:	e17fe317 	ldw	r5,-116(fp)
10002a04:	e1bfe617 	ldw	r6,-104(fp)
10002a08:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 222 && px <= 235)  && (py >= 441 && py <= 452))
				{
					ink = 0x0A0A;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
10002a0c:	e0bfe317 	ldw	r2,-116(fp)
10002a10:	10800044 	addi	r2,r2,1
10002a14:	e0bfe315 	stw	r2,-116(fp)
10002a18:	e0bfe317 	ldw	r2,-116(fp)
10002a1c:	108073d0 	cmplti	r2,r2,463
10002a20:	103ff61e 	bne	r2,zero,100029fc <__alt_data_end+0xf80029fc>

				}
				else if((px >= 222 && px <= 235)  && (py >= 441 && py <= 452))
				{
					ink = 0x0A0A;
					for(a = 12; a < 29; a++)
10002a24:	e0bfe217 	ldw	r2,-120(fp)
10002a28:	10800044 	addi	r2,r2,1
10002a2c:	e0bfe215 	stw	r2,-120(fp)
10002a30:	e0bfe217 	ldw	r2,-120(fp)
10002a34:	10800750 	cmplti	r2,r2,29
10002a38:	103fed1e 	bne	r2,zero,100029f0 <__alt_data_end+0xf80029f0>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 222 && px <= 235)  && (py >= 441 && py <= 452))
10002a3c:	00015006 	br	10002f80 <main+0x1e3c>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 238 && px <= 251)  && (py >= 441 && py <= 452))
10002a40:	e0bff80b 	ldhu	r2,-32(fp)
10002a44:	10803bb0 	cmpltui	r2,r2,238
10002a48:	1000221e 	bne	r2,zero,10002ad4 <main+0x1990>
10002a4c:	e0bff80b 	ldhu	r2,-32(fp)
10002a50:	10803f28 	cmpgeui	r2,r2,252
10002a54:	10001f1e 	bne	r2,zero,10002ad4 <main+0x1990>
10002a58:	e0bff88b 	ldhu	r2,-30(fp)
10002a5c:	10806e70 	cmpltui	r2,r2,441
10002a60:	10001c1e 	bne	r2,zero,10002ad4 <main+0x1990>
10002a64:	e0bff88b 	ldhu	r2,-30(fp)
10002a68:	10807168 	cmpgeui	r2,r2,453
10002a6c:	1000191e 	bne	r2,zero,10002ad4 <main+0x1990>
				{
					ink = 0x8383;
10002a70:	00a0e0d4 	movui	r2,33667
10002a74:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
10002a78:	00800304 	movi	r2,12
10002a7c:	e0bfe215 	stw	r2,-120(fp)
10002a80:	00001006 	br	10002ac4 <main+0x1980>
													for(b = 447; b<463; b++)
10002a84:	00806fc4 	movi	r2,447
10002a88:	e0bfe315 	stw	r2,-116(fp)
10002a8c:	00000706 	br	10002aac <main+0x1968>
													{
														initialPutPixel(a,b,ink);
10002a90:	e13fe217 	ldw	r4,-120(fp)
10002a94:	e17fe317 	ldw	r5,-116(fp)
10002a98:	e1bfe617 	ldw	r6,-104(fp)
10002a9c:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 238 && px <= 251)  && (py >= 441 && py <= 452))
				{
					ink = 0x8383;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
10002aa0:	e0bfe317 	ldw	r2,-116(fp)
10002aa4:	10800044 	addi	r2,r2,1
10002aa8:	e0bfe315 	stw	r2,-116(fp)
10002aac:	e0bfe317 	ldw	r2,-116(fp)
10002ab0:	108073d0 	cmplti	r2,r2,463
10002ab4:	103ff61e 	bne	r2,zero,10002a90 <__alt_data_end+0xf8002a90>

				}
				else if((px >= 238 && px <= 251)  && (py >= 441 && py <= 452))
				{
					ink = 0x8383;
					for(a = 12; a < 29; a++)
10002ab8:	e0bfe217 	ldw	r2,-120(fp)
10002abc:	10800044 	addi	r2,r2,1
10002ac0:	e0bfe215 	stw	r2,-120(fp)
10002ac4:	e0bfe217 	ldw	r2,-120(fp)
10002ac8:	10800750 	cmplti	r2,r2,29
10002acc:	103fed1e 	bne	r2,zero,10002a84 <__alt_data_end+0xf8002a84>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 238 && px <= 251)  && (py >= 441 && py <= 452))
10002ad0:	00012b06 	br	10002f80 <main+0x1e3c>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 254 && px <= 267)  && (py >= 441 && py <= 452))
10002ad4:	e0bff80b 	ldhu	r2,-32(fp)
10002ad8:	10803fb0 	cmpltui	r2,r2,254
10002adc:	1000221e 	bne	r2,zero,10002b68 <main+0x1a24>
10002ae0:	e0bff80b 	ldhu	r2,-32(fp)
10002ae4:	10804328 	cmpgeui	r2,r2,268
10002ae8:	10001f1e 	bne	r2,zero,10002b68 <main+0x1a24>
10002aec:	e0bff88b 	ldhu	r2,-30(fp)
10002af0:	10806e70 	cmpltui	r2,r2,441
10002af4:	10001c1e 	bne	r2,zero,10002b68 <main+0x1a24>
10002af8:	e0bff88b 	ldhu	r2,-30(fp)
10002afc:	10807168 	cmpgeui	r2,r2,453
10002b00:	1000191e 	bne	r2,zero,10002b68 <main+0x1a24>
				{
					ink = 0x8888;
10002b04:	00a22214 	movui	r2,34952
10002b08:	e0bfe615 	stw	r2,-104(fp)
					for(a = 12; a < 29; a++)
10002b0c:	00800304 	movi	r2,12
10002b10:	e0bfe215 	stw	r2,-120(fp)
10002b14:	00001006 	br	10002b58 <main+0x1a14>
													for(b = 447; b<463; b++)
10002b18:	00806fc4 	movi	r2,447
10002b1c:	e0bfe315 	stw	r2,-116(fp)
10002b20:	00000706 	br	10002b40 <main+0x19fc>
													{
														initialPutPixel(a,b,ink);
10002b24:	e13fe217 	ldw	r4,-120(fp)
10002b28:	e17fe317 	ldw	r5,-116(fp)
10002b2c:	e1bfe617 	ldw	r6,-104(fp)
10002b30:	00002900 	call	10000290 <initialPutPixel>
				}
				else if((px >= 254 && px <= 267)  && (py >= 441 && py <= 452))
				{
					ink = 0x8888;
					for(a = 12; a < 29; a++)
													for(b = 447; b<463; b++)
10002b34:	e0bfe317 	ldw	r2,-116(fp)
10002b38:	10800044 	addi	r2,r2,1
10002b3c:	e0bfe315 	stw	r2,-116(fp)
10002b40:	e0bfe317 	ldw	r2,-116(fp)
10002b44:	108073d0 	cmplti	r2,r2,463
10002b48:	103ff61e 	bne	r2,zero,10002b24 <__alt_data_end+0xf8002b24>

				}
				else if((px >= 254 && px <= 267)  && (py >= 441 && py <= 452))
				{
					ink = 0x8888;
					for(a = 12; a < 29; a++)
10002b4c:	e0bfe217 	ldw	r2,-120(fp)
10002b50:	10800044 	addi	r2,r2,1
10002b54:	e0bfe215 	stw	r2,-120(fp)
10002b58:	e0bfe217 	ldw	r2,-120(fp)
10002b5c:	10800750 	cmplti	r2,r2,29
10002b60:	103fed1e 	bne	r2,zero,10002b18 <__alt_data_end+0xf8002b18>
														initialPutPixel(a,b,ink);
													}


				}
				else if((px >= 254 && px <= 267)  && (py >= 441 && py <= 452))
10002b64:	00010606 	br	10002f80 <main+0x1e3c>


				}
				//Deselection of tool
				else
				switch(cursor_type)
10002b68:	e0bfe517 	ldw	r2,-108(fp)
10002b6c:	108001e8 	cmpgeui	r2,r2,7
10002b70:	1001031e 	bne	r2,zero,10002f80 <main+0x1e3c>
10002b74:	e0bfe517 	ldw	r2,-108(fp)
10002b78:	100690ba 	slli	r3,r2,2
10002b7c:	00840034 	movhi	r2,4096
10002b80:	108ae404 	addi	r2,r2,11152
10002b84:	1885883a 	add	r2,r3,r2
10002b88:	10800017 	ldw	r2,0(r2)
10002b8c:	1000683a 	jmp	r2
10002b90:	10002bac 	andhi	zero,r2,174
10002b94:	10002c38 	rdprs	zero,r2,176
10002b98:	10002ef4 	orhi	zero,r2,187
10002b9c:	10002cc4 	addi	zero,r2,179
10002ba0:	10002d50 	cmplti	zero,r2,181
10002ba4:	10002ddc 	xori	zero,r2,183
10002ba8:	10002e68 	cmpgeui	zero,r2,185
				{
				case pencil: for(a = 13; a < 35; a++)
10002bac:	00800344 	movi	r2,13
10002bb0:	e0bfe215 	stw	r2,-120(fp)
10002bb4:	00001c06 	br	10002c28 <main+0x1ae4>
							for(b = 30; b < 54; b++)
10002bb8:	00800784 	movi	r2,30
10002bbc:	e0bfe315 	stw	r2,-116(fp)
10002bc0:	00001306 	br	10002c10 <main+0x1acc>
							{
								initialPutPixel(13, b, 0x0000);
10002bc4:	01000344 	movi	r4,13
10002bc8:	e17fe317 	ldw	r5,-116(fp)
10002bcc:	000d883a 	mov	r6,zero
10002bd0:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(35, b, 0x0000);
10002bd4:	010008c4 	movi	r4,35
10002bd8:	e17fe317 	ldw	r5,-116(fp)
10002bdc:	000d883a 	mov	r6,zero
10002be0:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(a, 30, 0x0000);
10002be4:	e13fe217 	ldw	r4,-120(fp)
10002be8:	01400784 	movi	r5,30
10002bec:	000d883a 	mov	r6,zero
10002bf0:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(a, 54, 0x0000);
10002bf4:	e13fe217 	ldw	r4,-120(fp)
10002bf8:	01400d84 	movi	r5,54
10002bfc:	000d883a 	mov	r6,zero
10002c00:	00002900 	call	10000290 <initialPutPixel>
				//Deselection of tool
				else
				switch(cursor_type)
				{
				case pencil: for(a = 13; a < 35; a++)
							for(b = 30; b < 54; b++)
10002c04:	e0bfe317 	ldw	r2,-116(fp)
10002c08:	10800044 	addi	r2,r2,1
10002c0c:	e0bfe315 	stw	r2,-116(fp)
10002c10:	e0bfe317 	ldw	r2,-116(fp)
10002c14:	10800d90 	cmplti	r2,r2,54
10002c18:	103fea1e 	bne	r2,zero,10002bc4 <__alt_data_end+0xf8002bc4>
				}
				//Deselection of tool
				else
				switch(cursor_type)
				{
				case pencil: for(a = 13; a < 35; a++)
10002c1c:	e0bfe217 	ldw	r2,-120(fp)
10002c20:	10800044 	addi	r2,r2,1
10002c24:	e0bfe215 	stw	r2,-120(fp)
10002c28:	e0bfe217 	ldw	r2,-120(fp)
10002c2c:	108008d0 	cmplti	r2,r2,35
10002c30:	103fe11e 	bne	r2,zero,10002bb8 <__alt_data_end+0xf8002bb8>
								initialPutPixel(13, b, 0x0000);
								initialPutPixel(35, b, 0x0000);
								initialPutPixel(a, 30, 0x0000);
								initialPutPixel(a, 54, 0x0000);
							}
						break;
10002c34:	0000d206 	br	10002f80 <main+0x1e3c>
				case line:
							for(a = 13; a < 35; a++)
10002c38:	00800344 	movi	r2,13
10002c3c:	e0bfe215 	stw	r2,-120(fp)
10002c40:	00001c06 	br	10002cb4 <main+0x1b70>
							for(b = 58; b < 82; b++)
10002c44:	00800e84 	movi	r2,58
10002c48:	e0bfe315 	stw	r2,-116(fp)
10002c4c:	00001306 	br	10002c9c <main+0x1b58>
							{
								initialPutPixel(13, b, 0x0000);
10002c50:	01000344 	movi	r4,13
10002c54:	e17fe317 	ldw	r5,-116(fp)
10002c58:	000d883a 	mov	r6,zero
10002c5c:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(35, b, 0x0000);
10002c60:	010008c4 	movi	r4,35
10002c64:	e17fe317 	ldw	r5,-116(fp)
10002c68:	000d883a 	mov	r6,zero
10002c6c:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(a, 58, 0x0000);
10002c70:	e13fe217 	ldw	r4,-120(fp)
10002c74:	01400e84 	movi	r5,58
10002c78:	000d883a 	mov	r6,zero
10002c7c:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(a, 82, 0x0000);
10002c80:	e13fe217 	ldw	r4,-120(fp)
10002c84:	01401484 	movi	r5,82
10002c88:	000d883a 	mov	r6,zero
10002c8c:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(a, 54, 0x0000);
							}
						break;
				case line:
							for(a = 13; a < 35; a++)
							for(b = 58; b < 82; b++)
10002c90:	e0bfe317 	ldw	r2,-116(fp)
10002c94:	10800044 	addi	r2,r2,1
10002c98:	e0bfe315 	stw	r2,-116(fp)
10002c9c:	e0bfe317 	ldw	r2,-116(fp)
10002ca0:	10801490 	cmplti	r2,r2,82
10002ca4:	103fea1e 	bne	r2,zero,10002c50 <__alt_data_end+0xf8002c50>
								initialPutPixel(a, 30, 0x0000);
								initialPutPixel(a, 54, 0x0000);
							}
						break;
				case line:
							for(a = 13; a < 35; a++)
10002ca8:	e0bfe217 	ldw	r2,-120(fp)
10002cac:	10800044 	addi	r2,r2,1
10002cb0:	e0bfe215 	stw	r2,-120(fp)
10002cb4:	e0bfe217 	ldw	r2,-120(fp)
10002cb8:	108008d0 	cmplti	r2,r2,35
10002cbc:	103fe11e 	bne	r2,zero,10002c44 <__alt_data_end+0xf8002c44>
								initialPutPixel(13, b, 0x0000);
								initialPutPixel(35, b, 0x0000);
								initialPutPixel(a, 58, 0x0000);
								initialPutPixel(a, 82, 0x0000);
							}
						break;
10002cc0:	0000af06 	br	10002f80 <main+0x1e3c>
				case circle:
							for(a = 13; a < 35; a++)
10002cc4:	00800344 	movi	r2,13
10002cc8:	e0bfe215 	stw	r2,-120(fp)
10002ccc:	00001c06 	br	10002d40 <main+0x1bfc>
							for(b = 114; b < 138; b++)
10002cd0:	00801c84 	movi	r2,114
10002cd4:	e0bfe315 	stw	r2,-116(fp)
10002cd8:	00001306 	br	10002d28 <main+0x1be4>
							{
								initialPutPixel(13, b, 0x0000);
10002cdc:	01000344 	movi	r4,13
10002ce0:	e17fe317 	ldw	r5,-116(fp)
10002ce4:	000d883a 	mov	r6,zero
10002ce8:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(35, b, 0x0000);
10002cec:	010008c4 	movi	r4,35
10002cf0:	e17fe317 	ldw	r5,-116(fp)
10002cf4:	000d883a 	mov	r6,zero
10002cf8:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(a, 114, 0x0000);
10002cfc:	e13fe217 	ldw	r4,-120(fp)
10002d00:	01401c84 	movi	r5,114
10002d04:	000d883a 	mov	r6,zero
10002d08:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(a, 138, 0x0000);
10002d0c:	e13fe217 	ldw	r4,-120(fp)
10002d10:	01402284 	movi	r5,138
10002d14:	000d883a 	mov	r6,zero
10002d18:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(a, 82, 0x0000);
							}
						break;
				case circle:
							for(a = 13; a < 35; a++)
							for(b = 114; b < 138; b++)
10002d1c:	e0bfe317 	ldw	r2,-116(fp)
10002d20:	10800044 	addi	r2,r2,1
10002d24:	e0bfe315 	stw	r2,-116(fp)
10002d28:	e0bfe317 	ldw	r2,-116(fp)
10002d2c:	10802290 	cmplti	r2,r2,138
10002d30:	103fea1e 	bne	r2,zero,10002cdc <__alt_data_end+0xf8002cdc>
								initialPutPixel(a, 58, 0x0000);
								initialPutPixel(a, 82, 0x0000);
							}
						break;
				case circle:
							for(a = 13; a < 35; a++)
10002d34:	e0bfe217 	ldw	r2,-120(fp)
10002d38:	10800044 	addi	r2,r2,1
10002d3c:	e0bfe215 	stw	r2,-120(fp)
10002d40:	e0bfe217 	ldw	r2,-120(fp)
10002d44:	108008d0 	cmplti	r2,r2,35
10002d48:	103fe11e 	bne	r2,zero,10002cd0 <__alt_data_end+0xf8002cd0>
								initialPutPixel(13, b, 0x0000);
								initialPutPixel(35, b, 0x0000);
								initialPutPixel(a, 114, 0x0000);
								initialPutPixel(a, 138, 0x0000);
							}
							break;
10002d4c:	00008c06 	br	10002f80 <main+0x1e3c>
				case polygon:
							for(a = 13; a < 35; a++)
10002d50:	00800344 	movi	r2,13
10002d54:	e0bfe215 	stw	r2,-120(fp)
10002d58:	00001c06 	br	10002dcc <main+0x1c88>
							for(b = 142; b < 166; b++)
10002d5c:	00802384 	movi	r2,142
10002d60:	e0bfe315 	stw	r2,-116(fp)
10002d64:	00001306 	br	10002db4 <main+0x1c70>
							{
								initialPutPixel(13, b, 0x0000);
10002d68:	01000344 	movi	r4,13
10002d6c:	e17fe317 	ldw	r5,-116(fp)
10002d70:	000d883a 	mov	r6,zero
10002d74:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(35, b, 0x0000);
10002d78:	010008c4 	movi	r4,35
10002d7c:	e17fe317 	ldw	r5,-116(fp)
10002d80:	000d883a 	mov	r6,zero
10002d84:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(a, 142, 0x0000);
10002d88:	e13fe217 	ldw	r4,-120(fp)
10002d8c:	01402384 	movi	r5,142
10002d90:	000d883a 	mov	r6,zero
10002d94:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(a, 166, 0x0000);
10002d98:	e13fe217 	ldw	r4,-120(fp)
10002d9c:	01402984 	movi	r5,166
10002da0:	000d883a 	mov	r6,zero
10002da4:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(a, 138, 0x0000);
							}
							break;
				case polygon:
							for(a = 13; a < 35; a++)
							for(b = 142; b < 166; b++)
10002da8:	e0bfe317 	ldw	r2,-116(fp)
10002dac:	10800044 	addi	r2,r2,1
10002db0:	e0bfe315 	stw	r2,-116(fp)
10002db4:	e0bfe317 	ldw	r2,-116(fp)
10002db8:	10802990 	cmplti	r2,r2,166
10002dbc:	103fea1e 	bne	r2,zero,10002d68 <__alt_data_end+0xf8002d68>
								initialPutPixel(a, 114, 0x0000);
								initialPutPixel(a, 138, 0x0000);
							}
							break;
				case polygon:
							for(a = 13; a < 35; a++)
10002dc0:	e0bfe217 	ldw	r2,-120(fp)
10002dc4:	10800044 	addi	r2,r2,1
10002dc8:	e0bfe215 	stw	r2,-120(fp)
10002dcc:	e0bfe217 	ldw	r2,-120(fp)
10002dd0:	108008d0 	cmplti	r2,r2,35
10002dd4:	103fe11e 	bne	r2,zero,10002d5c <__alt_data_end+0xf8002d5c>
								initialPutPixel(13, b, 0x0000);
								initialPutPixel(35, b, 0x0000);
								initialPutPixel(a, 142, 0x0000);
								initialPutPixel(a, 166, 0x0000);
							}
							break;
10002dd8:	00006906 	br	10002f80 <main+0x1e3c>
				case eraser: for(a = 13; a < 35; a++)
10002ddc:	00800344 	movi	r2,13
10002de0:	e0bfe215 	stw	r2,-120(fp)
10002de4:	00001c06 	br	10002e58 <main+0x1d14>
							for(b = 170; b < 194; b++)
10002de8:	00802a84 	movi	r2,170
10002dec:	e0bfe315 	stw	r2,-116(fp)
10002df0:	00001306 	br	10002e40 <main+0x1cfc>
							{
								initialPutPixel(13, b, 0x0000);
10002df4:	01000344 	movi	r4,13
10002df8:	e17fe317 	ldw	r5,-116(fp)
10002dfc:	000d883a 	mov	r6,zero
10002e00:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(35, b, 0x0000);
10002e04:	010008c4 	movi	r4,35
10002e08:	e17fe317 	ldw	r5,-116(fp)
10002e0c:	000d883a 	mov	r6,zero
10002e10:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(a, 170, 0x0000);
10002e14:	e13fe217 	ldw	r4,-120(fp)
10002e18:	01402a84 	movi	r5,170
10002e1c:	000d883a 	mov	r6,zero
10002e20:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(a, 194, 0x0000);
10002e24:	e13fe217 	ldw	r4,-120(fp)
10002e28:	01403084 	movi	r5,194
10002e2c:	000d883a 	mov	r6,zero
10002e30:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(a, 142, 0x0000);
								initialPutPixel(a, 166, 0x0000);
							}
							break;
				case eraser: for(a = 13; a < 35; a++)
							for(b = 170; b < 194; b++)
10002e34:	e0bfe317 	ldw	r2,-116(fp)
10002e38:	10800044 	addi	r2,r2,1
10002e3c:	e0bfe315 	stw	r2,-116(fp)
10002e40:	e0bfe317 	ldw	r2,-116(fp)
10002e44:	10803090 	cmplti	r2,r2,194
10002e48:	103fea1e 	bne	r2,zero,10002df4 <__alt_data_end+0xf8002df4>
								initialPutPixel(35, b, 0x0000);
								initialPutPixel(a, 142, 0x0000);
								initialPutPixel(a, 166, 0x0000);
							}
							break;
				case eraser: for(a = 13; a < 35; a++)
10002e4c:	e0bfe217 	ldw	r2,-120(fp)
10002e50:	10800044 	addi	r2,r2,1
10002e54:	e0bfe215 	stw	r2,-120(fp)
10002e58:	e0bfe217 	ldw	r2,-120(fp)
10002e5c:	108008d0 	cmplti	r2,r2,35
10002e60:	103fe11e 	bne	r2,zero,10002de8 <__alt_data_end+0xf8002de8>
								initialPutPixel(13, b, 0x0000);
								initialPutPixel(35, b, 0x0000);
								initialPutPixel(a, 170, 0x0000);
								initialPutPixel(a, 194, 0x0000);
							}
						break;
10002e64:	00004606 	br	10002f80 <main+0x1e3c>
				case spray: for(a = 13; a < 35; a++)
10002e68:	00800344 	movi	r2,13
10002e6c:	e0bfe215 	stw	r2,-120(fp)
10002e70:	00001c06 	br	10002ee4 <main+0x1da0>
							for(b = 198; b < 222; b++)
10002e74:	00803184 	movi	r2,198
10002e78:	e0bfe315 	stw	r2,-116(fp)
10002e7c:	00001306 	br	10002ecc <main+0x1d88>
							{
								initialPutPixel(13, b, 0x0000);
10002e80:	01000344 	movi	r4,13
10002e84:	e17fe317 	ldw	r5,-116(fp)
10002e88:	000d883a 	mov	r6,zero
10002e8c:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(35, b, 0x0000);
10002e90:	010008c4 	movi	r4,35
10002e94:	e17fe317 	ldw	r5,-116(fp)
10002e98:	000d883a 	mov	r6,zero
10002e9c:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(a, 198, 0x0000);
10002ea0:	e13fe217 	ldw	r4,-120(fp)
10002ea4:	01403184 	movi	r5,198
10002ea8:	000d883a 	mov	r6,zero
10002eac:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(a, 222, 0x0000);
10002eb0:	e13fe217 	ldw	r4,-120(fp)
10002eb4:	01403784 	movi	r5,222
10002eb8:	000d883a 	mov	r6,zero
10002ebc:	00002900 	call	10000290 <initialPutPixel>
								initialPutPixel(a, 170, 0x0000);
								initialPutPixel(a, 194, 0x0000);
							}
						break;
				case spray: for(a = 13; a < 35; a++)
							for(b = 198; b < 222; b++)
10002ec0:	e0bfe317 	ldw	r2,-116(fp)
10002ec4:	10800044 	addi	r2,r2,1
10002ec8:	e0bfe315 	stw	r2,-116(fp)
10002ecc:	e0bfe317 	ldw	r2,-116(fp)
10002ed0:	10803790 	cmplti	r2,r2,222
10002ed4:	103fea1e 	bne	r2,zero,10002e80 <__alt_data_end+0xf8002e80>
								initialPutPixel(35, b, 0x0000);
								initialPutPixel(a, 170, 0x0000);
								initialPutPixel(a, 194, 0x0000);
							}
						break;
				case spray: for(a = 13; a < 35; a++)
10002ed8:	e0bfe217 	ldw	r2,-120(fp)
10002edc:	10800044 	addi	r2,r2,1
10002ee0:	e0bfe215 	stw	r2,-120(fp)
10002ee4:	e0bfe217 	ldw	r2,-120(fp)
10002ee8:	108008d0 	cmplti	r2,r2,35
10002eec:	103fe11e 	bne	r2,zero,10002e74 <__alt_data_end+0xf8002e74>
								initialPutPixel(13, b, 0x0000);
								initialPutPixel(35, b, 0x0000);
								initialPutPixel(a, 198, 0x0000);
								initialPutPixel(a, 222, 0x0000);
							}
						break;
10002ef0:	00002306 	br	10002f80 <main+0x1e3c>
//								initialPutPixel(a, 254, 0x0000);
//								initialPutPixel(a, 278, 0x0000);
//							}
//						break;

				case rect: for(a = 13; a < 35; a++)
10002ef4:	00800344 	movi	r2,13
10002ef8:	e0bfe215 	stw	r2,-120(fp)
10002efc:	00001c06 	br	10002f70 <main+0x1e2c>
								for(b = 86; b < 110; b++)
10002f00:	00801584 	movi	r2,86
10002f04:	e0bfe315 	stw	r2,-116(fp)
10002f08:	00001306 	br	10002f58 <main+0x1e14>
								{
									initialPutPixel(13, b, 0x0000);
10002f0c:	01000344 	movi	r4,13
10002f10:	e17fe317 	ldw	r5,-116(fp)
10002f14:	000d883a 	mov	r6,zero
10002f18:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(35, b, 0x0000);
10002f1c:	010008c4 	movi	r4,35
10002f20:	e17fe317 	ldw	r5,-116(fp)
10002f24:	000d883a 	mov	r6,zero
10002f28:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 86, 0x0000);
10002f2c:	e13fe217 	ldw	r4,-120(fp)
10002f30:	01401584 	movi	r5,86
10002f34:	000d883a 	mov	r6,zero
10002f38:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 110, 0x0000);
10002f3c:	e13fe217 	ldw	r4,-120(fp)
10002f40:	01401b84 	movi	r5,110
10002f44:	000d883a 	mov	r6,zero
10002f48:	00002900 	call	10000290 <initialPutPixel>
//								initialPutPixel(a, 278, 0x0000);
//							}
//						break;

				case rect: for(a = 13; a < 35; a++)
								for(b = 86; b < 110; b++)
10002f4c:	e0bfe317 	ldw	r2,-116(fp)
10002f50:	10800044 	addi	r2,r2,1
10002f54:	e0bfe315 	stw	r2,-116(fp)
10002f58:	e0bfe317 	ldw	r2,-116(fp)
10002f5c:	10801b90 	cmplti	r2,r2,110
10002f60:	103fea1e 	bne	r2,zero,10002f0c <__alt_data_end+0xf8002f0c>
//								initialPutPixel(a, 254, 0x0000);
//								initialPutPixel(a, 278, 0x0000);
//							}
//						break;

				case rect: for(a = 13; a < 35; a++)
10002f64:	e0bfe217 	ldw	r2,-120(fp)
10002f68:	10800044 	addi	r2,r2,1
10002f6c:	e0bfe215 	stw	r2,-120(fp)
10002f70:	e0bfe217 	ldw	r2,-120(fp)
10002f74:	108008d0 	cmplti	r2,r2,35
10002f78:	103fe11e 	bne	r2,zero,10002f00 <__alt_data_end+0xf8002f00>
									initialPutPixel(13, b, 0x0000);
									initialPutPixel(35, b, 0x0000);
									initialPutPixel(a, 86, 0x0000);
									initialPutPixel(a, 110, 0x0000);
								}
							break;
10002f7c:	0001883a 	nop



// SELECTION OF TOOL
				//pencil
				if(px > 13 && px <35 && py > 30 && py < 54)
10002f80:	e0bff80b 	ldhu	r2,-32(fp)
10002f84:	108003b0 	cmpltui	r2,r2,14
10002f88:	10002c1e 	bne	r2,zero,1000303c <main+0x1ef8>
10002f8c:	e0bff80b 	ldhu	r2,-32(fp)
10002f90:	108008e8 	cmpgeui	r2,r2,35
10002f94:	1000291e 	bne	r2,zero,1000303c <main+0x1ef8>
10002f98:	e0bff88b 	ldhu	r2,-30(fp)
10002f9c:	108007f0 	cmpltui	r2,r2,31
10002fa0:	1000261e 	bne	r2,zero,1000303c <main+0x1ef8>
10002fa4:	e0bff88b 	ldhu	r2,-30(fp)
10002fa8:	10800da8 	cmpgeui	r2,r2,54
10002fac:	1000231e 	bne	r2,zero,1000303c <main+0x1ef8>

						{

							//ink = 0x0000;
							cursor_type = pencil;
10002fb0:	e03fe515 	stw	zero,-108(fp)
							int a,b;
							for(a = 13; a < 35; a++)
10002fb4:	00800344 	movi	r2,13
10002fb8:	e0bfed15 	stw	r2,-76(fp)
10002fbc:	00001c06 	br	10003030 <main+0x1eec>
								for(b = 30; b < 54; b++)
10002fc0:	00800784 	movi	r2,30
10002fc4:	e0bfee15 	stw	r2,-72(fp)
10002fc8:	00001306 	br	10003018 <main+0x1ed4>
								{
									initialPutPixel(13, b, 0xe0e0);
10002fcc:	01000344 	movi	r4,13
10002fd0:	e17fee17 	ldw	r5,-72(fp)
10002fd4:	01b83814 	movui	r6,57568
10002fd8:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(35, b, 0xe0e0);
10002fdc:	010008c4 	movi	r4,35
10002fe0:	e17fee17 	ldw	r5,-72(fp)
10002fe4:	01b83814 	movui	r6,57568
10002fe8:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 30, 0xe0e0);
10002fec:	e13fed17 	ldw	r4,-76(fp)
10002ff0:	01400784 	movi	r5,30
10002ff4:	01b83814 	movui	r6,57568
10002ff8:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 54, 0xe0e0);
10002ffc:	e13fed17 	ldw	r4,-76(fp)
10003000:	01400d84 	movi	r5,54
10003004:	01b83814 	movui	r6,57568
10003008:	00002900 	call	10000290 <initialPutPixel>

							//ink = 0x0000;
							cursor_type = pencil;
							int a,b;
							for(a = 13; a < 35; a++)
								for(b = 30; b < 54; b++)
1000300c:	e0bfee17 	ldw	r2,-72(fp)
10003010:	10800044 	addi	r2,r2,1
10003014:	e0bfee15 	stw	r2,-72(fp)
10003018:	e0bfee17 	ldw	r2,-72(fp)
1000301c:	10800d90 	cmplti	r2,r2,54
10003020:	103fea1e 	bne	r2,zero,10002fcc <__alt_data_end+0xf8002fcc>
						{

							//ink = 0x0000;
							cursor_type = pencil;
							int a,b;
							for(a = 13; a < 35; a++)
10003024:	e0bfed17 	ldw	r2,-76(fp)
10003028:	10800044 	addi	r2,r2,1
1000302c:	e0bfed15 	stw	r2,-76(fp)
10003030:	e0bfed17 	ldw	r2,-76(fp)
10003034:	108008d0 	cmplti	r2,r2,35
10003038:	103fe11e 	bne	r2,zero,10002fc0 <__alt_data_end+0xf8002fc0>
									initialPutPixel(a, 30, 0xe0e0);
									initialPutPixel(a, 54, 0xe0e0);
								}
						}
				//line
				if(px > 13 && px <35 && py > 58 && py < 82)
1000303c:	e0bff80b 	ldhu	r2,-32(fp)
10003040:	108003b0 	cmpltui	r2,r2,14
10003044:	10002f1e 	bne	r2,zero,10003104 <main+0x1fc0>
10003048:	e0bff80b 	ldhu	r2,-32(fp)
1000304c:	108008e8 	cmpgeui	r2,r2,35
10003050:	10002c1e 	bne	r2,zero,10003104 <main+0x1fc0>
10003054:	e0bff88b 	ldhu	r2,-30(fp)
10003058:	10800ef0 	cmpltui	r2,r2,59
1000305c:	1000291e 	bne	r2,zero,10003104 <main+0x1fc0>
10003060:	e0bff88b 	ldhu	r2,-30(fp)
10003064:	108014a8 	cmpgeui	r2,r2,82
10003068:	1000261e 	bne	r2,zero,10003104 <main+0x1fc0>
				{
					cursor_type = line;
1000306c:	00800044 	movi	r2,1
10003070:	e0bfe515 	stw	r2,-108(fp)
					flag_line = 1;
10003074:	00800044 	movi	r2,1
10003078:	e0bfe415 	stw	r2,-112(fp)
					int a,b;
							for(a = 13; a < 35; a++)
1000307c:	00800344 	movi	r2,13
10003080:	e0bfef15 	stw	r2,-68(fp)
10003084:	00001c06 	br	100030f8 <main+0x1fb4>
								for(b = 58; b < 82; b++)
10003088:	00800e84 	movi	r2,58
1000308c:	e0bff015 	stw	r2,-64(fp)
10003090:	00001306 	br	100030e0 <main+0x1f9c>
								{
									initialPutPixel(13, b, 0xe0e0);
10003094:	01000344 	movi	r4,13
10003098:	e17ff017 	ldw	r5,-64(fp)
1000309c:	01b83814 	movui	r6,57568
100030a0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(35, b, 0xe0e0);
100030a4:	010008c4 	movi	r4,35
100030a8:	e17ff017 	ldw	r5,-64(fp)
100030ac:	01b83814 	movui	r6,57568
100030b0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 58, 0xe0e0);
100030b4:	e13fef17 	ldw	r4,-68(fp)
100030b8:	01400e84 	movi	r5,58
100030bc:	01b83814 	movui	r6,57568
100030c0:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 82, 0xe0e0);
100030c4:	e13fef17 	ldw	r4,-68(fp)
100030c8:	01401484 	movi	r5,82
100030cc:	01b83814 	movui	r6,57568
100030d0:	00002900 	call	10000290 <initialPutPixel>
				{
					cursor_type = line;
					flag_line = 1;
					int a,b;
							for(a = 13; a < 35; a++)
								for(b = 58; b < 82; b++)
100030d4:	e0bff017 	ldw	r2,-64(fp)
100030d8:	10800044 	addi	r2,r2,1
100030dc:	e0bff015 	stw	r2,-64(fp)
100030e0:	e0bff017 	ldw	r2,-64(fp)
100030e4:	10801490 	cmplti	r2,r2,82
100030e8:	103fea1e 	bne	r2,zero,10003094 <__alt_data_end+0xf8003094>
				if(px > 13 && px <35 && py > 58 && py < 82)
				{
					cursor_type = line;
					flag_line = 1;
					int a,b;
							for(a = 13; a < 35; a++)
100030ec:	e0bfef17 	ldw	r2,-68(fp)
100030f0:	10800044 	addi	r2,r2,1
100030f4:	e0bfef15 	stw	r2,-68(fp)
100030f8:	e0bfef17 	ldw	r2,-68(fp)
100030fc:	108008d0 	cmplti	r2,r2,35
10003100:	103fe11e 	bne	r2,zero,10003088 <__alt_data_end+0xf8003088>
									initialPutPixel(a, 58, 0xe0e0);
									initialPutPixel(a, 82, 0xe0e0);
								}
				}
				//rect
				if(px > 13 && px <35 && py > 86 && py < 110)
10003104:	e0bff80b 	ldhu	r2,-32(fp)
10003108:	108003b0 	cmpltui	r2,r2,14
1000310c:	1000321e 	bne	r2,zero,100031d8 <main+0x2094>
10003110:	e0bff80b 	ldhu	r2,-32(fp)
10003114:	108008e8 	cmpgeui	r2,r2,35
10003118:	10002f1e 	bne	r2,zero,100031d8 <main+0x2094>
1000311c:	e0bff88b 	ldhu	r2,-30(fp)
10003120:	108015f0 	cmpltui	r2,r2,87
10003124:	10002c1e 	bne	r2,zero,100031d8 <main+0x2094>
10003128:	e0bff88b 	ldhu	r2,-30(fp)
1000312c:	10801ba8 	cmpgeui	r2,r2,110
10003130:	1000291e 	bne	r2,zero,100031d8 <main+0x2094>
				{
					cursor_type = rect;
10003134:	00800084 	movi	r2,2
10003138:	e0bfe515 	stw	r2,-108(fp)
					printf("Selecting rect");
1000313c:	01040074 	movhi	r4,4097
10003140:	21116604 	addi	r4,r4,17816
10003144:	0007c300 	call	10007c30 <printf>
					flag_square = 1;
10003148:	00800044 	movi	r2,1
1000314c:	e0bff715 	stw	r2,-36(fp)
					int a,b;
							for(a = 13; a < 35; a++)
10003150:	00800344 	movi	r2,13
10003154:	e0bff115 	stw	r2,-60(fp)
10003158:	00001c06 	br	100031cc <main+0x2088>
								for(b = 86; b < 110; b++)
1000315c:	00801584 	movi	r2,86
10003160:	e0bff215 	stw	r2,-56(fp)
10003164:	00001306 	br	100031b4 <main+0x2070>
								{
									initialPutPixel(13, b, 0xe0e0);
10003168:	01000344 	movi	r4,13
1000316c:	e17ff217 	ldw	r5,-56(fp)
10003170:	01b83814 	movui	r6,57568
10003174:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(35, b, 0xe0e0);
10003178:	010008c4 	movi	r4,35
1000317c:	e17ff217 	ldw	r5,-56(fp)
10003180:	01b83814 	movui	r6,57568
10003184:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 86 , 0xe0e0);
10003188:	e13ff117 	ldw	r4,-60(fp)
1000318c:	01401584 	movi	r5,86
10003190:	01b83814 	movui	r6,57568
10003194:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 110, 0xe0e0);
10003198:	e13ff117 	ldw	r4,-60(fp)
1000319c:	01401b84 	movi	r5,110
100031a0:	01b83814 	movui	r6,57568
100031a4:	00002900 	call	10000290 <initialPutPixel>
					cursor_type = rect;
					printf("Selecting rect");
					flag_square = 1;
					int a,b;
							for(a = 13; a < 35; a++)
								for(b = 86; b < 110; b++)
100031a8:	e0bff217 	ldw	r2,-56(fp)
100031ac:	10800044 	addi	r2,r2,1
100031b0:	e0bff215 	stw	r2,-56(fp)
100031b4:	e0bff217 	ldw	r2,-56(fp)
100031b8:	10801b90 	cmplti	r2,r2,110
100031bc:	103fea1e 	bne	r2,zero,10003168 <__alt_data_end+0xf8003168>
				{
					cursor_type = rect;
					printf("Selecting rect");
					flag_square = 1;
					int a,b;
							for(a = 13; a < 35; a++)
100031c0:	e0bff117 	ldw	r2,-60(fp)
100031c4:	10800044 	addi	r2,r2,1
100031c8:	e0bff115 	stw	r2,-60(fp)
100031cc:	e0bff117 	ldw	r2,-60(fp)
100031d0:	108008d0 	cmplti	r2,r2,35
100031d4:	103fe11e 	bne	r2,zero,1000315c <__alt_data_end+0xf800315c>
									initialPutPixel(a, 86 , 0xe0e0);
									initialPutPixel(a, 110, 0xe0e0);
								}
				}
				//circle
				if(px > 13 && px <35 && py > 114 && py < 138)
100031d8:	e0bff80b 	ldhu	r2,-32(fp)
100031dc:	108003b0 	cmpltui	r2,r2,14
100031e0:	10002d1e 	bne	r2,zero,10003298 <main+0x2154>
100031e4:	e0bff80b 	ldhu	r2,-32(fp)
100031e8:	108008e8 	cmpgeui	r2,r2,35
100031ec:	10002a1e 	bne	r2,zero,10003298 <main+0x2154>
100031f0:	e0bff88b 	ldhu	r2,-30(fp)
100031f4:	10801cf0 	cmpltui	r2,r2,115
100031f8:	1000271e 	bne	r2,zero,10003298 <main+0x2154>
100031fc:	e0bff88b 	ldhu	r2,-30(fp)
10003200:	108022a8 	cmpgeui	r2,r2,138
10003204:	1000241e 	bne	r2,zero,10003298 <main+0x2154>
				{
					cursor_type = circle;
10003208:	008000c4 	movi	r2,3
1000320c:	e0bfe515 	stw	r2,-108(fp)
					for(a = 13; a < 35; a++)
10003210:	00800344 	movi	r2,13
10003214:	e0bfe215 	stw	r2,-120(fp)
10003218:	00001c06 	br	1000328c <main+0x2148>
								for(b = 114; b < 138; b++)
1000321c:	00801c84 	movi	r2,114
10003220:	e0bfe315 	stw	r2,-116(fp)
10003224:	00001306 	br	10003274 <main+0x2130>
								{
									initialPutPixel(13, b, 0xe0e0);
10003228:	01000344 	movi	r4,13
1000322c:	e17fe317 	ldw	r5,-116(fp)
10003230:	01b83814 	movui	r6,57568
10003234:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(35, b, 0xe0e0);
10003238:	010008c4 	movi	r4,35
1000323c:	e17fe317 	ldw	r5,-116(fp)
10003240:	01b83814 	movui	r6,57568
10003244:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 114, 0xe0e0);
10003248:	e13fe217 	ldw	r4,-120(fp)
1000324c:	01401c84 	movi	r5,114
10003250:	01b83814 	movui	r6,57568
10003254:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 138, 0xe0e0);
10003258:	e13fe217 	ldw	r4,-120(fp)
1000325c:	01402284 	movi	r5,138
10003260:	01b83814 	movui	r6,57568
10003264:	00002900 	call	10000290 <initialPutPixel>
				//circle
				if(px > 13 && px <35 && py > 114 && py < 138)
				{
					cursor_type = circle;
					for(a = 13; a < 35; a++)
								for(b = 114; b < 138; b++)
10003268:	e0bfe317 	ldw	r2,-116(fp)
1000326c:	10800044 	addi	r2,r2,1
10003270:	e0bfe315 	stw	r2,-116(fp)
10003274:	e0bfe317 	ldw	r2,-116(fp)
10003278:	10802290 	cmplti	r2,r2,138
1000327c:	103fea1e 	bne	r2,zero,10003228 <__alt_data_end+0xf8003228>
				}
				//circle
				if(px > 13 && px <35 && py > 114 && py < 138)
				{
					cursor_type = circle;
					for(a = 13; a < 35; a++)
10003280:	e0bfe217 	ldw	r2,-120(fp)
10003284:	10800044 	addi	r2,r2,1
10003288:	e0bfe215 	stw	r2,-120(fp)
1000328c:	e0bfe217 	ldw	r2,-120(fp)
10003290:	108008d0 	cmplti	r2,r2,35
10003294:	103fe11e 	bne	r2,zero,1000321c <__alt_data_end+0xf800321c>
									initialPutPixel(a, 114, 0xe0e0);
									initialPutPixel(a, 138, 0xe0e0);
								}
				}
				//polygon
				if(px > 13 && px <35 && py > 142 && py < 166)
10003298:	e0bff80b 	ldhu	r2,-32(fp)
1000329c:	108003b0 	cmpltui	r2,r2,14
100032a0:	10002f1e 	bne	r2,zero,10003360 <main+0x221c>
100032a4:	e0bff80b 	ldhu	r2,-32(fp)
100032a8:	108008e8 	cmpgeui	r2,r2,35
100032ac:	10002c1e 	bne	r2,zero,10003360 <main+0x221c>
100032b0:	e0bff88b 	ldhu	r2,-30(fp)
100032b4:	108023f0 	cmpltui	r2,r2,143
100032b8:	1000291e 	bne	r2,zero,10003360 <main+0x221c>
100032bc:	e0bff88b 	ldhu	r2,-30(fp)
100032c0:	108029a8 	cmpgeui	r2,r2,166
100032c4:	1000261e 	bne	r2,zero,10003360 <main+0x221c>
				{
					cursor_type = polygon;
100032c8:	00800104 	movi	r2,4
100032cc:	e0bfe515 	stw	r2,-108(fp)
					flag_line = 1;
100032d0:	00800044 	movi	r2,1
100032d4:	e0bfe415 	stw	r2,-112(fp)
					for(a = 13; a < 35; a++)
100032d8:	00800344 	movi	r2,13
100032dc:	e0bfe215 	stw	r2,-120(fp)
100032e0:	00001c06 	br	10003354 <main+0x2210>
								for(b = 142; b < 166; b++)
100032e4:	00802384 	movi	r2,142
100032e8:	e0bfe315 	stw	r2,-116(fp)
100032ec:	00001306 	br	1000333c <main+0x21f8>
								{
									initialPutPixel(13, b, 0xe0e0);
100032f0:	01000344 	movi	r4,13
100032f4:	e17fe317 	ldw	r5,-116(fp)
100032f8:	01b83814 	movui	r6,57568
100032fc:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(35, b, 0xe0e0);
10003300:	010008c4 	movi	r4,35
10003304:	e17fe317 	ldw	r5,-116(fp)
10003308:	01b83814 	movui	r6,57568
1000330c:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 142, 0xe0e0);
10003310:	e13fe217 	ldw	r4,-120(fp)
10003314:	01402384 	movi	r5,142
10003318:	01b83814 	movui	r6,57568
1000331c:	00002900 	call	10000290 <initialPutPixel>
									initialPutPixel(a, 166, 0xe0e0);
10003320:	e13fe217 	ldw	r4,-120(fp)
10003324:	01402984 	movi	r5,166
10003328:	01b83814 	movui	r6,57568
1000332c:	00002900 	call	10000290 <initialPutPixel>
				if(px > 13 && px <35 && py > 142 && py < 166)
				{
					cursor_type = polygon;
					flag_line = 1;
					for(a = 13; a < 35; a++)
								for(b = 142; b < 166; b++)
10003330:	e0bfe317 	ldw	r2,-116(fp)
10003334:	10800044 	addi	r2,r2,1
10003338:	e0bfe315 	stw	r2,-116(fp)
1000333c:	e0bfe317 	ldw	r2,-116(fp)
10003340:	10802990 	cmplti	r2,r2,166
10003344:	103fea1e 	bne	r2,zero,100032f0 <__alt_data_end+0xf80032f0>
				//polygon
				if(px > 13 && px <35 && py > 142 && py < 166)
				{
					cursor_type = polygon;
					flag_line = 1;
					for(a = 13; a < 35; a++)
10003348:	e0bfe217 	ldw	r2,-120(fp)
1000334c:	10800044 	addi	r2,r2,1
10003350:	e0bfe215 	stw	r2,-120(fp)
10003354:	e0bfe217 	ldw	r2,-120(fp)
10003358:	108008d0 	cmplti	r2,r2,35
1000335c:	103fe11e 	bne	r2,zero,100032e4 <__alt_data_end+0xf80032e4>
									initialPutPixel(a, 142, 0xe0e0);
									initialPutPixel(a, 166, 0xe0e0);
								}
				}
				//eraser
				if(px > 13 && px <35 && py > 170 && py < 194)
10003360:	e0bff80b 	ldhu	r2,-32(fp)
10003364:	108003b0 	cmpltui	r2,r2,14
10003368:	10002d1e 	bne	r2,zero,10003420 <main+0x22dc>
1000336c:	e0bff80b 	ldhu	r2,-32(fp)
10003370:	108008e8 	cmpgeui	r2,r2,35
10003374:	10002a1e 	bne	r2,zero,10003420 <main+0x22dc>
10003378:	e0bff88b 	ldhu	r2,-30(fp)
1000337c:	10802af0 	cmpltui	r2,r2,171
10003380:	1000271e 	bne	r2,zero,10003420 <main+0x22dc>
10003384:	e0bff88b 	ldhu	r2,-30(fp)
10003388:	108030a8 	cmpgeui	r2,r2,194
1000338c:	1000241e 	bne	r2,zero,10003420 <main+0x22dc>
				{
					//ink = 0xffff;
					cursor_type = eraser;
10003390:	00800144 	movi	r2,5
10003394:	e0bfe515 	stw	r2,-108(fp)
					int a,b;
					for(a = 13; a < 35; a++)
10003398:	00800344 	movi	r2,13
1000339c:	e0bff315 	stw	r2,-52(fp)
100033a0:	00001c06 	br	10003414 <main+0x22d0>
						for(b = 170; b < 194; b++)
100033a4:	00802a84 	movi	r2,170
100033a8:	e0bff415 	stw	r2,-48(fp)
100033ac:	00001306 	br	100033fc <main+0x22b8>
						{
							initialPutPixel(13, b, 0xe0e0);
100033b0:	01000344 	movi	r4,13
100033b4:	e17ff417 	ldw	r5,-48(fp)
100033b8:	01b83814 	movui	r6,57568
100033bc:	00002900 	call	10000290 <initialPutPixel>
							initialPutPixel(35, b, 0xe0e0);
100033c0:	010008c4 	movi	r4,35
100033c4:	e17ff417 	ldw	r5,-48(fp)
100033c8:	01b83814 	movui	r6,57568
100033cc:	00002900 	call	10000290 <initialPutPixel>
							initialPutPixel(a, 170, 0xe0e0);
100033d0:	e13ff317 	ldw	r4,-52(fp)
100033d4:	01402a84 	movi	r5,170
100033d8:	01b83814 	movui	r6,57568
100033dc:	00002900 	call	10000290 <initialPutPixel>
							initialPutPixel(a, 194, 0xe0e0);
100033e0:	e13ff317 	ldw	r4,-52(fp)
100033e4:	01403084 	movi	r5,194
100033e8:	01b83814 	movui	r6,57568
100033ec:	00002900 	call	10000290 <initialPutPixel>
				{
					//ink = 0xffff;
					cursor_type = eraser;
					int a,b;
					for(a = 13; a < 35; a++)
						for(b = 170; b < 194; b++)
100033f0:	e0bff417 	ldw	r2,-48(fp)
100033f4:	10800044 	addi	r2,r2,1
100033f8:	e0bff415 	stw	r2,-48(fp)
100033fc:	e0bff417 	ldw	r2,-48(fp)
10003400:	10803090 	cmplti	r2,r2,194
10003404:	103fea1e 	bne	r2,zero,100033b0 <__alt_data_end+0xf80033b0>
				if(px > 13 && px <35 && py > 170 && py < 194)
				{
					//ink = 0xffff;
					cursor_type = eraser;
					int a,b;
					for(a = 13; a < 35; a++)
10003408:	e0bff317 	ldw	r2,-52(fp)
1000340c:	10800044 	addi	r2,r2,1
10003410:	e0bff315 	stw	r2,-52(fp)
10003414:	e0bff317 	ldw	r2,-52(fp)
10003418:	108008d0 	cmplti	r2,r2,35
1000341c:	103fe11e 	bne	r2,zero,100033a4 <__alt_data_end+0xf80033a4>
							initialPutPixel(a, 194, 0xe0e0);
						}
				}

				//spray
				if(px > 13 && px <35 && py > 198 && py < 222)
10003420:	e0bff80b 	ldhu	r2,-32(fp)
10003424:	108003b0 	cmpltui	r2,r2,14
10003428:	10002d1e 	bne	r2,zero,100034e0 <main+0x239c>
1000342c:	e0bff80b 	ldhu	r2,-32(fp)
10003430:	108008e8 	cmpgeui	r2,r2,35
10003434:	10002a1e 	bne	r2,zero,100034e0 <main+0x239c>
10003438:	e0bff88b 	ldhu	r2,-30(fp)
1000343c:	108031f0 	cmpltui	r2,r2,199
10003440:	1000271e 	bne	r2,zero,100034e0 <main+0x239c>
10003444:	e0bff88b 	ldhu	r2,-30(fp)
10003448:	108037a8 	cmpgeui	r2,r2,222
1000344c:	1000241e 	bne	r2,zero,100034e0 <main+0x239c>
				{
					cursor_type = spray;
10003450:	00800184 	movi	r2,6
10003454:	e0bfe515 	stw	r2,-108(fp)
					int a,b;

					for(a = 13; a < 35; a++)
10003458:	00800344 	movi	r2,13
1000345c:	e0bff515 	stw	r2,-44(fp)
10003460:	00001c06 	br	100034d4 <main+0x2390>
						for(b = 198; b < 222; b++)
10003464:	00803184 	movi	r2,198
10003468:	e0bff615 	stw	r2,-40(fp)
1000346c:	00001306 	br	100034bc <main+0x2378>
						{
							initialPutPixel(13, b, 0xe0e0);
10003470:	01000344 	movi	r4,13
10003474:	e17ff617 	ldw	r5,-40(fp)
10003478:	01b83814 	movui	r6,57568
1000347c:	00002900 	call	10000290 <initialPutPixel>
							initialPutPixel(35, b, 0xe0e0);
10003480:	010008c4 	movi	r4,35
10003484:	e17ff617 	ldw	r5,-40(fp)
10003488:	01b83814 	movui	r6,57568
1000348c:	00002900 	call	10000290 <initialPutPixel>
							initialPutPixel(a, 198, 0xe0e0);
10003490:	e13ff517 	ldw	r4,-44(fp)
10003494:	01403184 	movi	r5,198
10003498:	01b83814 	movui	r6,57568
1000349c:	00002900 	call	10000290 <initialPutPixel>
							initialPutPixel(a, 222, 0xe0e0);
100034a0:	e13ff517 	ldw	r4,-44(fp)
100034a4:	01403784 	movi	r5,222
100034a8:	01b83814 	movui	r6,57568
100034ac:	00002900 	call	10000290 <initialPutPixel>
				{
					cursor_type = spray;
					int a,b;

					for(a = 13; a < 35; a++)
						for(b = 198; b < 222; b++)
100034b0:	e0bff617 	ldw	r2,-40(fp)
100034b4:	10800044 	addi	r2,r2,1
100034b8:	e0bff615 	stw	r2,-40(fp)
100034bc:	e0bff617 	ldw	r2,-40(fp)
100034c0:	10803790 	cmplti	r2,r2,222
100034c4:	103fea1e 	bne	r2,zero,10003470 <__alt_data_end+0xf8003470>
				if(px > 13 && px <35 && py > 198 && py < 222)
				{
					cursor_type = spray;
					int a,b;

					for(a = 13; a < 35; a++)
100034c8:	e0bff517 	ldw	r2,-44(fp)
100034cc:	10800044 	addi	r2,r2,1
100034d0:	e0bff515 	stw	r2,-44(fp)
100034d4:	e0bff517 	ldw	r2,-44(fp)
100034d8:	108008d0 	cmplti	r2,r2,35
100034dc:	103fe11e 	bne	r2,zero,10003464 <__alt_data_end+0xf8003464>
//							initialPutPixel(a,b,ink);
//						}
//
//				}
				//clear
				if(px > 13 && px <35 && py > 282 && py < 306)
100034e0:	e0bff80b 	ldhu	r2,-32(fp)
100034e4:	108003b0 	cmpltui	r2,r2,14
100034e8:	1000211e 	bne	r2,zero,10003570 <main+0x242c>
100034ec:	e0bff80b 	ldhu	r2,-32(fp)
100034f0:	108008e8 	cmpgeui	r2,r2,35
100034f4:	10001e1e 	bne	r2,zero,10003570 <main+0x242c>
100034f8:	e0bff88b 	ldhu	r2,-30(fp)
100034fc:	108046f0 	cmpltui	r2,r2,283
10003500:	10001b1e 	bne	r2,zero,10003570 <main+0x242c>
10003504:	e0bff88b 	ldhu	r2,-30(fp)
10003508:	10804ca8 	cmpgeui	r2,r2,306
1000350c:	1000181e 	bne	r2,zero,10003570 <main+0x242c>
				{

					for(a = 47; a< 633; a++)
10003510:	00800bc4 	movi	r2,47
10003514:	e0bfe215 	stw	r2,-120(fp)
10003518:	00001006 	br	1000355c <main+0x2418>
						for(b = 31; b<425; b++)
1000351c:	008007c4 	movi	r2,31
10003520:	e0bfe315 	stw	r2,-116(fp)
10003524:	00000706 	br	10003544 <main+0x2400>
						{
						    initialPutPixel(a,b, 0xffff);
10003528:	e13fe217 	ldw	r4,-120(fp)
1000352c:	e17fe317 	ldw	r5,-116(fp)
10003530:	01bfffd4 	movui	r6,65535
10003534:	00002900 	call	10000290 <initialPutPixel>
				//clear
				if(px > 13 && px <35 && py > 282 && py < 306)
				{

					for(a = 47; a< 633; a++)
						for(b = 31; b<425; b++)
10003538:	e0bfe317 	ldw	r2,-116(fp)
1000353c:	10800044 	addi	r2,r2,1
10003540:	e0bfe315 	stw	r2,-116(fp)
10003544:	e0bfe317 	ldw	r2,-116(fp)
10003548:	10806a50 	cmplti	r2,r2,425
1000354c:	103ff61e 	bne	r2,zero,10003528 <__alt_data_end+0xf8003528>
//				}
				//clear
				if(px > 13 && px <35 && py > 282 && py < 306)
				{

					for(a = 47; a< 633; a++)
10003550:	e0bfe217 	ldw	r2,-120(fp)
10003554:	10800044 	addi	r2,r2,1
10003558:	e0bfe215 	stw	r2,-120(fp)
1000355c:	e0bfe217 	ldw	r2,-120(fp)
10003560:	10809e50 	cmplti	r2,r2,633
10003564:	103fed1e 	bne	r2,zero,1000351c <__alt_data_end+0xf800351c>
10003568:	00000106 	br	10003570 <main+0x242c>
				case pick:
							break;


				}
			}
1000356c:	0001883a 	nop
	//			initialPutPixel(px-1, py, 0xffff);
	//
	//			initialPutPixel(px+1, py, 0xffff);
				}
			}
		printf("%d  %d\n", px , py);
10003570:	e0fff80b 	ldhu	r3,-32(fp)
10003574:	e0bff88b 	ldhu	r2,-30(fp)
10003578:	01040074 	movhi	r4,4097
1000357c:	21116a04 	addi	r4,r4,17832
10003580:	180b883a 	mov	r5,r3
10003584:	100d883a 	mov	r6,r2
10003588:	0007c300 	call	10007c30 <printf>
		//usleep(20);
	}
1000358c:	00387206 	br	10001758 <__alt_data_end+0xf8001758>

10003590 <pow>:
10003590:	deffee04 	addi	sp,sp,-72
10003594:	dc800b15 	stw	r18,44(sp)
10003598:	048400b4 	movhi	r18,4098
1000359c:	ddc01015 	stw	r23,64(sp)
100035a0:	dd800f15 	stw	r22,60(sp)
100035a4:	dd400e15 	stw	r21,56(sp)
100035a8:	dd000d15 	stw	r20,52(sp)
100035ac:	dcc00c15 	stw	r19,48(sp)
100035b0:	dc400a15 	stw	r17,40(sp)
100035b4:	dc000915 	stw	r16,36(sp)
100035b8:	dfc01115 	stw	ra,68(sp)
100035bc:	94826b04 	addi	r18,r18,2476
100035c0:	202f883a 	mov	r23,r4
100035c4:	282d883a 	mov	r22,r5
100035c8:	302b883a 	mov	r21,r6
100035cc:	3829883a 	mov	r20,r7
100035d0:	0003b640 	call	10003b64 <__ieee754_pow>
100035d4:	1023883a 	mov	r17,r2
100035d8:	90800017 	ldw	r2,0(r18)
100035dc:	04ffffc4 	movi	r19,-1
100035e0:	1821883a 	mov	r16,r3
100035e4:	14c00426 	beq	r2,r19,100035f8 <pow+0x68>
100035e8:	a809883a 	mov	r4,r21
100035ec:	a00b883a 	mov	r5,r20
100035f0:	0004ef40 	call	10004ef4 <__fpclassifyd>
100035f4:	10000d1e 	bne	r2,zero,1000362c <pow+0x9c>
100035f8:	8805883a 	mov	r2,r17
100035fc:	8007883a 	mov	r3,r16
10003600:	dfc01117 	ldw	ra,68(sp)
10003604:	ddc01017 	ldw	r23,64(sp)
10003608:	dd800f17 	ldw	r22,60(sp)
1000360c:	dd400e17 	ldw	r21,56(sp)
10003610:	dd000d17 	ldw	r20,52(sp)
10003614:	dcc00c17 	ldw	r19,48(sp)
10003618:	dc800b17 	ldw	r18,44(sp)
1000361c:	dc400a17 	ldw	r17,40(sp)
10003620:	dc000917 	ldw	r16,36(sp)
10003624:	dec01204 	addi	sp,sp,72
10003628:	f800283a 	ret
1000362c:	b809883a 	mov	r4,r23
10003630:	b00b883a 	mov	r5,r22
10003634:	0004ef40 	call	10004ef4 <__fpclassifyd>
10003638:	1000221e 	bne	r2,zero,100036c4 <pow+0x134>
1000363c:	a809883a 	mov	r4,r21
10003640:	a00b883a 	mov	r5,r20
10003644:	000d883a 	mov	r6,zero
10003648:	000f883a 	mov	r7,zero
1000364c:	00066900 	call	10006690 <__eqdf2>
10003650:	103fe91e 	bne	r2,zero,100035f8 <__alt_data_end+0xf80035f8>
10003654:	00c00044 	movi	r3,1
10003658:	d8c00015 	stw	r3,0(sp)
1000365c:	00c40074 	movhi	r3,4097
10003660:	18d16c04 	addi	r3,r3,17840
10003664:	90800017 	ldw	r2,0(r18)
10003668:	d8c00115 	stw	r3,4(sp)
1000366c:	00cffc34 	movhi	r3,16368
10003670:	d8000815 	stw	zero,32(sp)
10003674:	ddc00215 	stw	r23,8(sp)
10003678:	dd800315 	stw	r22,12(sp)
1000367c:	dd400415 	stw	r21,16(sp)
10003680:	dd000515 	stw	r20,20(sp)
10003684:	d8000615 	stw	zero,24(sp)
10003688:	d8c00715 	stw	r3,28(sp)
1000368c:	14c00a26 	beq	r2,r19,100036b8 <pow+0x128>
10003690:	00c00084 	movi	r3,2
10003694:	10c00826 	beq	r2,r3,100036b8 <pow+0x128>
10003698:	d809883a 	mov	r4,sp
1000369c:	0004f680 	call	10004f68 <matherr>
100036a0:	10006b26 	beq	r2,zero,10003850 <pow+0x2c0>
100036a4:	d8800817 	ldw	r2,32(sp)
100036a8:	10000326 	beq	r2,zero,100036b8 <pow+0x128>
100036ac:	0007bf40 	call	10007bf4 <__errno>
100036b0:	d8c00817 	ldw	r3,32(sp)
100036b4:	10c00015 	stw	r3,0(r2)
100036b8:	d8800617 	ldw	r2,24(sp)
100036bc:	d8c00717 	ldw	r3,28(sp)
100036c0:	003fcf06 	br	10003600 <__alt_data_end+0xf8003600>
100036c4:	b809883a 	mov	r4,r23
100036c8:	b00b883a 	mov	r5,r22
100036cc:	000d883a 	mov	r6,zero
100036d0:	000f883a 	mov	r7,zero
100036d4:	00066900 	call	10006690 <__eqdf2>
100036d8:	1000171e 	bne	r2,zero,10003738 <pow+0x1a8>
100036dc:	a809883a 	mov	r4,r21
100036e0:	a00b883a 	mov	r5,r20
100036e4:	000d883a 	mov	r6,zero
100036e8:	000f883a 	mov	r7,zero
100036ec:	00066900 	call	10006690 <__eqdf2>
100036f0:	1000381e 	bne	r2,zero,100037d4 <pow+0x244>
100036f4:	00c00044 	movi	r3,1
100036f8:	d8c00015 	stw	r3,0(sp)
100036fc:	90800017 	ldw	r2,0(r18)
10003700:	00c40074 	movhi	r3,4097
10003704:	18d16c04 	addi	r3,r3,17840
10003708:	d8c00115 	stw	r3,4(sp)
1000370c:	d8000815 	stw	zero,32(sp)
10003710:	ddc00215 	stw	r23,8(sp)
10003714:	dd800315 	stw	r22,12(sp)
10003718:	dd400415 	stw	r21,16(sp)
1000371c:	dd000515 	stw	r20,20(sp)
10003720:	d8000615 	stw	zero,24(sp)
10003724:	d8000715 	stw	zero,28(sp)
10003728:	103fdb26 	beq	r2,zero,10003698 <__alt_data_end+0xf8003698>
1000372c:	008ffc34 	movhi	r2,16368
10003730:	d8800715 	stw	r2,28(sp)
10003734:	003fe006 	br	100036b8 <__alt_data_end+0xf80036b8>
10003738:	8809883a 	mov	r4,r17
1000373c:	800b883a 	mov	r5,r16
10003740:	0004ed80 	call	10004ed8 <finite>
10003744:	10004626 	beq	r2,zero,10003860 <pow+0x2d0>
10003748:	8809883a 	mov	r4,r17
1000374c:	800b883a 	mov	r5,r16
10003750:	000d883a 	mov	r6,zero
10003754:	000f883a 	mov	r7,zero
10003758:	00066900 	call	10006690 <__eqdf2>
1000375c:	103fa61e 	bne	r2,zero,100035f8 <__alt_data_end+0xf80035f8>
10003760:	b809883a 	mov	r4,r23
10003764:	b00b883a 	mov	r5,r22
10003768:	0004ed80 	call	10004ed8 <finite>
1000376c:	103fa226 	beq	r2,zero,100035f8 <__alt_data_end+0xf80035f8>
10003770:	a809883a 	mov	r4,r21
10003774:	a00b883a 	mov	r5,r20
10003778:	0004ed80 	call	10004ed8 <finite>
1000377c:	103f9e26 	beq	r2,zero,100035f8 <__alt_data_end+0xf80035f8>
10003780:	00800104 	movi	r2,4
10003784:	d8800015 	stw	r2,0(sp)
10003788:	90c00017 	ldw	r3,0(r18)
1000378c:	00840074 	movhi	r2,4097
10003790:	10916c04 	addi	r2,r2,17840
10003794:	d8800115 	stw	r2,4(sp)
10003798:	d8000815 	stw	zero,32(sp)
1000379c:	ddc00215 	stw	r23,8(sp)
100037a0:	dd800315 	stw	r22,12(sp)
100037a4:	dd400415 	stw	r21,16(sp)
100037a8:	dd000515 	stw	r20,20(sp)
100037ac:	d8000615 	stw	zero,24(sp)
100037b0:	d8000715 	stw	zero,28(sp)
100037b4:	00800084 	movi	r2,2
100037b8:	18806126 	beq	r3,r2,10003940 <pow+0x3b0>
100037bc:	d809883a 	mov	r4,sp
100037c0:	0004f680 	call	10004f68 <matherr>
100037c4:	10005e26 	beq	r2,zero,10003940 <pow+0x3b0>
100037c8:	d8800817 	ldw	r2,32(sp)
100037cc:	103fba26 	beq	r2,zero,100036b8 <__alt_data_end+0xf80036b8>
100037d0:	003fb606 	br	100036ac <__alt_data_end+0xf80036ac>
100037d4:	a809883a 	mov	r4,r21
100037d8:	a00b883a 	mov	r5,r20
100037dc:	0004ed80 	call	10004ed8 <finite>
100037e0:	103f8526 	beq	r2,zero,100035f8 <__alt_data_end+0xf80035f8>
100037e4:	a809883a 	mov	r4,r21
100037e8:	a00b883a 	mov	r5,r20
100037ec:	000d883a 	mov	r6,zero
100037f0:	000f883a 	mov	r7,zero
100037f4:	00067f40 	call	100067f4 <__ledf2>
100037f8:	103f7f0e 	bge	r2,zero,100035f8 <__alt_data_end+0xf80035f8>
100037fc:	00c00044 	movi	r3,1
10003800:	d8c00015 	stw	r3,0(sp)
10003804:	90800017 	ldw	r2,0(r18)
10003808:	00c40074 	movhi	r3,4097
1000380c:	18d16c04 	addi	r3,r3,17840
10003810:	d8c00115 	stw	r3,4(sp)
10003814:	d8000815 	stw	zero,32(sp)
10003818:	ddc00215 	stw	r23,8(sp)
1000381c:	dd800315 	stw	r22,12(sp)
10003820:	dd400415 	stw	r21,16(sp)
10003824:	dd000515 	stw	r20,20(sp)
10003828:	d8000615 	stw	zero,24(sp)
1000382c:	10002526 	beq	r2,zero,100038c4 <pow+0x334>
10003830:	00fffc34 	movhi	r3,65520
10003834:	d8c00715 	stw	r3,28(sp)
10003838:	00c00084 	movi	r3,2
1000383c:	10c0221e 	bne	r2,r3,100038c8 <pow+0x338>
10003840:	0007bf40 	call	10007bf4 <__errno>
10003844:	00c00844 	movi	r3,33
10003848:	10c00015 	stw	r3,0(r2)
1000384c:	003fde06 	br	100037c8 <__alt_data_end+0xf80037c8>
10003850:	0007bf40 	call	10007bf4 <__errno>
10003854:	00c00844 	movi	r3,33
10003858:	10c00015 	stw	r3,0(r2)
1000385c:	003f9106 	br	100036a4 <__alt_data_end+0xf80036a4>
10003860:	b809883a 	mov	r4,r23
10003864:	b00b883a 	mov	r5,r22
10003868:	0004ed80 	call	10004ed8 <finite>
1000386c:	103fb626 	beq	r2,zero,10003748 <__alt_data_end+0xf8003748>
10003870:	a809883a 	mov	r4,r21
10003874:	a00b883a 	mov	r5,r20
10003878:	0004ed80 	call	10004ed8 <finite>
1000387c:	103fb226 	beq	r2,zero,10003748 <__alt_data_end+0xf8003748>
10003880:	8809883a 	mov	r4,r17
10003884:	800b883a 	mov	r5,r16
10003888:	0004ef40 	call	10004ef4 <__fpclassifyd>
1000388c:	1000121e 	bne	r2,zero,100038d8 <pow+0x348>
10003890:	00800044 	movi	r2,1
10003894:	d8800015 	stw	r2,0(sp)
10003898:	94000017 	ldw	r16,0(r18)
1000389c:	00840074 	movhi	r2,4097
100038a0:	10916c04 	addi	r2,r2,17840
100038a4:	d8800115 	stw	r2,4(sp)
100038a8:	d8000815 	stw	zero,32(sp)
100038ac:	ddc00215 	stw	r23,8(sp)
100038b0:	dd800315 	stw	r22,12(sp)
100038b4:	dd400415 	stw	r21,16(sp)
100038b8:	dd000515 	stw	r20,20(sp)
100038bc:	8000241e 	bne	r16,zero,10003950 <pow+0x3c0>
100038c0:	d8000615 	stw	zero,24(sp)
100038c4:	d8000715 	stw	zero,28(sp)
100038c8:	d809883a 	mov	r4,sp
100038cc:	0004f680 	call	10004f68 <matherr>
100038d0:	103fbd1e 	bne	r2,zero,100037c8 <__alt_data_end+0xf80037c8>
100038d4:	003fda06 	br	10003840 <__alt_data_end+0xf8003840>
100038d8:	00c000c4 	movi	r3,3
100038dc:	d8c00015 	stw	r3,0(sp)
100038e0:	90800017 	ldw	r2,0(r18)
100038e4:	00c40074 	movhi	r3,4097
100038e8:	18d16c04 	addi	r3,r3,17840
100038ec:	d8c00115 	stw	r3,4(sp)
100038f0:	d8000815 	stw	zero,32(sp)
100038f4:	ddc00215 	stw	r23,8(sp)
100038f8:	dd800315 	stw	r22,12(sp)
100038fc:	dd400415 	stw	r21,16(sp)
10003900:	dd000515 	stw	r20,20(sp)
10003904:	b809883a 	mov	r4,r23
10003908:	b00b883a 	mov	r5,r22
1000390c:	000d883a 	mov	r6,zero
10003910:	000f883a 	mov	r7,zero
10003914:	1000181e 	bne	r2,zero,10003978 <pow+0x3e8>
10003918:	00b80034 	movhi	r2,57344
1000391c:	d8800615 	stw	r2,24(sp)
10003920:	0091fc34 	movhi	r2,18416
10003924:	10bfffc4 	addi	r2,r2,-1
10003928:	d8800715 	stw	r2,28(sp)
1000392c:	00067f40 	call	100067f4 <__ledf2>
10003930:	10002a16 	blt	r2,zero,100039dc <pow+0x44c>
10003934:	90c00017 	ldw	r3,0(r18)
10003938:	00800084 	movi	r2,2
1000393c:	18bf9f1e 	bne	r3,r2,100037bc <__alt_data_end+0xf80037bc>
10003940:	0007bf40 	call	10007bf4 <__errno>
10003944:	00c00884 	movi	r3,34
10003948:	10c00015 	stw	r3,0(r2)
1000394c:	003f9e06 	br	100037c8 <__alt_data_end+0xf80037c8>
10003950:	0009883a 	mov	r4,zero
10003954:	000b883a 	mov	r5,zero
10003958:	000d883a 	mov	r6,zero
1000395c:	000f883a 	mov	r7,zero
10003960:	0005d100 	call	10005d10 <__divdf3>
10003964:	d8800615 	stw	r2,24(sp)
10003968:	d8c00715 	stw	r3,28(sp)
1000396c:	00800084 	movi	r2,2
10003970:	80bfb326 	beq	r16,r2,10003840 <__alt_data_end+0xf8003840>
10003974:	003fd406 	br	100038c8 <__alt_data_end+0xf80038c8>
10003978:	009ffc34 	movhi	r2,32752
1000397c:	d8000615 	stw	zero,24(sp)
10003980:	d8800715 	stw	r2,28(sp)
10003984:	00067f40 	call	100067f4 <__ledf2>
10003988:	103fea0e 	bge	r2,zero,10003934 <__alt_data_end+0xf8003934>
1000398c:	000d883a 	mov	r6,zero
10003990:	01cff834 	movhi	r7,16352
10003994:	a809883a 	mov	r4,r21
10003998:	a00b883a 	mov	r5,r20
1000399c:	00068d40 	call	100068d4 <__muldf3>
100039a0:	1009883a 	mov	r4,r2
100039a4:	180b883a 	mov	r5,r3
100039a8:	1023883a 	mov	r17,r2
100039ac:	1821883a 	mov	r16,r3
100039b0:	0004f7c0 	call	10004f7c <rint>
100039b4:	1009883a 	mov	r4,r2
100039b8:	180b883a 	mov	r5,r3
100039bc:	880d883a 	mov	r6,r17
100039c0:	800f883a 	mov	r7,r16
100039c4:	00066900 	call	10006690 <__eqdf2>
100039c8:	103fda26 	beq	r2,zero,10003934 <__alt_data_end+0xf8003934>
100039cc:	00bffc34 	movhi	r2,65520
100039d0:	d8000615 	stw	zero,24(sp)
100039d4:	d8800715 	stw	r2,28(sp)
100039d8:	003fd606 	br	10003934 <__alt_data_end+0xf8003934>
100039dc:	000d883a 	mov	r6,zero
100039e0:	01cff834 	movhi	r7,16352
100039e4:	a809883a 	mov	r4,r21
100039e8:	a00b883a 	mov	r5,r20
100039ec:	00068d40 	call	100068d4 <__muldf3>
100039f0:	1009883a 	mov	r4,r2
100039f4:	180b883a 	mov	r5,r3
100039f8:	1023883a 	mov	r17,r2
100039fc:	1821883a 	mov	r16,r3
10003a00:	0004f7c0 	call	10004f7c <rint>
10003a04:	1009883a 	mov	r4,r2
10003a08:	180b883a 	mov	r5,r3
10003a0c:	880d883a 	mov	r6,r17
10003a10:	800f883a 	mov	r7,r16
10003a14:	00066900 	call	10006690 <__eqdf2>
10003a18:	103fc626 	beq	r2,zero,10003934 <__alt_data_end+0xf8003934>
10003a1c:	00b80034 	movhi	r2,57344
10003a20:	d8800615 	stw	r2,24(sp)
10003a24:	00b1fc34 	movhi	r2,51184
10003a28:	10bfffc4 	addi	r2,r2,-1
10003a2c:	d8800715 	stw	r2,28(sp)
10003a30:	003fc006 	br	10003934 <__alt_data_end+0xf8003934>

10003a34 <sqrt>:
10003a34:	defff104 	addi	sp,sp,-60
10003a38:	dd000d15 	stw	r20,52(sp)
10003a3c:	050400b4 	movhi	r20,4098
10003a40:	dcc00c15 	stw	r19,48(sp)
10003a44:	dc800b15 	stw	r18,44(sp)
10003a48:	dc400a15 	stw	r17,40(sp)
10003a4c:	dc000915 	stw	r16,36(sp)
10003a50:	dfc00e15 	stw	ra,56(sp)
10003a54:	a5026b04 	addi	r20,r20,2476
10003a58:	2027883a 	mov	r19,r4
10003a5c:	2825883a 	mov	r18,r5
10003a60:	0004c300 	call	10004c30 <__ieee754_sqrt>
10003a64:	1821883a 	mov	r16,r3
10003a68:	a0c00017 	ldw	r3,0(r20)
10003a6c:	1023883a 	mov	r17,r2
10003a70:	00bfffc4 	movi	r2,-1
10003a74:	18800a26 	beq	r3,r2,10003aa0 <sqrt+0x6c>
10003a78:	9809883a 	mov	r4,r19
10003a7c:	900b883a 	mov	r5,r18
10003a80:	0004ef40 	call	10004ef4 <__fpclassifyd>
10003a84:	10000626 	beq	r2,zero,10003aa0 <sqrt+0x6c>
10003a88:	9809883a 	mov	r4,r19
10003a8c:	900b883a 	mov	r5,r18
10003a90:	000d883a 	mov	r6,zero
10003a94:	000f883a 	mov	r7,zero
10003a98:	00067f40 	call	100067f4 <__ledf2>
10003a9c:	10000a16 	blt	r2,zero,10003ac8 <sqrt+0x94>
10003aa0:	8805883a 	mov	r2,r17
10003aa4:	8007883a 	mov	r3,r16
10003aa8:	dfc00e17 	ldw	ra,56(sp)
10003aac:	dd000d17 	ldw	r20,52(sp)
10003ab0:	dcc00c17 	ldw	r19,48(sp)
10003ab4:	dc800b17 	ldw	r18,44(sp)
10003ab8:	dc400a17 	ldw	r17,40(sp)
10003abc:	dc000917 	ldw	r16,36(sp)
10003ac0:	dec00f04 	addi	sp,sp,60
10003ac4:	f800283a 	ret
10003ac8:	00800044 	movi	r2,1
10003acc:	d8800015 	stw	r2,0(sp)
10003ad0:	a4000017 	ldw	r16,0(r20)
10003ad4:	00840074 	movhi	r2,4097
10003ad8:	10916d04 	addi	r2,r2,17844
10003adc:	d8800115 	stw	r2,4(sp)
10003ae0:	d8000815 	stw	zero,32(sp)
10003ae4:	dcc00415 	stw	r19,16(sp)
10003ae8:	dc800515 	stw	r18,20(sp)
10003aec:	dcc00215 	stw	r19,8(sp)
10003af0:	dc800315 	stw	r18,12(sp)
10003af4:	80000a1e 	bne	r16,zero,10003b20 <sqrt+0xec>
10003af8:	d8000615 	stw	zero,24(sp)
10003afc:	d8000715 	stw	zero,28(sp)
10003b00:	d809883a 	mov	r4,sp
10003b04:	0004f680 	call	10004f68 <matherr>
10003b08:	10000e26 	beq	r2,zero,10003b44 <sqrt+0x110>
10003b0c:	d8800817 	ldw	r2,32(sp)
10003b10:	1000101e 	bne	r2,zero,10003b54 <sqrt+0x120>
10003b14:	d8800617 	ldw	r2,24(sp)
10003b18:	d8c00717 	ldw	r3,28(sp)
10003b1c:	003fe206 	br	10003aa8 <__alt_data_end+0xf8003aa8>
10003b20:	0009883a 	mov	r4,zero
10003b24:	000b883a 	mov	r5,zero
10003b28:	000d883a 	mov	r6,zero
10003b2c:	000f883a 	mov	r7,zero
10003b30:	0005d100 	call	10005d10 <__divdf3>
10003b34:	d8800615 	stw	r2,24(sp)
10003b38:	d8c00715 	stw	r3,28(sp)
10003b3c:	00800084 	movi	r2,2
10003b40:	80bfef1e 	bne	r16,r2,10003b00 <__alt_data_end+0xf8003b00>
10003b44:	0007bf40 	call	10007bf4 <__errno>
10003b48:	00c00844 	movi	r3,33
10003b4c:	10c00015 	stw	r3,0(r2)
10003b50:	003fee06 	br	10003b0c <__alt_data_end+0xf8003b0c>
10003b54:	0007bf40 	call	10007bf4 <__errno>
10003b58:	d8c00817 	ldw	r3,32(sp)
10003b5c:	10c00015 	stw	r3,0(r2)
10003b60:	003fec06 	br	10003b14 <__alt_data_end+0xf8003b14>

10003b64 <__ieee754_pow>:
10003b64:	00a00034 	movhi	r2,32768
10003b68:	deffec04 	addi	sp,sp,-80
10003b6c:	10bfffc4 	addi	r2,r2,-1
10003b70:	dc400b15 	stw	r17,44(sp)
10003b74:	38a2703a 	and	r17,r7,r2
10003b78:	dfc01315 	stw	ra,76(sp)
10003b7c:	df001215 	stw	fp,72(sp)
10003b80:	ddc01115 	stw	r23,68(sp)
10003b84:	dd801015 	stw	r22,64(sp)
10003b88:	dd400f15 	stw	r21,60(sp)
10003b8c:	dd000e15 	stw	r20,56(sp)
10003b90:	dcc00d15 	stw	r19,52(sp)
10003b94:	dc800c15 	stw	r18,48(sp)
10003b98:	dc000a15 	stw	r16,40(sp)
10003b9c:	8986b03a 	or	r3,r17,r6
10003ba0:	18002a26 	beq	r3,zero,10003c4c <__ieee754_pow+0xe8>
10003ba4:	28a4703a 	and	r18,r5,r2
10003ba8:	009ffc34 	movhi	r2,32752
10003bac:	14802316 	blt	r2,r18,10003c3c <__ieee754_pow+0xd8>
10003bb0:	90802126 	beq	r18,r2,10003c38 <__ieee754_pow+0xd4>
10003bb4:	14402116 	blt	r2,r17,10003c3c <__ieee754_pow+0xd8>
10003bb8:	009ffc34 	movhi	r2,32752
10003bbc:	88807326 	beq	r17,r2,10003d8c <__ieee754_pow+0x228>
10003bc0:	2827883a 	mov	r19,r5
10003bc4:	2021883a 	mov	r16,r4
10003bc8:	302b883a 	mov	r21,r6
10003bcc:	382f883a 	mov	r23,r7
10003bd0:	28007016 	blt	r5,zero,10003d94 <__ieee754_pow+0x230>
10003bd4:	0039883a 	mov	fp,zero
10003bd8:	a8003a1e 	bne	r21,zero,10003cc4 <__ieee754_pow+0x160>
10003bdc:	009ffc34 	movhi	r2,32752
10003be0:	88807e26 	beq	r17,r2,10003ddc <__ieee754_pow+0x278>
10003be4:	008ffc34 	movhi	r2,16368
10003be8:	88805426 	beq	r17,r2,10003d3c <__ieee754_pow+0x1d8>
10003bec:	00900034 	movhi	r2,16384
10003bf0:	b8834926 	beq	r23,r2,10004918 <__ieee754_pow+0xdb4>
10003bf4:	008ff834 	movhi	r2,16352
10003bf8:	b880321e 	bne	r23,r2,10003cc4 <__ieee754_pow+0x160>
10003bfc:	98003116 	blt	r19,zero,10003cc4 <__ieee754_pow+0x160>
10003c00:	8009883a 	mov	r4,r16
10003c04:	980b883a 	mov	r5,r19
10003c08:	dfc01317 	ldw	ra,76(sp)
10003c0c:	df001217 	ldw	fp,72(sp)
10003c10:	ddc01117 	ldw	r23,68(sp)
10003c14:	dd801017 	ldw	r22,64(sp)
10003c18:	dd400f17 	ldw	r21,60(sp)
10003c1c:	dd000e17 	ldw	r20,56(sp)
10003c20:	dcc00d17 	ldw	r19,52(sp)
10003c24:	dc800c17 	ldw	r18,48(sp)
10003c28:	dc400b17 	ldw	r17,44(sp)
10003c2c:	dc000a17 	ldw	r16,40(sp)
10003c30:	dec01404 	addi	sp,sp,80
10003c34:	0004c301 	jmpi	10004c30 <__ieee754_sqrt>
10003c38:	20001226 	beq	r4,zero,10003c84 <__ieee754_pow+0x120>
10003c3c:	00b00434 	movhi	r2,49168
10003c40:	9085883a 	add	r2,r18,r2
10003c44:	1108b03a 	or	r4,r2,r4
10003c48:	20000f1e 	bne	r4,zero,10003c88 <__ieee754_pow+0x124>
10003c4c:	0005883a 	mov	r2,zero
10003c50:	00cffc34 	movhi	r3,16368
10003c54:	dfc01317 	ldw	ra,76(sp)
10003c58:	df001217 	ldw	fp,72(sp)
10003c5c:	ddc01117 	ldw	r23,68(sp)
10003c60:	dd801017 	ldw	r22,64(sp)
10003c64:	dd400f17 	ldw	r21,60(sp)
10003c68:	dd000e17 	ldw	r20,56(sp)
10003c6c:	dcc00d17 	ldw	r19,52(sp)
10003c70:	dc800c17 	ldw	r18,48(sp)
10003c74:	dc400b17 	ldw	r17,44(sp)
10003c78:	dc000a17 	ldw	r16,40(sp)
10003c7c:	dec01404 	addi	sp,sp,80
10003c80:	f800283a 	ret
10003c84:	947fcc0e 	bge	r18,r17,10003bb8 <__alt_data_end+0xf8003bb8>
10003c88:	01040074 	movhi	r4,4097
10003c8c:	2111c804 	addi	r4,r4,18208
10003c90:	dfc01317 	ldw	ra,76(sp)
10003c94:	df001217 	ldw	fp,72(sp)
10003c98:	ddc01117 	ldw	r23,68(sp)
10003c9c:	dd801017 	ldw	r22,64(sp)
10003ca0:	dd400f17 	ldw	r21,60(sp)
10003ca4:	dd000e17 	ldw	r20,56(sp)
10003ca8:	dcc00d17 	ldw	r19,52(sp)
10003cac:	dc800c17 	ldw	r18,48(sp)
10003cb0:	dc400b17 	ldw	r17,44(sp)
10003cb4:	dc000a17 	ldw	r16,40(sp)
10003cb8:	dec01404 	addi	sp,sp,80
10003cbc:	0004f701 	jmpi	10004f70 <nan>
10003cc0:	0039883a 	mov	fp,zero
10003cc4:	8009883a 	mov	r4,r16
10003cc8:	980b883a 	mov	r5,r19
10003ccc:	0004ec40 	call	10004ec4 <fabs>
10003cd0:	102d883a 	mov	r22,r2
10003cd4:	80000f26 	beq	r16,zero,10003d14 <__ieee754_pow+0x1b0>
10003cd8:	9816d7fa 	srli	r11,r19,31
10003cdc:	5affffc4 	addi	r11,r11,-1
10003ce0:	e2c4b03a 	or	r2,fp,r11
10003ce4:	10004a26 	beq	r2,zero,10003e10 <__ieee754_pow+0x2ac>
10003ce8:	00907834 	movhi	r2,16864
10003cec:	1440530e 	bge	r2,r17,10003e3c <__ieee754_pow+0x2d8>
10003cf0:	0090fc34 	movhi	r2,17392
10003cf4:	14433e0e 	bge	r2,r17,100049f0 <__ieee754_pow+0xe8c>
10003cf8:	008ffc34 	movhi	r2,16368
10003cfc:	10bfffc4 	addi	r2,r2,-1
10003d00:	14801916 	blt	r2,r18,10003d68 <__ieee754_pow+0x204>
10003d04:	b8001916 	blt	r23,zero,10003d6c <__ieee754_pow+0x208>
10003d08:	0005883a 	mov	r2,zero
10003d0c:	0007883a 	mov	r3,zero
10003d10:	003fd006 	br	10003c54 <__alt_data_end+0xf8003c54>
10003d14:	90000526 	beq	r18,zero,10003d2c <__ieee754_pow+0x1c8>
10003d18:	00900034 	movhi	r2,16384
10003d1c:	10bfffc4 	addi	r2,r2,-1
10003d20:	9884703a 	and	r2,r19,r2
10003d24:	010ffc34 	movhi	r4,16368
10003d28:	113feb1e 	bne	r2,r4,10003cd8 <__alt_data_end+0xf8003cd8>
10003d2c:	b8000716 	blt	r23,zero,10003d4c <__ieee754_pow+0x1e8>
10003d30:	9802f216 	blt	r19,zero,100048fc <__ieee754_pow+0xd98>
10003d34:	b005883a 	mov	r2,r22
10003d38:	003fc606 	br	10003c54 <__alt_data_end+0xf8003c54>
10003d3c:	b8038816 	blt	r23,zero,10004b60 <__ieee754_pow+0xffc>
10003d40:	8005883a 	mov	r2,r16
10003d44:	9807883a 	mov	r3,r19
10003d48:	003fc206 	br	10003c54 <__alt_data_end+0xf8003c54>
10003d4c:	b00d883a 	mov	r6,r22
10003d50:	0009883a 	mov	r4,zero
10003d54:	014ffc34 	movhi	r5,16368
10003d58:	180f883a 	mov	r7,r3
10003d5c:	0005d100 	call	10005d10 <__divdf3>
10003d60:	102d883a 	mov	r22,r2
10003d64:	003ff206 	br	10003d30 <__alt_data_end+0xf8003d30>
10003d68:	05ffe70e 	bge	zero,r23,10003d08 <__alt_data_end+0xf8003d08>
10003d6c:	01220034 	movhi	r4,34816
10003d70:	015f8e34 	movhi	r5,32312
10003d74:	211d6704 	addi	r4,r4,30108
10003d78:	29790f04 	addi	r5,r5,-7108
10003d7c:	200d883a 	mov	r6,r4
10003d80:	280f883a 	mov	r7,r5
10003d84:	00068d40 	call	100068d4 <__muldf3>
10003d88:	003fb206 	br	10003c54 <__alt_data_end+0xf8003c54>
10003d8c:	303f8c26 	beq	r6,zero,10003bc0 <__alt_data_end+0xf8003bc0>
10003d90:	003faa06 	br	10003c3c <__alt_data_end+0xf8003c3c>
10003d94:	0090d034 	movhi	r2,17216
10003d98:	10bfffc4 	addi	r2,r2,-1
10003d9c:	14401a16 	blt	r2,r17,10003e08 <__ieee754_pow+0x2a4>
10003da0:	008ffc34 	movhi	r2,16368
10003da4:	10bfffc4 	addi	r2,r2,-1
10003da8:	147f8a0e 	bge	r2,r17,10003bd4 <__alt_data_end+0xf8003bd4>
10003dac:	8809d53a 	srai	r4,r17,20
10003db0:	00c104c4 	movi	r3,1043
10003db4:	1903840e 	bge	r3,r4,10004bc8 <__ieee754_pow+0x1064>
10003db8:	00810cc4 	movi	r2,1075
10003dbc:	1105c83a 	sub	r2,r2,r4
10003dc0:	3086d83a 	srl	r3,r6,r2
10003dc4:	1884983a 	sll	r2,r3,r2
10003dc8:	11bf821e 	bne	r2,r6,10003bd4 <__alt_data_end+0xf8003bd4>
10003dcc:	18c0004c 	andi	r3,r3,1
10003dd0:	02800084 	movi	r10,2
10003dd4:	50f9c83a 	sub	fp,r10,r3
10003dd8:	003f7f06 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10003ddc:	01300434 	movhi	r4,49168
10003de0:	9109883a 	add	r4,r18,r4
10003de4:	2408b03a 	or	r4,r4,r16
10003de8:	203f9826 	beq	r4,zero,10003c4c <__alt_data_end+0xf8003c4c>
10003dec:	008ffc34 	movhi	r2,16368
10003df0:	10bfffc4 	addi	r2,r2,-1
10003df4:	1482f50e 	bge	r2,r18,100049cc <__ieee754_pow+0xe68>
10003df8:	b83fc316 	blt	r23,zero,10003d08 <__alt_data_end+0xf8003d08>
10003dfc:	0005883a 	mov	r2,zero
10003e00:	b807883a 	mov	r3,r23
10003e04:	003f9306 	br	10003c54 <__alt_data_end+0xf8003c54>
10003e08:	07000084 	movi	fp,2
10003e0c:	003f7206 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10003e10:	8009883a 	mov	r4,r16
10003e14:	980b883a 	mov	r5,r19
10003e18:	200d883a 	mov	r6,r4
10003e1c:	280f883a 	mov	r7,r5
10003e20:	00071400 	call	10007140 <__subdf3>
10003e24:	1009883a 	mov	r4,r2
10003e28:	180b883a 	mov	r5,r3
10003e2c:	100d883a 	mov	r6,r2
10003e30:	180f883a 	mov	r7,r3
10003e34:	0005d100 	call	10005d10 <__divdf3>
10003e38:	003f8606 	br	10003c54 <__alt_data_end+0xf8003c54>
10003e3c:	00800434 	movhi	r2,16
10003e40:	10bfffc4 	addi	r2,r2,-1
10003e44:	1482e816 	blt	r2,r18,100049e8 <__ieee754_pow+0xe84>
10003e48:	b009883a 	mov	r4,r22
10003e4c:	180b883a 	mov	r5,r3
10003e50:	000d883a 	mov	r6,zero
10003e54:	01d0d034 	movhi	r7,17216
10003e58:	dac00915 	stw	r11,36(sp)
10003e5c:	00068d40 	call	100068d4 <__muldf3>
10003e60:	dac00917 	ldw	r11,36(sp)
10003e64:	102d883a 	mov	r22,r2
10003e68:	1825883a 	mov	r18,r3
10003e6c:	013ff2c4 	movi	r4,-53
10003e70:	9007d53a 	srai	r3,r18,20
10003e74:	00800434 	movhi	r2,16
10003e78:	10bfffc4 	addi	r2,r2,-1
10003e7c:	18ff0044 	addi	r3,r3,-1023
10003e80:	1911883a 	add	r8,r3,r4
10003e84:	00c00134 	movhi	r3,4
10003e88:	9084703a 	and	r2,r18,r2
10003e8c:	18e62384 	addi	r3,r3,-26482
10003e90:	14cffc34 	orhi	r19,r2,16368
10003e94:	1882d10e 	bge	r3,r2,100049dc <__ieee754_pow+0xe78>
10003e98:	00c00334 	movhi	r3,12
10003e9c:	18ed9e44 	addi	r3,r3,-18823
10003ea0:	1883550e 	bge	r3,r2,10004bf8 <__ieee754_pow+0x1094>
10003ea4:	00bffc34 	movhi	r2,65520
10003ea8:	42000044 	addi	r8,r8,1
10003eac:	98a7883a 	add	r19,r19,r2
10003eb0:	0021883a 	mov	r16,zero
10003eb4:	0019883a 	mov	r12,zero
10003eb8:	601890fa 	slli	r12,r12,3
10003ebc:	00840074 	movhi	r2,4097
10003ec0:	10917704 	addi	r2,r2,17884
10003ec4:	1305883a 	add	r2,r2,r12
10003ec8:	13400017 	ldw	r13,0(r2)
10003ecc:	12800117 	ldw	r10,4(r2)
10003ed0:	b009883a 	mov	r4,r22
10003ed4:	980b883a 	mov	r5,r19
10003ed8:	680d883a 	mov	r6,r13
10003edc:	500f883a 	mov	r7,r10
10003ee0:	da000815 	stw	r8,32(sp)
10003ee4:	dac00915 	stw	r11,36(sp)
10003ee8:	db000715 	stw	r12,28(sp)
10003eec:	da800315 	stw	r10,12(sp)
10003ef0:	db400415 	stw	r13,16(sp)
10003ef4:	00071400 	call	10007140 <__subdf3>
10003ef8:	da800317 	ldw	r10,12(sp)
10003efc:	db400417 	ldw	r13,16(sp)
10003f00:	b009883a 	mov	r4,r22
10003f04:	500f883a 	mov	r7,r10
10003f08:	680d883a 	mov	r6,r13
10003f0c:	980b883a 	mov	r5,r19
10003f10:	1829883a 	mov	r20,r3
10003f14:	d8800015 	stw	r2,0(sp)
10003f18:	00054740 	call	10005474 <__adddf3>
10003f1c:	0009883a 	mov	r4,zero
10003f20:	014ffc34 	movhi	r5,16368
10003f24:	100d883a 	mov	r6,r2
10003f28:	180f883a 	mov	r7,r3
10003f2c:	0005d100 	call	10005d10 <__divdf3>
10003f30:	d9000017 	ldw	r4,0(sp)
10003f34:	a00b883a 	mov	r5,r20
10003f38:	100d883a 	mov	r6,r2
10003f3c:	180f883a 	mov	r7,r3
10003f40:	d8c00615 	stw	r3,24(sp)
10003f44:	d8800515 	stw	r2,20(sp)
10003f48:	00068d40 	call	100068d4 <__muldf3>
10003f4c:	1025883a 	mov	r18,r2
10003f50:	9805d07a 	srai	r2,r19,1
10003f54:	1823883a 	mov	r17,r3
10003f58:	880b883a 	mov	r5,r17
10003f5c:	10c80034 	orhi	r3,r2,8192
10003f60:	00800234 	movhi	r2,8
10003f64:	1885883a 	add	r2,r3,r2
10003f68:	1421883a 	add	r16,r2,r16
10003f6c:	800f883a 	mov	r7,r16
10003f70:	0009883a 	mov	r4,zero
10003f74:	000d883a 	mov	r6,zero
10003f78:	00068d40 	call	100068d4 <__muldf3>
10003f7c:	d9000017 	ldw	r4,0(sp)
10003f80:	a00b883a 	mov	r5,r20
10003f84:	100d883a 	mov	r6,r2
10003f88:	180f883a 	mov	r7,r3
10003f8c:	00071400 	call	10007140 <__subdf3>
10003f90:	da800317 	ldw	r10,12(sp)
10003f94:	db400417 	ldw	r13,16(sp)
10003f98:	800b883a 	mov	r5,r16
10003f9c:	500f883a 	mov	r7,r10
10003fa0:	680d883a 	mov	r6,r13
10003fa4:	0009883a 	mov	r4,zero
10003fa8:	1829883a 	mov	r20,r3
10003fac:	d8800315 	stw	r2,12(sp)
10003fb0:	00071400 	call	10007140 <__subdf3>
10003fb4:	b009883a 	mov	r4,r22
10003fb8:	980b883a 	mov	r5,r19
10003fbc:	100d883a 	mov	r6,r2
10003fc0:	180f883a 	mov	r7,r3
10003fc4:	00071400 	call	10007140 <__subdf3>
10003fc8:	880b883a 	mov	r5,r17
10003fcc:	0009883a 	mov	r4,zero
10003fd0:	100d883a 	mov	r6,r2
10003fd4:	180f883a 	mov	r7,r3
10003fd8:	00068d40 	call	100068d4 <__muldf3>
10003fdc:	da400317 	ldw	r9,12(sp)
10003fe0:	a00b883a 	mov	r5,r20
10003fe4:	100d883a 	mov	r6,r2
10003fe8:	4809883a 	mov	r4,r9
10003fec:	180f883a 	mov	r7,r3
10003ff0:	00071400 	call	10007140 <__subdf3>
10003ff4:	dbc00517 	ldw	r15,20(sp)
10003ff8:	db800617 	ldw	r14,24(sp)
10003ffc:	1009883a 	mov	r4,r2
10004000:	780d883a 	mov	r6,r15
10004004:	700f883a 	mov	r7,r14
10004008:	180b883a 	mov	r5,r3
1000400c:	00068d40 	call	100068d4 <__muldf3>
10004010:	9009883a 	mov	r4,r18
10004014:	880b883a 	mov	r5,r17
10004018:	900d883a 	mov	r6,r18
1000401c:	880f883a 	mov	r7,r17
10004020:	182d883a 	mov	r22,r3
10004024:	d8800015 	stw	r2,0(sp)
10004028:	00068d40 	call	100068d4 <__muldf3>
1000402c:	1009883a 	mov	r4,r2
10004030:	180b883a 	mov	r5,r3
10004034:	100d883a 	mov	r6,r2
10004038:	180f883a 	mov	r7,r3
1000403c:	1027883a 	mov	r19,r2
10004040:	1821883a 	mov	r16,r3
10004044:	00068d40 	call	100068d4 <__muldf3>
10004048:	01929174 	movhi	r6,19013
1000404c:	01cff2b4 	movhi	r7,16330
10004050:	9809883a 	mov	r4,r19
10004054:	800b883a 	mov	r5,r16
10004058:	3193bbc4 	addi	r6,r6,20207
1000405c:	39df8a04 	addi	r7,r7,32296
10004060:	1829883a 	mov	r20,r3
10004064:	d8800315 	stw	r2,12(sp)
10004068:	00068d40 	call	100068d4 <__muldf3>
1000406c:	01a4f2b4 	movhi	r6,37834
10004070:	01cff3b4 	movhi	r7,16334
10004074:	1009883a 	mov	r4,r2
10004078:	180b883a 	mov	r5,r3
1000407c:	31b6d944 	addi	r6,r6,-9371
10004080:	39e19284 	addi	r7,r7,-31158
10004084:	00054740 	call	10005474 <__adddf3>
10004088:	980d883a 	mov	r6,r19
1000408c:	800f883a 	mov	r7,r16
10004090:	1009883a 	mov	r4,r2
10004094:	180b883a 	mov	r5,r3
10004098:	00068d40 	call	100068d4 <__muldf3>
1000409c:	01aa4774 	movhi	r6,43293
100040a0:	01cff474 	movhi	r7,16337
100040a4:	1009883a 	mov	r4,r2
100040a8:	180b883a 	mov	r5,r3
100040ac:	31904044 	addi	r6,r6,16641
100040b0:	39dd1804 	addi	r7,r7,29792
100040b4:	00054740 	call	10005474 <__adddf3>
100040b8:	980d883a 	mov	r6,r19
100040bc:	800f883a 	mov	r7,r16
100040c0:	1009883a 	mov	r4,r2
100040c4:	180b883a 	mov	r5,r3
100040c8:	00068d40 	call	100068d4 <__muldf3>
100040cc:	019463f4 	movhi	r6,20879
100040d0:	01cff574 	movhi	r7,16341
100040d4:	1009883a 	mov	r4,r2
100040d8:	180b883a 	mov	r5,r3
100040dc:	31899344 	addi	r6,r6,9805
100040e0:	39d55544 	addi	r7,r7,21845
100040e4:	00054740 	call	10005474 <__adddf3>
100040e8:	980d883a 	mov	r6,r19
100040ec:	800f883a 	mov	r7,r16
100040f0:	1009883a 	mov	r4,r2
100040f4:	180b883a 	mov	r5,r3
100040f8:	00068d40 	call	100068d4 <__muldf3>
100040fc:	01b6dc34 	movhi	r6,56176
10004100:	01cff6f4 	movhi	r7,16347
10004104:	1009883a 	mov	r4,r2
10004108:	180b883a 	mov	r5,r3
1000410c:	31aaffc4 	addi	r6,r6,-21505
10004110:	39db6d84 	addi	r7,r7,28086
10004114:	00054740 	call	10005474 <__adddf3>
10004118:	980d883a 	mov	r6,r19
1000411c:	800f883a 	mov	r7,r16
10004120:	1009883a 	mov	r4,r2
10004124:	180b883a 	mov	r5,r3
10004128:	00068d40 	call	100068d4 <__muldf3>
1000412c:	018cccf4 	movhi	r6,13107
10004130:	01cff8f4 	movhi	r7,16355
10004134:	1009883a 	mov	r4,r2
10004138:	180b883a 	mov	r5,r3
1000413c:	318cc0c4 	addi	r6,r6,13059
10004140:	39ccccc4 	addi	r7,r7,13107
10004144:	00054740 	call	10005474 <__adddf3>
10004148:	da400317 	ldw	r9,12(sp)
1000414c:	a00b883a 	mov	r5,r20
10004150:	100d883a 	mov	r6,r2
10004154:	4809883a 	mov	r4,r9
10004158:	180f883a 	mov	r7,r3
1000415c:	00068d40 	call	100068d4 <__muldf3>
10004160:	880b883a 	mov	r5,r17
10004164:	900d883a 	mov	r6,r18
10004168:	880f883a 	mov	r7,r17
1000416c:	0009883a 	mov	r4,zero
10004170:	1027883a 	mov	r19,r2
10004174:	1821883a 	mov	r16,r3
10004178:	00054740 	call	10005474 <__adddf3>
1000417c:	d9800017 	ldw	r6,0(sp)
10004180:	b00f883a 	mov	r7,r22
10004184:	1009883a 	mov	r4,r2
10004188:	180b883a 	mov	r5,r3
1000418c:	00068d40 	call	100068d4 <__muldf3>
10004190:	980d883a 	mov	r6,r19
10004194:	800f883a 	mov	r7,r16
10004198:	1009883a 	mov	r4,r2
1000419c:	180b883a 	mov	r5,r3
100041a0:	00054740 	call	10005474 <__adddf3>
100041a4:	880f883a 	mov	r7,r17
100041a8:	880b883a 	mov	r5,r17
100041ac:	000d883a 	mov	r6,zero
100041b0:	0009883a 	mov	r4,zero
100041b4:	1029883a 	mov	r20,r2
100041b8:	1827883a 	mov	r19,r3
100041bc:	00068d40 	call	100068d4 <__muldf3>
100041c0:	1009883a 	mov	r4,r2
100041c4:	180b883a 	mov	r5,r3
100041c8:	000d883a 	mov	r6,zero
100041cc:	01d00234 	movhi	r7,16392
100041d0:	d8c00615 	stw	r3,24(sp)
100041d4:	d8800515 	stw	r2,20(sp)
100041d8:	00054740 	call	10005474 <__adddf3>
100041dc:	a00d883a 	mov	r6,r20
100041e0:	980f883a 	mov	r7,r19
100041e4:	1009883a 	mov	r4,r2
100041e8:	180b883a 	mov	r5,r3
100041ec:	00054740 	call	10005474 <__adddf3>
100041f0:	880b883a 	mov	r5,r17
100041f4:	000d883a 	mov	r6,zero
100041f8:	180f883a 	mov	r7,r3
100041fc:	0009883a 	mov	r4,zero
10004200:	1821883a 	mov	r16,r3
10004204:	00068d40 	call	100068d4 <__muldf3>
10004208:	d9000017 	ldw	r4,0(sp)
1000420c:	b00b883a 	mov	r5,r22
10004210:	800f883a 	mov	r7,r16
10004214:	000d883a 	mov	r6,zero
10004218:	d8800115 	stw	r2,4(sp)
1000421c:	d8c00215 	stw	r3,8(sp)
10004220:	00068d40 	call	100068d4 <__muldf3>
10004224:	800b883a 	mov	r5,r16
10004228:	0009883a 	mov	r4,zero
1000422c:	000d883a 	mov	r6,zero
10004230:	01d00234 	movhi	r7,16392
10004234:	182d883a 	mov	r22,r3
10004238:	d8800315 	stw	r2,12(sp)
1000423c:	00071400 	call	10007140 <__subdf3>
10004240:	dbc00517 	ldw	r15,20(sp)
10004244:	db800617 	ldw	r14,24(sp)
10004248:	1009883a 	mov	r4,r2
1000424c:	780d883a 	mov	r6,r15
10004250:	700f883a 	mov	r7,r14
10004254:	180b883a 	mov	r5,r3
10004258:	00071400 	call	10007140 <__subdf3>
1000425c:	a009883a 	mov	r4,r20
10004260:	980b883a 	mov	r5,r19
10004264:	100d883a 	mov	r6,r2
10004268:	180f883a 	mov	r7,r3
1000426c:	00071400 	call	10007140 <__subdf3>
10004270:	900d883a 	mov	r6,r18
10004274:	880f883a 	mov	r7,r17
10004278:	1009883a 	mov	r4,r2
1000427c:	180b883a 	mov	r5,r3
10004280:	00068d40 	call	100068d4 <__muldf3>
10004284:	da400317 	ldw	r9,12(sp)
10004288:	b00b883a 	mov	r5,r22
1000428c:	100d883a 	mov	r6,r2
10004290:	4809883a 	mov	r4,r9
10004294:	180f883a 	mov	r7,r3
10004298:	00054740 	call	10005474 <__adddf3>
1000429c:	d9000117 	ldw	r4,4(sp)
100042a0:	d9400217 	ldw	r5,8(sp)
100042a4:	100d883a 	mov	r6,r2
100042a8:	180f883a 	mov	r7,r3
100042ac:	102d883a 	mov	r22,r2
100042b0:	1825883a 	mov	r18,r3
100042b4:	00054740 	call	10005474 <__adddf3>
100042b8:	01cffbf4 	movhi	r7,16367
100042bc:	39f1c244 	addi	r7,r7,-14583
100042c0:	0009883a 	mov	r4,zero
100042c4:	180b883a 	mov	r5,r3
100042c8:	01b80034 	movhi	r6,57344
100042cc:	1823883a 	mov	r17,r3
100042d0:	00068d40 	call	100068d4 <__muldf3>
100042d4:	018516f4 	movhi	r6,5211
100042d8:	01ef8fb4 	movhi	r7,48702
100042dc:	880b883a 	mov	r5,r17
100042e0:	31807d44 	addi	r6,r6,501
100042e4:	39cbf804 	addi	r7,r7,12256
100042e8:	0009883a 	mov	r4,zero
100042ec:	1029883a 	mov	r20,r2
100042f0:	1827883a 	mov	r19,r3
100042f4:	00068d40 	call	100068d4 <__muldf3>
100042f8:	d9800117 	ldw	r6,4(sp)
100042fc:	d9c00217 	ldw	r7,8(sp)
10004300:	880b883a 	mov	r5,r17
10004304:	0009883a 	mov	r4,zero
10004308:	1821883a 	mov	r16,r3
1000430c:	d8800415 	stw	r2,16(sp)
10004310:	00071400 	call	10007140 <__subdf3>
10004314:	b009883a 	mov	r4,r22
10004318:	900b883a 	mov	r5,r18
1000431c:	100d883a 	mov	r6,r2
10004320:	180f883a 	mov	r7,r3
10004324:	00071400 	call	10007140 <__subdf3>
10004328:	01b70eb4 	movhi	r6,56378
1000432c:	01cffbf4 	movhi	r7,16367
10004330:	1009883a 	mov	r4,r2
10004334:	180b883a 	mov	r5,r3
10004338:	3180ff44 	addi	r6,r6,1021
1000433c:	39f1c244 	addi	r7,r7,-14583
10004340:	00068d40 	call	100068d4 <__muldf3>
10004344:	db400417 	ldw	r13,16(sp)
10004348:	800b883a 	mov	r5,r16
1000434c:	100d883a 	mov	r6,r2
10004350:	6809883a 	mov	r4,r13
10004354:	180f883a 	mov	r7,r3
10004358:	00054740 	call	10005474 <__adddf3>
1000435c:	db000717 	ldw	r12,28(sp)
10004360:	1009883a 	mov	r4,r2
10004364:	00840074 	movhi	r2,4097
10004368:	10916f04 	addi	r2,r2,17852
1000436c:	1305883a 	add	r2,r2,r12
10004370:	11800017 	ldw	r6,0(r2)
10004374:	11c00117 	ldw	r7,4(r2)
10004378:	180b883a 	mov	r5,r3
1000437c:	00054740 	call	10005474 <__adddf3>
10004380:	da000817 	ldw	r8,32(sp)
10004384:	1025883a 	mov	r18,r2
10004388:	1823883a 	mov	r17,r3
1000438c:	4009883a 	mov	r4,r8
10004390:	0007a980 	call	10007a98 <__floatsidf>
10004394:	db000717 	ldw	r12,28(sp)
10004398:	d8800115 	stw	r2,4(sp)
1000439c:	00840074 	movhi	r2,4097
100043a0:	10917304 	addi	r2,r2,17868
100043a4:	1319883a 	add	r12,r2,r12
100043a8:	65800017 	ldw	r22,0(r12)
100043ac:	63000117 	ldw	r12,4(r12)
100043b0:	a009883a 	mov	r4,r20
100043b4:	980b883a 	mov	r5,r19
100043b8:	900d883a 	mov	r6,r18
100043bc:	880f883a 	mov	r7,r17
100043c0:	db000015 	stw	r12,0(sp)
100043c4:	d8c00215 	stw	r3,8(sp)
100043c8:	00054740 	call	10005474 <__adddf3>
100043cc:	d9c00017 	ldw	r7,0(sp)
100043d0:	1009883a 	mov	r4,r2
100043d4:	180b883a 	mov	r5,r3
100043d8:	b00d883a 	mov	r6,r22
100043dc:	00054740 	call	10005474 <__adddf3>
100043e0:	d9800117 	ldw	r6,4(sp)
100043e4:	d9c00217 	ldw	r7,8(sp)
100043e8:	1009883a 	mov	r4,r2
100043ec:	180b883a 	mov	r5,r3
100043f0:	00054740 	call	10005474 <__adddf3>
100043f4:	d9800117 	ldw	r6,4(sp)
100043f8:	d9c00217 	ldw	r7,8(sp)
100043fc:	0009883a 	mov	r4,zero
10004400:	180b883a 	mov	r5,r3
10004404:	1821883a 	mov	r16,r3
10004408:	00071400 	call	10007140 <__subdf3>
1000440c:	d9c00017 	ldw	r7,0(sp)
10004410:	1009883a 	mov	r4,r2
10004414:	180b883a 	mov	r5,r3
10004418:	b00d883a 	mov	r6,r22
1000441c:	00071400 	call	10007140 <__subdf3>
10004420:	1009883a 	mov	r4,r2
10004424:	180b883a 	mov	r5,r3
10004428:	a00d883a 	mov	r6,r20
1000442c:	980f883a 	mov	r7,r19
10004430:	00071400 	call	10007140 <__subdf3>
10004434:	9009883a 	mov	r4,r18
10004438:	880b883a 	mov	r5,r17
1000443c:	100d883a 	mov	r6,r2
10004440:	180f883a 	mov	r7,r3
10004444:	00071400 	call	10007140 <__subdf3>
10004448:	dac00917 	ldw	r11,36(sp)
1000444c:	e2bfffc4 	addi	r10,fp,-1
10004450:	1027883a 	mov	r19,r2
10004454:	52d6b03a 	or	r11,r10,r11
10004458:	1823883a 	mov	r17,r3
1000445c:	5801591e 	bne	r11,zero,100049c4 <__ieee754_pow+0xe60>
10004460:	04affc34 	movhi	r18,49136
10004464:	b80f883a 	mov	r7,r23
10004468:	a809883a 	mov	r4,r21
1000446c:	b80b883a 	mov	r5,r23
10004470:	000d883a 	mov	r6,zero
10004474:	00071400 	call	10007140 <__subdf3>
10004478:	1009883a 	mov	r4,r2
1000447c:	180b883a 	mov	r5,r3
10004480:	000d883a 	mov	r6,zero
10004484:	800f883a 	mov	r7,r16
10004488:	00068d40 	call	100068d4 <__muldf3>
1000448c:	a809883a 	mov	r4,r21
10004490:	b80b883a 	mov	r5,r23
10004494:	980d883a 	mov	r6,r19
10004498:	880f883a 	mov	r7,r17
1000449c:	102d883a 	mov	r22,r2
100044a0:	1829883a 	mov	r20,r3
100044a4:	00068d40 	call	100068d4 <__muldf3>
100044a8:	b009883a 	mov	r4,r22
100044ac:	a00b883a 	mov	r5,r20
100044b0:	100d883a 	mov	r6,r2
100044b4:	180f883a 	mov	r7,r3
100044b8:	00054740 	call	10005474 <__adddf3>
100044bc:	b80b883a 	mov	r5,r23
100044c0:	0009883a 	mov	r4,zero
100044c4:	000d883a 	mov	r6,zero
100044c8:	800f883a 	mov	r7,r16
100044cc:	1027883a 	mov	r19,r2
100044d0:	1823883a 	mov	r17,r3
100044d4:	00068d40 	call	100068d4 <__muldf3>
100044d8:	9809883a 	mov	r4,r19
100044dc:	880b883a 	mov	r5,r17
100044e0:	100d883a 	mov	r6,r2
100044e4:	180f883a 	mov	r7,r3
100044e8:	102d883a 	mov	r22,r2
100044ec:	182b883a 	mov	r21,r3
100044f0:	00054740 	call	10005474 <__adddf3>
100044f4:	102f883a 	mov	r23,r2
100044f8:	00902434 	movhi	r2,16528
100044fc:	10bfffc4 	addi	r2,r2,-1
10004500:	1829883a 	mov	r20,r3
10004504:	b013883a 	mov	r9,r22
10004508:	a811883a 	mov	r8,r21
1000450c:	10c1080e 	bge	r2,r3,10004930 <__ieee754_pow+0xdcc>
10004510:	00efdc34 	movhi	r3,49008
10004514:	a0c7883a 	add	r3,r20,r3
10004518:	1dc6b03a 	or	r3,r3,r23
1000451c:	1801961e 	bne	r3,zero,10004b78 <__ieee754_pow+0x1014>
10004520:	01994b34 	movhi	r6,25900
10004524:	01cf25f4 	movhi	r7,15511
10004528:	31a0bf84 	addi	r6,r6,-32002
1000452c:	39c551c4 	addi	r7,r7,5447
10004530:	9809883a 	mov	r4,r19
10004534:	880b883a 	mov	r5,r17
10004538:	00054740 	call	10005474 <__adddf3>
1000453c:	b809883a 	mov	r4,r23
10004540:	a00b883a 	mov	r5,r20
10004544:	b00d883a 	mov	r6,r22
10004548:	a80f883a 	mov	r7,r21
1000454c:	1039883a 	mov	fp,r2
10004550:	1821883a 	mov	r16,r3
10004554:	00071400 	call	10007140 <__subdf3>
10004558:	e009883a 	mov	r4,fp
1000455c:	800b883a 	mov	r5,r16
10004560:	100d883a 	mov	r6,r2
10004564:	180f883a 	mov	r7,r3
10004568:	00067140 	call	10006714 <__gedf2>
1000456c:	00818216 	blt	zero,r2,10004b78 <__ieee754_pow+0x1014>
10004570:	a021883a 	mov	r16,r20
10004574:	8011d53a 	srai	r8,r16,20
10004578:	00800434 	movhi	r2,16
1000457c:	a02ed7fa 	srli	r23,r20,31
10004580:	423f0084 	addi	r8,r8,-1022
10004584:	1211d83a 	sra	r8,r2,r8
10004588:	00c00434 	movhi	r3,16
1000458c:	18ffffc4 	addi	r3,r3,-1
10004590:	4529883a 	add	r20,r8,r20
10004594:	a00a907a 	slli	r5,r20,1
10004598:	a0c4703a 	and	r2,r20,r3
1000459c:	10800434 	orhi	r2,r2,16
100045a0:	280ad57a 	srli	r5,r5,21
100045a4:	05cdc83a 	sub	r6,zero,r23
100045a8:	b009883a 	mov	r4,r22
100045ac:	29ff0044 	addi	r7,r5,-1023
100045b0:	19c7d83a 	sra	r3,r3,r7
100045b4:	01c104c4 	movi	r7,1043
100045b8:	394bc83a 	sub	r5,r7,r5
100045bc:	1145d83a 	sra	r2,r2,r5
100045c0:	00ce303a 	nor	r7,zero,r3
100045c4:	3d0e703a 	and	r7,r7,r20
100045c8:	1184f03a 	xor	r2,r2,r6
100045cc:	a80b883a 	mov	r5,r21
100045d0:	000d883a 	mov	r6,zero
100045d4:	15ef883a 	add	r23,r2,r23
100045d8:	ddc00115 	stw	r23,4(sp)
100045dc:	00071400 	call	10007140 <__subdf3>
100045e0:	9809883a 	mov	r4,r19
100045e4:	880b883a 	mov	r5,r17
100045e8:	100d883a 	mov	r6,r2
100045ec:	180f883a 	mov	r7,r3
100045f0:	d8c00815 	stw	r3,32(sp)
100045f4:	d8800315 	stw	r2,12(sp)
100045f8:	00054740 	call	10005474 <__adddf3>
100045fc:	d8800117 	ldw	r2,4(sp)
10004600:	da000817 	ldw	r8,32(sp)
10004604:	da400317 	ldw	r9,12(sp)
10004608:	1004953a 	slli	r2,r2,20
1000460c:	1829883a 	mov	r20,r3
10004610:	d8800015 	stw	r2,0(sp)
10004614:	01cff9b4 	movhi	r7,16358
10004618:	a00b883a 	mov	r5,r20
1000461c:	39cb90c4 	addi	r7,r7,11843
10004620:	0009883a 	mov	r4,zero
10004624:	000d883a 	mov	r6,zero
10004628:	da000815 	stw	r8,32(sp)
1000462c:	da400315 	stw	r9,12(sp)
10004630:	00068d40 	call	100068d4 <__muldf3>
10004634:	da400317 	ldw	r9,12(sp)
10004638:	da000817 	ldw	r8,32(sp)
1000463c:	a00b883a 	mov	r5,r20
10004640:	480d883a 	mov	r6,r9
10004644:	400f883a 	mov	r7,r8
10004648:	0009883a 	mov	r4,zero
1000464c:	1039883a 	mov	fp,r2
10004650:	182d883a 	mov	r22,r3
10004654:	00071400 	call	10007140 <__subdf3>
10004658:	9809883a 	mov	r4,r19
1000465c:	880b883a 	mov	r5,r17
10004660:	100d883a 	mov	r6,r2
10004664:	180f883a 	mov	r7,r3
10004668:	00071400 	call	10007140 <__subdf3>
1000466c:	01bfbeb4 	movhi	r6,65274
10004670:	01cff9b4 	movhi	r7,16358
10004674:	1009883a 	mov	r4,r2
10004678:	180b883a 	mov	r5,r3
1000467c:	318e7bc4 	addi	r6,r6,14831
10004680:	39cb9084 	addi	r7,r7,11842
10004684:	00068d40 	call	100068d4 <__muldf3>
10004688:	01832a34 	movhi	r6,3240
1000468c:	01ef8834 	movhi	r7,48672
10004690:	a00b883a 	mov	r5,r20
10004694:	319b0e44 	addi	r6,r6,27705
10004698:	39d71844 	addi	r7,r7,23649
1000469c:	0009883a 	mov	r4,zero
100046a0:	1023883a 	mov	r17,r2
100046a4:	1821883a 	mov	r16,r3
100046a8:	00068d40 	call	100068d4 <__muldf3>
100046ac:	8809883a 	mov	r4,r17
100046b0:	800b883a 	mov	r5,r16
100046b4:	100d883a 	mov	r6,r2
100046b8:	180f883a 	mov	r7,r3
100046bc:	00054740 	call	10005474 <__adddf3>
100046c0:	e009883a 	mov	r4,fp
100046c4:	b00b883a 	mov	r5,r22
100046c8:	100d883a 	mov	r6,r2
100046cc:	180f883a 	mov	r7,r3
100046d0:	1029883a 	mov	r20,r2
100046d4:	1827883a 	mov	r19,r3
100046d8:	00054740 	call	10005474 <__adddf3>
100046dc:	e00d883a 	mov	r6,fp
100046e0:	b00f883a 	mov	r7,r22
100046e4:	1009883a 	mov	r4,r2
100046e8:	180b883a 	mov	r5,r3
100046ec:	1023883a 	mov	r17,r2
100046f0:	1821883a 	mov	r16,r3
100046f4:	00071400 	call	10007140 <__subdf3>
100046f8:	a009883a 	mov	r4,r20
100046fc:	980b883a 	mov	r5,r19
10004700:	100d883a 	mov	r6,r2
10004704:	180f883a 	mov	r7,r3
10004708:	00071400 	call	10007140 <__subdf3>
1000470c:	8809883a 	mov	r4,r17
10004710:	800b883a 	mov	r5,r16
10004714:	880d883a 	mov	r6,r17
10004718:	800f883a 	mov	r7,r16
1000471c:	1039883a 	mov	fp,r2
10004720:	182d883a 	mov	r22,r3
10004724:	00068d40 	call	100068d4 <__muldf3>
10004728:	019caff4 	movhi	r6,29375
1000472c:	01cf99b4 	movhi	r7,15974
10004730:	1009883a 	mov	r4,r2
10004734:	180b883a 	mov	r5,r3
10004738:	31a93404 	addi	r6,r6,-23344
1000473c:	39cdda44 	addi	r7,r7,14185
10004740:	1029883a 	mov	r20,r2
10004744:	1827883a 	mov	r19,r3
10004748:	00068d40 	call	100068d4 <__muldf3>
1000474c:	01b174b4 	movhi	r6,50642
10004750:	01cfaf34 	movhi	r7,16060
10004754:	1009883a 	mov	r4,r2
10004758:	180b883a 	mov	r5,r3
1000475c:	319afc44 	addi	r6,r6,27633
10004760:	39ef5044 	addi	r7,r7,-17087
10004764:	00071400 	call	10007140 <__subdf3>
10004768:	a00d883a 	mov	r6,r20
1000476c:	980f883a 	mov	r7,r19
10004770:	1009883a 	mov	r4,r2
10004774:	180b883a 	mov	r5,r3
10004778:	00068d40 	call	100068d4 <__muldf3>
1000477c:	01abc9b4 	movhi	r6,44838
10004780:	01cfc474 	movhi	r7,16145
10004784:	1009883a 	mov	r4,r2
10004788:	180b883a 	mov	r5,r3
1000478c:	31b78b04 	addi	r6,r6,-8660
10004790:	39d59a84 	addi	r7,r7,22122
10004794:	00054740 	call	10005474 <__adddf3>
10004798:	a00d883a 	mov	r6,r20
1000479c:	980f883a 	mov	r7,r19
100047a0:	1009883a 	mov	r4,r2
100047a4:	180b883a 	mov	r5,r3
100047a8:	00068d40 	call	100068d4 <__muldf3>
100047ac:	0185aff4 	movhi	r6,5823
100047b0:	01cfd9f4 	movhi	r7,16231
100047b4:	1009883a 	mov	r4,r2
100047b8:	180b883a 	mov	r5,r3
100047bc:	31af64c4 	addi	r6,r6,-17005
100047c0:	39f05b04 	addi	r7,r7,-16020
100047c4:	00071400 	call	10007140 <__subdf3>
100047c8:	a00d883a 	mov	r6,r20
100047cc:	980f883a 	mov	r7,r19
100047d0:	1009883a 	mov	r4,r2
100047d4:	180b883a 	mov	r5,r3
100047d8:	00068d40 	call	100068d4 <__muldf3>
100047dc:	01955574 	movhi	r6,21845
100047e0:	01cff174 	movhi	r7,16325
100047e4:	1009883a 	mov	r4,r2
100047e8:	180b883a 	mov	r5,r3
100047ec:	31954f84 	addi	r6,r6,21822
100047f0:	39d55544 	addi	r7,r7,21845
100047f4:	00054740 	call	10005474 <__adddf3>
100047f8:	a00d883a 	mov	r6,r20
100047fc:	980f883a 	mov	r7,r19
10004800:	1009883a 	mov	r4,r2
10004804:	180b883a 	mov	r5,r3
10004808:	00068d40 	call	100068d4 <__muldf3>
1000480c:	8809883a 	mov	r4,r17
10004810:	800b883a 	mov	r5,r16
10004814:	100d883a 	mov	r6,r2
10004818:	180f883a 	mov	r7,r3
1000481c:	00071400 	call	10007140 <__subdf3>
10004820:	8809883a 	mov	r4,r17
10004824:	800b883a 	mov	r5,r16
10004828:	100d883a 	mov	r6,r2
1000482c:	180f883a 	mov	r7,r3
10004830:	1029883a 	mov	r20,r2
10004834:	1827883a 	mov	r19,r3
10004838:	00068d40 	call	100068d4 <__muldf3>
1000483c:	a009883a 	mov	r4,r20
10004840:	980b883a 	mov	r5,r19
10004844:	000d883a 	mov	r6,zero
10004848:	01d00034 	movhi	r7,16384
1000484c:	102b883a 	mov	r21,r2
10004850:	182f883a 	mov	r23,r3
10004854:	00071400 	call	10007140 <__subdf3>
10004858:	a809883a 	mov	r4,r21
1000485c:	b80b883a 	mov	r5,r23
10004860:	100d883a 	mov	r6,r2
10004864:	180f883a 	mov	r7,r3
10004868:	0005d100 	call	10005d10 <__divdf3>
1000486c:	8809883a 	mov	r4,r17
10004870:	800b883a 	mov	r5,r16
10004874:	e00d883a 	mov	r6,fp
10004878:	b00f883a 	mov	r7,r22
1000487c:	1029883a 	mov	r20,r2
10004880:	1827883a 	mov	r19,r3
10004884:	00068d40 	call	100068d4 <__muldf3>
10004888:	1009883a 	mov	r4,r2
1000488c:	180b883a 	mov	r5,r3
10004890:	e00d883a 	mov	r6,fp
10004894:	b00f883a 	mov	r7,r22
10004898:	00054740 	call	10005474 <__adddf3>
1000489c:	a009883a 	mov	r4,r20
100048a0:	980b883a 	mov	r5,r19
100048a4:	100d883a 	mov	r6,r2
100048a8:	180f883a 	mov	r7,r3
100048ac:	00071400 	call	10007140 <__subdf3>
100048b0:	1009883a 	mov	r4,r2
100048b4:	180b883a 	mov	r5,r3
100048b8:	880d883a 	mov	r6,r17
100048bc:	800f883a 	mov	r7,r16
100048c0:	00071400 	call	10007140 <__subdf3>
100048c4:	0009883a 	mov	r4,zero
100048c8:	180f883a 	mov	r7,r3
100048cc:	014ffc34 	movhi	r5,16368
100048d0:	100d883a 	mov	r6,r2
100048d4:	00071400 	call	10007140 <__subdf3>
100048d8:	d9000017 	ldw	r4,0(sp)
100048dc:	190f883a 	add	r7,r3,r4
100048e0:	3809d53a 	srai	r4,r7,20
100048e4:	0100c70e 	bge	zero,r4,10004c04 <__ieee754_pow+0x10a0>
100048e8:	100d883a 	mov	r6,r2
100048ec:	0009883a 	mov	r4,zero
100048f0:	900b883a 	mov	r5,r18
100048f4:	00068d40 	call	100068d4 <__muldf3>
100048f8:	003cd606 	br	10003c54 <__alt_data_end+0xf8003c54>
100048fc:	00b00434 	movhi	r2,49168
10004900:	9085883a 	add	r2,r18,r2
10004904:	e084b03a 	or	r2,fp,r2
10004908:	1000aa1e 	bne	r2,zero,10004bb4 <__ieee754_pow+0x1050>
1000490c:	b009883a 	mov	r4,r22
10004910:	180b883a 	mov	r5,r3
10004914:	003d4006 	br	10003e18 <__alt_data_end+0xf8003e18>
10004918:	8009883a 	mov	r4,r16
1000491c:	980b883a 	mov	r5,r19
10004920:	800d883a 	mov	r6,r16
10004924:	980f883a 	mov	r7,r19
10004928:	00068d40 	call	100068d4 <__muldf3>
1000492c:	003cc906 	br	10003c54 <__alt_data_end+0xf8003c54>
10004930:	04200034 	movhi	r16,32768
10004934:	843fffc4 	addi	r16,r16,-1
10004938:	00902474 	movhi	r2,16529
1000493c:	1c20703a 	and	r16,r3,r16
10004940:	10b2ffc4 	addi	r2,r2,-13313
10004944:	1400a70e 	bge	r2,r16,10004be4 <__ieee754_pow+0x1080>
10004948:	008fdbf4 	movhi	r2,16239
1000494c:	108d0004 	addi	r2,r2,13312
10004950:	1885883a 	add	r2,r3,r2
10004954:	15c4b03a 	or	r2,r2,r23
10004958:	10000b1e 	bne	r2,zero,10004988 <__ieee754_pow+0xe24>
1000495c:	b809883a 	mov	r4,r23
10004960:	180b883a 	mov	r5,r3
10004964:	b00d883a 	mov	r6,r22
10004968:	a80f883a 	mov	r7,r21
1000496c:	00071400 	call	10007140 <__subdf3>
10004970:	9809883a 	mov	r4,r19
10004974:	880b883a 	mov	r5,r17
10004978:	100d883a 	mov	r6,r2
1000497c:	180f883a 	mov	r7,r3
10004980:	00067f40 	call	100067f4 <__ledf2>
10004984:	00befb16 	blt	zero,r2,10004574 <__alt_data_end+0xf8004574>
10004988:	01b0be74 	movhi	r6,49913
1000498c:	01c06974 	movhi	r7,421
10004990:	900b883a 	mov	r5,r18
10004994:	31bcd644 	addi	r6,r6,-3239
10004998:	39db87c4 	addi	r7,r7,28191
1000499c:	0009883a 	mov	r4,zero
100049a0:	00068d40 	call	100068d4 <__muldf3>
100049a4:	01b0be74 	movhi	r6,49913
100049a8:	01c06974 	movhi	r7,421
100049ac:	1009883a 	mov	r4,r2
100049b0:	180b883a 	mov	r5,r3
100049b4:	31bcd644 	addi	r6,r6,-3239
100049b8:	39db87c4 	addi	r7,r7,28191
100049bc:	00068d40 	call	100068d4 <__muldf3>
100049c0:	003ca406 	br	10003c54 <__alt_data_end+0xf8003c54>
100049c4:	048ffc34 	movhi	r18,16368
100049c8:	003ea606 	br	10004464 <__alt_data_end+0xf8004464>
100049cc:	b83cce0e 	bge	r23,zero,10003d08 <__alt_data_end+0xf8003d08>
100049d0:	0005883a 	mov	r2,zero
100049d4:	b8e0003c 	xorhi	r3,r23,32768
100049d8:	003c9e06 	br	10003c54 <__alt_data_end+0xf8003c54>
100049dc:	0021883a 	mov	r16,zero
100049e0:	0019883a 	mov	r12,zero
100049e4:	003d3406 	br	10003eb8 <__alt_data_end+0xf8003eb8>
100049e8:	0009883a 	mov	r4,zero
100049ec:	003d2006 	br	10003e70 <__alt_data_end+0xf8003e70>
100049f0:	008ffc34 	movhi	r2,16368
100049f4:	10bfff84 	addi	r2,r2,-2
100049f8:	14bcc20e 	bge	r2,r18,10003d04 <__alt_data_end+0xf8003d04>
100049fc:	01cffc34 	movhi	r7,16368
10004a00:	3cbcd916 	blt	r7,r18,10003d68 <__alt_data_end+0xf8003d68>
10004a04:	b009883a 	mov	r4,r22
10004a08:	000d883a 	mov	r6,zero
10004a0c:	180b883a 	mov	r5,r3
10004a10:	dac00915 	stw	r11,36(sp)
10004a14:	00071400 	call	10007140 <__subdf3>
10004a18:	01cffdf4 	movhi	r7,16375
10004a1c:	1009883a 	mov	r4,r2
10004a20:	180b883a 	mov	r5,r3
10004a24:	39c551c4 	addi	r7,r7,5447
10004a28:	01980034 	movhi	r6,24576
10004a2c:	1023883a 	mov	r17,r2
10004a30:	1821883a 	mov	r16,r3
10004a34:	00068d40 	call	100068d4 <__muldf3>
10004a38:	01be17b4 	movhi	r6,63582
10004a3c:	01cf9574 	movhi	r7,15957
10004a40:	8809883a 	mov	r4,r17
10004a44:	800b883a 	mov	r5,r16
10004a48:	31b7d104 	addi	r6,r6,-8380
10004a4c:	39eb82c4 	addi	r7,r7,-20981
10004a50:	1027883a 	mov	r19,r2
10004a54:	1825883a 	mov	r18,r3
10004a58:	00068d40 	call	100068d4 <__muldf3>
10004a5c:	8809883a 	mov	r4,r17
10004a60:	800b883a 	mov	r5,r16
10004a64:	880d883a 	mov	r6,r17
10004a68:	800f883a 	mov	r7,r16
10004a6c:	1829883a 	mov	r20,r3
10004a70:	d8800815 	stw	r2,32(sp)
10004a74:	00068d40 	call	100068d4 <__muldf3>
10004a78:	8809883a 	mov	r4,r17
10004a7c:	800b883a 	mov	r5,r16
10004a80:	000d883a 	mov	r6,zero
10004a84:	01cff434 	movhi	r7,16336
10004a88:	182d883a 	mov	r22,r3
10004a8c:	d8800315 	stw	r2,12(sp)
10004a90:	00068d40 	call	100068d4 <__muldf3>
10004a94:	01155574 	movhi	r4,21845
10004a98:	014ff574 	movhi	r5,16341
10004a9c:	21155544 	addi	r4,r4,21845
10004aa0:	29555544 	addi	r5,r5,21845
10004aa4:	100d883a 	mov	r6,r2
10004aa8:	180f883a 	mov	r7,r3
10004aac:	00071400 	call	10007140 <__subdf3>
10004ab0:	880d883a 	mov	r6,r17
10004ab4:	800f883a 	mov	r7,r16
10004ab8:	1009883a 	mov	r4,r2
10004abc:	180b883a 	mov	r5,r3
10004ac0:	00068d40 	call	100068d4 <__muldf3>
10004ac4:	0009883a 	mov	r4,zero
10004ac8:	014ff834 	movhi	r5,16352
10004acc:	100d883a 	mov	r6,r2
10004ad0:	180f883a 	mov	r7,r3
10004ad4:	00071400 	call	10007140 <__subdf3>
10004ad8:	da400317 	ldw	r9,12(sp)
10004adc:	b00b883a 	mov	r5,r22
10004ae0:	100d883a 	mov	r6,r2
10004ae4:	4809883a 	mov	r4,r9
10004ae8:	180f883a 	mov	r7,r3
10004aec:	00068d40 	call	100068d4 <__muldf3>
10004af0:	01994b34 	movhi	r6,25900
10004af4:	01cffdf4 	movhi	r7,16375
10004af8:	1009883a 	mov	r4,r2
10004afc:	180b883a 	mov	r5,r3
10004b00:	31a0bf84 	addi	r6,r6,-32002
10004b04:	39c551c4 	addi	r7,r7,5447
10004b08:	00068d40 	call	100068d4 <__muldf3>
10004b0c:	da000817 	ldw	r8,32(sp)
10004b10:	a00b883a 	mov	r5,r20
10004b14:	100d883a 	mov	r6,r2
10004b18:	4009883a 	mov	r4,r8
10004b1c:	180f883a 	mov	r7,r3
10004b20:	00071400 	call	10007140 <__subdf3>
10004b24:	9809883a 	mov	r4,r19
10004b28:	900b883a 	mov	r5,r18
10004b2c:	100d883a 	mov	r6,r2
10004b30:	180f883a 	mov	r7,r3
10004b34:	1029883a 	mov	r20,r2
10004b38:	1823883a 	mov	r17,r3
10004b3c:	00054740 	call	10005474 <__adddf3>
10004b40:	0009883a 	mov	r4,zero
10004b44:	180b883a 	mov	r5,r3
10004b48:	980d883a 	mov	r6,r19
10004b4c:	900f883a 	mov	r7,r18
10004b50:	1821883a 	mov	r16,r3
10004b54:	00071400 	call	10007140 <__subdf3>
10004b58:	a009883a 	mov	r4,r20
10004b5c:	003e3606 	br	10004438 <__alt_data_end+0xf8004438>
10004b60:	0009883a 	mov	r4,zero
10004b64:	880b883a 	mov	r5,r17
10004b68:	800d883a 	mov	r6,r16
10004b6c:	980f883a 	mov	r7,r19
10004b70:	0005d100 	call	10005d10 <__divdf3>
10004b74:	003c3706 	br	10003c54 <__alt_data_end+0xf8003c54>
10004b78:	01a20034 	movhi	r6,34816
10004b7c:	01df8e34 	movhi	r7,32312
10004b80:	900b883a 	mov	r5,r18
10004b84:	319d6704 	addi	r6,r6,30108
10004b88:	39f90f04 	addi	r7,r7,-7108
10004b8c:	0009883a 	mov	r4,zero
10004b90:	00068d40 	call	100068d4 <__muldf3>
10004b94:	01a20034 	movhi	r6,34816
10004b98:	01df8e34 	movhi	r7,32312
10004b9c:	1009883a 	mov	r4,r2
10004ba0:	180b883a 	mov	r5,r3
10004ba4:	319d6704 	addi	r6,r6,30108
10004ba8:	39f90f04 	addi	r7,r7,-7108
10004bac:	00068d40 	call	100068d4 <__muldf3>
10004bb0:	003c2806 	br	10003c54 <__alt_data_end+0xf8003c54>
10004bb4:	00800044 	movi	r2,1
10004bb8:	e0bc5e1e 	bne	fp,r2,10003d34 <__alt_data_end+0xf8003d34>
10004bbc:	18e0003c 	xorhi	r3,r3,32768
10004bc0:	b005883a 	mov	r2,r22
10004bc4:	003c2306 	br	10003c54 <__alt_data_end+0xf8003c54>
10004bc8:	303c3d1e 	bne	r6,zero,10003cc0 <__alt_data_end+0xf8003cc0>
10004bcc:	1907c83a 	sub	r3,r3,r4
10004bd0:	88c5d83a 	sra	r2,r17,r3
10004bd4:	10c6983a 	sll	r3,r2,r3
10004bd8:	1c401126 	beq	r3,r17,10004c20 <__ieee754_pow+0x10bc>
10004bdc:	0039883a 	mov	fp,zero
10004be0:	003c0006 	br	10003be4 <__alt_data_end+0xf8003be4>
10004be4:	008ff834 	movhi	r2,16352
10004be8:	143e6216 	blt	r2,r16,10004574 <__alt_data_end+0xf8004574>
10004bec:	d8000015 	stw	zero,0(sp)
10004bf0:	d8000115 	stw	zero,4(sp)
10004bf4:	003e8706 	br	10004614 <__alt_data_end+0xf8004614>
10004bf8:	04000134 	movhi	r16,4
10004bfc:	03000044 	movi	r12,1
10004c00:	003cad06 	br	10003eb8 <__alt_data_end+0xf8003eb8>
10004c04:	d9800117 	ldw	r6,4(sp)
10004c08:	1009883a 	mov	r4,r2
10004c0c:	180b883a 	mov	r5,r3
10004c10:	00051600 	call	10005160 <scalbn>
10004c14:	100d883a 	mov	r6,r2
10004c18:	180f883a 	mov	r7,r3
10004c1c:	003f3306 	br	100048ec <__alt_data_end+0xf80048ec>
10004c20:	1080004c 	andi	r2,r2,1
10004c24:	02800084 	movi	r10,2
10004c28:	50b9c83a 	sub	fp,r10,r2
10004c2c:	003bed06 	br	10003be4 <__alt_data_end+0xf8003be4>

10004c30 <__ieee754_sqrt>:
10004c30:	defffd04 	addi	sp,sp,-12
10004c34:	dc400115 	stw	r17,4(sp)
10004c38:	dc000015 	stw	r16,0(sp)
10004c3c:	dfc00215 	stw	ra,8(sp)
10004c40:	28dffc2c 	andhi	r3,r5,32752
10004c44:	009ffc34 	movhi	r2,32752
10004c48:	2821883a 	mov	r16,r5
10004c4c:	2023883a 	mov	r17,r4
10004c50:	18807c26 	beq	r3,r2,10004e44 <__ieee754_sqrt+0x214>
10004c54:	2011883a 	mov	r8,r4
10004c58:	01405f0e 	bge	zero,r5,10004dd8 <__ieee754_sqrt+0x1a8>
10004c5c:	2815d53a 	srai	r10,r5,20
10004c60:	50006a26 	beq	r10,zero,10004e0c <__ieee754_sqrt+0x1dc>
10004c64:	00800434 	movhi	r2,16
10004c68:	52bf0044 	addi	r10,r10,-1023
10004c6c:	10bfffc4 	addi	r2,r2,-1
10004c70:	8084703a 	and	r2,r16,r2
10004c74:	50c0004c 	andi	r3,r10,1
10004c78:	10800434 	orhi	r2,r2,16
10004c7c:	18004f1e 	bne	r3,zero,10004dbc <__ieee754_sqrt+0x18c>
10004c80:	4006d7fa 	srli	r3,r8,31
10004c84:	5015d07a 	srai	r10,r10,1
10004c88:	1085883a 	add	r2,r2,r2
10004c8c:	10c5883a 	add	r2,r2,r3
10004c90:	01800584 	movi	r6,22
10004c94:	4207883a 	add	r3,r8,r8
10004c98:	0013883a 	mov	r9,zero
10004c9c:	000b883a 	mov	r5,zero
10004ca0:	01000834 	movhi	r4,32
10004ca4:	290f883a 	add	r7,r5,r4
10004ca8:	1810d7fa 	srli	r8,r3,31
10004cac:	31bfffc4 	addi	r6,r6,-1
10004cb0:	11c00316 	blt	r2,r7,10004cc0 <__ieee754_sqrt+0x90>
10004cb4:	11c5c83a 	sub	r2,r2,r7
10004cb8:	390b883a 	add	r5,r7,r4
10004cbc:	4913883a 	add	r9,r9,r4
10004cc0:	1085883a 	add	r2,r2,r2
10004cc4:	1205883a 	add	r2,r2,r8
10004cc8:	18c7883a 	add	r3,r3,r3
10004ccc:	2008d07a 	srli	r4,r4,1
10004cd0:	303ff41e 	bne	r6,zero,10004ca4 <__alt_data_end+0xf8004ca4>
10004cd4:	01200034 	movhi	r4,32768
10004cd8:	01c00804 	movi	r7,32
10004cdc:	0011883a 	mov	r8,zero
10004ce0:	0017883a 	mov	r11,zero
10004ce4:	201b883a 	mov	r13,r4
10004ce8:	00000806 	br	10004d0c <__ieee754_sqrt+0xdc>
10004cec:	11401726 	beq	r2,r5,10004d4c <__ieee754_sqrt+0x11c>
10004cf0:	180cd7fa 	srli	r6,r3,31
10004cf4:	1085883a 	add	r2,r2,r2
10004cf8:	39ffffc4 	addi	r7,r7,-1
10004cfc:	1185883a 	add	r2,r2,r6
10004d00:	18c7883a 	add	r3,r3,r3
10004d04:	2008d07a 	srli	r4,r4,1
10004d08:	38001726 	beq	r7,zero,10004d68 <__ieee754_sqrt+0x138>
10004d0c:	590d883a 	add	r6,r11,r4
10004d10:	28bff60e 	bge	r5,r2,10004cec <__alt_data_end+0xf8004cec>
10004d14:	3320002c 	andhi	r12,r6,32768
10004d18:	3117883a 	add	r11,r6,r4
10004d1c:	63400826 	beq	r12,r13,10004d40 <__ieee754_sqrt+0x110>
10004d20:	2819883a 	mov	r12,r5
10004d24:	1145c83a 	sub	r2,r2,r5
10004d28:	1980012e 	bgeu	r3,r6,10004d30 <__ieee754_sqrt+0x100>
10004d2c:	10bfffc4 	addi	r2,r2,-1
10004d30:	1987c83a 	sub	r3,r3,r6
10004d34:	4111883a 	add	r8,r8,r4
10004d38:	600b883a 	mov	r5,r12
10004d3c:	003fec06 	br	10004cf0 <__alt_data_end+0xf8004cf0>
10004d40:	583ff716 	blt	r11,zero,10004d20 <__alt_data_end+0xf8004d20>
10004d44:	2b000044 	addi	r12,r5,1
10004d48:	003ff606 	br	10004d24 <__alt_data_end+0xf8004d24>
10004d4c:	19801936 	bltu	r3,r6,10004db4 <__ieee754_sqrt+0x184>
10004d50:	3320002c 	andhi	r12,r6,32768
10004d54:	3117883a 	add	r11,r6,r4
10004d58:	63404626 	beq	r12,r13,10004e74 <__ieee754_sqrt+0x244>
10004d5c:	1019883a 	mov	r12,r2
10004d60:	0005883a 	mov	r2,zero
10004d64:	003ff206 	br	10004d30 <__alt_data_end+0xf8004d30>
10004d68:	10c4b03a 	or	r2,r2,r3
10004d6c:	10000426 	beq	r2,zero,10004d80 <__ieee754_sqrt+0x150>
10004d70:	00bfffc4 	movi	r2,-1
10004d74:	40804326 	beq	r8,r2,10004e84 <__ieee754_sqrt+0x254>
10004d78:	4080004c 	andi	r2,r8,1
10004d7c:	1211883a 	add	r8,r2,r8
10004d80:	4004d07a 	srli	r2,r8,1
10004d84:	4807d07a 	srai	r3,r9,1
10004d88:	010ff834 	movhi	r4,16352
10004d8c:	4a40004c 	andi	r9,r9,1
10004d90:	1909883a 	add	r4,r3,r4
10004d94:	48000e1e 	bne	r9,zero,10004dd0 <__ieee754_sqrt+0x1a0>
10004d98:	5006953a 	slli	r3,r10,20
10004d9c:	1907883a 	add	r3,r3,r4
10004da0:	dfc00217 	ldw	ra,8(sp)
10004da4:	dc400117 	ldw	r17,4(sp)
10004da8:	dc000017 	ldw	r16,0(sp)
10004dac:	dec00304 	addi	sp,sp,12
10004db0:	f800283a 	ret
10004db4:	100b883a 	mov	r5,r2
10004db8:	003fcd06 	br	10004cf0 <__alt_data_end+0xf8004cf0>
10004dbc:	4006d7fa 	srli	r3,r8,31
10004dc0:	1085883a 	add	r2,r2,r2
10004dc4:	4211883a 	add	r8,r8,r8
10004dc8:	10c5883a 	add	r2,r2,r3
10004dcc:	003fac06 	br	10004c80 <__alt_data_end+0xf8004c80>
10004dd0:	10a00034 	orhi	r2,r2,32768
10004dd4:	003ff006 	br	10004d98 <__alt_data_end+0xf8004d98>
10004dd8:	00a00034 	movhi	r2,32768
10004ddc:	10bfffc4 	addi	r2,r2,-1
10004de0:	2884703a 	and	r2,r5,r2
10004de4:	1104b03a 	or	r2,r2,r4
10004de8:	10001f26 	beq	r2,zero,10004e68 <__ieee754_sqrt+0x238>
10004dec:	28002c1e 	bne	r5,zero,10004ea0 <__ieee754_sqrt+0x270>
10004df0:	0015883a 	mov	r10,zero
10004df4:	4020d2fa 	srli	r16,r8,11
10004df8:	52bffac4 	addi	r10,r10,-21
10004dfc:	4010957a 	slli	r8,r8,21
10004e00:	803ffc26 	beq	r16,zero,10004df4 <__alt_data_end+0xf8004df4>
10004e04:	8080042c 	andhi	r2,r16,16
10004e08:	1000211e 	bne	r2,zero,10004e90 <__ieee754_sqrt+0x260>
10004e0c:	0005883a 	mov	r2,zero
10004e10:	8421883a 	add	r16,r16,r16
10004e14:	80c0042c 	andhi	r3,r16,16
10004e18:	10800044 	addi	r2,r2,1
10004e1c:	183ffc26 	beq	r3,zero,10004e10 <__alt_data_end+0xf8004e10>
10004e20:	01000044 	movi	r4,1
10004e24:	00c00804 	movi	r3,32
10004e28:	2089c83a 	sub	r4,r4,r2
10004e2c:	1887c83a 	sub	r3,r3,r2
10004e30:	40c6d83a 	srl	r3,r8,r3
10004e34:	5115883a 	add	r10,r10,r4
10004e38:	4090983a 	sll	r8,r8,r2
10004e3c:	80e0b03a 	or	r16,r16,r3
10004e40:	003f8806 	br	10004c64 <__alt_data_end+0xf8004c64>
10004e44:	200d883a 	mov	r6,r4
10004e48:	280f883a 	mov	r7,r5
10004e4c:	00068d40 	call	100068d4 <__muldf3>
10004e50:	1009883a 	mov	r4,r2
10004e54:	180b883a 	mov	r5,r3
10004e58:	880d883a 	mov	r6,r17
10004e5c:	800f883a 	mov	r7,r16
10004e60:	00054740 	call	10005474 <__adddf3>
10004e64:	003fce06 	br	10004da0 <__alt_data_end+0xf8004da0>
10004e68:	2005883a 	mov	r2,r4
10004e6c:	2807883a 	mov	r3,r5
10004e70:	003fcb06 	br	10004da0 <__alt_data_end+0xf8004da0>
10004e74:	583fb30e 	bge	r11,zero,10004d44 <__alt_data_end+0xf8004d44>
10004e78:	0005883a 	mov	r2,zero
10004e7c:	2819883a 	mov	r12,r5
10004e80:	003fab06 	br	10004d30 <__alt_data_end+0xf8004d30>
10004e84:	4a400044 	addi	r9,r9,1
10004e88:	0005883a 	mov	r2,zero
10004e8c:	003fbd06 	br	10004d84 <__alt_data_end+0xf8004d84>
10004e90:	00c00804 	movi	r3,32
10004e94:	01000044 	movi	r4,1
10004e98:	0005883a 	mov	r2,zero
10004e9c:	003fe406 	br	10004e30 <__alt_data_end+0xf8004e30>
10004ea0:	200d883a 	mov	r6,r4
10004ea4:	280f883a 	mov	r7,r5
10004ea8:	00071400 	call	10007140 <__subdf3>
10004eac:	1009883a 	mov	r4,r2
10004eb0:	180b883a 	mov	r5,r3
10004eb4:	100d883a 	mov	r6,r2
10004eb8:	180f883a 	mov	r7,r3
10004ebc:	0005d100 	call	10005d10 <__divdf3>
10004ec0:	003fb706 	br	10004da0 <__alt_data_end+0xf8004da0>

10004ec4 <fabs>:
10004ec4:	00e00034 	movhi	r3,32768
10004ec8:	18ffffc4 	addi	r3,r3,-1
10004ecc:	2005883a 	mov	r2,r4
10004ed0:	28c6703a 	and	r3,r5,r3
10004ed4:	f800283a 	ret

10004ed8 <finite>:
10004ed8:	00a00034 	movhi	r2,32768
10004edc:	10bfffc4 	addi	r2,r2,-1
10004ee0:	288a703a 	and	r5,r5,r2
10004ee4:	00e00434 	movhi	r3,32784
10004ee8:	28c5883a 	add	r2,r5,r3
10004eec:	1004d7fa 	srli	r2,r2,31
10004ef0:	f800283a 	ret

10004ef4 <__fpclassifyd>:
10004ef4:	00a00034 	movhi	r2,32768
10004ef8:	10bfffc4 	addi	r2,r2,-1
10004efc:	2884703a 	and	r2,r5,r2
10004f00:	10000726 	beq	r2,zero,10004f20 <__fpclassifyd+0x2c>
10004f04:	00fffc34 	movhi	r3,65520
10004f08:	019ff834 	movhi	r6,32736
10004f0c:	28c7883a 	add	r3,r5,r3
10004f10:	31bfffc4 	addi	r6,r6,-1
10004f14:	30c00536 	bltu	r6,r3,10004f2c <__fpclassifyd+0x38>
10004f18:	00800104 	movi	r2,4
10004f1c:	f800283a 	ret
10004f20:	2000021e 	bne	r4,zero,10004f2c <__fpclassifyd+0x38>
10004f24:	00800084 	movi	r2,2
10004f28:	f800283a 	ret
10004f2c:	00dffc34 	movhi	r3,32752
10004f30:	019ff834 	movhi	r6,32736
10004f34:	28cb883a 	add	r5,r5,r3
10004f38:	31bfffc4 	addi	r6,r6,-1
10004f3c:	317ff62e 	bgeu	r6,r5,10004f18 <__alt_data_end+0xf8004f18>
10004f40:	01400434 	movhi	r5,16
10004f44:	297fffc4 	addi	r5,r5,-1
10004f48:	28800236 	bltu	r5,r2,10004f54 <__fpclassifyd+0x60>
10004f4c:	008000c4 	movi	r2,3
10004f50:	f800283a 	ret
10004f54:	10c00226 	beq	r2,r3,10004f60 <__fpclassifyd+0x6c>
10004f58:	0005883a 	mov	r2,zero
10004f5c:	f800283a 	ret
10004f60:	2005003a 	cmpeq	r2,r4,zero
10004f64:	f800283a 	ret

10004f68 <matherr>:
10004f68:	0005883a 	mov	r2,zero
10004f6c:	f800283a 	ret

10004f70 <nan>:
10004f70:	0005883a 	mov	r2,zero
10004f74:	00dffe34 	movhi	r3,32760
10004f78:	f800283a 	ret

10004f7c <rint>:
10004f7c:	2813d53a 	srai	r9,r5,20
10004f80:	defff904 	addi	sp,sp,-28
10004f84:	dc400315 	stw	r17,12(sp)
10004f88:	4a41ffcc 	andi	r9,r9,2047
10004f8c:	dfc00615 	stw	ra,24(sp)
10004f90:	dcc00515 	stw	r19,20(sp)
10004f94:	dc800415 	stw	r18,16(sp)
10004f98:	dc000215 	stw	r16,8(sp)
10004f9c:	02c004c4 	movi	r11,19
10004fa0:	4abf0044 	addi	r10,r9,-1023
10004fa4:	2811883a 	mov	r8,r5
10004fa8:	2005883a 	mov	r2,r4
10004fac:	280f883a 	mov	r7,r5
10004fb0:	200d883a 	mov	r6,r4
10004fb4:	2822d7fa 	srli	r17,r5,31
10004fb8:	5a801316 	blt	r11,r10,10005008 <rint+0x8c>
10004fbc:	50003c16 	blt	r10,zero,100050b0 <rint+0x134>
10004fc0:	00c00434 	movhi	r3,16
10004fc4:	18ffffc4 	addi	r3,r3,-1
10004fc8:	1a87d83a 	sra	r3,r3,r10
10004fcc:	1948703a 	and	r4,r3,r5
10004fd0:	2088b03a 	or	r4,r4,r2
10004fd4:	20001026 	beq	r4,zero,10005018 <rint+0x9c>
10004fd8:	1804d07a 	srli	r2,r3,1
10004fdc:	1146703a 	and	r3,r2,r5
10004fe0:	198cb03a 	or	r6,r3,r6
10004fe4:	30005526 	beq	r6,zero,1000513c <rint+0x1c0>
10004fe8:	52c05b26 	beq	r10,r11,10005158 <rint+0x1dc>
10004fec:	000d883a 	mov	r6,zero
10004ff0:	00c00134 	movhi	r3,4
10004ff4:	1a87d83a 	sra	r3,r3,r10
10004ff8:	0084303a 	nor	r2,zero,r2
10004ffc:	1210703a 	and	r8,r2,r8
10005000:	40ceb03a 	or	r7,r8,r3
10005004:	00001906 	br	1000506c <rint+0xf0>
10005008:	00c00cc4 	movi	r3,51
1000500c:	1a800a0e 	bge	r3,r10,10005038 <rint+0xbc>
10005010:	00c10004 	movi	r3,1024
10005014:	50c04d26 	beq	r10,r3,1000514c <rint+0x1d0>
10005018:	3807883a 	mov	r3,r7
1000501c:	dfc00617 	ldw	ra,24(sp)
10005020:	dcc00517 	ldw	r19,20(sp)
10005024:	dc800417 	ldw	r18,16(sp)
10005028:	dc400317 	ldw	r17,12(sp)
1000502c:	dc000217 	ldw	r16,8(sp)
10005030:	dec00704 	addi	sp,sp,28
10005034:	f800283a 	ret
10005038:	4a7efb44 	addi	r9,r9,-1043
1000503c:	00ffffc4 	movi	r3,-1
10005040:	1a46d83a 	srl	r3,r3,r9
10005044:	1908703a 	and	r4,r3,r4
10005048:	20003e26 	beq	r4,zero,10005144 <rint+0x1c8>
1000504c:	1806d07a 	srli	r3,r3,1
10005050:	1884703a 	and	r2,r3,r2
10005054:	10000526 	beq	r2,zero,1000506c <rint+0xf0>
10005058:	00900034 	movhi	r2,16384
1000505c:	1253d83a 	sra	r9,r2,r9
10005060:	00c6303a 	nor	r3,zero,r3
10005064:	198c703a 	and	r6,r3,r6
10005068:	324cb03a 	or	r6,r6,r9
1000506c:	882290fa 	slli	r17,r17,3
10005070:	00c40074 	movhi	r3,4097
10005074:	18d17b04 	addi	r3,r3,17900
10005078:	1c63883a 	add	r17,r3,r17
1000507c:	8c800017 	ldw	r18,0(r17)
10005080:	8c000117 	ldw	r16,4(r17)
10005084:	9009883a 	mov	r4,r18
10005088:	800b883a 	mov	r5,r16
1000508c:	00054740 	call	10005474 <__adddf3>
10005090:	d8800015 	stw	r2,0(sp)
10005094:	d8c00115 	stw	r3,4(sp)
10005098:	d9000017 	ldw	r4,0(sp)
1000509c:	d9400117 	ldw	r5,4(sp)
100050a0:	900d883a 	mov	r6,r18
100050a4:	800f883a 	mov	r7,r16
100050a8:	00071400 	call	10007140 <__subdf3>
100050ac:	003fdb06 	br	1000501c <__alt_data_end+0xf800501c>
100050b0:	04200034 	movhi	r16,32768
100050b4:	843fffc4 	addi	r16,r16,-1
100050b8:	2c06703a 	and	r3,r5,r16
100050bc:	1906b03a 	or	r3,r3,r4
100050c0:	18002026 	beq	r3,zero,10005144 <rint+0x1c8>
100050c4:	00c00434 	movhi	r3,16
100050c8:	18ffffc4 	addi	r3,r3,-1
100050cc:	28c6703a 	and	r3,r5,r3
100050d0:	1886b03a 	or	r3,r3,r2
100050d4:	880890fa 	slli	r4,r17,3
100050d8:	00d3c83a 	sub	r9,zero,r3
100050dc:	48d2b03a 	or	r9,r9,r3
100050e0:	00c40074 	movhi	r3,4097
100050e4:	18d17b04 	addi	r3,r3,17900
100050e8:	1907883a 	add	r3,r3,r4
100050ec:	4812d33a 	srli	r9,r9,12
100050f0:	1cc00017 	ldw	r19,0(r3)
100050f4:	1c800117 	ldw	r18,4(r3)
100050f8:	4a40022c 	andhi	r9,r9,8
100050fc:	29ffffac 	andhi	r7,r5,65534
10005100:	49ceb03a 	or	r7,r9,r7
10005104:	9809883a 	mov	r4,r19
10005108:	900b883a 	mov	r5,r18
1000510c:	00054740 	call	10005474 <__adddf3>
10005110:	d8800015 	stw	r2,0(sp)
10005114:	d8c00115 	stw	r3,4(sp)
10005118:	d9000017 	ldw	r4,0(sp)
1000511c:	d9400117 	ldw	r5,4(sp)
10005120:	980d883a 	mov	r6,r19
10005124:	900f883a 	mov	r7,r18
10005128:	00071400 	call	10007140 <__subdf3>
1000512c:	881097fa 	slli	r8,r17,31
10005130:	1c06703a 	and	r3,r3,r16
10005134:	40c6b03a 	or	r3,r8,r3
10005138:	003fb806 	br	1000501c <__alt_data_end+0xf800501c>
1000513c:	000d883a 	mov	r6,zero
10005140:	003fca06 	br	1000506c <__alt_data_end+0xf800506c>
10005144:	4007883a 	mov	r3,r8
10005148:	003fb406 	br	1000501c <__alt_data_end+0xf800501c>
1000514c:	200d883a 	mov	r6,r4
10005150:	00054740 	call	10005474 <__adddf3>
10005154:	003fb106 	br	1000501c <__alt_data_end+0xf800501c>
10005158:	01a00034 	movhi	r6,32768
1000515c:	003fa406 	br	10004ff0 <__alt_data_end+0xf8004ff0>

10005160 <scalbn>:
10005160:	2a1ffc2c 	andhi	r8,r5,32752
10005164:	4011d53a 	srai	r8,r8,20
10005168:	defffe04 	addi	sp,sp,-8
1000516c:	dc000015 	stw	r16,0(sp)
10005170:	dfc00115 	stw	ra,4(sp)
10005174:	280f883a 	mov	r7,r5
10005178:	2015883a 	mov	r10,r4
1000517c:	3021883a 	mov	r16,r6
10005180:	4000251e 	bne	r8,zero,10005218 <scalbn+0xb8>
10005184:	00a00034 	movhi	r2,32768
10005188:	10bfffc4 	addi	r2,r2,-1
1000518c:	2884703a 	and	r2,r5,r2
10005190:	1104b03a 	or	r2,r2,r4
10005194:	10003126 	beq	r2,zero,1000525c <scalbn+0xfc>
10005198:	01d0d434 	movhi	r7,17232
1000519c:	000d883a 	mov	r6,zero
100051a0:	00068d40 	call	100068d4 <__muldf3>
100051a4:	013ffff4 	movhi	r4,65535
100051a8:	210f2c04 	addi	r4,r4,15536
100051ac:	1015883a 	mov	r10,r2
100051b0:	180f883a 	mov	r7,r3
100051b4:	81002f16 	blt	r16,r4,10005274 <scalbn+0x114>
100051b8:	1a5ffc2c 	andhi	r9,r3,32752
100051bc:	4813d53a 	srai	r9,r9,20
100051c0:	0081ff84 	movi	r2,2046
100051c4:	180d883a 	mov	r6,r3
100051c8:	4a3ff284 	addi	r8,r9,-54
100051cc:	4411883a 	add	r8,r8,r16
100051d0:	1200170e 	bge	r2,r8,10005230 <scalbn+0xd0>
100051d4:	01220034 	movhi	r4,34816
100051d8:	015f8e34 	movhi	r5,32312
100051dc:	500d883a 	mov	r6,r10
100051e0:	211d6704 	addi	r4,r4,30108
100051e4:	29790f04 	addi	r5,r5,-7108
100051e8:	000532c0 	call	1000532c <copysign>
100051ec:	01a20034 	movhi	r6,34816
100051f0:	01df8e34 	movhi	r7,32312
100051f4:	1009883a 	mov	r4,r2
100051f8:	180b883a 	mov	r5,r3
100051fc:	319d6704 	addi	r6,r6,30108
10005200:	39f90f04 	addi	r7,r7,-7108
10005204:	00068d40 	call	100068d4 <__muldf3>
10005208:	dfc00117 	ldw	ra,4(sp)
1000520c:	dc000017 	ldw	r16,0(sp)
10005210:	dec00204 	addi	sp,sp,8
10005214:	f800283a 	ret
10005218:	0081ffc4 	movi	r2,2047
1000521c:	280d883a 	mov	r6,r5
10005220:	40803126 	beq	r8,r2,100052e8 <scalbn+0x188>
10005224:	4411883a 	add	r8,r8,r16
10005228:	0081ff84 	movi	r2,2046
1000522c:	123fe916 	blt	r2,r8,100051d4 <__alt_data_end+0xf80051d4>
10005230:	02001b0e 	bge	zero,r8,100052a0 <scalbn+0x140>
10005234:	4010953a 	slli	r8,r8,20
10005238:	00e00434 	movhi	r3,32784
1000523c:	18ffffc4 	addi	r3,r3,-1
10005240:	30ce703a 	and	r7,r6,r3
10005244:	5005883a 	mov	r2,r10
10005248:	41c6b03a 	or	r3,r8,r7
1000524c:	dfc00117 	ldw	ra,4(sp)
10005250:	dc000017 	ldw	r16,0(sp)
10005254:	dec00204 	addi	sp,sp,8
10005258:	f800283a 	ret
1000525c:	2005883a 	mov	r2,r4
10005260:	2807883a 	mov	r3,r5
10005264:	dfc00117 	ldw	ra,4(sp)
10005268:	dc000017 	ldw	r16,0(sp)
1000526c:	dec00204 	addi	sp,sp,8
10005270:	f800283a 	ret
10005274:	01b0be74 	movhi	r6,49913
10005278:	01c06974 	movhi	r7,421
1000527c:	31bcd644 	addi	r6,r6,-3239
10005280:	39db87c4 	addi	r7,r7,28191
10005284:	1009883a 	mov	r4,r2
10005288:	180b883a 	mov	r5,r3
1000528c:	00068d40 	call	100068d4 <__muldf3>
10005290:	dfc00117 	ldw	ra,4(sp)
10005294:	dc000017 	ldw	r16,0(sp)
10005298:	dec00204 	addi	sp,sp,8
1000529c:	f800283a 	ret
100052a0:	00bff2c4 	movi	r2,-53
100052a4:	4080160e 	bge	r8,r2,10005300 <scalbn+0x1a0>
100052a8:	00b0d414 	movui	r2,50000
100052ac:	143fc916 	blt	r2,r16,100051d4 <__alt_data_end+0xf80051d4>
100052b0:	0130be74 	movhi	r4,49913
100052b4:	01406974 	movhi	r5,421
100052b8:	500d883a 	mov	r6,r10
100052bc:	213cd644 	addi	r4,r4,-3239
100052c0:	295b87c4 	addi	r5,r5,28191
100052c4:	000532c0 	call	1000532c <copysign>
100052c8:	01b0be74 	movhi	r6,49913
100052cc:	01c06974 	movhi	r7,421
100052d0:	1009883a 	mov	r4,r2
100052d4:	180b883a 	mov	r5,r3
100052d8:	31bcd644 	addi	r6,r6,-3239
100052dc:	39db87c4 	addi	r7,r7,28191
100052e0:	00068d40 	call	100068d4 <__muldf3>
100052e4:	003fd906 	br	1000524c <__alt_data_end+0xf800524c>
100052e8:	200d883a 	mov	r6,r4
100052ec:	00054740 	call	10005474 <__adddf3>
100052f0:	dfc00117 	ldw	ra,4(sp)
100052f4:	dc000017 	ldw	r16,0(sp)
100052f8:	dec00204 	addi	sp,sp,8
100052fc:	f800283a 	ret
10005300:	42000d84 	addi	r8,r8,54
10005304:	4012953a 	slli	r9,r8,20
10005308:	01e00434 	movhi	r7,32784
1000530c:	39ffffc4 	addi	r7,r7,-1
10005310:	31ca703a 	and	r5,r6,r7
10005314:	5009883a 	mov	r4,r10
10005318:	494ab03a 	or	r5,r9,r5
1000531c:	000d883a 	mov	r6,zero
10005320:	01cf2434 	movhi	r7,15504
10005324:	00068d40 	call	100068d4 <__muldf3>
10005328:	003fc806 	br	1000524c <__alt_data_end+0xf800524c>

1000532c <copysign>:
1000532c:	2005883a 	mov	r2,r4
10005330:	01200034 	movhi	r4,32768
10005334:	213fffc4 	addi	r4,r4,-1
10005338:	38e0002c 	andhi	r3,r7,32768
1000533c:	290a703a 	and	r5,r5,r4
10005340:	1946b03a 	or	r3,r3,r5
10005344:	f800283a 	ret

10005348 <udivmodsi4>:
10005348:	2900182e 	bgeu	r5,r4,100053ac <udivmodsi4+0x64>
1000534c:	28001716 	blt	r5,zero,100053ac <udivmodsi4+0x64>
10005350:	00800804 	movi	r2,32
10005354:	00c00044 	movi	r3,1
10005358:	00000206 	br	10005364 <udivmodsi4+0x1c>
1000535c:	10001126 	beq	r2,zero,100053a4 <udivmodsi4+0x5c>
10005360:	28000516 	blt	r5,zero,10005378 <udivmodsi4+0x30>
10005364:	294b883a 	add	r5,r5,r5
10005368:	10bfffc4 	addi	r2,r2,-1
1000536c:	18c7883a 	add	r3,r3,r3
10005370:	293ffa36 	bltu	r5,r4,1000535c <__alt_data_end+0xf800535c>
10005374:	18000b26 	beq	r3,zero,100053a4 <udivmodsi4+0x5c>
10005378:	0005883a 	mov	r2,zero
1000537c:	21400236 	bltu	r4,r5,10005388 <udivmodsi4+0x40>
10005380:	2149c83a 	sub	r4,r4,r5
10005384:	10c4b03a 	or	r2,r2,r3
10005388:	1806d07a 	srli	r3,r3,1
1000538c:	280ad07a 	srli	r5,r5,1
10005390:	183ffa1e 	bne	r3,zero,1000537c <__alt_data_end+0xf800537c>
10005394:	3000011e 	bne	r6,zero,1000539c <udivmodsi4+0x54>
10005398:	f800283a 	ret
1000539c:	2005883a 	mov	r2,r4
100053a0:	f800283a 	ret
100053a4:	0005883a 	mov	r2,zero
100053a8:	003ffa06 	br	10005394 <__alt_data_end+0xf8005394>
100053ac:	00c00044 	movi	r3,1
100053b0:	003ff106 	br	10005378 <__alt_data_end+0xf8005378>

100053b4 <__divsi3>:
100053b4:	defffe04 	addi	sp,sp,-8
100053b8:	dfc00115 	stw	ra,4(sp)
100053bc:	dc000015 	stw	r16,0(sp)
100053c0:	20000b16 	blt	r4,zero,100053f0 <__divsi3+0x3c>
100053c4:	0021883a 	mov	r16,zero
100053c8:	28000c16 	blt	r5,zero,100053fc <__divsi3+0x48>
100053cc:	000d883a 	mov	r6,zero
100053d0:	00053480 	call	10005348 <udivmodsi4>
100053d4:	0407c83a 	sub	r3,zero,r16
100053d8:	1884f03a 	xor	r2,r3,r2
100053dc:	1405883a 	add	r2,r2,r16
100053e0:	dfc00117 	ldw	ra,4(sp)
100053e4:	dc000017 	ldw	r16,0(sp)
100053e8:	dec00204 	addi	sp,sp,8
100053ec:	f800283a 	ret
100053f0:	0109c83a 	sub	r4,zero,r4
100053f4:	04000044 	movi	r16,1
100053f8:	283ff40e 	bge	r5,zero,100053cc <__alt_data_end+0xf80053cc>
100053fc:	014bc83a 	sub	r5,zero,r5
10005400:	8400005c 	xori	r16,r16,1
10005404:	003ff106 	br	100053cc <__alt_data_end+0xf80053cc>

10005408 <__modsi3>:
10005408:	defffd04 	addi	sp,sp,-12
1000540c:	dfc00215 	stw	ra,8(sp)
10005410:	dc400115 	stw	r17,4(sp)
10005414:	dc000015 	stw	r16,0(sp)
10005418:	20000c16 	blt	r4,zero,1000544c <__modsi3+0x44>
1000541c:	0023883a 	mov	r17,zero
10005420:	0021883a 	mov	r16,zero
10005424:	28000d16 	blt	r5,zero,1000545c <__modsi3+0x54>
10005428:	01800044 	movi	r6,1
1000542c:	00053480 	call	10005348 <udivmodsi4>
10005430:	1404f03a 	xor	r2,r2,r16
10005434:	8885883a 	add	r2,r17,r2
10005438:	dfc00217 	ldw	ra,8(sp)
1000543c:	dc400117 	ldw	r17,4(sp)
10005440:	dc000017 	ldw	r16,0(sp)
10005444:	dec00304 	addi	sp,sp,12
10005448:	f800283a 	ret
1000544c:	0109c83a 	sub	r4,zero,r4
10005450:	04400044 	movi	r17,1
10005454:	043fffc4 	movi	r16,-1
10005458:	283ff30e 	bge	r5,zero,10005428 <__alt_data_end+0xf8005428>
1000545c:	014bc83a 	sub	r5,zero,r5
10005460:	003ff106 	br	10005428 <__alt_data_end+0xf8005428>

10005464 <__udivsi3>:
10005464:	000d883a 	mov	r6,zero
10005468:	00053481 	jmpi	10005348 <udivmodsi4>

1000546c <__umodsi3>:
1000546c:	01800044 	movi	r6,1
10005470:	00053481 	jmpi	10005348 <udivmodsi4>

10005474 <__adddf3>:
10005474:	02000434 	movhi	r8,16
10005478:	423fffc4 	addi	r8,r8,-1
1000547c:	defffb04 	addi	sp,sp,-20
10005480:	2a12703a 	and	r9,r5,r8
10005484:	2806d7fa 	srli	r3,r5,31
10005488:	3a10703a 	and	r8,r7,r8
1000548c:	3804d53a 	srli	r2,r7,20
10005490:	3014d77a 	srli	r10,r6,29
10005494:	dc000015 	stw	r16,0(sp)
10005498:	481290fa 	slli	r9,r9,3
1000549c:	2820d53a 	srli	r16,r5,20
100054a0:	401090fa 	slli	r8,r8,3
100054a4:	200ad77a 	srli	r5,r4,29
100054a8:	380ed7fa 	srli	r7,r7,31
100054ac:	dc800215 	stw	r18,8(sp)
100054b0:	dc400115 	stw	r17,4(sp)
100054b4:	dfc00415 	stw	ra,16(sp)
100054b8:	dcc00315 	stw	r19,12(sp)
100054bc:	1c803fcc 	andi	r18,r3,255
100054c0:	8401ffcc 	andi	r16,r16,2047
100054c4:	494ab03a 	or	r5,r9,r5
100054c8:	202290fa 	slli	r17,r4,3
100054cc:	1081ffcc 	andi	r2,r2,2047
100054d0:	4290b03a 	or	r8,r8,r10
100054d4:	300c90fa 	slli	r6,r6,3
100054d8:	91c07026 	beq	r18,r7,1000569c <__adddf3+0x228>
100054dc:	8087c83a 	sub	r3,r16,r2
100054e0:	00c0b30e 	bge	zero,r3,100057b0 <__adddf3+0x33c>
100054e4:	10002a1e 	bne	r2,zero,10005590 <__adddf3+0x11c>
100054e8:	4184b03a 	or	r2,r8,r6
100054ec:	1000991e 	bne	r2,zero,10005754 <__adddf3+0x2e0>
100054f0:	888001cc 	andi	r2,r17,7
100054f4:	10005b26 	beq	r2,zero,10005664 <__adddf3+0x1f0>
100054f8:	88c003cc 	andi	r3,r17,15
100054fc:	00800104 	movi	r2,4
10005500:	18805826 	beq	r3,r2,10005664 <__adddf3+0x1f0>
10005504:	89800104 	addi	r6,r17,4
10005508:	3463803a 	cmpltu	r17,r6,r17
1000550c:	2c4b883a 	add	r5,r5,r17
10005510:	2880202c 	andhi	r2,r5,128
10005514:	9007883a 	mov	r3,r18
10005518:	3023883a 	mov	r17,r6
1000551c:	10005426 	beq	r2,zero,10005670 <__adddf3+0x1fc>
10005520:	84000044 	addi	r16,r16,1
10005524:	0081ffc4 	movi	r2,2047
10005528:	8080c126 	beq	r16,r2,10005830 <__adddf3+0x3bc>
1000552c:	013fe034 	movhi	r4,65408
10005530:	213fffc4 	addi	r4,r4,-1
10005534:	290a703a 	and	r5,r5,r4
10005538:	2804977a 	slli	r2,r5,29
1000553c:	280a927a 	slli	r5,r5,9
10005540:	8822d0fa 	srli	r17,r17,3
10005544:	8401ffcc 	andi	r16,r16,2047
10005548:	2808d33a 	srli	r4,r5,12
1000554c:	1444b03a 	or	r2,r2,r17
10005550:	8401ffcc 	andi	r16,r16,2047
10005554:	800a953a 	slli	r5,r16,20
10005558:	18c03fcc 	andi	r3,r3,255
1000555c:	04000434 	movhi	r16,16
10005560:	180697fa 	slli	r3,r3,31
10005564:	843fffc4 	addi	r16,r16,-1
10005568:	2420703a 	and	r16,r4,r16
1000556c:	8160b03a 	or	r16,r16,r5
10005570:	80c6b03a 	or	r3,r16,r3
10005574:	dfc00417 	ldw	ra,16(sp)
10005578:	dcc00317 	ldw	r19,12(sp)
1000557c:	dc800217 	ldw	r18,8(sp)
10005580:	dc400117 	ldw	r17,4(sp)
10005584:	dc000017 	ldw	r16,0(sp)
10005588:	dec00504 	addi	sp,sp,20
1000558c:	f800283a 	ret
10005590:	0081ffc4 	movi	r2,2047
10005594:	80bfd626 	beq	r16,r2,100054f0 <__alt_data_end+0xf80054f0>
10005598:	42002034 	orhi	r8,r8,128
1000559c:	00800e04 	movi	r2,56
100055a0:	10c0a616 	blt	r2,r3,1000583c <__adddf3+0x3c8>
100055a4:	008007c4 	movi	r2,31
100055a8:	10c0c916 	blt	r2,r3,100058d0 <__adddf3+0x45c>
100055ac:	00800804 	movi	r2,32
100055b0:	10c5c83a 	sub	r2,r2,r3
100055b4:	408e983a 	sll	r7,r8,r2
100055b8:	30c8d83a 	srl	r4,r6,r3
100055bc:	3084983a 	sll	r2,r6,r2
100055c0:	40c6d83a 	srl	r3,r8,r3
100055c4:	390cb03a 	or	r6,r7,r4
100055c8:	1004c03a 	cmpne	r2,r2,zero
100055cc:	308cb03a 	or	r6,r6,r2
100055d0:	898dc83a 	sub	r6,r17,r6
100055d4:	89a3803a 	cmpltu	r17,r17,r6
100055d8:	28cbc83a 	sub	r5,r5,r3
100055dc:	2c4bc83a 	sub	r5,r5,r17
100055e0:	3023883a 	mov	r17,r6
100055e4:	2880202c 	andhi	r2,r5,128
100055e8:	10006d26 	beq	r2,zero,100057a0 <__adddf3+0x32c>
100055ec:	04c02034 	movhi	r19,128
100055f0:	9cffffc4 	addi	r19,r19,-1
100055f4:	2ce6703a 	and	r19,r5,r19
100055f8:	98007e26 	beq	r19,zero,100057f4 <__adddf3+0x380>
100055fc:	9809883a 	mov	r4,r19
10005600:	0007b680 	call	10007b68 <__clzsi2>
10005604:	10fffe04 	addi	r3,r2,-8
10005608:	010007c4 	movi	r4,31
1000560c:	20c07f16 	blt	r4,r3,1000580c <__adddf3+0x398>
10005610:	01400a04 	movi	r5,40
10005614:	2885c83a 	sub	r2,r5,r2
10005618:	888ad83a 	srl	r5,r17,r2
1000561c:	98e6983a 	sll	r19,r19,r3
10005620:	88e2983a 	sll	r17,r17,r3
10005624:	2ce6b03a 	or	r19,r5,r19
10005628:	1c007c16 	blt	r3,r16,1000581c <__adddf3+0x3a8>
1000562c:	1c21c83a 	sub	r16,r3,r16
10005630:	81400044 	addi	r5,r16,1
10005634:	00c007c4 	movi	r3,31
10005638:	19409816 	blt	r3,r5,1000589c <__adddf3+0x428>
1000563c:	1c21c83a 	sub	r16,r3,r16
10005640:	8c08983a 	sll	r4,r17,r16
10005644:	8946d83a 	srl	r3,r17,r5
10005648:	9c20983a 	sll	r16,r19,r16
1000564c:	2008c03a 	cmpne	r4,r4,zero
10005650:	994ad83a 	srl	r5,r19,r5
10005654:	1c06b03a 	or	r3,r3,r16
10005658:	1922b03a 	or	r17,r3,r4
1000565c:	0021883a 	mov	r16,zero
10005660:	003fa306 	br	100054f0 <__alt_data_end+0xf80054f0>
10005664:	2880202c 	andhi	r2,r5,128
10005668:	9007883a 	mov	r3,r18
1000566c:	103fac1e 	bne	r2,zero,10005520 <__alt_data_end+0xf8005520>
10005670:	2804977a 	slli	r2,r5,29
10005674:	8822d0fa 	srli	r17,r17,3
10005678:	0101ffc4 	movi	r4,2047
1000567c:	280ad0fa 	srli	r5,r5,3
10005680:	1444b03a 	or	r2,r2,r17
10005684:	81002c26 	beq	r16,r4,10005738 <__adddf3+0x2c4>
10005688:	8120703a 	and	r16,r16,r4
1000568c:	01000434 	movhi	r4,16
10005690:	213fffc4 	addi	r4,r4,-1
10005694:	2908703a 	and	r4,r5,r4
10005698:	003fad06 	br	10005550 <__alt_data_end+0xf8005550>
1000569c:	8089c83a 	sub	r4,r16,r2
100056a0:	01006a0e 	bge	zero,r4,1000584c <__adddf3+0x3d8>
100056a4:	10003326 	beq	r2,zero,10005774 <__adddf3+0x300>
100056a8:	0081ffc4 	movi	r2,2047
100056ac:	80bf9026 	beq	r16,r2,100054f0 <__alt_data_end+0xf80054f0>
100056b0:	42002034 	orhi	r8,r8,128
100056b4:	00800e04 	movi	r2,56
100056b8:	1100b116 	blt	r2,r4,10005980 <__adddf3+0x50c>
100056bc:	008007c4 	movi	r2,31
100056c0:	1100e216 	blt	r2,r4,10005a4c <__adddf3+0x5d8>
100056c4:	00800804 	movi	r2,32
100056c8:	1105c83a 	sub	r2,r2,r4
100056cc:	4092983a 	sll	r9,r8,r2
100056d0:	310ed83a 	srl	r7,r6,r4
100056d4:	3084983a 	sll	r2,r6,r2
100056d8:	4110d83a 	srl	r8,r8,r4
100056dc:	49ccb03a 	or	r6,r9,r7
100056e0:	1004c03a 	cmpne	r2,r2,zero
100056e4:	308cb03a 	or	r6,r6,r2
100056e8:	344d883a 	add	r6,r6,r17
100056ec:	3463803a 	cmpltu	r17,r6,r17
100056f0:	414b883a 	add	r5,r8,r5
100056f4:	2c4b883a 	add	r5,r5,r17
100056f8:	3023883a 	mov	r17,r6
100056fc:	2880202c 	andhi	r2,r5,128
10005700:	10002726 	beq	r2,zero,100057a0 <__adddf3+0x32c>
10005704:	84000044 	addi	r16,r16,1
10005708:	0081ffc4 	movi	r2,2047
1000570c:	8080ae26 	beq	r16,r2,100059c8 <__adddf3+0x554>
10005710:	00bfe034 	movhi	r2,65408
10005714:	10bfffc4 	addi	r2,r2,-1
10005718:	288a703a 	and	r5,r5,r2
1000571c:	880cd07a 	srli	r6,r17,1
10005720:	280897fa 	slli	r4,r5,31
10005724:	88c0004c 	andi	r3,r17,1
10005728:	30e2b03a 	or	r17,r6,r3
1000572c:	280ad07a 	srli	r5,r5,1
10005730:	8922b03a 	or	r17,r17,r4
10005734:	003f6e06 	br	100054f0 <__alt_data_end+0xf80054f0>
10005738:	1148b03a 	or	r4,r2,r5
1000573c:	20003c26 	beq	r4,zero,10005830 <__adddf3+0x3bc>
10005740:	29000234 	orhi	r4,r5,8
10005744:	01400434 	movhi	r5,16
10005748:	297fffc4 	addi	r5,r5,-1
1000574c:	2148703a 	and	r4,r4,r5
10005750:	003f7f06 	br	10005550 <__alt_data_end+0xf8005550>
10005754:	18ffffc4 	addi	r3,r3,-1
10005758:	18004d1e 	bne	r3,zero,10005890 <__adddf3+0x41c>
1000575c:	898dc83a 	sub	r6,r17,r6
10005760:	89a3803a 	cmpltu	r17,r17,r6
10005764:	2a0bc83a 	sub	r5,r5,r8
10005768:	2c4bc83a 	sub	r5,r5,r17
1000576c:	3023883a 	mov	r17,r6
10005770:	003f9c06 	br	100055e4 <__alt_data_end+0xf80055e4>
10005774:	4184b03a 	or	r2,r8,r6
10005778:	103f5d26 	beq	r2,zero,100054f0 <__alt_data_end+0xf80054f0>
1000577c:	213fffc4 	addi	r4,r4,-1
10005780:	203fd926 	beq	r4,zero,100056e8 <__alt_data_end+0xf80056e8>
10005784:	0081ffc4 	movi	r2,2047
10005788:	80bfca1e 	bne	r16,r2,100056b4 <__alt_data_end+0xf80056b4>
1000578c:	003f5806 	br	100054f0 <__alt_data_end+0xf80054f0>
10005790:	10c8b03a 	or	r4,r2,r3
10005794:	20008b26 	beq	r4,zero,100059c4 <__adddf3+0x550>
10005798:	100b883a 	mov	r5,r2
1000579c:	1823883a 	mov	r17,r3
100057a0:	888001cc 	andi	r2,r17,7
100057a4:	103f541e 	bne	r2,zero,100054f8 <__alt_data_end+0xf80054f8>
100057a8:	9007883a 	mov	r3,r18
100057ac:	003fb006 	br	10005670 <__alt_data_end+0xf8005670>
100057b0:	1800531e 	bne	r3,zero,10005900 <__adddf3+0x48c>
100057b4:	80800044 	addi	r2,r16,1
100057b8:	1081ffcc 	andi	r2,r2,2047
100057bc:	00c00044 	movi	r3,1
100057c0:	1880990e 	bge	r3,r2,10005a28 <__adddf3+0x5b4>
100057c4:	8985c83a 	sub	r2,r17,r6
100057c8:	8887803a 	cmpltu	r3,r17,r2
100057cc:	2a27c83a 	sub	r19,r5,r8
100057d0:	98e7c83a 	sub	r19,r19,r3
100057d4:	98c0202c 	andhi	r3,r19,128
100057d8:	18006226 	beq	r3,zero,10005964 <__adddf3+0x4f0>
100057dc:	3463c83a 	sub	r17,r6,r17
100057e0:	4151c83a 	sub	r8,r8,r5
100057e4:	344d803a 	cmpltu	r6,r6,r17
100057e8:	41a7c83a 	sub	r19,r8,r6
100057ec:	3825883a 	mov	r18,r7
100057f0:	983f821e 	bne	r19,zero,100055fc <__alt_data_end+0xf80055fc>
100057f4:	8809883a 	mov	r4,r17
100057f8:	0007b680 	call	10007b68 <__clzsi2>
100057fc:	10800804 	addi	r2,r2,32
10005800:	10fffe04 	addi	r3,r2,-8
10005804:	010007c4 	movi	r4,31
10005808:	20ff810e 	bge	r4,r3,10005610 <__alt_data_end+0xf8005610>
1000580c:	14fff604 	addi	r19,r2,-40
10005810:	8ce6983a 	sll	r19,r17,r19
10005814:	0023883a 	mov	r17,zero
10005818:	1c3f840e 	bge	r3,r16,1000562c <__alt_data_end+0xf800562c>
1000581c:	017fe034 	movhi	r5,65408
10005820:	297fffc4 	addi	r5,r5,-1
10005824:	80e1c83a 	sub	r16,r16,r3
10005828:	994a703a 	and	r5,r19,r5
1000582c:	003f3006 	br	100054f0 <__alt_data_end+0xf80054f0>
10005830:	0009883a 	mov	r4,zero
10005834:	0005883a 	mov	r2,zero
10005838:	003f4506 	br	10005550 <__alt_data_end+0xf8005550>
1000583c:	418cb03a 	or	r6,r8,r6
10005840:	300cc03a 	cmpne	r6,r6,zero
10005844:	0007883a 	mov	r3,zero
10005848:	003f6106 	br	100055d0 <__alt_data_end+0xf80055d0>
1000584c:	2000921e 	bne	r4,zero,10005a98 <__adddf3+0x624>
10005850:	80800044 	addi	r2,r16,1
10005854:	11c1ffcc 	andi	r7,r2,2047
10005858:	01000044 	movi	r4,1
1000585c:	21c0610e 	bge	r4,r7,100059e4 <__adddf3+0x570>
10005860:	0101ffc4 	movi	r4,2047
10005864:	1100a326 	beq	r2,r4,10005af4 <__adddf3+0x680>
10005868:	344d883a 	add	r6,r6,r17
1000586c:	3463803a 	cmpltu	r17,r6,r17
10005870:	414b883a 	add	r5,r8,r5
10005874:	2c4b883a 	add	r5,r5,r17
10005878:	282297fa 	slli	r17,r5,31
1000587c:	300cd07a 	srli	r6,r6,1
10005880:	280ad07a 	srli	r5,r5,1
10005884:	1021883a 	mov	r16,r2
10005888:	89a2b03a 	or	r17,r17,r6
1000588c:	003f1806 	br	100054f0 <__alt_data_end+0xf80054f0>
10005890:	0081ffc4 	movi	r2,2047
10005894:	80bf411e 	bne	r16,r2,1000559c <__alt_data_end+0xf800559c>
10005898:	003f1506 	br	100054f0 <__alt_data_end+0xf80054f0>
1000589c:	80bff844 	addi	r2,r16,-31
100058a0:	00c00804 	movi	r3,32
100058a4:	9884d83a 	srl	r2,r19,r2
100058a8:	28c04a26 	beq	r5,r3,100059d4 <__adddf3+0x560>
100058ac:	00c00fc4 	movi	r3,63
100058b0:	1c21c83a 	sub	r16,r3,r16
100058b4:	9c26983a 	sll	r19,r19,r16
100058b8:	9c62b03a 	or	r17,r19,r17
100058bc:	8822c03a 	cmpne	r17,r17,zero
100058c0:	88a2b03a 	or	r17,r17,r2
100058c4:	000b883a 	mov	r5,zero
100058c8:	0021883a 	mov	r16,zero
100058cc:	003fb406 	br	100057a0 <__alt_data_end+0xf80057a0>
100058d0:	18bff804 	addi	r2,r3,-32
100058d4:	01000804 	movi	r4,32
100058d8:	4084d83a 	srl	r2,r8,r2
100058dc:	19003f26 	beq	r3,r4,100059dc <__adddf3+0x568>
100058e0:	01001004 	movi	r4,64
100058e4:	20c7c83a 	sub	r3,r4,r3
100058e8:	40d0983a 	sll	r8,r8,r3
100058ec:	418cb03a 	or	r6,r8,r6
100058f0:	300cc03a 	cmpne	r6,r6,zero
100058f4:	308cb03a 	or	r6,r6,r2
100058f8:	0007883a 	mov	r3,zero
100058fc:	003f3406 	br	100055d0 <__alt_data_end+0xf80055d0>
10005900:	80002326 	beq	r16,zero,10005990 <__adddf3+0x51c>
10005904:	0101ffc4 	movi	r4,2047
10005908:	11005e26 	beq	r2,r4,10005a84 <__adddf3+0x610>
1000590c:	00c7c83a 	sub	r3,zero,r3
10005910:	29402034 	orhi	r5,r5,128
10005914:	01000e04 	movi	r4,56
10005918:	20c07216 	blt	r4,r3,10005ae4 <__adddf3+0x670>
1000591c:	010007c4 	movi	r4,31
10005920:	20c0ce16 	blt	r4,r3,10005c5c <__adddf3+0x7e8>
10005924:	01000804 	movi	r4,32
10005928:	20c9c83a 	sub	r4,r4,r3
1000592c:	2914983a 	sll	r10,r5,r4
10005930:	88d2d83a 	srl	r9,r17,r3
10005934:	8908983a 	sll	r4,r17,r4
10005938:	28c6d83a 	srl	r3,r5,r3
1000593c:	5262b03a 	or	r17,r10,r9
10005940:	2008c03a 	cmpne	r4,r4,zero
10005944:	8922b03a 	or	r17,r17,r4
10005948:	3463c83a 	sub	r17,r6,r17
1000594c:	40c7c83a 	sub	r3,r8,r3
10005950:	344d803a 	cmpltu	r6,r6,r17
10005954:	198bc83a 	sub	r5,r3,r6
10005958:	1021883a 	mov	r16,r2
1000595c:	3825883a 	mov	r18,r7
10005960:	003f2006 	br	100055e4 <__alt_data_end+0xf80055e4>
10005964:	9886b03a 	or	r3,r19,r2
10005968:	1800141e 	bne	r3,zero,100059bc <__adddf3+0x548>
1000596c:	0007883a 	mov	r3,zero
10005970:	000b883a 	mov	r5,zero
10005974:	0023883a 	mov	r17,zero
10005978:	0021883a 	mov	r16,zero
1000597c:	003f3c06 	br	10005670 <__alt_data_end+0xf8005670>
10005980:	418cb03a 	or	r6,r8,r6
10005984:	300cc03a 	cmpne	r6,r6,zero
10005988:	0011883a 	mov	r8,zero
1000598c:	003f5606 	br	100056e8 <__alt_data_end+0xf80056e8>
10005990:	2c48b03a 	or	r4,r5,r17
10005994:	20003b26 	beq	r4,zero,10005a84 <__adddf3+0x610>
10005998:	00c6303a 	nor	r3,zero,r3
1000599c:	1800371e 	bne	r3,zero,10005a7c <__adddf3+0x608>
100059a0:	3463c83a 	sub	r17,r6,r17
100059a4:	414bc83a 	sub	r5,r8,r5
100059a8:	344d803a 	cmpltu	r6,r6,r17
100059ac:	298bc83a 	sub	r5,r5,r6
100059b0:	1021883a 	mov	r16,r2
100059b4:	3825883a 	mov	r18,r7
100059b8:	003f0a06 	br	100055e4 <__alt_data_end+0xf80055e4>
100059bc:	1023883a 	mov	r17,r2
100059c0:	003f0d06 	br	100055f8 <__alt_data_end+0xf80055f8>
100059c4:	0007883a 	mov	r3,zero
100059c8:	000b883a 	mov	r5,zero
100059cc:	0023883a 	mov	r17,zero
100059d0:	003f2706 	br	10005670 <__alt_data_end+0xf8005670>
100059d4:	0027883a 	mov	r19,zero
100059d8:	003fb706 	br	100058b8 <__alt_data_end+0xf80058b8>
100059dc:	0011883a 	mov	r8,zero
100059e0:	003fc206 	br	100058ec <__alt_data_end+0xf80058ec>
100059e4:	2c44b03a 	or	r2,r5,r17
100059e8:	8000871e 	bne	r16,zero,10005c08 <__adddf3+0x794>
100059ec:	1000b126 	beq	r2,zero,10005cb4 <__adddf3+0x840>
100059f0:	4184b03a 	or	r2,r8,r6
100059f4:	103ebe26 	beq	r2,zero,100054f0 <__alt_data_end+0xf80054f0>
100059f8:	3445883a 	add	r2,r6,r17
100059fc:	1463803a 	cmpltu	r17,r2,r17
10005a00:	414b883a 	add	r5,r8,r5
10005a04:	2c4b883a 	add	r5,r5,r17
10005a08:	28c0202c 	andhi	r3,r5,128
10005a0c:	1023883a 	mov	r17,r2
10005a10:	183f6326 	beq	r3,zero,100057a0 <__alt_data_end+0xf80057a0>
10005a14:	00bfe034 	movhi	r2,65408
10005a18:	10bfffc4 	addi	r2,r2,-1
10005a1c:	2021883a 	mov	r16,r4
10005a20:	288a703a 	and	r5,r5,r2
10005a24:	003eb206 	br	100054f0 <__alt_data_end+0xf80054f0>
10005a28:	2c44b03a 	or	r2,r5,r17
10005a2c:	8000251e 	bne	r16,zero,10005ac4 <__adddf3+0x650>
10005a30:	10004b1e 	bne	r2,zero,10005b60 <__adddf3+0x6ec>
10005a34:	4184b03a 	or	r2,r8,r6
10005a38:	103fe226 	beq	r2,zero,100059c4 <__alt_data_end+0xf80059c4>
10005a3c:	400b883a 	mov	r5,r8
10005a40:	3023883a 	mov	r17,r6
10005a44:	3825883a 	mov	r18,r7
10005a48:	003ea906 	br	100054f0 <__alt_data_end+0xf80054f0>
10005a4c:	20bff804 	addi	r2,r4,-32
10005a50:	01c00804 	movi	r7,32
10005a54:	4084d83a 	srl	r2,r8,r2
10005a58:	21c07e26 	beq	r4,r7,10005c54 <__adddf3+0x7e0>
10005a5c:	01c01004 	movi	r7,64
10005a60:	3909c83a 	sub	r4,r7,r4
10005a64:	4110983a 	sll	r8,r8,r4
10005a68:	418cb03a 	or	r6,r8,r6
10005a6c:	300cc03a 	cmpne	r6,r6,zero
10005a70:	308cb03a 	or	r6,r6,r2
10005a74:	0011883a 	mov	r8,zero
10005a78:	003f1b06 	br	100056e8 <__alt_data_end+0xf80056e8>
10005a7c:	0101ffc4 	movi	r4,2047
10005a80:	113fa41e 	bne	r2,r4,10005914 <__alt_data_end+0xf8005914>
10005a84:	400b883a 	mov	r5,r8
10005a88:	3023883a 	mov	r17,r6
10005a8c:	1021883a 	mov	r16,r2
10005a90:	3825883a 	mov	r18,r7
10005a94:	003e9606 	br	100054f0 <__alt_data_end+0xf80054f0>
10005a98:	80001a1e 	bne	r16,zero,10005b04 <__adddf3+0x690>
10005a9c:	2c4eb03a 	or	r7,r5,r17
10005aa0:	38005526 	beq	r7,zero,10005bf8 <__adddf3+0x784>
10005aa4:	0108303a 	nor	r4,zero,r4
10005aa8:	2000511e 	bne	r4,zero,10005bf0 <__adddf3+0x77c>
10005aac:	89a3883a 	add	r17,r17,r6
10005ab0:	414b883a 	add	r5,r8,r5
10005ab4:	898d803a 	cmpltu	r6,r17,r6
10005ab8:	298b883a 	add	r5,r5,r6
10005abc:	1021883a 	mov	r16,r2
10005ac0:	003f0e06 	br	100056fc <__alt_data_end+0xf80056fc>
10005ac4:	1000341e 	bne	r2,zero,10005b98 <__adddf3+0x724>
10005ac8:	4184b03a 	or	r2,r8,r6
10005acc:	10006f26 	beq	r2,zero,10005c8c <__adddf3+0x818>
10005ad0:	400b883a 	mov	r5,r8
10005ad4:	3023883a 	mov	r17,r6
10005ad8:	3825883a 	mov	r18,r7
10005adc:	0401ffc4 	movi	r16,2047
10005ae0:	003e8306 	br	100054f0 <__alt_data_end+0xf80054f0>
10005ae4:	2c62b03a 	or	r17,r5,r17
10005ae8:	8822c03a 	cmpne	r17,r17,zero
10005aec:	0007883a 	mov	r3,zero
10005af0:	003f9506 	br	10005948 <__alt_data_end+0xf8005948>
10005af4:	1021883a 	mov	r16,r2
10005af8:	000b883a 	mov	r5,zero
10005afc:	0023883a 	mov	r17,zero
10005b00:	003edb06 	br	10005670 <__alt_data_end+0xf8005670>
10005b04:	01c1ffc4 	movi	r7,2047
10005b08:	11c03b26 	beq	r2,r7,10005bf8 <__adddf3+0x784>
10005b0c:	0109c83a 	sub	r4,zero,r4
10005b10:	29402034 	orhi	r5,r5,128
10005b14:	01c00e04 	movi	r7,56
10005b18:	39006216 	blt	r7,r4,10005ca4 <__adddf3+0x830>
10005b1c:	01c007c4 	movi	r7,31
10005b20:	39006b16 	blt	r7,r4,10005cd0 <__adddf3+0x85c>
10005b24:	01c00804 	movi	r7,32
10005b28:	390fc83a 	sub	r7,r7,r4
10005b2c:	29d4983a 	sll	r10,r5,r7
10005b30:	8912d83a 	srl	r9,r17,r4
10005b34:	89ce983a 	sll	r7,r17,r7
10005b38:	2908d83a 	srl	r4,r5,r4
10005b3c:	5262b03a 	or	r17,r10,r9
10005b40:	380ac03a 	cmpne	r5,r7,zero
10005b44:	8962b03a 	or	r17,r17,r5
10005b48:	89a3883a 	add	r17,r17,r6
10005b4c:	2211883a 	add	r8,r4,r8
10005b50:	898d803a 	cmpltu	r6,r17,r6
10005b54:	418b883a 	add	r5,r8,r6
10005b58:	1021883a 	mov	r16,r2
10005b5c:	003ee706 	br	100056fc <__alt_data_end+0xf80056fc>
10005b60:	4184b03a 	or	r2,r8,r6
10005b64:	103e6226 	beq	r2,zero,100054f0 <__alt_data_end+0xf80054f0>
10005b68:	8987c83a 	sub	r3,r17,r6
10005b6c:	88c9803a 	cmpltu	r4,r17,r3
10005b70:	2a05c83a 	sub	r2,r5,r8
10005b74:	1105c83a 	sub	r2,r2,r4
10005b78:	1100202c 	andhi	r4,r2,128
10005b7c:	203f0426 	beq	r4,zero,10005790 <__alt_data_end+0xf8005790>
10005b80:	3463c83a 	sub	r17,r6,r17
10005b84:	414bc83a 	sub	r5,r8,r5
10005b88:	344d803a 	cmpltu	r6,r6,r17
10005b8c:	298bc83a 	sub	r5,r5,r6
10005b90:	3825883a 	mov	r18,r7
10005b94:	003e5606 	br	100054f0 <__alt_data_end+0xf80054f0>
10005b98:	4184b03a 	or	r2,r8,r6
10005b9c:	10002b26 	beq	r2,zero,10005c4c <__adddf3+0x7d8>
10005ba0:	2804d0fa 	srli	r2,r5,3
10005ba4:	8822d0fa 	srli	r17,r17,3
10005ba8:	280a977a 	slli	r5,r5,29
10005bac:	10c0022c 	andhi	r3,r2,8
10005bb0:	2c62b03a 	or	r17,r5,r17
10005bb4:	18000826 	beq	r3,zero,10005bd8 <__adddf3+0x764>
10005bb8:	4008d0fa 	srli	r4,r8,3
10005bbc:	20c0022c 	andhi	r3,r4,8
10005bc0:	1800051e 	bne	r3,zero,10005bd8 <__adddf3+0x764>
10005bc4:	300cd0fa 	srli	r6,r6,3
10005bc8:	4010977a 	slli	r8,r8,29
10005bcc:	2005883a 	mov	r2,r4
10005bd0:	3825883a 	mov	r18,r7
10005bd4:	41a2b03a 	or	r17,r8,r6
10005bd8:	880ad77a 	srli	r5,r17,29
10005bdc:	100490fa 	slli	r2,r2,3
10005be0:	882290fa 	slli	r17,r17,3
10005be4:	0401ffc4 	movi	r16,2047
10005be8:	288ab03a 	or	r5,r5,r2
10005bec:	003e4006 	br	100054f0 <__alt_data_end+0xf80054f0>
10005bf0:	01c1ffc4 	movi	r7,2047
10005bf4:	11ffc71e 	bne	r2,r7,10005b14 <__alt_data_end+0xf8005b14>
10005bf8:	400b883a 	mov	r5,r8
10005bfc:	3023883a 	mov	r17,r6
10005c00:	1021883a 	mov	r16,r2
10005c04:	003e3a06 	br	100054f0 <__alt_data_end+0xf80054f0>
10005c08:	10002d26 	beq	r2,zero,10005cc0 <__adddf3+0x84c>
10005c0c:	4184b03a 	or	r2,r8,r6
10005c10:	10000e26 	beq	r2,zero,10005c4c <__adddf3+0x7d8>
10005c14:	2804d0fa 	srli	r2,r5,3
10005c18:	8822d0fa 	srli	r17,r17,3
10005c1c:	280a977a 	slli	r5,r5,29
10005c20:	10c0022c 	andhi	r3,r2,8
10005c24:	2c62b03a 	or	r17,r5,r17
10005c28:	183feb26 	beq	r3,zero,10005bd8 <__alt_data_end+0xf8005bd8>
10005c2c:	4008d0fa 	srli	r4,r8,3
10005c30:	20c0022c 	andhi	r3,r4,8
10005c34:	183fe81e 	bne	r3,zero,10005bd8 <__alt_data_end+0xf8005bd8>
10005c38:	300cd0fa 	srli	r6,r6,3
10005c3c:	4010977a 	slli	r8,r8,29
10005c40:	2005883a 	mov	r2,r4
10005c44:	41a2b03a 	or	r17,r8,r6
10005c48:	003fe306 	br	10005bd8 <__alt_data_end+0xf8005bd8>
10005c4c:	0401ffc4 	movi	r16,2047
10005c50:	003e2706 	br	100054f0 <__alt_data_end+0xf80054f0>
10005c54:	0011883a 	mov	r8,zero
10005c58:	003f8306 	br	10005a68 <__alt_data_end+0xf8005a68>
10005c5c:	193ff804 	addi	r4,r3,-32
10005c60:	02400804 	movi	r9,32
10005c64:	2908d83a 	srl	r4,r5,r4
10005c68:	1a402526 	beq	r3,r9,10005d00 <__adddf3+0x88c>
10005c6c:	02401004 	movi	r9,64
10005c70:	48c7c83a 	sub	r3,r9,r3
10005c74:	28ca983a 	sll	r5,r5,r3
10005c78:	2c62b03a 	or	r17,r5,r17
10005c7c:	8822c03a 	cmpne	r17,r17,zero
10005c80:	8922b03a 	or	r17,r17,r4
10005c84:	0007883a 	mov	r3,zero
10005c88:	003f2f06 	br	10005948 <__alt_data_end+0xf8005948>
10005c8c:	01402034 	movhi	r5,128
10005c90:	0007883a 	mov	r3,zero
10005c94:	297fffc4 	addi	r5,r5,-1
10005c98:	047ffe04 	movi	r17,-8
10005c9c:	0401ffc4 	movi	r16,2047
10005ca0:	003e7306 	br	10005670 <__alt_data_end+0xf8005670>
10005ca4:	2c62b03a 	or	r17,r5,r17
10005ca8:	8822c03a 	cmpne	r17,r17,zero
10005cac:	0009883a 	mov	r4,zero
10005cb0:	003fa506 	br	10005b48 <__alt_data_end+0xf8005b48>
10005cb4:	400b883a 	mov	r5,r8
10005cb8:	3023883a 	mov	r17,r6
10005cbc:	003e0c06 	br	100054f0 <__alt_data_end+0xf80054f0>
10005cc0:	400b883a 	mov	r5,r8
10005cc4:	3023883a 	mov	r17,r6
10005cc8:	0401ffc4 	movi	r16,2047
10005ccc:	003e0806 	br	100054f0 <__alt_data_end+0xf80054f0>
10005cd0:	21fff804 	addi	r7,r4,-32
10005cd4:	02400804 	movi	r9,32
10005cd8:	29ced83a 	srl	r7,r5,r7
10005cdc:	22400a26 	beq	r4,r9,10005d08 <__adddf3+0x894>
10005ce0:	02401004 	movi	r9,64
10005ce4:	4909c83a 	sub	r4,r9,r4
10005ce8:	290a983a 	sll	r5,r5,r4
10005cec:	2c62b03a 	or	r17,r5,r17
10005cf0:	8822c03a 	cmpne	r17,r17,zero
10005cf4:	89e2b03a 	or	r17,r17,r7
10005cf8:	0009883a 	mov	r4,zero
10005cfc:	003f9206 	br	10005b48 <__alt_data_end+0xf8005b48>
10005d00:	000b883a 	mov	r5,zero
10005d04:	003fdc06 	br	10005c78 <__alt_data_end+0xf8005c78>
10005d08:	000b883a 	mov	r5,zero
10005d0c:	003ff706 	br	10005cec <__alt_data_end+0xf8005cec>

10005d10 <__divdf3>:
10005d10:	defff004 	addi	sp,sp,-64
10005d14:	dc800815 	stw	r18,32(sp)
10005d18:	2824d53a 	srli	r18,r5,20
10005d1c:	dd800c15 	stw	r22,48(sp)
10005d20:	282cd7fa 	srli	r22,r5,31
10005d24:	dc000615 	stw	r16,24(sp)
10005d28:	04000434 	movhi	r16,16
10005d2c:	df000e15 	stw	fp,56(sp)
10005d30:	dd000a15 	stw	r20,40(sp)
10005d34:	dcc00915 	stw	r19,36(sp)
10005d38:	dc400715 	stw	r17,28(sp)
10005d3c:	843fffc4 	addi	r16,r16,-1
10005d40:	dfc00f15 	stw	ra,60(sp)
10005d44:	ddc00d15 	stw	r23,52(sp)
10005d48:	dd400b15 	stw	r21,44(sp)
10005d4c:	9481ffcc 	andi	r18,r18,2047
10005d50:	2029883a 	mov	r20,r4
10005d54:	2027883a 	mov	r19,r4
10005d58:	2c22703a 	and	r17,r5,r16
10005d5c:	b7003fcc 	andi	fp,r22,255
10005d60:	90005e26 	beq	r18,zero,10005edc <__divdf3+0x1cc>
10005d64:	0081ffc4 	movi	r2,2047
10005d68:	90803526 	beq	r18,r2,10005e40 <__divdf3+0x130>
10005d6c:	8c000434 	orhi	r16,r17,16
10005d70:	2004d77a 	srli	r2,r4,29
10005d74:	802090fa 	slli	r16,r16,3
10005d78:	202690fa 	slli	r19,r4,3
10005d7c:	94bf0044 	addi	r18,r18,-1023
10005d80:	80a2b03a 	or	r17,r16,r2
10005d84:	0029883a 	mov	r20,zero
10005d88:	0011883a 	mov	r8,zero
10005d8c:	380ad53a 	srli	r5,r7,20
10005d90:	382ed7fa 	srli	r23,r7,31
10005d94:	04000434 	movhi	r16,16
10005d98:	843fffc4 	addi	r16,r16,-1
10005d9c:	2941ffcc 	andi	r5,r5,2047
10005da0:	302b883a 	mov	r21,r6
10005da4:	3c20703a 	and	r16,r7,r16
10005da8:	ba403fcc 	andi	r9,r23,255
10005dac:	28006726 	beq	r5,zero,10005f4c <__divdf3+0x23c>
10005db0:	0081ffc4 	movi	r2,2047
10005db4:	28805f26 	beq	r5,r2,10005f34 <__divdf3+0x224>
10005db8:	84000434 	orhi	r16,r16,16
10005dbc:	3004d77a 	srli	r2,r6,29
10005dc0:	802090fa 	slli	r16,r16,3
10005dc4:	302a90fa 	slli	r21,r6,3
10005dc8:	297f0044 	addi	r5,r5,-1023
10005dcc:	80a0b03a 	or	r16,r16,r2
10005dd0:	000f883a 	mov	r7,zero
10005dd4:	3d06b03a 	or	r3,r7,r20
10005dd8:	180690ba 	slli	r3,r3,2
10005ddc:	00840034 	movhi	r2,4096
10005de0:	10978004 	addi	r2,r2,24064
10005de4:	1885883a 	add	r2,r3,r2
10005de8:	10800017 	ldw	r2,0(r2)
10005dec:	b5c8f03a 	xor	r4,r22,r23
10005df0:	200d883a 	mov	r6,r4
10005df4:	25003fcc 	andi	r20,r4,255
10005df8:	9165c83a 	sub	r18,r18,r5
10005dfc:	1000683a 	jmp	r2
10005e00:	10006048 	cmpgei	zero,r2,385
10005e04:	10005e78 	rdprs	zero,r2,377
10005e08:	1000600c 	andi	zero,r2,384
10005e0c:	10005e5c 	xori	zero,r2,377
10005e10:	1000600c 	andi	zero,r2,384
10005e14:	10005fe0 	cmpeqi	zero,r2,383
10005e18:	1000600c 	andi	zero,r2,384
10005e1c:	10005e5c 	xori	zero,r2,377
10005e20:	10005e78 	rdprs	zero,r2,377
10005e24:	10005e78 	rdprs	zero,r2,377
10005e28:	10005fe0 	cmpeqi	zero,r2,383
10005e2c:	10005e5c 	xori	zero,r2,377
10005e30:	10005e6c 	andhi	zero,r2,377
10005e34:	10005e6c 	andhi	zero,r2,377
10005e38:	10005e6c 	andhi	zero,r2,377
10005e3c:	1000601c 	xori	zero,r2,384
10005e40:	8904b03a 	or	r2,r17,r4
10005e44:	1000631e 	bne	r2,zero,10005fd4 <__divdf3+0x2c4>
10005e48:	05000204 	movi	r20,8
10005e4c:	0023883a 	mov	r17,zero
10005e50:	0027883a 	mov	r19,zero
10005e54:	02000084 	movi	r8,2
10005e58:	003fcc06 	br	10005d8c <__alt_data_end+0xf8005d8c>
10005e5c:	8023883a 	mov	r17,r16
10005e60:	a827883a 	mov	r19,r21
10005e64:	4839883a 	mov	fp,r9
10005e68:	3811883a 	mov	r8,r7
10005e6c:	00800084 	movi	r2,2
10005e70:	4081531e 	bne	r8,r2,100063c0 <__divdf3+0x6b0>
10005e74:	e029883a 	mov	r20,fp
10005e78:	a180004c 	andi	r6,r20,1
10005e7c:	0201ffc4 	movi	r8,2047
10005e80:	000b883a 	mov	r5,zero
10005e84:	0027883a 	mov	r19,zero
10005e88:	4010953a 	slli	r8,r8,20
10005e8c:	30c03fcc 	andi	r3,r6,255
10005e90:	04000434 	movhi	r16,16
10005e94:	180697fa 	slli	r3,r3,31
10005e98:	843fffc4 	addi	r16,r16,-1
10005e9c:	2c20703a 	and	r16,r5,r16
10005ea0:	8220b03a 	or	r16,r16,r8
10005ea4:	80c6b03a 	or	r3,r16,r3
10005ea8:	9805883a 	mov	r2,r19
10005eac:	dfc00f17 	ldw	ra,60(sp)
10005eb0:	df000e17 	ldw	fp,56(sp)
10005eb4:	ddc00d17 	ldw	r23,52(sp)
10005eb8:	dd800c17 	ldw	r22,48(sp)
10005ebc:	dd400b17 	ldw	r21,44(sp)
10005ec0:	dd000a17 	ldw	r20,40(sp)
10005ec4:	dcc00917 	ldw	r19,36(sp)
10005ec8:	dc800817 	ldw	r18,32(sp)
10005ecc:	dc400717 	ldw	r17,28(sp)
10005ed0:	dc000617 	ldw	r16,24(sp)
10005ed4:	dec01004 	addi	sp,sp,64
10005ed8:	f800283a 	ret
10005edc:	8904b03a 	or	r2,r17,r4
10005ee0:	10003726 	beq	r2,zero,10005fc0 <__divdf3+0x2b0>
10005ee4:	88014d26 	beq	r17,zero,1000641c <__divdf3+0x70c>
10005ee8:	8809883a 	mov	r4,r17
10005eec:	d9800215 	stw	r6,8(sp)
10005ef0:	d9c00515 	stw	r7,20(sp)
10005ef4:	0007b680 	call	10007b68 <__clzsi2>
10005ef8:	d9800217 	ldw	r6,8(sp)
10005efc:	d9c00517 	ldw	r7,20(sp)
10005f00:	1007883a 	mov	r3,r2
10005f04:	01000a04 	movi	r4,40
10005f08:	1cfffe04 	addi	r19,r3,-8
10005f0c:	20c9c83a 	sub	r4,r4,r3
10005f10:	8cca983a 	sll	r5,r17,r19
10005f14:	a108d83a 	srl	r4,r20,r4
10005f18:	a4e6983a 	sll	r19,r20,r19
10005f1c:	2162b03a 	or	r17,r4,r5
10005f20:	04bf0344 	movi	r18,-1011
10005f24:	90e5c83a 	sub	r18,r18,r3
10005f28:	0029883a 	mov	r20,zero
10005f2c:	0011883a 	mov	r8,zero
10005f30:	003f9606 	br	10005d8c <__alt_data_end+0xf8005d8c>
10005f34:	8184b03a 	or	r2,r16,r6
10005f38:	10001f1e 	bne	r2,zero,10005fb8 <__divdf3+0x2a8>
10005f3c:	0021883a 	mov	r16,zero
10005f40:	002b883a 	mov	r21,zero
10005f44:	01c00084 	movi	r7,2
10005f48:	003fa206 	br	10005dd4 <__alt_data_end+0xf8005dd4>
10005f4c:	8184b03a 	or	r2,r16,r6
10005f50:	10001526 	beq	r2,zero,10005fa8 <__divdf3+0x298>
10005f54:	80013d26 	beq	r16,zero,1000644c <__divdf3+0x73c>
10005f58:	8009883a 	mov	r4,r16
10005f5c:	d9800215 	stw	r6,8(sp)
10005f60:	da000315 	stw	r8,12(sp)
10005f64:	da400415 	stw	r9,16(sp)
10005f68:	0007b680 	call	10007b68 <__clzsi2>
10005f6c:	d9800217 	ldw	r6,8(sp)
10005f70:	da000317 	ldw	r8,12(sp)
10005f74:	da400417 	ldw	r9,16(sp)
10005f78:	1007883a 	mov	r3,r2
10005f7c:	01000a04 	movi	r4,40
10005f80:	1d7ffe04 	addi	r21,r3,-8
10005f84:	20c9c83a 	sub	r4,r4,r3
10005f88:	8560983a 	sll	r16,r16,r21
10005f8c:	3108d83a 	srl	r4,r6,r4
10005f90:	356a983a 	sll	r21,r6,r21
10005f94:	2420b03a 	or	r16,r4,r16
10005f98:	017f0344 	movi	r5,-1011
10005f9c:	28cbc83a 	sub	r5,r5,r3
10005fa0:	000f883a 	mov	r7,zero
10005fa4:	003f8b06 	br	10005dd4 <__alt_data_end+0xf8005dd4>
10005fa8:	0021883a 	mov	r16,zero
10005fac:	002b883a 	mov	r21,zero
10005fb0:	01c00044 	movi	r7,1
10005fb4:	003f8706 	br	10005dd4 <__alt_data_end+0xf8005dd4>
10005fb8:	01c000c4 	movi	r7,3
10005fbc:	003f8506 	br	10005dd4 <__alt_data_end+0xf8005dd4>
10005fc0:	05000104 	movi	r20,4
10005fc4:	0023883a 	mov	r17,zero
10005fc8:	0027883a 	mov	r19,zero
10005fcc:	02000044 	movi	r8,1
10005fd0:	003f6e06 	br	10005d8c <__alt_data_end+0xf8005d8c>
10005fd4:	05000304 	movi	r20,12
10005fd8:	020000c4 	movi	r8,3
10005fdc:	003f6b06 	br	10005d8c <__alt_data_end+0xf8005d8c>
10005fe0:	01400434 	movhi	r5,16
10005fe4:	000d883a 	mov	r6,zero
10005fe8:	297fffc4 	addi	r5,r5,-1
10005fec:	04ffffc4 	movi	r19,-1
10005ff0:	0201ffc4 	movi	r8,2047
10005ff4:	003fa406 	br	10005e88 <__alt_data_end+0xf8005e88>
10005ff8:	043f0084 	movi	r16,-1022
10005ffc:	84a1c83a 	sub	r16,r16,r18
10006000:	00800e04 	movi	r2,56
10006004:	14014d0e 	bge	r2,r16,1000653c <__divdf3+0x82c>
10006008:	a180004c 	andi	r6,r20,1
1000600c:	0011883a 	mov	r8,zero
10006010:	000b883a 	mov	r5,zero
10006014:	0027883a 	mov	r19,zero
10006018:	003f9b06 	br	10005e88 <__alt_data_end+0xf8005e88>
1000601c:	8880022c 	andhi	r2,r17,8
10006020:	1000f026 	beq	r2,zero,100063e4 <__divdf3+0x6d4>
10006024:	8080022c 	andhi	r2,r16,8
10006028:	1000ee1e 	bne	r2,zero,100063e4 <__divdf3+0x6d4>
1000602c:	00800434 	movhi	r2,16
10006030:	81400234 	orhi	r5,r16,8
10006034:	10bfffc4 	addi	r2,r2,-1
10006038:	b80d883a 	mov	r6,r23
1000603c:	288a703a 	and	r5,r5,r2
10006040:	a827883a 	mov	r19,r21
10006044:	003fea06 	br	10005ff0 <__alt_data_end+0xf8005ff0>
10006048:	84411c36 	bltu	r16,r17,100064bc <__divdf3+0x7ac>
1000604c:	8c011a26 	beq	r17,r16,100064b8 <__divdf3+0x7a8>
10006050:	94bfffc4 	addi	r18,r18,-1
10006054:	dcc00015 	stw	r19,0(sp)
10006058:	8811883a 	mov	r8,r17
1000605c:	002d883a 	mov	r22,zero
10006060:	a80cd63a 	srli	r6,r21,24
10006064:	8020923a 	slli	r16,r16,8
10006068:	a82a923a 	slli	r21,r21,8
1000606c:	4009883a 	mov	r4,r8
10006070:	342eb03a 	or	r23,r6,r16
10006074:	dd400115 	stw	r21,4(sp)
10006078:	b82ad43a 	srli	r21,r23,16
1000607c:	da000315 	stw	r8,12(sp)
10006080:	bcffffcc 	andi	r19,r23,65535
10006084:	a80b883a 	mov	r5,r21
10006088:	00054640 	call	10005464 <__udivsi3>
1000608c:	1009883a 	mov	r4,r2
10006090:	980b883a 	mov	r5,r19
10006094:	1023883a 	mov	r17,r2
10006098:	0007bcc0 	call	10007bcc <__mulsi3>
1000609c:	da000317 	ldw	r8,12(sp)
100060a0:	a80b883a 	mov	r5,r21
100060a4:	1039883a 	mov	fp,r2
100060a8:	4009883a 	mov	r4,r8
100060ac:	000546c0 	call	1000546c <__umodsi3>
100060b0:	d8c00017 	ldw	r3,0(sp)
100060b4:	1004943a 	slli	r2,r2,16
100060b8:	1810d43a 	srli	r8,r3,16
100060bc:	120eb03a 	or	r7,r2,r8
100060c0:	3f00062e 	bgeu	r7,fp,100060dc <__divdf3+0x3cc>
100060c4:	3dcf883a 	add	r7,r7,r23
100060c8:	88bfffc4 	addi	r2,r17,-1
100060cc:	3dc10a36 	bltu	r7,r23,100064f8 <__divdf3+0x7e8>
100060d0:	3f01092e 	bgeu	r7,fp,100064f8 <__divdf3+0x7e8>
100060d4:	8c7fff84 	addi	r17,r17,-2
100060d8:	3dcf883a 	add	r7,r7,r23
100060dc:	3f39c83a 	sub	fp,r7,fp
100060e0:	e009883a 	mov	r4,fp
100060e4:	a80b883a 	mov	r5,r21
100060e8:	00054640 	call	10005464 <__udivsi3>
100060ec:	1009883a 	mov	r4,r2
100060f0:	980b883a 	mov	r5,r19
100060f4:	1021883a 	mov	r16,r2
100060f8:	0007bcc0 	call	10007bcc <__mulsi3>
100060fc:	e009883a 	mov	r4,fp
10006100:	a80b883a 	mov	r5,r21
10006104:	d8800315 	stw	r2,12(sp)
10006108:	000546c0 	call	1000546c <__umodsi3>
1000610c:	d9000017 	ldw	r4,0(sp)
10006110:	1004943a 	slli	r2,r2,16
10006114:	da000317 	ldw	r8,12(sp)
10006118:	20ffffcc 	andi	r3,r4,65535
1000611c:	10ceb03a 	or	r7,r2,r3
10006120:	3a00062e 	bgeu	r7,r8,1000613c <__divdf3+0x42c>
10006124:	3dcf883a 	add	r7,r7,r23
10006128:	80bfffc4 	addi	r2,r16,-1
1000612c:	3dc0f036 	bltu	r7,r23,100064f0 <__divdf3+0x7e0>
10006130:	3a00ef2e 	bgeu	r7,r8,100064f0 <__divdf3+0x7e0>
10006134:	843fff84 	addi	r16,r16,-2
10006138:	3dcf883a 	add	r7,r7,r23
1000613c:	d8c00117 	ldw	r3,4(sp)
10006140:	8822943a 	slli	r17,r17,16
10006144:	3a0fc83a 	sub	r7,r7,r8
10006148:	1806d43a 	srli	r3,r3,16
1000614c:	8462b03a 	or	r17,r16,r17
10006150:	8affffcc 	andi	r11,r17,65535
10006154:	d8c00015 	stw	r3,0(sp)
10006158:	d8c00117 	ldw	r3,4(sp)
1000615c:	8820d43a 	srli	r16,r17,16
10006160:	5809883a 	mov	r4,r11
10006164:	1f3fffcc 	andi	fp,r3,65535
10006168:	e00b883a 	mov	r5,fp
1000616c:	d9c00515 	stw	r7,20(sp)
10006170:	dac00215 	stw	r11,8(sp)
10006174:	0007bcc0 	call	10007bcc <__mulsi3>
10006178:	8009883a 	mov	r4,r16
1000617c:	e00b883a 	mov	r5,fp
10006180:	d8800415 	stw	r2,16(sp)
10006184:	0007bcc0 	call	10007bcc <__mulsi3>
10006188:	d9400017 	ldw	r5,0(sp)
1000618c:	8009883a 	mov	r4,r16
10006190:	d8800315 	stw	r2,12(sp)
10006194:	0007bcc0 	call	10007bcc <__mulsi3>
10006198:	dac00217 	ldw	r11,8(sp)
1000619c:	d9400017 	ldw	r5,0(sp)
100061a0:	d8800215 	stw	r2,8(sp)
100061a4:	5809883a 	mov	r4,r11
100061a8:	0007bcc0 	call	10007bcc <__mulsi3>
100061ac:	da400417 	ldw	r9,16(sp)
100061b0:	da800317 	ldw	r10,12(sp)
100061b4:	d9c00517 	ldw	r7,20(sp)
100061b8:	480ad43a 	srli	r5,r9,16
100061bc:	5085883a 	add	r2,r10,r2
100061c0:	db000217 	ldw	r12,8(sp)
100061c4:	1151883a 	add	r8,r2,r5
100061c8:	4280022e 	bgeu	r8,r10,100061d4 <__divdf3+0x4c4>
100061cc:	00800074 	movhi	r2,1
100061d0:	6099883a 	add	r12,r12,r2
100061d4:	400ad43a 	srli	r5,r8,16
100061d8:	4010943a 	slli	r8,r8,16
100061dc:	4c3fffcc 	andi	r16,r9,65535
100061e0:	6149883a 	add	r4,r12,r5
100061e4:	4411883a 	add	r8,r8,r16
100061e8:	3900a736 	bltu	r7,r4,10006488 <__divdf3+0x778>
100061ec:	3900c426 	beq	r7,r4,10006500 <__divdf3+0x7f0>
100061f0:	3909c83a 	sub	r4,r7,r4
100061f4:	b221c83a 	sub	r16,r22,r8
100061f8:	b42d803a 	cmpltu	r22,r22,r16
100061fc:	25adc83a 	sub	r22,r4,r22
10006200:	b5c0c626 	beq	r22,r23,1000651c <__divdf3+0x80c>
10006204:	b009883a 	mov	r4,r22
10006208:	a80b883a 	mov	r5,r21
1000620c:	00054640 	call	10005464 <__udivsi3>
10006210:	1009883a 	mov	r4,r2
10006214:	980b883a 	mov	r5,r19
10006218:	d8800315 	stw	r2,12(sp)
1000621c:	0007bcc0 	call	10007bcc <__mulsi3>
10006220:	a80b883a 	mov	r5,r21
10006224:	b009883a 	mov	r4,r22
10006228:	d8800415 	stw	r2,16(sp)
1000622c:	000546c0 	call	1000546c <__umodsi3>
10006230:	1004943a 	slli	r2,r2,16
10006234:	800ed43a 	srli	r7,r16,16
10006238:	da400417 	ldw	r9,16(sp)
1000623c:	da000317 	ldw	r8,12(sp)
10006240:	11cab03a 	or	r5,r2,r7
10006244:	2a40062e 	bgeu	r5,r9,10006260 <__divdf3+0x550>
10006248:	2dcb883a 	add	r5,r5,r23
1000624c:	40bfffc4 	addi	r2,r8,-1
10006250:	2dc0b436 	bltu	r5,r23,10006524 <__divdf3+0x814>
10006254:	2a40b32e 	bgeu	r5,r9,10006524 <__divdf3+0x814>
10006258:	423fff84 	addi	r8,r8,-2
1000625c:	2dcb883a 	add	r5,r5,r23
10006260:	2a6dc83a 	sub	r22,r5,r9
10006264:	b009883a 	mov	r4,r22
10006268:	a80b883a 	mov	r5,r21
1000626c:	da000315 	stw	r8,12(sp)
10006270:	00054640 	call	10005464 <__udivsi3>
10006274:	980b883a 	mov	r5,r19
10006278:	1009883a 	mov	r4,r2
1000627c:	d8800415 	stw	r2,16(sp)
10006280:	0007bcc0 	call	10007bcc <__mulsi3>
10006284:	b009883a 	mov	r4,r22
10006288:	a80b883a 	mov	r5,r21
1000628c:	1027883a 	mov	r19,r2
10006290:	000546c0 	call	1000546c <__umodsi3>
10006294:	1004943a 	slli	r2,r2,16
10006298:	843fffcc 	andi	r16,r16,65535
1000629c:	da000317 	ldw	r8,12(sp)
100062a0:	140eb03a 	or	r7,r2,r16
100062a4:	da400417 	ldw	r9,16(sp)
100062a8:	3cc0062e 	bgeu	r7,r19,100062c4 <__divdf3+0x5b4>
100062ac:	3dcf883a 	add	r7,r7,r23
100062b0:	48bfffc4 	addi	r2,r9,-1
100062b4:	3dc09d36 	bltu	r7,r23,1000652c <__divdf3+0x81c>
100062b8:	3cc09c2e 	bgeu	r7,r19,1000652c <__divdf3+0x81c>
100062bc:	4a7fff84 	addi	r9,r9,-2
100062c0:	3dcf883a 	add	r7,r7,r23
100062c4:	4010943a 	slli	r8,r8,16
100062c8:	3cebc83a 	sub	r21,r7,r19
100062cc:	e00b883a 	mov	r5,fp
100062d0:	4a26b03a 	or	r19,r9,r8
100062d4:	99ffffcc 	andi	r7,r19,65535
100062d8:	9820d43a 	srli	r16,r19,16
100062dc:	3809883a 	mov	r4,r7
100062e0:	d9c00515 	stw	r7,20(sp)
100062e4:	0007bcc0 	call	10007bcc <__mulsi3>
100062e8:	8009883a 	mov	r4,r16
100062ec:	e00b883a 	mov	r5,fp
100062f0:	102d883a 	mov	r22,r2
100062f4:	0007bcc0 	call	10007bcc <__mulsi3>
100062f8:	d9400017 	ldw	r5,0(sp)
100062fc:	8009883a 	mov	r4,r16
10006300:	1039883a 	mov	fp,r2
10006304:	0007bcc0 	call	10007bcc <__mulsi3>
10006308:	d9c00517 	ldw	r7,20(sp)
1000630c:	d9400017 	ldw	r5,0(sp)
10006310:	1021883a 	mov	r16,r2
10006314:	3809883a 	mov	r4,r7
10006318:	0007bcc0 	call	10007bcc <__mulsi3>
1000631c:	b008d43a 	srli	r4,r22,16
10006320:	e085883a 	add	r2,fp,r2
10006324:	1109883a 	add	r4,r2,r4
10006328:	2700022e 	bgeu	r4,fp,10006334 <__divdf3+0x624>
1000632c:	00800074 	movhi	r2,1
10006330:	80a1883a 	add	r16,r16,r2
10006334:	200ad43a 	srli	r5,r4,16
10006338:	2008943a 	slli	r4,r4,16
1000633c:	b5bfffcc 	andi	r22,r22,65535
10006340:	8145883a 	add	r2,r16,r5
10006344:	2589883a 	add	r4,r4,r22
10006348:	a8802c36 	bltu	r21,r2,100063fc <__divdf3+0x6ec>
1000634c:	a880a426 	beq	r21,r2,100065e0 <__divdf3+0x8d0>
10006350:	9cc00054 	ori	r19,r19,1
10006354:	9200ffc4 	addi	r8,r18,1023
10006358:	023f270e 	bge	zero,r8,10005ff8 <__alt_data_end+0xf8005ff8>
1000635c:	988001cc 	andi	r2,r19,7
10006360:	10000726 	beq	r2,zero,10006380 <__divdf3+0x670>
10006364:	990003cc 	andi	r4,r19,15
10006368:	00800104 	movi	r2,4
1000636c:	20800426 	beq	r4,r2,10006380 <__divdf3+0x670>
10006370:	9885883a 	add	r2,r19,r2
10006374:	14e7803a 	cmpltu	r19,r2,r19
10006378:	8ce3883a 	add	r17,r17,r19
1000637c:	1027883a 	mov	r19,r2
10006380:	8880402c 	andhi	r2,r17,256
10006384:	10000426 	beq	r2,zero,10006398 <__divdf3+0x688>
10006388:	00bfc034 	movhi	r2,65280
1000638c:	10bfffc4 	addi	r2,r2,-1
10006390:	92010004 	addi	r8,r18,1024
10006394:	88a2703a 	and	r17,r17,r2
10006398:	0081ff84 	movi	r2,2046
1000639c:	123eb616 	blt	r2,r8,10005e78 <__alt_data_end+0xf8005e78>
100063a0:	9826d0fa 	srli	r19,r19,3
100063a4:	8804977a 	slli	r2,r17,29
100063a8:	8820927a 	slli	r16,r17,9
100063ac:	4201ffcc 	andi	r8,r8,2047
100063b0:	14e6b03a 	or	r19,r2,r19
100063b4:	800ad33a 	srli	r5,r16,12
100063b8:	a180004c 	andi	r6,r20,1
100063bc:	003eb206 	br	10005e88 <__alt_data_end+0xf8005e88>
100063c0:	008000c4 	movi	r2,3
100063c4:	4080ac26 	beq	r8,r2,10006678 <__divdf3+0x968>
100063c8:	00800044 	movi	r2,1
100063cc:	4080591e 	bne	r8,r2,10006534 <__divdf3+0x824>
100063d0:	e00d883a 	mov	r6,fp
100063d4:	0011883a 	mov	r8,zero
100063d8:	000b883a 	mov	r5,zero
100063dc:	0027883a 	mov	r19,zero
100063e0:	003ea906 	br	10005e88 <__alt_data_end+0xf8005e88>
100063e4:	00800434 	movhi	r2,16
100063e8:	89400234 	orhi	r5,r17,8
100063ec:	10bfffc4 	addi	r2,r2,-1
100063f0:	b00d883a 	mov	r6,r22
100063f4:	288a703a 	and	r5,r5,r2
100063f8:	003efd06 	br	10005ff0 <__alt_data_end+0xf8005ff0>
100063fc:	adcf883a 	add	r7,r21,r23
10006400:	997fffc4 	addi	r5,r19,-1
10006404:	3dc0412e 	bgeu	r7,r23,1000650c <__divdf3+0x7fc>
10006408:	2827883a 	mov	r19,r5
1000640c:	38bfd01e 	bne	r7,r2,10006350 <__alt_data_end+0xf8006350>
10006410:	d8c00117 	ldw	r3,4(sp)
10006414:	193fce1e 	bne	r3,r4,10006350 <__alt_data_end+0xf8006350>
10006418:	003fce06 	br	10006354 <__alt_data_end+0xf8006354>
1000641c:	d9800215 	stw	r6,8(sp)
10006420:	d9c00515 	stw	r7,20(sp)
10006424:	0007b680 	call	10007b68 <__clzsi2>
10006428:	10c00804 	addi	r3,r2,32
1000642c:	010009c4 	movi	r4,39
10006430:	d9800217 	ldw	r6,8(sp)
10006434:	d9c00517 	ldw	r7,20(sp)
10006438:	20feb20e 	bge	r4,r3,10005f04 <__alt_data_end+0xf8005f04>
1000643c:	117ffe04 	addi	r5,r2,-8
10006440:	a162983a 	sll	r17,r20,r5
10006444:	0027883a 	mov	r19,zero
10006448:	003eb506 	br	10005f20 <__alt_data_end+0xf8005f20>
1000644c:	3009883a 	mov	r4,r6
10006450:	d9800215 	stw	r6,8(sp)
10006454:	da000315 	stw	r8,12(sp)
10006458:	da400415 	stw	r9,16(sp)
1000645c:	0007b680 	call	10007b68 <__clzsi2>
10006460:	10c00804 	addi	r3,r2,32
10006464:	010009c4 	movi	r4,39
10006468:	d9800217 	ldw	r6,8(sp)
1000646c:	da000317 	ldw	r8,12(sp)
10006470:	da400417 	ldw	r9,16(sp)
10006474:	20fec10e 	bge	r4,r3,10005f7c <__alt_data_end+0xf8005f7c>
10006478:	10bffe04 	addi	r2,r2,-8
1000647c:	a8a0983a 	sll	r16,r21,r2
10006480:	002b883a 	mov	r21,zero
10006484:	003ec406 	br	10005f98 <__alt_data_end+0xf8005f98>
10006488:	d8c00117 	ldw	r3,4(sp)
1000648c:	b0ed883a 	add	r22,r22,r3
10006490:	b0c5803a 	cmpltu	r2,r22,r3
10006494:	15c5883a 	add	r2,r2,r23
10006498:	11cf883a 	add	r7,r2,r7
1000649c:	88bfffc4 	addi	r2,r17,-1
100064a0:	b9c00d2e 	bgeu	r23,r7,100064d8 <__divdf3+0x7c8>
100064a4:	39003f36 	bltu	r7,r4,100065a4 <__divdf3+0x894>
100064a8:	21c06a26 	beq	r4,r7,10006654 <__divdf3+0x944>
100064ac:	3909c83a 	sub	r4,r7,r4
100064b0:	1023883a 	mov	r17,r2
100064b4:	003f4f06 	br	100061f4 <__alt_data_end+0xf80061f4>
100064b8:	9d7ee536 	bltu	r19,r21,10006050 <__alt_data_end+0xf8006050>
100064bc:	982ed07a 	srli	r23,r19,1
100064c0:	880497fa 	slli	r2,r17,31
100064c4:	8810d07a 	srli	r8,r17,1
100064c8:	982c97fa 	slli	r22,r19,31
100064cc:	b884b03a 	or	r2,r23,r2
100064d0:	d8800015 	stw	r2,0(sp)
100064d4:	003ee206 	br	10006060 <__alt_data_end+0xf8006060>
100064d8:	3dfff41e 	bne	r7,r23,100064ac <__alt_data_end+0xf80064ac>
100064dc:	d8c00117 	ldw	r3,4(sp)
100064e0:	b0fff02e 	bgeu	r22,r3,100064a4 <__alt_data_end+0xf80064a4>
100064e4:	b909c83a 	sub	r4,r23,r4
100064e8:	1023883a 	mov	r17,r2
100064ec:	003f4106 	br	100061f4 <__alt_data_end+0xf80061f4>
100064f0:	1021883a 	mov	r16,r2
100064f4:	003f1106 	br	1000613c <__alt_data_end+0xf800613c>
100064f8:	1023883a 	mov	r17,r2
100064fc:	003ef706 	br	100060dc <__alt_data_end+0xf80060dc>
10006500:	b23fe136 	bltu	r22,r8,10006488 <__alt_data_end+0xf8006488>
10006504:	0009883a 	mov	r4,zero
10006508:	003f3a06 	br	100061f4 <__alt_data_end+0xf80061f4>
1000650c:	38802c36 	bltu	r7,r2,100065c0 <__divdf3+0x8b0>
10006510:	11c05326 	beq	r2,r7,10006660 <__divdf3+0x950>
10006514:	2827883a 	mov	r19,r5
10006518:	003f8d06 	br	10006350 <__alt_data_end+0xf8006350>
1000651c:	04ffffc4 	movi	r19,-1
10006520:	003f8c06 	br	10006354 <__alt_data_end+0xf8006354>
10006524:	1011883a 	mov	r8,r2
10006528:	003f4d06 	br	10006260 <__alt_data_end+0xf8006260>
1000652c:	1013883a 	mov	r9,r2
10006530:	003f6406 	br	100062c4 <__alt_data_end+0xf80062c4>
10006534:	e029883a 	mov	r20,fp
10006538:	003f8606 	br	10006354 <__alt_data_end+0xf8006354>
1000653c:	008007c4 	movi	r2,31
10006540:	14002a16 	blt	r2,r16,100065ec <__divdf3+0x8dc>
10006544:	91410784 	addi	r5,r18,1054
10006548:	9c0cd83a 	srl	r6,r19,r16
1000654c:	8948983a 	sll	r4,r17,r5
10006550:	9944983a 	sll	r2,r19,r5
10006554:	8c20d83a 	srl	r16,r17,r16
10006558:	3108b03a 	or	r4,r6,r4
1000655c:	1004c03a 	cmpne	r2,r2,zero
10006560:	2084b03a 	or	r2,r4,r2
10006564:	110001cc 	andi	r4,r2,7
10006568:	20000726 	beq	r4,zero,10006588 <__divdf3+0x878>
1000656c:	114003cc 	andi	r5,r2,15
10006570:	01000104 	movi	r4,4
10006574:	29000426 	beq	r5,r4,10006588 <__divdf3+0x878>
10006578:	11000104 	addi	r4,r2,4
1000657c:	2085803a 	cmpltu	r2,r4,r2
10006580:	80a1883a 	add	r16,r16,r2
10006584:	2005883a 	mov	r2,r4
10006588:	8100202c 	andhi	r4,r16,128
1000658c:	20002d26 	beq	r4,zero,10006644 <__divdf3+0x934>
10006590:	a180004c 	andi	r6,r20,1
10006594:	02000044 	movi	r8,1
10006598:	000b883a 	mov	r5,zero
1000659c:	0027883a 	mov	r19,zero
100065a0:	003e3906 	br	10005e88 <__alt_data_end+0xf8005e88>
100065a4:	d8c00117 	ldw	r3,4(sp)
100065a8:	8c7fff84 	addi	r17,r17,-2
100065ac:	b0ed883a 	add	r22,r22,r3
100065b0:	b0c5803a 	cmpltu	r2,r22,r3
100065b4:	15c5883a 	add	r2,r2,r23
100065b8:	11cf883a 	add	r7,r2,r7
100065bc:	003f0c06 	br	100061f0 <__alt_data_end+0xf80061f0>
100065c0:	d8c00117 	ldw	r3,4(sp)
100065c4:	997fff84 	addi	r5,r19,-2
100065c8:	18d1883a 	add	r8,r3,r3
100065cc:	40c7803a 	cmpltu	r3,r8,r3
100065d0:	1dcd883a 	add	r6,r3,r23
100065d4:	398f883a 	add	r7,r7,r6
100065d8:	da000115 	stw	r8,4(sp)
100065dc:	003f8a06 	br	10006408 <__alt_data_end+0xf8006408>
100065e0:	203f861e 	bne	r4,zero,100063fc <__alt_data_end+0xf80063fc>
100065e4:	d8000115 	stw	zero,4(sp)
100065e8:	003f8906 	br	10006410 <__alt_data_end+0xf8006410>
100065ec:	00bef884 	movi	r2,-1054
100065f0:	1485c83a 	sub	r2,r2,r18
100065f4:	01000804 	movi	r4,32
100065f8:	8884d83a 	srl	r2,r17,r2
100065fc:	81001c26 	beq	r16,r4,10006670 <__divdf3+0x960>
10006600:	91010f84 	addi	r4,r18,1086
10006604:	8908983a 	sll	r4,r17,r4
10006608:	24c8b03a 	or	r4,r4,r19
1000660c:	2008c03a 	cmpne	r4,r4,zero
10006610:	2084b03a 	or	r2,r4,r2
10006614:	140001cc 	andi	r16,r2,7
10006618:	8000061e 	bne	r16,zero,10006634 <__divdf3+0x924>
1000661c:	000b883a 	mov	r5,zero
10006620:	1004d0fa 	srli	r2,r2,3
10006624:	a180004c 	andi	r6,r20,1
10006628:	0011883a 	mov	r8,zero
1000662c:	1426b03a 	or	r19,r2,r16
10006630:	003e1506 	br	10005e88 <__alt_data_end+0xf8005e88>
10006634:	114003cc 	andi	r5,r2,15
10006638:	01000104 	movi	r4,4
1000663c:	0021883a 	mov	r16,zero
10006640:	293fcd1e 	bne	r5,r4,10006578 <__alt_data_end+0xf8006578>
10006644:	800a927a 	slli	r5,r16,9
10006648:	8020977a 	slli	r16,r16,29
1000664c:	280ad33a 	srli	r5,r5,12
10006650:	003ff306 	br	10006620 <__alt_data_end+0xf8006620>
10006654:	b23fd336 	bltu	r22,r8,100065a4 <__alt_data_end+0xf80065a4>
10006658:	1023883a 	mov	r17,r2
1000665c:	003fa906 	br	10006504 <__alt_data_end+0xf8006504>
10006660:	d8c00117 	ldw	r3,4(sp)
10006664:	193fd636 	bltu	r3,r4,100065c0 <__alt_data_end+0xf80065c0>
10006668:	2827883a 	mov	r19,r5
1000666c:	003f6806 	br	10006410 <__alt_data_end+0xf8006410>
10006670:	0009883a 	mov	r4,zero
10006674:	003fe406 	br	10006608 <__alt_data_end+0xf8006608>
10006678:	00800434 	movhi	r2,16
1000667c:	89400234 	orhi	r5,r17,8
10006680:	10bfffc4 	addi	r2,r2,-1
10006684:	e00d883a 	mov	r6,fp
10006688:	288a703a 	and	r5,r5,r2
1000668c:	003e5806 	br	10005ff0 <__alt_data_end+0xf8005ff0>

10006690 <__eqdf2>:
10006690:	2804d53a 	srli	r2,r5,20
10006694:	3806d53a 	srli	r3,r7,20
10006698:	02000434 	movhi	r8,16
1000669c:	423fffc4 	addi	r8,r8,-1
100066a0:	1081ffcc 	andi	r2,r2,2047
100066a4:	0241ffc4 	movi	r9,2047
100066a8:	2a14703a 	and	r10,r5,r8
100066ac:	18c1ffcc 	andi	r3,r3,2047
100066b0:	3a10703a 	and	r8,r7,r8
100066b4:	280ad7fa 	srli	r5,r5,31
100066b8:	380ed7fa 	srli	r7,r7,31
100066bc:	12400f26 	beq	r2,r9,100066fc <__eqdf2+0x6c>
100066c0:	0241ffc4 	movi	r9,2047
100066c4:	1a400326 	beq	r3,r9,100066d4 <__eqdf2+0x44>
100066c8:	10c00526 	beq	r2,r3,100066e0 <__eqdf2+0x50>
100066cc:	00800044 	movi	r2,1
100066d0:	f800283a 	ret
100066d4:	4192b03a 	or	r9,r8,r6
100066d8:	483ffc1e 	bne	r9,zero,100066cc <__alt_data_end+0xf80066cc>
100066dc:	10fffb1e 	bne	r2,r3,100066cc <__alt_data_end+0xf80066cc>
100066e0:	523ffa1e 	bne	r10,r8,100066cc <__alt_data_end+0xf80066cc>
100066e4:	21bff91e 	bne	r4,r6,100066cc <__alt_data_end+0xf80066cc>
100066e8:	29c00826 	beq	r5,r7,1000670c <__eqdf2+0x7c>
100066ec:	103ff71e 	bne	r2,zero,100066cc <__alt_data_end+0xf80066cc>
100066f0:	5104b03a 	or	r2,r10,r4
100066f4:	1004c03a 	cmpne	r2,r2,zero
100066f8:	f800283a 	ret
100066fc:	5112b03a 	or	r9,r10,r4
10006700:	483fef26 	beq	r9,zero,100066c0 <__alt_data_end+0xf80066c0>
10006704:	00800044 	movi	r2,1
10006708:	f800283a 	ret
1000670c:	0005883a 	mov	r2,zero
10006710:	f800283a 	ret

10006714 <__gedf2>:
10006714:	2804d53a 	srli	r2,r5,20
10006718:	3806d53a 	srli	r3,r7,20
1000671c:	02000434 	movhi	r8,16
10006720:	423fffc4 	addi	r8,r8,-1
10006724:	0241ffc4 	movi	r9,2047
10006728:	1081ffcc 	andi	r2,r2,2047
1000672c:	2a14703a 	and	r10,r5,r8
10006730:	1a46703a 	and	r3,r3,r9
10006734:	3a10703a 	and	r8,r7,r8
10006738:	280ad7fa 	srli	r5,r5,31
1000673c:	380ed7fa 	srli	r7,r7,31
10006740:	12400b26 	beq	r2,r9,10006770 <__gedf2+0x5c>
10006744:	1a401626 	beq	r3,r9,100067a0 <__gedf2+0x8c>
10006748:	10000c1e 	bne	r2,zero,1000677c <__gedf2+0x68>
1000674c:	5112b03a 	or	r9,r10,r4
10006750:	4813003a 	cmpeq	r9,r9,zero
10006754:	4817883a 	mov	r11,r9
10006758:	18000c1e 	bne	r3,zero,1000678c <__gedf2+0x78>
1000675c:	4198b03a 	or	r12,r8,r6
10006760:	60000a1e 	bne	r12,zero,1000678c <__gedf2+0x78>
10006764:	48001326 	beq	r9,zero,100067b4 <__gedf2+0xa0>
10006768:	0005883a 	mov	r2,zero
1000676c:	f800283a 	ret
10006770:	5112b03a 	or	r9,r10,r4
10006774:	4800191e 	bne	r9,zero,100067dc <__gedf2+0xc8>
10006778:	18800926 	beq	r3,r2,100067a0 <__gedf2+0x8c>
1000677c:	18000b1e 	bne	r3,zero,100067ac <__gedf2+0x98>
10006780:	4192b03a 	or	r9,r8,r6
10006784:	0017883a 	mov	r11,zero
10006788:	48000a26 	beq	r9,zero,100067b4 <__gedf2+0xa0>
1000678c:	39c03fcc 	andi	r7,r7,255
10006790:	58000726 	beq	r11,zero,100067b0 <__gedf2+0x9c>
10006794:	3800081e 	bne	r7,zero,100067b8 <__gedf2+0xa4>
10006798:	00bfffc4 	movi	r2,-1
1000679c:	f800283a 	ret
100067a0:	4192b03a 	or	r9,r8,r6
100067a4:	48000d1e 	bne	r9,zero,100067dc <__gedf2+0xc8>
100067a8:	103fe826 	beq	r2,zero,1000674c <__alt_data_end+0xf800674c>
100067ac:	39c03fcc 	andi	r7,r7,255
100067b0:	29c00326 	beq	r5,r7,100067c0 <__gedf2+0xac>
100067b4:	283ff81e 	bne	r5,zero,10006798 <__alt_data_end+0xf8006798>
100067b8:	00800044 	movi	r2,1
100067bc:	f800283a 	ret
100067c0:	18bffc16 	blt	r3,r2,100067b4 <__alt_data_end+0xf80067b4>
100067c4:	10c00316 	blt	r2,r3,100067d4 <__gedf2+0xc0>
100067c8:	42bffa36 	bltu	r8,r10,100067b4 <__alt_data_end+0xf80067b4>
100067cc:	52000526 	beq	r10,r8,100067e4 <__gedf2+0xd0>
100067d0:	523fe52e 	bgeu	r10,r8,10006768 <__alt_data_end+0xf8006768>
100067d4:	283ff026 	beq	r5,zero,10006798 <__alt_data_end+0xf8006798>
100067d8:	003ff706 	br	100067b8 <__alt_data_end+0xf80067b8>
100067dc:	00bfff84 	movi	r2,-2
100067e0:	f800283a 	ret
100067e4:	313ff336 	bltu	r6,r4,100067b4 <__alt_data_end+0xf80067b4>
100067e8:	21bfdf2e 	bgeu	r4,r6,10006768 <__alt_data_end+0xf8006768>
100067ec:	283fea26 	beq	r5,zero,10006798 <__alt_data_end+0xf8006798>
100067f0:	003ff106 	br	100067b8 <__alt_data_end+0xf80067b8>

100067f4 <__ledf2>:
100067f4:	2804d53a 	srli	r2,r5,20
100067f8:	3810d53a 	srli	r8,r7,20
100067fc:	00c00434 	movhi	r3,16
10006800:	18ffffc4 	addi	r3,r3,-1
10006804:	0241ffc4 	movi	r9,2047
10006808:	1081ffcc 	andi	r2,r2,2047
1000680c:	28d4703a 	and	r10,r5,r3
10006810:	4250703a 	and	r8,r8,r9
10006814:	38c6703a 	and	r3,r7,r3
10006818:	280ad7fa 	srli	r5,r5,31
1000681c:	380ed7fa 	srli	r7,r7,31
10006820:	12400b26 	beq	r2,r9,10006850 <__ledf2+0x5c>
10006824:	42401926 	beq	r8,r9,1000688c <__ledf2+0x98>
10006828:	10000c1e 	bne	r2,zero,1000685c <__ledf2+0x68>
1000682c:	5112b03a 	or	r9,r10,r4
10006830:	4813003a 	cmpeq	r9,r9,zero
10006834:	4817883a 	mov	r11,r9
10006838:	40000f26 	beq	r8,zero,10006878 <__ledf2+0x84>
1000683c:	39c03fcc 	andi	r7,r7,255
10006840:	58001826 	beq	r11,zero,100068a4 <__ledf2+0xb0>
10006844:	38000a1e 	bne	r7,zero,10006870 <__ledf2+0x7c>
10006848:	00bfffc4 	movi	r2,-1
1000684c:	f800283a 	ret
10006850:	5112b03a 	or	r9,r10,r4
10006854:	48000f1e 	bne	r9,zero,10006894 <__ledf2+0xa0>
10006858:	40800c26 	beq	r8,r2,1000688c <__ledf2+0x98>
1000685c:	4000101e 	bne	r8,zero,100068a0 <__ledf2+0xac>
10006860:	1992b03a 	or	r9,r3,r6
10006864:	0017883a 	mov	r11,zero
10006868:	483ff41e 	bne	r9,zero,1000683c <__alt_data_end+0xf800683c>
1000686c:	283ff61e 	bne	r5,zero,10006848 <__alt_data_end+0xf8006848>
10006870:	00800044 	movi	r2,1
10006874:	f800283a 	ret
10006878:	1998b03a 	or	r12,r3,r6
1000687c:	603fef1e 	bne	r12,zero,1000683c <__alt_data_end+0xf800683c>
10006880:	483ffa26 	beq	r9,zero,1000686c <__alt_data_end+0xf800686c>
10006884:	0005883a 	mov	r2,zero
10006888:	f800283a 	ret
1000688c:	1992b03a 	or	r9,r3,r6
10006890:	48000226 	beq	r9,zero,1000689c <__ledf2+0xa8>
10006894:	00800084 	movi	r2,2
10006898:	f800283a 	ret
1000689c:	103fe326 	beq	r2,zero,1000682c <__alt_data_end+0xf800682c>
100068a0:	39c03fcc 	andi	r7,r7,255
100068a4:	29fff11e 	bne	r5,r7,1000686c <__alt_data_end+0xf800686c>
100068a8:	40bff016 	blt	r8,r2,1000686c <__alt_data_end+0xf800686c>
100068ac:	12000316 	blt	r2,r8,100068bc <__ledf2+0xc8>
100068b0:	1abfee36 	bltu	r3,r10,1000686c <__alt_data_end+0xf800686c>
100068b4:	50c00326 	beq	r10,r3,100068c4 <__ledf2+0xd0>
100068b8:	50fff22e 	bgeu	r10,r3,10006884 <__alt_data_end+0xf8006884>
100068bc:	283fe226 	beq	r5,zero,10006848 <__alt_data_end+0xf8006848>
100068c0:	003feb06 	br	10006870 <__alt_data_end+0xf8006870>
100068c4:	313fe936 	bltu	r6,r4,1000686c <__alt_data_end+0xf800686c>
100068c8:	21bfee2e 	bgeu	r4,r6,10006884 <__alt_data_end+0xf8006884>
100068cc:	283fde26 	beq	r5,zero,10006848 <__alt_data_end+0xf8006848>
100068d0:	003fe706 	br	10006870 <__alt_data_end+0xf8006870>

100068d4 <__muldf3>:
100068d4:	deffee04 	addi	sp,sp,-72
100068d8:	dd000c15 	stw	r20,48(sp)
100068dc:	2828d53a 	srli	r20,r5,20
100068e0:	dd400d15 	stw	r21,52(sp)
100068e4:	282ad7fa 	srli	r21,r5,31
100068e8:	dc000815 	stw	r16,32(sp)
100068ec:	04000434 	movhi	r16,16
100068f0:	ddc00f15 	stw	r23,60(sp)
100068f4:	dcc00b15 	stw	r19,44(sp)
100068f8:	dc800a15 	stw	r18,40(sp)
100068fc:	843fffc4 	addi	r16,r16,-1
10006900:	dfc01115 	stw	ra,68(sp)
10006904:	df001015 	stw	fp,64(sp)
10006908:	dd800e15 	stw	r22,56(sp)
1000690c:	dc400915 	stw	r17,36(sp)
10006910:	a501ffcc 	andi	r20,r20,2047
10006914:	2025883a 	mov	r18,r4
10006918:	202f883a 	mov	r23,r4
1000691c:	2c20703a 	and	r16,r5,r16
10006920:	a827883a 	mov	r19,r21
10006924:	aa403fcc 	andi	r9,r21,255
10006928:	a0005926 	beq	r20,zero,10006a90 <__muldf3+0x1bc>
1000692c:	0081ffc4 	movi	r2,2047
10006930:	a0803426 	beq	r20,r2,10006a04 <__muldf3+0x130>
10006934:	84000434 	orhi	r16,r16,16
10006938:	2004d77a 	srli	r2,r4,29
1000693c:	802090fa 	slli	r16,r16,3
10006940:	202e90fa 	slli	r23,r4,3
10006944:	a53f0044 	addi	r20,r20,-1023
10006948:	80a0b03a 	or	r16,r16,r2
1000694c:	000b883a 	mov	r5,zero
10006950:	0039883a 	mov	fp,zero
10006954:	3806d53a 	srli	r3,r7,20
10006958:	382cd7fa 	srli	r22,r7,31
1000695c:	00800434 	movhi	r2,16
10006960:	10bfffc4 	addi	r2,r2,-1
10006964:	18c1ffcc 	andi	r3,r3,2047
10006968:	3025883a 	mov	r18,r6
1000696c:	38a2703a 	and	r17,r7,r2
10006970:	b2803fcc 	andi	r10,r22,255
10006974:	18006426 	beq	r3,zero,10006b08 <__muldf3+0x234>
10006978:	0081ffc4 	movi	r2,2047
1000697c:	18805c26 	beq	r3,r2,10006af0 <__muldf3+0x21c>
10006980:	8c400434 	orhi	r17,r17,16
10006984:	3004d77a 	srli	r2,r6,29
10006988:	882290fa 	slli	r17,r17,3
1000698c:	302490fa 	slli	r18,r6,3
10006990:	18ff0044 	addi	r3,r3,-1023
10006994:	88a2b03a 	or	r17,r17,r2
10006998:	000f883a 	mov	r7,zero
1000699c:	394ab03a 	or	r5,r7,r5
100069a0:	280a90ba 	slli	r5,r5,2
100069a4:	00840034 	movhi	r2,4096
100069a8:	109a7104 	addi	r2,r2,27076
100069ac:	288b883a 	add	r5,r5,r2
100069b0:	28800017 	ldw	r2,0(r5)
100069b4:	a0c7883a 	add	r3,r20,r3
100069b8:	b54cf03a 	xor	r6,r22,r21
100069bc:	1a000044 	addi	r8,r3,1
100069c0:	1000683a 	jmp	r2
100069c4:	10006c08 	cmpgei	zero,r2,432
100069c8:	10006bf4 	orhi	zero,r2,431
100069cc:	10006bf4 	orhi	zero,r2,431
100069d0:	10006be0 	cmpeqi	zero,r2,431
100069d4:	10006a20 	cmpeqi	zero,r2,424
100069d8:	10006a20 	cmpeqi	zero,r2,424
100069dc:	10006bc8 	cmpgei	zero,r2,431
100069e0:	10006be0 	cmpeqi	zero,r2,431
100069e4:	10006a20 	cmpeqi	zero,r2,424
100069e8:	10006bc8 	cmpgei	zero,r2,431
100069ec:	10006a20 	cmpeqi	zero,r2,424
100069f0:	10006be0 	cmpeqi	zero,r2,431
100069f4:	10006a24 	muli	zero,r2,424
100069f8:	10006a24 	muli	zero,r2,424
100069fc:	10006a24 	muli	zero,r2,424
10006a00:	10006f44 	addi	zero,r2,445
10006a04:	8104b03a 	or	r2,r16,r4
10006a08:	10006c1e 	bne	r2,zero,10006bbc <__muldf3+0x2e8>
10006a0c:	01400204 	movi	r5,8
10006a10:	0021883a 	mov	r16,zero
10006a14:	002f883a 	mov	r23,zero
10006a18:	07000084 	movi	fp,2
10006a1c:	003fcd06 	br	10006954 <__alt_data_end+0xf8006954>
10006a20:	3013883a 	mov	r9,r6
10006a24:	00800084 	movi	r2,2
10006a28:	e080501e 	bne	fp,r2,10006b6c <__muldf3+0x298>
10006a2c:	4cc0004c 	andi	r19,r9,1
10006a30:	0101ffc4 	movi	r4,2047
10006a34:	0021883a 	mov	r16,zero
10006a38:	002f883a 	mov	r23,zero
10006a3c:	2008953a 	slli	r4,r4,20
10006a40:	98c03fcc 	andi	r3,r19,255
10006a44:	04400434 	movhi	r17,16
10006a48:	8c7fffc4 	addi	r17,r17,-1
10006a4c:	180697fa 	slli	r3,r3,31
10006a50:	8460703a 	and	r16,r16,r17
10006a54:	8120b03a 	or	r16,r16,r4
10006a58:	80c6b03a 	or	r3,r16,r3
10006a5c:	b805883a 	mov	r2,r23
10006a60:	dfc01117 	ldw	ra,68(sp)
10006a64:	df001017 	ldw	fp,64(sp)
10006a68:	ddc00f17 	ldw	r23,60(sp)
10006a6c:	dd800e17 	ldw	r22,56(sp)
10006a70:	dd400d17 	ldw	r21,52(sp)
10006a74:	dd000c17 	ldw	r20,48(sp)
10006a78:	dcc00b17 	ldw	r19,44(sp)
10006a7c:	dc800a17 	ldw	r18,40(sp)
10006a80:	dc400917 	ldw	r17,36(sp)
10006a84:	dc000817 	ldw	r16,32(sp)
10006a88:	dec01204 	addi	sp,sp,72
10006a8c:	f800283a 	ret
10006a90:	8104b03a 	or	r2,r16,r4
10006a94:	10004426 	beq	r2,zero,10006ba8 <__muldf3+0x2d4>
10006a98:	80014b26 	beq	r16,zero,10006fc8 <__muldf3+0x6f4>
10006a9c:	8009883a 	mov	r4,r16
10006aa0:	d9800715 	stw	r6,28(sp)
10006aa4:	d9c00215 	stw	r7,8(sp)
10006aa8:	da400415 	stw	r9,16(sp)
10006aac:	0007b680 	call	10007b68 <__clzsi2>
10006ab0:	d9800717 	ldw	r6,28(sp)
10006ab4:	d9c00217 	ldw	r7,8(sp)
10006ab8:	da400417 	ldw	r9,16(sp)
10006abc:	1007883a 	mov	r3,r2
10006ac0:	01000a04 	movi	r4,40
10006ac4:	1dfffe04 	addi	r23,r3,-8
10006ac8:	20c9c83a 	sub	r4,r4,r3
10006acc:	85e0983a 	sll	r16,r16,r23
10006ad0:	9108d83a 	srl	r4,r18,r4
10006ad4:	95ee983a 	sll	r23,r18,r23
10006ad8:	2420b03a 	or	r16,r4,r16
10006adc:	053f0344 	movi	r20,-1011
10006ae0:	a0e9c83a 	sub	r20,r20,r3
10006ae4:	000b883a 	mov	r5,zero
10006ae8:	0039883a 	mov	fp,zero
10006aec:	003f9906 	br	10006954 <__alt_data_end+0xf8006954>
10006af0:	8984b03a 	or	r2,r17,r6
10006af4:	10002a1e 	bne	r2,zero,10006ba0 <__muldf3+0x2cc>
10006af8:	0023883a 	mov	r17,zero
10006afc:	0025883a 	mov	r18,zero
10006b00:	01c00084 	movi	r7,2
10006b04:	003fa506 	br	1000699c <__alt_data_end+0xf800699c>
10006b08:	8984b03a 	or	r2,r17,r6
10006b0c:	10002026 	beq	r2,zero,10006b90 <__muldf3+0x2bc>
10006b10:	88011c26 	beq	r17,zero,10006f84 <__muldf3+0x6b0>
10006b14:	8809883a 	mov	r4,r17
10006b18:	d9400215 	stw	r5,8(sp)
10006b1c:	d9800715 	stw	r6,28(sp)
10006b20:	da400415 	stw	r9,16(sp)
10006b24:	da800315 	stw	r10,12(sp)
10006b28:	0007b680 	call	10007b68 <__clzsi2>
10006b2c:	d9400217 	ldw	r5,8(sp)
10006b30:	d9800717 	ldw	r6,28(sp)
10006b34:	da400417 	ldw	r9,16(sp)
10006b38:	da800317 	ldw	r10,12(sp)
10006b3c:	1007883a 	mov	r3,r2
10006b40:	01000a04 	movi	r4,40
10006b44:	1cbffe04 	addi	r18,r3,-8
10006b48:	20c9c83a 	sub	r4,r4,r3
10006b4c:	8ca2983a 	sll	r17,r17,r18
10006b50:	3108d83a 	srl	r4,r6,r4
10006b54:	34a4983a 	sll	r18,r6,r18
10006b58:	2462b03a 	or	r17,r4,r17
10006b5c:	00bf0344 	movi	r2,-1011
10006b60:	10c7c83a 	sub	r3,r2,r3
10006b64:	000f883a 	mov	r7,zero
10006b68:	003f8c06 	br	1000699c <__alt_data_end+0xf800699c>
10006b6c:	008000c4 	movi	r2,3
10006b70:	e0816d26 	beq	fp,r2,10007128 <__muldf3+0x854>
10006b74:	00800044 	movi	r2,1
10006b78:	e081321e 	bne	fp,r2,10007044 <__muldf3+0x770>
10006b7c:	48a6703a 	and	r19,r9,r2
10006b80:	0009883a 	mov	r4,zero
10006b84:	0021883a 	mov	r16,zero
10006b88:	002f883a 	mov	r23,zero
10006b8c:	003fab06 	br	10006a3c <__alt_data_end+0xf8006a3c>
10006b90:	0023883a 	mov	r17,zero
10006b94:	0025883a 	mov	r18,zero
10006b98:	01c00044 	movi	r7,1
10006b9c:	003f7f06 	br	1000699c <__alt_data_end+0xf800699c>
10006ba0:	01c000c4 	movi	r7,3
10006ba4:	003f7d06 	br	1000699c <__alt_data_end+0xf800699c>
10006ba8:	01400104 	movi	r5,4
10006bac:	0021883a 	mov	r16,zero
10006bb0:	002f883a 	mov	r23,zero
10006bb4:	07000044 	movi	fp,1
10006bb8:	003f6606 	br	10006954 <__alt_data_end+0xf8006954>
10006bbc:	01400304 	movi	r5,12
10006bc0:	070000c4 	movi	fp,3
10006bc4:	003f6306 	br	10006954 <__alt_data_end+0xf8006954>
10006bc8:	04000434 	movhi	r16,16
10006bcc:	0027883a 	mov	r19,zero
10006bd0:	843fffc4 	addi	r16,r16,-1
10006bd4:	05ffffc4 	movi	r23,-1
10006bd8:	0101ffc4 	movi	r4,2047
10006bdc:	003f9706 	br	10006a3c <__alt_data_end+0xf8006a3c>
10006be0:	8821883a 	mov	r16,r17
10006be4:	902f883a 	mov	r23,r18
10006be8:	5013883a 	mov	r9,r10
10006bec:	3839883a 	mov	fp,r7
10006bf0:	003f8c06 	br	10006a24 <__alt_data_end+0xf8006a24>
10006bf4:	8821883a 	mov	r16,r17
10006bf8:	902f883a 	mov	r23,r18
10006bfc:	3013883a 	mov	r9,r6
10006c00:	3839883a 	mov	fp,r7
10006c04:	003f8706 	br	10006a24 <__alt_data_end+0xf8006a24>
10006c08:	b82ad43a 	srli	r21,r23,16
10006c0c:	9038d43a 	srli	fp,r18,16
10006c10:	bdffffcc 	andi	r23,r23,65535
10006c14:	94bfffcc 	andi	r18,r18,65535
10006c18:	9009883a 	mov	r4,r18
10006c1c:	b80b883a 	mov	r5,r23
10006c20:	d8c00515 	stw	r3,20(sp)
10006c24:	d9800715 	stw	r6,28(sp)
10006c28:	da000615 	stw	r8,24(sp)
10006c2c:	0007bcc0 	call	10007bcc <__mulsi3>
10006c30:	9009883a 	mov	r4,r18
10006c34:	a80b883a 	mov	r5,r21
10006c38:	1029883a 	mov	r20,r2
10006c3c:	0007bcc0 	call	10007bcc <__mulsi3>
10006c40:	e009883a 	mov	r4,fp
10006c44:	a80b883a 	mov	r5,r21
10006c48:	102d883a 	mov	r22,r2
10006c4c:	0007bcc0 	call	10007bcc <__mulsi3>
10006c50:	e009883a 	mov	r4,fp
10006c54:	b80b883a 	mov	r5,r23
10006c58:	1027883a 	mov	r19,r2
10006c5c:	0007bcc0 	call	10007bcc <__mulsi3>
10006c60:	a008d43a 	srli	r4,r20,16
10006c64:	b085883a 	add	r2,r22,r2
10006c68:	d8c00517 	ldw	r3,20(sp)
10006c6c:	110f883a 	add	r7,r2,r4
10006c70:	d9800717 	ldw	r6,28(sp)
10006c74:	da000617 	ldw	r8,24(sp)
10006c78:	3d80022e 	bgeu	r7,r22,10006c84 <__muldf3+0x3b0>
10006c7c:	00800074 	movhi	r2,1
10006c80:	98a7883a 	add	r19,r19,r2
10006c84:	3804943a 	slli	r2,r7,16
10006c88:	380ed43a 	srli	r7,r7,16
10006c8c:	882cd43a 	srli	r22,r17,16
10006c90:	a53fffcc 	andi	r20,r20,65535
10006c94:	8c7fffcc 	andi	r17,r17,65535
10006c98:	1529883a 	add	r20,r2,r20
10006c9c:	8809883a 	mov	r4,r17
10006ca0:	b80b883a 	mov	r5,r23
10006ca4:	d8c00515 	stw	r3,20(sp)
10006ca8:	d9800715 	stw	r6,28(sp)
10006cac:	da000615 	stw	r8,24(sp)
10006cb0:	d9c00015 	stw	r7,0(sp)
10006cb4:	dd000115 	stw	r20,4(sp)
10006cb8:	0007bcc0 	call	10007bcc <__mulsi3>
10006cbc:	a80b883a 	mov	r5,r21
10006cc0:	8809883a 	mov	r4,r17
10006cc4:	d8800415 	stw	r2,16(sp)
10006cc8:	0007bcc0 	call	10007bcc <__mulsi3>
10006ccc:	a80b883a 	mov	r5,r21
10006cd0:	b009883a 	mov	r4,r22
10006cd4:	1029883a 	mov	r20,r2
10006cd8:	0007bcc0 	call	10007bcc <__mulsi3>
10006cdc:	b009883a 	mov	r4,r22
10006ce0:	b80b883a 	mov	r5,r23
10006ce4:	102b883a 	mov	r21,r2
10006ce8:	0007bcc0 	call	10007bcc <__mulsi3>
10006cec:	da400417 	ldw	r9,16(sp)
10006cf0:	a085883a 	add	r2,r20,r2
10006cf4:	d8c00517 	ldw	r3,20(sp)
10006cf8:	4808d43a 	srli	r4,r9,16
10006cfc:	d9800717 	ldw	r6,28(sp)
10006d00:	da000617 	ldw	r8,24(sp)
10006d04:	1109883a 	add	r4,r2,r4
10006d08:	2500022e 	bgeu	r4,r20,10006d14 <__muldf3+0x440>
10006d0c:	00800074 	movhi	r2,1
10006d10:	a8ab883a 	add	r21,r21,r2
10006d14:	200e943a 	slli	r7,r4,16
10006d18:	2004d43a 	srli	r2,r4,16
10006d1c:	802ed43a 	srli	r23,r16,16
10006d20:	843fffcc 	andi	r16,r16,65535
10006d24:	4d3fffcc 	andi	r20,r9,65535
10006d28:	9009883a 	mov	r4,r18
10006d2c:	800b883a 	mov	r5,r16
10006d30:	3d29883a 	add	r20,r7,r20
10006d34:	d8c00515 	stw	r3,20(sp)
10006d38:	d9800715 	stw	r6,28(sp)
10006d3c:	da000615 	stw	r8,24(sp)
10006d40:	a8ab883a 	add	r21,r21,r2
10006d44:	0007bcc0 	call	10007bcc <__mulsi3>
10006d48:	9009883a 	mov	r4,r18
10006d4c:	b80b883a 	mov	r5,r23
10006d50:	d8800315 	stw	r2,12(sp)
10006d54:	0007bcc0 	call	10007bcc <__mulsi3>
10006d58:	e009883a 	mov	r4,fp
10006d5c:	b80b883a 	mov	r5,r23
10006d60:	1025883a 	mov	r18,r2
10006d64:	0007bcc0 	call	10007bcc <__mulsi3>
10006d68:	e009883a 	mov	r4,fp
10006d6c:	800b883a 	mov	r5,r16
10006d70:	d8800215 	stw	r2,8(sp)
10006d74:	0007bcc0 	call	10007bcc <__mulsi3>
10006d78:	da800317 	ldw	r10,12(sp)
10006d7c:	d9400017 	ldw	r5,0(sp)
10006d80:	9085883a 	add	r2,r18,r2
10006d84:	5008d43a 	srli	r4,r10,16
10006d88:	a153883a 	add	r9,r20,r5
10006d8c:	d8c00517 	ldw	r3,20(sp)
10006d90:	1109883a 	add	r4,r2,r4
10006d94:	d9800717 	ldw	r6,28(sp)
10006d98:	da000617 	ldw	r8,24(sp)
10006d9c:	dac00217 	ldw	r11,8(sp)
10006da0:	2480022e 	bgeu	r4,r18,10006dac <__muldf3+0x4d8>
10006da4:	00800074 	movhi	r2,1
10006da8:	5897883a 	add	r11,r11,r2
10006dac:	200e943a 	slli	r7,r4,16
10006db0:	2038d43a 	srli	fp,r4,16
10006db4:	52bfffcc 	andi	r10,r10,65535
10006db8:	3a8f883a 	add	r7,r7,r10
10006dbc:	8809883a 	mov	r4,r17
10006dc0:	800b883a 	mov	r5,r16
10006dc4:	d8c00515 	stw	r3,20(sp)
10006dc8:	d9800715 	stw	r6,28(sp)
10006dcc:	d9c00215 	stw	r7,8(sp)
10006dd0:	da000615 	stw	r8,24(sp)
10006dd4:	da400415 	stw	r9,16(sp)
10006dd8:	5f39883a 	add	fp,r11,fp
10006ddc:	0007bcc0 	call	10007bcc <__mulsi3>
10006de0:	8809883a 	mov	r4,r17
10006de4:	b80b883a 	mov	r5,r23
10006de8:	1025883a 	mov	r18,r2
10006dec:	0007bcc0 	call	10007bcc <__mulsi3>
10006df0:	b009883a 	mov	r4,r22
10006df4:	b80b883a 	mov	r5,r23
10006df8:	d8800315 	stw	r2,12(sp)
10006dfc:	0007bcc0 	call	10007bcc <__mulsi3>
10006e00:	b009883a 	mov	r4,r22
10006e04:	800b883a 	mov	r5,r16
10006e08:	1023883a 	mov	r17,r2
10006e0c:	0007bcc0 	call	10007bcc <__mulsi3>
10006e10:	da800317 	ldw	r10,12(sp)
10006e14:	9008d43a 	srli	r4,r18,16
10006e18:	d8c00517 	ldw	r3,20(sp)
10006e1c:	5085883a 	add	r2,r10,r2
10006e20:	1109883a 	add	r4,r2,r4
10006e24:	d9800717 	ldw	r6,28(sp)
10006e28:	d9c00217 	ldw	r7,8(sp)
10006e2c:	da000617 	ldw	r8,24(sp)
10006e30:	da400417 	ldw	r9,16(sp)
10006e34:	2280022e 	bgeu	r4,r10,10006e40 <__muldf3+0x56c>
10006e38:	00800074 	movhi	r2,1
10006e3c:	88a3883a 	add	r17,r17,r2
10006e40:	2004943a 	slli	r2,r4,16
10006e44:	94bfffcc 	andi	r18,r18,65535
10006e48:	4ce7883a 	add	r19,r9,r19
10006e4c:	14a5883a 	add	r18,r2,r18
10006e50:	9d29803a 	cmpltu	r20,r19,r20
10006e54:	9565883a 	add	r18,r18,r21
10006e58:	9505883a 	add	r2,r18,r20
10006e5c:	99e7883a 	add	r19,r19,r7
10006e60:	99cf803a 	cmpltu	r7,r19,r7
10006e64:	e08b883a 	add	r5,fp,r2
10006e68:	2008d43a 	srli	r4,r4,16
10006e6c:	29ef883a 	add	r23,r5,r7
10006e70:	1529803a 	cmpltu	r20,r2,r20
10006e74:	956b803a 	cmpltu	r21,r18,r21
10006e78:	b9cf803a 	cmpltu	r7,r23,r7
10006e7c:	a564b03a 	or	r18,r20,r21
10006e80:	2f39803a 	cmpltu	fp,r5,fp
10006e84:	9125883a 	add	r18,r18,r4
10006e88:	3f38b03a 	or	fp,r7,fp
10006e8c:	9725883a 	add	r18,r18,fp
10006e90:	9804927a 	slli	r2,r19,9
10006e94:	9463883a 	add	r17,r18,r17
10006e98:	d9000117 	ldw	r4,4(sp)
10006e9c:	b820d5fa 	srli	r16,r23,23
10006ea0:	8822927a 	slli	r17,r17,9
10006ea4:	9826d5fa 	srli	r19,r19,23
10006ea8:	1104b03a 	or	r2,r2,r4
10006eac:	b82e927a 	slli	r23,r23,9
10006eb0:	1004c03a 	cmpne	r2,r2,zero
10006eb4:	8c20b03a 	or	r16,r17,r16
10006eb8:	14e6b03a 	or	r19,r2,r19
10006ebc:	8080402c 	andhi	r2,r16,256
10006ec0:	9deeb03a 	or	r23,r19,r23
10006ec4:	10000726 	beq	r2,zero,10006ee4 <__muldf3+0x610>
10006ec8:	b804d07a 	srli	r2,r23,1
10006ecc:	800697fa 	slli	r3,r16,31
10006ed0:	bdc0004c 	andi	r23,r23,1
10006ed4:	8020d07a 	srli	r16,r16,1
10006ed8:	b8aeb03a 	or	r23,r23,r2
10006edc:	b8eeb03a 	or	r23,r23,r3
10006ee0:	4007883a 	mov	r3,r8
10006ee4:	1900ffc4 	addi	r4,r3,1023
10006ee8:	01004d0e 	bge	zero,r4,10007020 <__muldf3+0x74c>
10006eec:	b88001cc 	andi	r2,r23,7
10006ef0:	10000726 	beq	r2,zero,10006f10 <__muldf3+0x63c>
10006ef4:	b94003cc 	andi	r5,r23,15
10006ef8:	00800104 	movi	r2,4
10006efc:	28800426 	beq	r5,r2,10006f10 <__muldf3+0x63c>
10006f00:	b885883a 	add	r2,r23,r2
10006f04:	15ef803a 	cmpltu	r23,r2,r23
10006f08:	85e1883a 	add	r16,r16,r23
10006f0c:	102f883a 	mov	r23,r2
10006f10:	8080402c 	andhi	r2,r16,256
10006f14:	10000426 	beq	r2,zero,10006f28 <__muldf3+0x654>
10006f18:	00bfc034 	movhi	r2,65280
10006f1c:	10bfffc4 	addi	r2,r2,-1
10006f20:	19010004 	addi	r4,r3,1024
10006f24:	80a0703a 	and	r16,r16,r2
10006f28:	0081ff84 	movi	r2,2046
10006f2c:	1100340e 	bge	r2,r4,10007000 <__muldf3+0x72c>
10006f30:	34c0004c 	andi	r19,r6,1
10006f34:	0101ffc4 	movi	r4,2047
10006f38:	0021883a 	mov	r16,zero
10006f3c:	002f883a 	mov	r23,zero
10006f40:	003ebe06 	br	10006a3c <__alt_data_end+0xf8006a3c>
10006f44:	8080022c 	andhi	r2,r16,8
10006f48:	10000926 	beq	r2,zero,10006f70 <__muldf3+0x69c>
10006f4c:	8880022c 	andhi	r2,r17,8
10006f50:	1000071e 	bne	r2,zero,10006f70 <__muldf3+0x69c>
10006f54:	00800434 	movhi	r2,16
10006f58:	8c000234 	orhi	r16,r17,8
10006f5c:	10bfffc4 	addi	r2,r2,-1
10006f60:	b027883a 	mov	r19,r22
10006f64:	80a0703a 	and	r16,r16,r2
10006f68:	902f883a 	mov	r23,r18
10006f6c:	003f1a06 	br	10006bd8 <__alt_data_end+0xf8006bd8>
10006f70:	00800434 	movhi	r2,16
10006f74:	84000234 	orhi	r16,r16,8
10006f78:	10bfffc4 	addi	r2,r2,-1
10006f7c:	80a0703a 	and	r16,r16,r2
10006f80:	003f1506 	br	10006bd8 <__alt_data_end+0xf8006bd8>
10006f84:	3009883a 	mov	r4,r6
10006f88:	d9400215 	stw	r5,8(sp)
10006f8c:	d9800715 	stw	r6,28(sp)
10006f90:	da400415 	stw	r9,16(sp)
10006f94:	da800315 	stw	r10,12(sp)
10006f98:	0007b680 	call	10007b68 <__clzsi2>
10006f9c:	10c00804 	addi	r3,r2,32
10006fa0:	010009c4 	movi	r4,39
10006fa4:	d9400217 	ldw	r5,8(sp)
10006fa8:	d9800717 	ldw	r6,28(sp)
10006fac:	da400417 	ldw	r9,16(sp)
10006fb0:	da800317 	ldw	r10,12(sp)
10006fb4:	20fee20e 	bge	r4,r3,10006b40 <__alt_data_end+0xf8006b40>
10006fb8:	147ffe04 	addi	r17,r2,-8
10006fbc:	9462983a 	sll	r17,r18,r17
10006fc0:	0025883a 	mov	r18,zero
10006fc4:	003ee506 	br	10006b5c <__alt_data_end+0xf8006b5c>
10006fc8:	d9800715 	stw	r6,28(sp)
10006fcc:	d9c00215 	stw	r7,8(sp)
10006fd0:	da400415 	stw	r9,16(sp)
10006fd4:	0007b680 	call	10007b68 <__clzsi2>
10006fd8:	10c00804 	addi	r3,r2,32
10006fdc:	010009c4 	movi	r4,39
10006fe0:	d9800717 	ldw	r6,28(sp)
10006fe4:	d9c00217 	ldw	r7,8(sp)
10006fe8:	da400417 	ldw	r9,16(sp)
10006fec:	20feb40e 	bge	r4,r3,10006ac0 <__alt_data_end+0xf8006ac0>
10006ff0:	143ffe04 	addi	r16,r2,-8
10006ff4:	9420983a 	sll	r16,r18,r16
10006ff8:	002f883a 	mov	r23,zero
10006ffc:	003eb706 	br	10006adc <__alt_data_end+0xf8006adc>
10007000:	8004977a 	slli	r2,r16,29
10007004:	b82ed0fa 	srli	r23,r23,3
10007008:	8020927a 	slli	r16,r16,9
1000700c:	2101ffcc 	andi	r4,r4,2047
10007010:	15eeb03a 	or	r23,r2,r23
10007014:	8020d33a 	srli	r16,r16,12
10007018:	34c0004c 	andi	r19,r6,1
1000701c:	003e8706 	br	10006a3c <__alt_data_end+0xf8006a3c>
10007020:	00bf0084 	movi	r2,-1022
10007024:	10c5c83a 	sub	r2,r2,r3
10007028:	01000e04 	movi	r4,56
1000702c:	2080080e 	bge	r4,r2,10007050 <__muldf3+0x77c>
10007030:	34c0004c 	andi	r19,r6,1
10007034:	0009883a 	mov	r4,zero
10007038:	0021883a 	mov	r16,zero
1000703c:	002f883a 	mov	r23,zero
10007040:	003e7e06 	br	10006a3c <__alt_data_end+0xf8006a3c>
10007044:	4007883a 	mov	r3,r8
10007048:	480d883a 	mov	r6,r9
1000704c:	003fa506 	br	10006ee4 <__alt_data_end+0xf8006ee4>
10007050:	010007c4 	movi	r4,31
10007054:	20801816 	blt	r4,r2,100070b8 <__muldf3+0x7e4>
10007058:	18c10784 	addi	r3,r3,1054
1000705c:	80c8983a 	sll	r4,r16,r3
10007060:	b88ad83a 	srl	r5,r23,r2
10007064:	b8c6983a 	sll	r3,r23,r3
10007068:	80a0d83a 	srl	r16,r16,r2
1000706c:	2908b03a 	or	r4,r5,r4
10007070:	1804c03a 	cmpne	r2,r3,zero
10007074:	2088b03a 	or	r4,r4,r2
10007078:	208001cc 	andi	r2,r4,7
1000707c:	10000726 	beq	r2,zero,1000709c <__muldf3+0x7c8>
10007080:	20c003cc 	andi	r3,r4,15
10007084:	00800104 	movi	r2,4
10007088:	18800426 	beq	r3,r2,1000709c <__muldf3+0x7c8>
1000708c:	20c00104 	addi	r3,r4,4
10007090:	1905803a 	cmpltu	r2,r3,r4
10007094:	80a1883a 	add	r16,r16,r2
10007098:	1809883a 	mov	r4,r3
1000709c:	8080202c 	andhi	r2,r16,128
100070a0:	10001b26 	beq	r2,zero,10007110 <__muldf3+0x83c>
100070a4:	34c0004c 	andi	r19,r6,1
100070a8:	01000044 	movi	r4,1
100070ac:	0021883a 	mov	r16,zero
100070b0:	002f883a 	mov	r23,zero
100070b4:	003e6106 	br	10006a3c <__alt_data_end+0xf8006a3c>
100070b8:	013ef884 	movi	r4,-1054
100070bc:	20c9c83a 	sub	r4,r4,r3
100070c0:	01400804 	movi	r5,32
100070c4:	8108d83a 	srl	r4,r16,r4
100070c8:	11401526 	beq	r2,r5,10007120 <__muldf3+0x84c>
100070cc:	18c10f84 	addi	r3,r3,1086
100070d0:	80e0983a 	sll	r16,r16,r3
100070d4:	85eeb03a 	or	r23,r16,r23
100070d8:	b804c03a 	cmpne	r2,r23,zero
100070dc:	1108b03a 	or	r4,r2,r4
100070e0:	20c001cc 	andi	r3,r4,7
100070e4:	1800061e 	bne	r3,zero,10007100 <__muldf3+0x82c>
100070e8:	0021883a 	mov	r16,zero
100070ec:	202ed0fa 	srli	r23,r4,3
100070f0:	34c0004c 	andi	r19,r6,1
100070f4:	0009883a 	mov	r4,zero
100070f8:	b8eeb03a 	or	r23,r23,r3
100070fc:	003e4f06 	br	10006a3c <__alt_data_end+0xf8006a3c>
10007100:	20c003cc 	andi	r3,r4,15
10007104:	00800104 	movi	r2,4
10007108:	0021883a 	mov	r16,zero
1000710c:	18bfdf1e 	bne	r3,r2,1000708c <__alt_data_end+0xf800708c>
10007110:	8004927a 	slli	r2,r16,9
10007114:	8006977a 	slli	r3,r16,29
10007118:	1020d33a 	srli	r16,r2,12
1000711c:	003ff306 	br	100070ec <__alt_data_end+0xf80070ec>
10007120:	0021883a 	mov	r16,zero
10007124:	003feb06 	br	100070d4 <__alt_data_end+0xf80070d4>
10007128:	00800434 	movhi	r2,16
1000712c:	84000234 	orhi	r16,r16,8
10007130:	10bfffc4 	addi	r2,r2,-1
10007134:	4cc0004c 	andi	r19,r9,1
10007138:	80a0703a 	and	r16,r16,r2
1000713c:	003ea606 	br	10006bd8 <__alt_data_end+0xf8006bd8>

10007140 <__subdf3>:
10007140:	00c00434 	movhi	r3,16
10007144:	18ffffc4 	addi	r3,r3,-1
10007148:	defffb04 	addi	sp,sp,-20
1000714c:	28d2703a 	and	r9,r5,r3
10007150:	3814d53a 	srli	r10,r7,20
10007154:	38c6703a 	and	r3,r7,r3
10007158:	3004d77a 	srli	r2,r6,29
1000715c:	dc800215 	stw	r18,8(sp)
10007160:	dc000015 	stw	r16,0(sp)
10007164:	2824d7fa 	srli	r18,r5,31
10007168:	2820d53a 	srli	r16,r5,20
1000716c:	481290fa 	slli	r9,r9,3
10007170:	200ad77a 	srli	r5,r4,29
10007174:	180690fa 	slli	r3,r3,3
10007178:	dc400115 	stw	r17,4(sp)
1000717c:	dfc00415 	stw	ra,16(sp)
10007180:	202290fa 	slli	r17,r4,3
10007184:	dcc00315 	stw	r19,12(sp)
10007188:	5281ffcc 	andi	r10,r10,2047
1000718c:	0101ffc4 	movi	r4,2047
10007190:	9011883a 	mov	r8,r18
10007194:	8401ffcc 	andi	r16,r16,2047
10007198:	94803fcc 	andi	r18,r18,255
1000719c:	494ab03a 	or	r5,r9,r5
100071a0:	380ed7fa 	srli	r7,r7,31
100071a4:	1886b03a 	or	r3,r3,r2
100071a8:	300c90fa 	slli	r6,r6,3
100071ac:	51009026 	beq	r10,r4,100073f0 <__subdf3+0x2b0>
100071b0:	39c0005c 	xori	r7,r7,1
100071b4:	8285c83a 	sub	r2,r16,r10
100071b8:	91c06f26 	beq	r18,r7,10007378 <__subdf3+0x238>
100071bc:	0080b10e 	bge	zero,r2,10007484 <__subdf3+0x344>
100071c0:	50002a1e 	bne	r10,zero,1000726c <__subdf3+0x12c>
100071c4:	1988b03a 	or	r4,r3,r6
100071c8:	2000941e 	bne	r4,zero,1000741c <__subdf3+0x2dc>
100071cc:	888001cc 	andi	r2,r17,7
100071d0:	10005b26 	beq	r2,zero,10007340 <__subdf3+0x200>
100071d4:	88c003cc 	andi	r3,r17,15
100071d8:	00800104 	movi	r2,4
100071dc:	18805826 	beq	r3,r2,10007340 <__subdf3+0x200>
100071e0:	88c00104 	addi	r3,r17,4
100071e4:	1c63803a 	cmpltu	r17,r3,r17
100071e8:	2c4b883a 	add	r5,r5,r17
100071ec:	2880202c 	andhi	r2,r5,128
100071f0:	9200004c 	andi	r8,r18,1
100071f4:	1823883a 	mov	r17,r3
100071f8:	10005426 	beq	r2,zero,1000734c <__subdf3+0x20c>
100071fc:	84000044 	addi	r16,r16,1
10007200:	0081ffc4 	movi	r2,2047
10007204:	8080bf26 	beq	r16,r2,10007504 <__subdf3+0x3c4>
10007208:	013fe034 	movhi	r4,65408
1000720c:	213fffc4 	addi	r4,r4,-1
10007210:	290a703a 	and	r5,r5,r4
10007214:	2804977a 	slli	r2,r5,29
10007218:	280a927a 	slli	r5,r5,9
1000721c:	8822d0fa 	srli	r17,r17,3
10007220:	8401ffcc 	andi	r16,r16,2047
10007224:	2808d33a 	srli	r4,r5,12
10007228:	1444b03a 	or	r2,r2,r17
1000722c:	8401ffcc 	andi	r16,r16,2047
10007230:	800a953a 	slli	r5,r16,20
10007234:	40c03fcc 	andi	r3,r8,255
10007238:	04000434 	movhi	r16,16
1000723c:	180697fa 	slli	r3,r3,31
10007240:	843fffc4 	addi	r16,r16,-1
10007244:	2420703a 	and	r16,r4,r16
10007248:	8160b03a 	or	r16,r16,r5
1000724c:	80c6b03a 	or	r3,r16,r3
10007250:	dfc00417 	ldw	ra,16(sp)
10007254:	dcc00317 	ldw	r19,12(sp)
10007258:	dc800217 	ldw	r18,8(sp)
1000725c:	dc400117 	ldw	r17,4(sp)
10007260:	dc000017 	ldw	r16,0(sp)
10007264:	dec00504 	addi	sp,sp,20
10007268:	f800283a 	ret
1000726c:	0101ffc4 	movi	r4,2047
10007270:	813fd626 	beq	r16,r4,100071cc <__alt_data_end+0xf80071cc>
10007274:	18c02034 	orhi	r3,r3,128
10007278:	01000e04 	movi	r4,56
1000727c:	2080a416 	blt	r4,r2,10007510 <__subdf3+0x3d0>
10007280:	010007c4 	movi	r4,31
10007284:	2080c716 	blt	r4,r2,100075a4 <__subdf3+0x464>
10007288:	01000804 	movi	r4,32
1000728c:	2089c83a 	sub	r4,r4,r2
10007290:	1910983a 	sll	r8,r3,r4
10007294:	308ed83a 	srl	r7,r6,r2
10007298:	3108983a 	sll	r4,r6,r4
1000729c:	1884d83a 	srl	r2,r3,r2
100072a0:	41ccb03a 	or	r6,r8,r7
100072a4:	2008c03a 	cmpne	r4,r4,zero
100072a8:	310cb03a 	or	r6,r6,r4
100072ac:	898dc83a 	sub	r6,r17,r6
100072b0:	89a3803a 	cmpltu	r17,r17,r6
100072b4:	288bc83a 	sub	r5,r5,r2
100072b8:	2c4bc83a 	sub	r5,r5,r17
100072bc:	3023883a 	mov	r17,r6
100072c0:	2880202c 	andhi	r2,r5,128
100072c4:	10006b26 	beq	r2,zero,10007474 <__subdf3+0x334>
100072c8:	04c02034 	movhi	r19,128
100072cc:	9cffffc4 	addi	r19,r19,-1
100072d0:	2ce6703a 	and	r19,r5,r19
100072d4:	98007c26 	beq	r19,zero,100074c8 <__subdf3+0x388>
100072d8:	9809883a 	mov	r4,r19
100072dc:	0007b680 	call	10007b68 <__clzsi2>
100072e0:	10fffe04 	addi	r3,r2,-8
100072e4:	010007c4 	movi	r4,31
100072e8:	20c07d16 	blt	r4,r3,100074e0 <__subdf3+0x3a0>
100072ec:	01400a04 	movi	r5,40
100072f0:	2885c83a 	sub	r2,r5,r2
100072f4:	888ad83a 	srl	r5,r17,r2
100072f8:	98e6983a 	sll	r19,r19,r3
100072fc:	88e2983a 	sll	r17,r17,r3
10007300:	2ce6b03a 	or	r19,r5,r19
10007304:	1c007a16 	blt	r3,r16,100074f0 <__subdf3+0x3b0>
10007308:	1c21c83a 	sub	r16,r3,r16
1000730c:	81400044 	addi	r5,r16,1
10007310:	00c007c4 	movi	r3,31
10007314:	19409616 	blt	r3,r5,10007570 <__subdf3+0x430>
10007318:	1c21c83a 	sub	r16,r3,r16
1000731c:	8c08983a 	sll	r4,r17,r16
10007320:	8946d83a 	srl	r3,r17,r5
10007324:	9c20983a 	sll	r16,r19,r16
10007328:	2008c03a 	cmpne	r4,r4,zero
1000732c:	994ad83a 	srl	r5,r19,r5
10007330:	1c06b03a 	or	r3,r3,r16
10007334:	1922b03a 	or	r17,r3,r4
10007338:	0021883a 	mov	r16,zero
1000733c:	003fa306 	br	100071cc <__alt_data_end+0xf80071cc>
10007340:	2880202c 	andhi	r2,r5,128
10007344:	9200004c 	andi	r8,r18,1
10007348:	103fac1e 	bne	r2,zero,100071fc <__alt_data_end+0xf80071fc>
1000734c:	2804977a 	slli	r2,r5,29
10007350:	8822d0fa 	srli	r17,r17,3
10007354:	00c1ffc4 	movi	r3,2047
10007358:	280ad0fa 	srli	r5,r5,3
1000735c:	1444b03a 	or	r2,r2,r17
10007360:	80c02726 	beq	r16,r3,10007400 <__subdf3+0x2c0>
10007364:	01000434 	movhi	r4,16
10007368:	213fffc4 	addi	r4,r4,-1
1000736c:	80e0703a 	and	r16,r16,r3
10007370:	2908703a 	and	r4,r5,r4
10007374:	003fad06 	br	1000722c <__alt_data_end+0xf800722c>
10007378:	0080690e 	bge	zero,r2,10007520 <__subdf3+0x3e0>
1000737c:	50002f26 	beq	r10,zero,1000743c <__subdf3+0x2fc>
10007380:	0101ffc4 	movi	r4,2047
10007384:	813f9126 	beq	r16,r4,100071cc <__alt_data_end+0xf80071cc>
10007388:	18c02034 	orhi	r3,r3,128
1000738c:	01000e04 	movi	r4,56
10007390:	2080b00e 	bge	r4,r2,10007654 <__subdf3+0x514>
10007394:	198cb03a 	or	r6,r3,r6
10007398:	300ec03a 	cmpne	r7,r6,zero
1000739c:	0005883a 	mov	r2,zero
100073a0:	3c4f883a 	add	r7,r7,r17
100073a4:	3c63803a 	cmpltu	r17,r7,r17
100073a8:	114b883a 	add	r5,r2,r5
100073ac:	2c4b883a 	add	r5,r5,r17
100073b0:	3823883a 	mov	r17,r7
100073b4:	2880202c 	andhi	r2,r5,128
100073b8:	10002e26 	beq	r2,zero,10007474 <__subdf3+0x334>
100073bc:	84000044 	addi	r16,r16,1
100073c0:	0081ffc4 	movi	r2,2047
100073c4:	8080de26 	beq	r16,r2,10007740 <__subdf3+0x600>
100073c8:	00bfe034 	movhi	r2,65408
100073cc:	10bfffc4 	addi	r2,r2,-1
100073d0:	288a703a 	and	r5,r5,r2
100073d4:	880cd07a 	srli	r6,r17,1
100073d8:	280897fa 	slli	r4,r5,31
100073dc:	88c0004c 	andi	r3,r17,1
100073e0:	30e2b03a 	or	r17,r6,r3
100073e4:	280ad07a 	srli	r5,r5,1
100073e8:	8922b03a 	or	r17,r17,r4
100073ec:	003f7706 	br	100071cc <__alt_data_end+0xf80071cc>
100073f0:	1984b03a 	or	r2,r3,r6
100073f4:	103f6e26 	beq	r2,zero,100071b0 <__alt_data_end+0xf80071b0>
100073f8:	39c03fcc 	andi	r7,r7,255
100073fc:	003f6d06 	br	100071b4 <__alt_data_end+0xf80071b4>
10007400:	1146b03a 	or	r3,r2,r5
10007404:	18003f26 	beq	r3,zero,10007504 <__subdf3+0x3c4>
10007408:	00c00434 	movhi	r3,16
1000740c:	29000234 	orhi	r4,r5,8
10007410:	18ffffc4 	addi	r3,r3,-1
10007414:	20c8703a 	and	r4,r4,r3
10007418:	003f8406 	br	1000722c <__alt_data_end+0xf800722c>
1000741c:	10bfffc4 	addi	r2,r2,-1
10007420:	1000501e 	bne	r2,zero,10007564 <__subdf3+0x424>
10007424:	898fc83a 	sub	r7,r17,r6
10007428:	89e3803a 	cmpltu	r17,r17,r7
1000742c:	28cbc83a 	sub	r5,r5,r3
10007430:	2c4bc83a 	sub	r5,r5,r17
10007434:	3823883a 	mov	r17,r7
10007438:	003fa106 	br	100072c0 <__alt_data_end+0xf80072c0>
1000743c:	1988b03a 	or	r4,r3,r6
10007440:	203f6226 	beq	r4,zero,100071cc <__alt_data_end+0xf80071cc>
10007444:	10bfffc4 	addi	r2,r2,-1
10007448:	10009b1e 	bne	r2,zero,100076b8 <__subdf3+0x578>
1000744c:	344d883a 	add	r6,r6,r17
10007450:	3463803a 	cmpltu	r17,r6,r17
10007454:	194b883a 	add	r5,r3,r5
10007458:	2c4b883a 	add	r5,r5,r17
1000745c:	3023883a 	mov	r17,r6
10007460:	003fd406 	br	100073b4 <__alt_data_end+0xf80073b4>
10007464:	1106b03a 	or	r3,r2,r4
10007468:	1800b426 	beq	r3,zero,1000773c <__subdf3+0x5fc>
1000746c:	100b883a 	mov	r5,r2
10007470:	2023883a 	mov	r17,r4
10007474:	888001cc 	andi	r2,r17,7
10007478:	103f561e 	bne	r2,zero,100071d4 <__alt_data_end+0xf80071d4>
1000747c:	9200004c 	andi	r8,r18,1
10007480:	003fb206 	br	1000734c <__alt_data_end+0xf800734c>
10007484:	1000531e 	bne	r2,zero,100075d4 <__subdf3+0x494>
10007488:	80800044 	addi	r2,r16,1
1000748c:	1081ffcc 	andi	r2,r2,2047
10007490:	01000044 	movi	r4,1
10007494:	2080a00e 	bge	r4,r2,10007718 <__subdf3+0x5d8>
10007498:	8985c83a 	sub	r2,r17,r6
1000749c:	8889803a 	cmpltu	r4,r17,r2
100074a0:	28e7c83a 	sub	r19,r5,r3
100074a4:	9927c83a 	sub	r19,r19,r4
100074a8:	9900202c 	andhi	r4,r19,128
100074ac:	20006226 	beq	r4,zero,10007638 <__subdf3+0x4f8>
100074b0:	3463c83a 	sub	r17,r6,r17
100074b4:	194bc83a 	sub	r5,r3,r5
100074b8:	344d803a 	cmpltu	r6,r6,r17
100074bc:	29a7c83a 	sub	r19,r5,r6
100074c0:	3825883a 	mov	r18,r7
100074c4:	983f841e 	bne	r19,zero,100072d8 <__alt_data_end+0xf80072d8>
100074c8:	8809883a 	mov	r4,r17
100074cc:	0007b680 	call	10007b68 <__clzsi2>
100074d0:	10800804 	addi	r2,r2,32
100074d4:	10fffe04 	addi	r3,r2,-8
100074d8:	010007c4 	movi	r4,31
100074dc:	20ff830e 	bge	r4,r3,100072ec <__alt_data_end+0xf80072ec>
100074e0:	14fff604 	addi	r19,r2,-40
100074e4:	8ce6983a 	sll	r19,r17,r19
100074e8:	0023883a 	mov	r17,zero
100074ec:	1c3f860e 	bge	r3,r16,10007308 <__alt_data_end+0xf8007308>
100074f0:	017fe034 	movhi	r5,65408
100074f4:	297fffc4 	addi	r5,r5,-1
100074f8:	80e1c83a 	sub	r16,r16,r3
100074fc:	994a703a 	and	r5,r19,r5
10007500:	003f3206 	br	100071cc <__alt_data_end+0xf80071cc>
10007504:	0009883a 	mov	r4,zero
10007508:	0005883a 	mov	r2,zero
1000750c:	003f4706 	br	1000722c <__alt_data_end+0xf800722c>
10007510:	198cb03a 	or	r6,r3,r6
10007514:	300cc03a 	cmpne	r6,r6,zero
10007518:	0005883a 	mov	r2,zero
1000751c:	003f6306 	br	100072ac <__alt_data_end+0xf80072ac>
10007520:	10009d1e 	bne	r2,zero,10007798 <__subdf3+0x658>
10007524:	81c00044 	addi	r7,r16,1
10007528:	3881ffcc 	andi	r2,r7,2047
1000752c:	02400044 	movi	r9,1
10007530:	4880680e 	bge	r9,r2,100076d4 <__subdf3+0x594>
10007534:	0081ffc4 	movi	r2,2047
10007538:	3880ae26 	beq	r7,r2,100077f4 <__subdf3+0x6b4>
1000753c:	344d883a 	add	r6,r6,r17
10007540:	3463803a 	cmpltu	r17,r6,r17
10007544:	194b883a 	add	r5,r3,r5
10007548:	2c4b883a 	add	r5,r5,r17
1000754c:	282297fa 	slli	r17,r5,31
10007550:	300cd07a 	srli	r6,r6,1
10007554:	280ad07a 	srli	r5,r5,1
10007558:	3821883a 	mov	r16,r7
1000755c:	89a2b03a 	or	r17,r17,r6
10007560:	003f1a06 	br	100071cc <__alt_data_end+0xf80071cc>
10007564:	0101ffc4 	movi	r4,2047
10007568:	813f431e 	bne	r16,r4,10007278 <__alt_data_end+0xf8007278>
1000756c:	003f1706 	br	100071cc <__alt_data_end+0xf80071cc>
10007570:	80bff844 	addi	r2,r16,-31
10007574:	00c00804 	movi	r3,32
10007578:	9884d83a 	srl	r2,r19,r2
1000757c:	28c05126 	beq	r5,r3,100076c4 <__subdf3+0x584>
10007580:	00c00fc4 	movi	r3,63
10007584:	1c21c83a 	sub	r16,r3,r16
10007588:	9c26983a 	sll	r19,r19,r16
1000758c:	9c62b03a 	or	r17,r19,r17
10007590:	8822c03a 	cmpne	r17,r17,zero
10007594:	88a2b03a 	or	r17,r17,r2
10007598:	000b883a 	mov	r5,zero
1000759c:	0021883a 	mov	r16,zero
100075a0:	003fb406 	br	10007474 <__alt_data_end+0xf8007474>
100075a4:	113ff804 	addi	r4,r2,-32
100075a8:	01c00804 	movi	r7,32
100075ac:	1908d83a 	srl	r4,r3,r4
100075b0:	11c04626 	beq	r2,r7,100076cc <__subdf3+0x58c>
100075b4:	01c01004 	movi	r7,64
100075b8:	3885c83a 	sub	r2,r7,r2
100075bc:	1884983a 	sll	r2,r3,r2
100075c0:	118cb03a 	or	r6,r2,r6
100075c4:	300cc03a 	cmpne	r6,r6,zero
100075c8:	310cb03a 	or	r6,r6,r4
100075cc:	0005883a 	mov	r2,zero
100075d0:	003f3606 	br	100072ac <__alt_data_end+0xf80072ac>
100075d4:	80002b26 	beq	r16,zero,10007684 <__subdf3+0x544>
100075d8:	0101ffc4 	movi	r4,2047
100075dc:	51006926 	beq	r10,r4,10007784 <__subdf3+0x644>
100075e0:	0085c83a 	sub	r2,zero,r2
100075e4:	29402034 	orhi	r5,r5,128
100075e8:	01000e04 	movi	r4,56
100075ec:	20807d16 	blt	r4,r2,100077e4 <__subdf3+0x6a4>
100075f0:	010007c4 	movi	r4,31
100075f4:	2080d916 	blt	r4,r2,1000795c <__subdf3+0x81c>
100075f8:	01000804 	movi	r4,32
100075fc:	2089c83a 	sub	r4,r4,r2
10007600:	2912983a 	sll	r9,r5,r4
10007604:	8890d83a 	srl	r8,r17,r2
10007608:	8908983a 	sll	r4,r17,r4
1000760c:	2884d83a 	srl	r2,r5,r2
10007610:	4a22b03a 	or	r17,r9,r8
10007614:	2008c03a 	cmpne	r4,r4,zero
10007618:	8922b03a 	or	r17,r17,r4
1000761c:	3463c83a 	sub	r17,r6,r17
10007620:	1885c83a 	sub	r2,r3,r2
10007624:	344d803a 	cmpltu	r6,r6,r17
10007628:	118bc83a 	sub	r5,r2,r6
1000762c:	5021883a 	mov	r16,r10
10007630:	3825883a 	mov	r18,r7
10007634:	003f2206 	br	100072c0 <__alt_data_end+0xf80072c0>
10007638:	9886b03a 	or	r3,r19,r2
1000763c:	18001c1e 	bne	r3,zero,100076b0 <__subdf3+0x570>
10007640:	0011883a 	mov	r8,zero
10007644:	000b883a 	mov	r5,zero
10007648:	0023883a 	mov	r17,zero
1000764c:	0021883a 	mov	r16,zero
10007650:	003f3e06 	br	1000734c <__alt_data_end+0xf800734c>
10007654:	010007c4 	movi	r4,31
10007658:	20803c16 	blt	r4,r2,1000774c <__subdf3+0x60c>
1000765c:	01000804 	movi	r4,32
10007660:	2089c83a 	sub	r4,r4,r2
10007664:	1912983a 	sll	r9,r3,r4
10007668:	308ed83a 	srl	r7,r6,r2
1000766c:	3108983a 	sll	r4,r6,r4
10007670:	1884d83a 	srl	r2,r3,r2
10007674:	49ceb03a 	or	r7,r9,r7
10007678:	2008c03a 	cmpne	r4,r4,zero
1000767c:	390eb03a 	or	r7,r7,r4
10007680:	003f4706 	br	100073a0 <__alt_data_end+0xf80073a0>
10007684:	2c48b03a 	or	r4,r5,r17
10007688:	20003e26 	beq	r4,zero,10007784 <__subdf3+0x644>
1000768c:	0084303a 	nor	r2,zero,r2
10007690:	10003a1e 	bne	r2,zero,1000777c <__subdf3+0x63c>
10007694:	3463c83a 	sub	r17,r6,r17
10007698:	194bc83a 	sub	r5,r3,r5
1000769c:	344d803a 	cmpltu	r6,r6,r17
100076a0:	298bc83a 	sub	r5,r5,r6
100076a4:	5021883a 	mov	r16,r10
100076a8:	3825883a 	mov	r18,r7
100076ac:	003f0406 	br	100072c0 <__alt_data_end+0xf80072c0>
100076b0:	1023883a 	mov	r17,r2
100076b4:	003f0706 	br	100072d4 <__alt_data_end+0xf80072d4>
100076b8:	0101ffc4 	movi	r4,2047
100076bc:	813f331e 	bne	r16,r4,1000738c <__alt_data_end+0xf800738c>
100076c0:	003ec206 	br	100071cc <__alt_data_end+0xf80071cc>
100076c4:	0027883a 	mov	r19,zero
100076c8:	003fb006 	br	1000758c <__alt_data_end+0xf800758c>
100076cc:	0005883a 	mov	r2,zero
100076d0:	003fbb06 	br	100075c0 <__alt_data_end+0xf80075c0>
100076d4:	2c44b03a 	or	r2,r5,r17
100076d8:	80008b1e 	bne	r16,zero,10007908 <__subdf3+0x7c8>
100076dc:	1000b526 	beq	r2,zero,100079b4 <__subdf3+0x874>
100076e0:	1984b03a 	or	r2,r3,r6
100076e4:	103eb926 	beq	r2,zero,100071cc <__alt_data_end+0xf80071cc>
100076e8:	3449883a 	add	r4,r6,r17
100076ec:	2463803a 	cmpltu	r17,r4,r17
100076f0:	194b883a 	add	r5,r3,r5
100076f4:	2c4b883a 	add	r5,r5,r17
100076f8:	2880202c 	andhi	r2,r5,128
100076fc:	2023883a 	mov	r17,r4
10007700:	103f5c26 	beq	r2,zero,10007474 <__alt_data_end+0xf8007474>
10007704:	00bfe034 	movhi	r2,65408
10007708:	10bfffc4 	addi	r2,r2,-1
1000770c:	4821883a 	mov	r16,r9
10007710:	288a703a 	and	r5,r5,r2
10007714:	003ead06 	br	100071cc <__alt_data_end+0xf80071cc>
10007718:	2c44b03a 	or	r2,r5,r17
1000771c:	8000291e 	bne	r16,zero,100077c4 <__subdf3+0x684>
10007720:	10004f1e 	bne	r2,zero,10007860 <__subdf3+0x720>
10007724:	1984b03a 	or	r2,r3,r6
10007728:	10000426 	beq	r2,zero,1000773c <__subdf3+0x5fc>
1000772c:	180b883a 	mov	r5,r3
10007730:	3023883a 	mov	r17,r6
10007734:	3825883a 	mov	r18,r7
10007738:	003ea406 	br	100071cc <__alt_data_end+0xf80071cc>
1000773c:	0011883a 	mov	r8,zero
10007740:	000b883a 	mov	r5,zero
10007744:	0023883a 	mov	r17,zero
10007748:	003f0006 	br	1000734c <__alt_data_end+0xf800734c>
1000774c:	11fff804 	addi	r7,r2,-32
10007750:	19c8d83a 	srl	r4,r3,r7
10007754:	01c00804 	movi	r7,32
10007758:	11c07e26 	beq	r2,r7,10007954 <__subdf3+0x814>
1000775c:	01c01004 	movi	r7,64
10007760:	3885c83a 	sub	r2,r7,r2
10007764:	1884983a 	sll	r2,r3,r2
10007768:	118cb03a 	or	r6,r2,r6
1000776c:	300ec03a 	cmpne	r7,r6,zero
10007770:	390eb03a 	or	r7,r7,r4
10007774:	0005883a 	mov	r2,zero
10007778:	003f0906 	br	100073a0 <__alt_data_end+0xf80073a0>
1000777c:	0101ffc4 	movi	r4,2047
10007780:	513f991e 	bne	r10,r4,100075e8 <__alt_data_end+0xf80075e8>
10007784:	180b883a 	mov	r5,r3
10007788:	3023883a 	mov	r17,r6
1000778c:	5021883a 	mov	r16,r10
10007790:	3825883a 	mov	r18,r7
10007794:	003e8d06 	br	100071cc <__alt_data_end+0xf80071cc>
10007798:	80001a1e 	bne	r16,zero,10007804 <__subdf3+0x6c4>
1000779c:	2c48b03a 	or	r4,r5,r17
100077a0:	20005526 	beq	r4,zero,100078f8 <__subdf3+0x7b8>
100077a4:	0084303a 	nor	r2,zero,r2
100077a8:	1000511e 	bne	r2,zero,100078f0 <__subdf3+0x7b0>
100077ac:	89a3883a 	add	r17,r17,r6
100077b0:	194b883a 	add	r5,r3,r5
100077b4:	898d803a 	cmpltu	r6,r17,r6
100077b8:	298b883a 	add	r5,r5,r6
100077bc:	5021883a 	mov	r16,r10
100077c0:	003efc06 	br	100073b4 <__alt_data_end+0xf80073b4>
100077c4:	1000341e 	bne	r2,zero,10007898 <__subdf3+0x758>
100077c8:	1984b03a 	or	r2,r3,r6
100077cc:	10006f26 	beq	r2,zero,1000798c <__subdf3+0x84c>
100077d0:	180b883a 	mov	r5,r3
100077d4:	3023883a 	mov	r17,r6
100077d8:	3825883a 	mov	r18,r7
100077dc:	0401ffc4 	movi	r16,2047
100077e0:	003e7a06 	br	100071cc <__alt_data_end+0xf80071cc>
100077e4:	2c62b03a 	or	r17,r5,r17
100077e8:	8822c03a 	cmpne	r17,r17,zero
100077ec:	0005883a 	mov	r2,zero
100077f0:	003f8a06 	br	1000761c <__alt_data_end+0xf800761c>
100077f4:	3821883a 	mov	r16,r7
100077f8:	000b883a 	mov	r5,zero
100077fc:	0023883a 	mov	r17,zero
10007800:	003ed206 	br	1000734c <__alt_data_end+0xf800734c>
10007804:	0101ffc4 	movi	r4,2047
10007808:	51003b26 	beq	r10,r4,100078f8 <__subdf3+0x7b8>
1000780c:	0085c83a 	sub	r2,zero,r2
10007810:	29402034 	orhi	r5,r5,128
10007814:	01000e04 	movi	r4,56
10007818:	20806216 	blt	r4,r2,100079a4 <__subdf3+0x864>
1000781c:	010007c4 	movi	r4,31
10007820:	20806b16 	blt	r4,r2,100079d0 <__subdf3+0x890>
10007824:	01000804 	movi	r4,32
10007828:	2089c83a 	sub	r4,r4,r2
1000782c:	2912983a 	sll	r9,r5,r4
10007830:	888ed83a 	srl	r7,r17,r2
10007834:	8908983a 	sll	r4,r17,r4
10007838:	2884d83a 	srl	r2,r5,r2
1000783c:	49e2b03a 	or	r17,r9,r7
10007840:	2008c03a 	cmpne	r4,r4,zero
10007844:	8922b03a 	or	r17,r17,r4
10007848:	89a3883a 	add	r17,r17,r6
1000784c:	10c5883a 	add	r2,r2,r3
10007850:	898d803a 	cmpltu	r6,r17,r6
10007854:	118b883a 	add	r5,r2,r6
10007858:	5021883a 	mov	r16,r10
1000785c:	003ed506 	br	100073b4 <__alt_data_end+0xf80073b4>
10007860:	1984b03a 	or	r2,r3,r6
10007864:	103e5926 	beq	r2,zero,100071cc <__alt_data_end+0xf80071cc>
10007868:	8989c83a 	sub	r4,r17,r6
1000786c:	8911803a 	cmpltu	r8,r17,r4
10007870:	28c5c83a 	sub	r2,r5,r3
10007874:	1205c83a 	sub	r2,r2,r8
10007878:	1200202c 	andhi	r8,r2,128
1000787c:	403ef926 	beq	r8,zero,10007464 <__alt_data_end+0xf8007464>
10007880:	3463c83a 	sub	r17,r6,r17
10007884:	194bc83a 	sub	r5,r3,r5
10007888:	344d803a 	cmpltu	r6,r6,r17
1000788c:	298bc83a 	sub	r5,r5,r6
10007890:	3825883a 	mov	r18,r7
10007894:	003e4d06 	br	100071cc <__alt_data_end+0xf80071cc>
10007898:	1984b03a 	or	r2,r3,r6
1000789c:	10002b26 	beq	r2,zero,1000794c <__subdf3+0x80c>
100078a0:	2808d0fa 	srli	r4,r5,3
100078a4:	8822d0fa 	srli	r17,r17,3
100078a8:	280a977a 	slli	r5,r5,29
100078ac:	2080022c 	andhi	r2,r4,8
100078b0:	2c62b03a 	or	r17,r5,r17
100078b4:	10000826 	beq	r2,zero,100078d8 <__subdf3+0x798>
100078b8:	1810d0fa 	srli	r8,r3,3
100078bc:	4080022c 	andhi	r2,r8,8
100078c0:	1000051e 	bne	r2,zero,100078d8 <__subdf3+0x798>
100078c4:	300cd0fa 	srli	r6,r6,3
100078c8:	1804977a 	slli	r2,r3,29
100078cc:	4009883a 	mov	r4,r8
100078d0:	3825883a 	mov	r18,r7
100078d4:	11a2b03a 	or	r17,r2,r6
100078d8:	880ad77a 	srli	r5,r17,29
100078dc:	200890fa 	slli	r4,r4,3
100078e0:	882290fa 	slli	r17,r17,3
100078e4:	0401ffc4 	movi	r16,2047
100078e8:	290ab03a 	or	r5,r5,r4
100078ec:	003e3706 	br	100071cc <__alt_data_end+0xf80071cc>
100078f0:	0101ffc4 	movi	r4,2047
100078f4:	513fc71e 	bne	r10,r4,10007814 <__alt_data_end+0xf8007814>
100078f8:	180b883a 	mov	r5,r3
100078fc:	3023883a 	mov	r17,r6
10007900:	5021883a 	mov	r16,r10
10007904:	003e3106 	br	100071cc <__alt_data_end+0xf80071cc>
10007908:	10002d26 	beq	r2,zero,100079c0 <__subdf3+0x880>
1000790c:	1984b03a 	or	r2,r3,r6
10007910:	10000e26 	beq	r2,zero,1000794c <__subdf3+0x80c>
10007914:	2808d0fa 	srli	r4,r5,3
10007918:	8822d0fa 	srli	r17,r17,3
1000791c:	280a977a 	slli	r5,r5,29
10007920:	2080022c 	andhi	r2,r4,8
10007924:	2c62b03a 	or	r17,r5,r17
10007928:	103feb26 	beq	r2,zero,100078d8 <__alt_data_end+0xf80078d8>
1000792c:	180ed0fa 	srli	r7,r3,3
10007930:	3880022c 	andhi	r2,r7,8
10007934:	103fe81e 	bne	r2,zero,100078d8 <__alt_data_end+0xf80078d8>
10007938:	300cd0fa 	srli	r6,r6,3
1000793c:	1804977a 	slli	r2,r3,29
10007940:	3809883a 	mov	r4,r7
10007944:	11a2b03a 	or	r17,r2,r6
10007948:	003fe306 	br	100078d8 <__alt_data_end+0xf80078d8>
1000794c:	0401ffc4 	movi	r16,2047
10007950:	003e1e06 	br	100071cc <__alt_data_end+0xf80071cc>
10007954:	0005883a 	mov	r2,zero
10007958:	003f8306 	br	10007768 <__alt_data_end+0xf8007768>
1000795c:	113ff804 	addi	r4,r2,-32
10007960:	02000804 	movi	r8,32
10007964:	2908d83a 	srl	r4,r5,r4
10007968:	12002526 	beq	r2,r8,10007a00 <__subdf3+0x8c0>
1000796c:	02001004 	movi	r8,64
10007970:	4085c83a 	sub	r2,r8,r2
10007974:	288a983a 	sll	r5,r5,r2
10007978:	2c62b03a 	or	r17,r5,r17
1000797c:	8822c03a 	cmpne	r17,r17,zero
10007980:	8922b03a 	or	r17,r17,r4
10007984:	0005883a 	mov	r2,zero
10007988:	003f2406 	br	1000761c <__alt_data_end+0xf800761c>
1000798c:	01402034 	movhi	r5,128
10007990:	0011883a 	mov	r8,zero
10007994:	297fffc4 	addi	r5,r5,-1
10007998:	047ffe04 	movi	r17,-8
1000799c:	0401ffc4 	movi	r16,2047
100079a0:	003e6a06 	br	1000734c <__alt_data_end+0xf800734c>
100079a4:	2c62b03a 	or	r17,r5,r17
100079a8:	8822c03a 	cmpne	r17,r17,zero
100079ac:	0005883a 	mov	r2,zero
100079b0:	003fa506 	br	10007848 <__alt_data_end+0xf8007848>
100079b4:	180b883a 	mov	r5,r3
100079b8:	3023883a 	mov	r17,r6
100079bc:	003e0306 	br	100071cc <__alt_data_end+0xf80071cc>
100079c0:	180b883a 	mov	r5,r3
100079c4:	3023883a 	mov	r17,r6
100079c8:	0401ffc4 	movi	r16,2047
100079cc:	003dff06 	br	100071cc <__alt_data_end+0xf80071cc>
100079d0:	113ff804 	addi	r4,r2,-32
100079d4:	01c00804 	movi	r7,32
100079d8:	2908d83a 	srl	r4,r5,r4
100079dc:	11c00a26 	beq	r2,r7,10007a08 <__subdf3+0x8c8>
100079e0:	01c01004 	movi	r7,64
100079e4:	3885c83a 	sub	r2,r7,r2
100079e8:	288a983a 	sll	r5,r5,r2
100079ec:	2c62b03a 	or	r17,r5,r17
100079f0:	8822c03a 	cmpne	r17,r17,zero
100079f4:	8922b03a 	or	r17,r17,r4
100079f8:	0005883a 	mov	r2,zero
100079fc:	003f9206 	br	10007848 <__alt_data_end+0xf8007848>
10007a00:	000b883a 	mov	r5,zero
10007a04:	003fdc06 	br	10007978 <__alt_data_end+0xf8007978>
10007a08:	000b883a 	mov	r5,zero
10007a0c:	003ff706 	br	100079ec <__alt_data_end+0xf80079ec>

10007a10 <__fixdfsi>:
10007a10:	2806d53a 	srli	r3,r5,20
10007a14:	00800434 	movhi	r2,16
10007a18:	10bfffc4 	addi	r2,r2,-1
10007a1c:	18c1ffcc 	andi	r3,r3,2047
10007a20:	0180ff84 	movi	r6,1022
10007a24:	2884703a 	and	r2,r5,r2
10007a28:	280ad7fa 	srli	r5,r5,31
10007a2c:	30c0130e 	bge	r6,r3,10007a7c <__fixdfsi+0x6c>
10007a30:	01810744 	movi	r6,1053
10007a34:	30c00d16 	blt	r6,r3,10007a6c <__fixdfsi+0x5c>
10007a38:	01810cc4 	movi	r6,1075
10007a3c:	30cdc83a 	sub	r6,r6,r3
10007a40:	01c007c4 	movi	r7,31
10007a44:	10800434 	orhi	r2,r2,16
10007a48:	39800e0e 	bge	r7,r6,10007a84 <__fixdfsi+0x74>
10007a4c:	010104c4 	movi	r4,1043
10007a50:	20c7c83a 	sub	r3,r4,r3
10007a54:	10c6d83a 	srl	r3,r2,r3
10007a58:	29403fcc 	andi	r5,r5,255
10007a5c:	0145c83a 	sub	r2,zero,r5
10007a60:	1884f03a 	xor	r2,r3,r2
10007a64:	1145883a 	add	r2,r2,r5
10007a68:	f800283a 	ret
10007a6c:	00a00034 	movhi	r2,32768
10007a70:	10bfffc4 	addi	r2,r2,-1
10007a74:	2885883a 	add	r2,r5,r2
10007a78:	f800283a 	ret
10007a7c:	0005883a 	mov	r2,zero
10007a80:	f800283a 	ret
10007a84:	18fefb44 	addi	r3,r3,-1043
10007a88:	2188d83a 	srl	r4,r4,r6
10007a8c:	10c6983a 	sll	r3,r2,r3
10007a90:	20c6b03a 	or	r3,r4,r3
10007a94:	003ff006 	br	10007a58 <__alt_data_end+0xf8007a58>

10007a98 <__floatsidf>:
10007a98:	defffd04 	addi	sp,sp,-12
10007a9c:	dc400115 	stw	r17,4(sp)
10007aa0:	dfc00215 	stw	ra,8(sp)
10007aa4:	dc000015 	stw	r16,0(sp)
10007aa8:	2023883a 	mov	r17,r4
10007aac:	20001426 	beq	r4,zero,10007b00 <__floatsidf+0x68>
10007ab0:	2020d7fa 	srli	r16,r4,31
10007ab4:	80000126 	beq	r16,zero,10007abc <__floatsidf+0x24>
10007ab8:	0123c83a 	sub	r17,zero,r4
10007abc:	8809883a 	mov	r4,r17
10007ac0:	0007b680 	call	10007b68 <__clzsi2>
10007ac4:	01410784 	movi	r5,1054
10007ac8:	00c00284 	movi	r3,10
10007acc:	288bc83a 	sub	r5,r5,r2
10007ad0:	18801c16 	blt	r3,r2,10007b44 <__floatsidf+0xac>
10007ad4:	00c002c4 	movi	r3,11
10007ad8:	1887c83a 	sub	r3,r3,r2
10007adc:	88c8d83a 	srl	r4,r17,r3
10007ae0:	00c00434 	movhi	r3,16
10007ae4:	18ffffc4 	addi	r3,r3,-1
10007ae8:	10800544 	addi	r2,r2,21
10007aec:	20c8703a 	and	r4,r4,r3
10007af0:	8884983a 	sll	r2,r17,r2
10007af4:	28c1ffcc 	andi	r3,r5,2047
10007af8:	800d883a 	mov	r6,r16
10007afc:	00000406 	br	10007b10 <__floatsidf+0x78>
10007b00:	000d883a 	mov	r6,zero
10007b04:	0007883a 	mov	r3,zero
10007b08:	0009883a 	mov	r4,zero
10007b0c:	0005883a 	mov	r2,zero
10007b10:	180a953a 	slli	r5,r3,20
10007b14:	31803fcc 	andi	r6,r6,255
10007b18:	00c00434 	movhi	r3,16
10007b1c:	300c97fa 	slli	r6,r6,31
10007b20:	18ffffc4 	addi	r3,r3,-1
10007b24:	20c6703a 	and	r3,r4,r3
10007b28:	1946b03a 	or	r3,r3,r5
10007b2c:	1986b03a 	or	r3,r3,r6
10007b30:	dfc00217 	ldw	ra,8(sp)
10007b34:	dc400117 	ldw	r17,4(sp)
10007b38:	dc000017 	ldw	r16,0(sp)
10007b3c:	dec00304 	addi	sp,sp,12
10007b40:	f800283a 	ret
10007b44:	10fffd44 	addi	r3,r2,-11
10007b48:	88c8983a 	sll	r4,r17,r3
10007b4c:	00800434 	movhi	r2,16
10007b50:	10bfffc4 	addi	r2,r2,-1
10007b54:	2088703a 	and	r4,r4,r2
10007b58:	28c1ffcc 	andi	r3,r5,2047
10007b5c:	800d883a 	mov	r6,r16
10007b60:	0005883a 	mov	r2,zero
10007b64:	003fea06 	br	10007b10 <__alt_data_end+0xf8007b10>

10007b68 <__clzsi2>:
10007b68:	00bfffd4 	movui	r2,65535
10007b6c:	11000b36 	bltu	r2,r4,10007b9c <__clzsi2+0x34>
10007b70:	00803fc4 	movi	r2,255
10007b74:	1100122e 	bgeu	r2,r4,10007bc0 <__clzsi2+0x58>
10007b78:	00c00204 	movi	r3,8
10007b7c:	01400604 	movi	r5,24
10007b80:	20c8d83a 	srl	r4,r4,r3
10007b84:	00840074 	movhi	r2,4097
10007b88:	10917f04 	addi	r2,r2,17916
10007b8c:	1109883a 	add	r4,r2,r4
10007b90:	20800003 	ldbu	r2,0(r4)
10007b94:	2885c83a 	sub	r2,r5,r2
10007b98:	f800283a 	ret
10007b9c:	00804034 	movhi	r2,256
10007ba0:	10bfffc4 	addi	r2,r2,-1
10007ba4:	11000336 	bltu	r2,r4,10007bb4 <__clzsi2+0x4c>
10007ba8:	00c00404 	movi	r3,16
10007bac:	180b883a 	mov	r5,r3
10007bb0:	003ff306 	br	10007b80 <__alt_data_end+0xf8007b80>
10007bb4:	00c00604 	movi	r3,24
10007bb8:	01400204 	movi	r5,8
10007bbc:	003ff006 	br	10007b80 <__alt_data_end+0xf8007b80>
10007bc0:	0007883a 	mov	r3,zero
10007bc4:	01400804 	movi	r5,32
10007bc8:	003fed06 	br	10007b80 <__alt_data_end+0xf8007b80>

10007bcc <__mulsi3>:
10007bcc:	0005883a 	mov	r2,zero
10007bd0:	20000726 	beq	r4,zero,10007bf0 <__mulsi3+0x24>
10007bd4:	20c0004c 	andi	r3,r4,1
10007bd8:	2008d07a 	srli	r4,r4,1
10007bdc:	18000126 	beq	r3,zero,10007be4 <__mulsi3+0x18>
10007be0:	1145883a 	add	r2,r2,r5
10007be4:	294b883a 	add	r5,r5,r5
10007be8:	203ffa1e 	bne	r4,zero,10007bd4 <__alt_data_end+0xf8007bd4>
10007bec:	f800283a 	ret
10007bf0:	f800283a 	ret

10007bf4 <__errno>:
10007bf4:	008400b4 	movhi	r2,4098
10007bf8:	10826d04 	addi	r2,r2,2484
10007bfc:	10800017 	ldw	r2,0(r2)
10007c00:	f800283a 	ret

10007c04 <_printf_r>:
10007c04:	defffd04 	addi	sp,sp,-12
10007c08:	dfc00015 	stw	ra,0(sp)
10007c0c:	d9800115 	stw	r6,4(sp)
10007c10:	d9c00215 	stw	r7,8(sp)
10007c14:	280d883a 	mov	r6,r5
10007c18:	21400217 	ldw	r5,8(r4)
10007c1c:	d9c00104 	addi	r7,sp,4
10007c20:	0007ce80 	call	10007ce8 <___vfprintf_internal_r>
10007c24:	dfc00017 	ldw	ra,0(sp)
10007c28:	dec00304 	addi	sp,sp,12
10007c2c:	f800283a 	ret

10007c30 <printf>:
10007c30:	defffc04 	addi	sp,sp,-16
10007c34:	dfc00015 	stw	ra,0(sp)
10007c38:	d9400115 	stw	r5,4(sp)
10007c3c:	d9800215 	stw	r6,8(sp)
10007c40:	d9c00315 	stw	r7,12(sp)
10007c44:	008400b4 	movhi	r2,4098
10007c48:	10826d04 	addi	r2,r2,2484
10007c4c:	10800017 	ldw	r2,0(r2)
10007c50:	200b883a 	mov	r5,r4
10007c54:	d9800104 	addi	r6,sp,4
10007c58:	11000217 	ldw	r4,8(r2)
10007c5c:	0009de40 	call	10009de4 <__vfprintf_internal>
10007c60:	dfc00017 	ldw	ra,0(sp)
10007c64:	dec00404 	addi	sp,sp,16
10007c68:	f800283a 	ret

10007c6c <srand>:
10007c6c:	008400b4 	movhi	r2,4098
10007c70:	10826d04 	addi	r2,r2,2484
10007c74:	10800017 	ldw	r2,0(r2)
10007c78:	11002915 	stw	r4,164(r2)
10007c7c:	10002a15 	stw	zero,168(r2)
10007c80:	f800283a 	ret

10007c84 <rand>:
10007c84:	008400b4 	movhi	r2,4098
10007c88:	defffe04 	addi	sp,sp,-8
10007c8c:	10826d04 	addi	r2,r2,2484
10007c90:	dc000015 	stw	r16,0(sp)
10007c94:	14000017 	ldw	r16,0(r2)
10007c98:	dfc00115 	stw	ra,4(sp)
10007c9c:	01932574 	movhi	r6,19605
10007ca0:	81002917 	ldw	r4,164(r16)
10007ca4:	81402a17 	ldw	r5,168(r16)
10007ca8:	01d614b4 	movhi	r7,22610
10007cac:	319fcb44 	addi	r6,r6,32557
10007cb0:	39fd0b44 	addi	r7,r7,-3027
10007cb4:	0010ef80 	call	10010ef8 <__muldi3>
10007cb8:	11000044 	addi	r4,r2,1
10007cbc:	2085803a 	cmpltu	r2,r4,r2
10007cc0:	10c7883a 	add	r3,r2,r3
10007cc4:	00a00034 	movhi	r2,32768
10007cc8:	10bfffc4 	addi	r2,r2,-1
10007ccc:	1884703a 	and	r2,r3,r2
10007cd0:	81002915 	stw	r4,164(r16)
10007cd4:	80c02a15 	stw	r3,168(r16)
10007cd8:	dfc00117 	ldw	ra,4(sp)
10007cdc:	dc000017 	ldw	r16,0(sp)
10007ce0:	dec00204 	addi	sp,sp,8
10007ce4:	f800283a 	ret

10007ce8 <___vfprintf_internal_r>:
10007ce8:	defeb604 	addi	sp,sp,-1320
10007cec:	dfc14915 	stw	ra,1316(sp)
10007cf0:	ddc14715 	stw	r23,1308(sp)
10007cf4:	dd814615 	stw	r22,1304(sp)
10007cf8:	202f883a 	mov	r23,r4
10007cfc:	282d883a 	mov	r22,r5
10007d00:	d9812a15 	stw	r6,1192(sp)
10007d04:	d9c12d15 	stw	r7,1204(sp)
10007d08:	df014815 	stw	fp,1312(sp)
10007d0c:	dd414515 	stw	r21,1300(sp)
10007d10:	dd014415 	stw	r20,1296(sp)
10007d14:	dcc14315 	stw	r19,1292(sp)
10007d18:	dc814215 	stw	r18,1288(sp)
10007d1c:	dc414115 	stw	r17,1284(sp)
10007d20:	dc014015 	stw	r16,1280(sp)
10007d24:	000c4c40 	call	1000c4c4 <_localeconv_r>
10007d28:	10800017 	ldw	r2,0(r2)
10007d2c:	1009883a 	mov	r4,r2
10007d30:	d8813515 	stw	r2,1236(sp)
10007d34:	000e4180 	call	1000e418 <strlen>
10007d38:	d8813815 	stw	r2,1248(sp)
10007d3c:	b8000226 	beq	r23,zero,10007d48 <___vfprintf_internal_r+0x60>
10007d40:	b8800e17 	ldw	r2,56(r23)
10007d44:	10010526 	beq	r2,zero,1000815c <___vfprintf_internal_r+0x474>
10007d48:	b0c0030b 	ldhu	r3,12(r22)
10007d4c:	1908000c 	andi	r4,r3,8192
10007d50:	1805883a 	mov	r2,r3
10007d54:	2000071e 	bne	r4,zero,10007d74 <___vfprintf_internal_r+0x8c>
10007d58:	b1001917 	ldw	r4,100(r22)
10007d5c:	18880014 	ori	r2,r3,8192
10007d60:	00f7ffc4 	movi	r3,-8193
10007d64:	20c8703a 	and	r4,r4,r3
10007d68:	b080030d 	sth	r2,12(r22)
10007d6c:	1007883a 	mov	r3,r2
10007d70:	b1001915 	stw	r4,100(r22)
10007d74:	1100020c 	andi	r4,r2,8
10007d78:	2000a826 	beq	r4,zero,1000801c <___vfprintf_internal_r+0x334>
10007d7c:	b1000417 	ldw	r4,16(r22)
10007d80:	2000a626 	beq	r4,zero,1000801c <___vfprintf_internal_r+0x334>
10007d84:	1080068c 	andi	r2,r2,26
10007d88:	01000284 	movi	r4,10
10007d8c:	1100ac26 	beq	r2,r4,10008040 <___vfprintf_internal_r+0x358>
10007d90:	d8c10e04 	addi	r3,sp,1080
10007d94:	d9010dc4 	addi	r4,sp,1079
10007d98:	d9400404 	addi	r5,sp,16
10007d9c:	05040074 	movhi	r20,4097
10007da0:	1905c83a 	sub	r2,r3,r4
10007da4:	a511d084 	addi	r20,r20,18242
10007da8:	d8c12815 	stw	r3,1184(sp)
10007dac:	d9012915 	stw	r4,1188(sp)
10007db0:	d9411e15 	stw	r5,1144(sp)
10007db4:	d8012015 	stw	zero,1152(sp)
10007db8:	d8011f15 	stw	zero,1148(sp)
10007dbc:	d8013315 	stw	zero,1228(sp)
10007dc0:	d8013715 	stw	zero,1244(sp)
10007dc4:	d8013915 	stw	zero,1252(sp)
10007dc8:	d8013b15 	stw	zero,1260(sp)
10007dcc:	d8013a15 	stw	zero,1256(sp)
10007dd0:	d8012f15 	stw	zero,1212(sp)
10007dd4:	2811883a 	mov	r8,r5
10007dd8:	d8813c15 	stw	r2,1264(sp)
10007ddc:	d8c12a17 	ldw	r3,1192(sp)
10007de0:	18800007 	ldb	r2,0(r3)
10007de4:	10021326 	beq	r2,zero,10008634 <___vfprintf_internal_r+0x94c>
10007de8:	00c00944 	movi	r3,37
10007dec:	dc012a17 	ldw	r16,1192(sp)
10007df0:	10c0021e 	bne	r2,r3,10007dfc <___vfprintf_internal_r+0x114>
10007df4:	00001606 	br	10007e50 <___vfprintf_internal_r+0x168>
10007df8:	10c08526 	beq	r2,r3,10008010 <___vfprintf_internal_r+0x328>
10007dfc:	84000044 	addi	r16,r16,1
10007e00:	80800007 	ldb	r2,0(r16)
10007e04:	103ffc1e 	bne	r2,zero,10007df8 <__alt_data_end+0xf8007df8>
10007e08:	d9012a17 	ldw	r4,1192(sp)
10007e0c:	8123c83a 	sub	r17,r16,r4
10007e10:	88000f26 	beq	r17,zero,10007e50 <___vfprintf_internal_r+0x168>
10007e14:	d8812a17 	ldw	r2,1192(sp)
10007e18:	d8c12017 	ldw	r3,1152(sp)
10007e1c:	44400115 	stw	r17,4(r8)
10007e20:	40800015 	stw	r2,0(r8)
10007e24:	d8811f17 	ldw	r2,1148(sp)
10007e28:	1c47883a 	add	r3,r3,r17
10007e2c:	d8c12015 	stw	r3,1152(sp)
10007e30:	10800044 	addi	r2,r2,1
10007e34:	d8811f15 	stw	r2,1148(sp)
10007e38:	00c001c4 	movi	r3,7
10007e3c:	1880b516 	blt	r3,r2,10008114 <___vfprintf_internal_r+0x42c>
10007e40:	42000204 	addi	r8,r8,8
10007e44:	d8c12f17 	ldw	r3,1212(sp)
10007e48:	1c47883a 	add	r3,r3,r17
10007e4c:	d8c12f15 	stw	r3,1212(sp)
10007e50:	80800007 	ldb	r2,0(r16)
10007e54:	1000b626 	beq	r2,zero,10008130 <___vfprintf_internal_r+0x448>
10007e58:	80800044 	addi	r2,r16,1
10007e5c:	84000047 	ldb	r16,1(r16)
10007e60:	0027883a 	mov	r19,zero
10007e64:	0039883a 	mov	fp,zero
10007e68:	dcc12b05 	stb	r19,1196(sp)
10007e6c:	d8012785 	stb	zero,1182(sp)
10007e70:	027fffc4 	movi	r9,-1
10007e74:	d8012e15 	stw	zero,1208(sp)
10007e78:	04401604 	movi	r17,88
10007e7c:	04800244 	movi	r18,9
10007e80:	da012a15 	stw	r8,1192(sp)
10007e84:	e027883a 	mov	r19,fp
10007e88:	17000044 	addi	fp,r2,1
10007e8c:	80bff804 	addi	r2,r16,-32
10007e90:	88831236 	bltu	r17,r2,10008adc <___vfprintf_internal_r+0xdf4>
10007e94:	100490ba 	slli	r2,r2,2
10007e98:	01040034 	movhi	r4,4096
10007e9c:	211fab04 	addi	r4,r4,32428
10007ea0:	1105883a 	add	r2,r2,r4
10007ea4:	10800017 	ldw	r2,0(r2)
10007ea8:	1000683a 	jmp	r2
10007eac:	100089f8 	rdprs	zero,r2,551
10007eb0:	10008adc 	xori	zero,r2,555
10007eb4:	10008adc 	xori	zero,r2,555
10007eb8:	10008a14 	ori	zero,r2,552
10007ebc:	10008adc 	xori	zero,r2,555
10007ec0:	10008adc 	xori	zero,r2,555
10007ec4:	10008adc 	xori	zero,r2,555
10007ec8:	10008adc 	xori	zero,r2,555
10007ecc:	10008adc 	xori	zero,r2,555
10007ed0:	10008adc 	xori	zero,r2,555
10007ed4:	10008a24 	muli	zero,r2,552
10007ed8:	10008a4c 	andi	zero,r2,553
10007edc:	10008adc 	xori	zero,r2,555
10007ee0:	10008168 	cmpgeui	zero,r2,517
10007ee4:	10008178 	rdprs	zero,r2,517
10007ee8:	10008adc 	xori	zero,r2,555
10007eec:	100081c8 	cmpgei	zero,r2,519
10007ef0:	100081d8 	cmpnei	zero,r2,519
10007ef4:	100081d8 	cmpnei	zero,r2,519
10007ef8:	100081d8 	cmpnei	zero,r2,519
10007efc:	100081d8 	cmpnei	zero,r2,519
10007f00:	100081d8 	cmpnei	zero,r2,519
10007f04:	100081d8 	cmpnei	zero,r2,519
10007f08:	100081d8 	cmpnei	zero,r2,519
10007f0c:	100081d8 	cmpnei	zero,r2,519
10007f10:	100081d8 	cmpnei	zero,r2,519
10007f14:	10008adc 	xori	zero,r2,555
10007f18:	10008adc 	xori	zero,r2,555
10007f1c:	10008adc 	xori	zero,r2,555
10007f20:	10008adc 	xori	zero,r2,555
10007f24:	10008adc 	xori	zero,r2,555
10007f28:	10008adc 	xori	zero,r2,555
10007f2c:	10008adc 	xori	zero,r2,555
10007f30:	10008adc 	xori	zero,r2,555
10007f34:	10008adc 	xori	zero,r2,555
10007f38:	10008adc 	xori	zero,r2,555
10007f3c:	1000821c 	xori	zero,r2,520
10007f40:	1000863c 	xorhi	zero,r2,536
10007f44:	10008adc 	xori	zero,r2,555
10007f48:	1000863c 	xorhi	zero,r2,536
10007f4c:	10008adc 	xori	zero,r2,555
10007f50:	10008adc 	xori	zero,r2,555
10007f54:	10008adc 	xori	zero,r2,555
10007f58:	10008adc 	xori	zero,r2,555
10007f5c:	100086e4 	muli	zero,r2,539
10007f60:	10008adc 	xori	zero,r2,555
10007f64:	10008adc 	xori	zero,r2,555
10007f68:	100086f4 	orhi	zero,r2,539
10007f6c:	10008adc 	xori	zero,r2,555
10007f70:	10008adc 	xori	zero,r2,555
10007f74:	10008adc 	xori	zero,r2,555
10007f78:	10008adc 	xori	zero,r2,555
10007f7c:	10008adc 	xori	zero,r2,555
10007f80:	10008738 	rdprs	zero,r2,540
10007f84:	10008adc 	xori	zero,r2,555
10007f88:	10008adc 	xori	zero,r2,555
10007f8c:	10008770 	cmpltui	zero,r2,541
10007f90:	10008adc 	xori	zero,r2,555
10007f94:	10008adc 	xori	zero,r2,555
10007f98:	10008adc 	xori	zero,r2,555
10007f9c:	10008adc 	xori	zero,r2,555
10007fa0:	10008adc 	xori	zero,r2,555
10007fa4:	10008adc 	xori	zero,r2,555
10007fa8:	10008adc 	xori	zero,r2,555
10007fac:	10008adc 	xori	zero,r2,555
10007fb0:	10008adc 	xori	zero,r2,555
10007fb4:	10008adc 	xori	zero,r2,555
10007fb8:	100089ac 	andhi	zero,r2,550
10007fbc:	10008958 	cmpnei	zero,r2,549
10007fc0:	1000863c 	xorhi	zero,r2,536
10007fc4:	1000863c 	xorhi	zero,r2,536
10007fc8:	1000863c 	xorhi	zero,r2,536
10007fcc:	1000899c 	xori	zero,r2,550
10007fd0:	10008958 	cmpnei	zero,r2,549
10007fd4:	10008adc 	xori	zero,r2,555
10007fd8:	10008adc 	xori	zero,r2,555
10007fdc:	10008874 	orhi	zero,r2,545
10007fe0:	10008adc 	xori	zero,r2,555
10007fe4:	1000888c 	andi	zero,r2,546
10007fe8:	100088cc 	andi	zero,r2,547
10007fec:	1000890c 	andi	zero,r2,548
10007ff0:	100087d8 	cmpnei	zero,r2,543
10007ff4:	10008adc 	xori	zero,r2,555
10007ff8:	10008a60 	cmpeqi	zero,r2,553
10007ffc:	10008adc 	xori	zero,r2,555
10008000:	100087e8 	cmpgeui	zero,r2,543
10008004:	10008adc 	xori	zero,r2,555
10008008:	10008adc 	xori	zero,r2,555
1000800c:	10008828 	cmpgeui	zero,r2,544
10008010:	d9412a17 	ldw	r5,1192(sp)
10008014:	8163c83a 	sub	r17,r16,r5
10008018:	003f7d06 	br	10007e10 <__alt_data_end+0xf8007e10>
1000801c:	b809883a 	mov	r4,r23
10008020:	b00b883a 	mov	r5,r22
10008024:	0009e080 	call	10009e08 <__swsetup_r>
10008028:	10002d1e 	bne	r2,zero,100080e0 <___vfprintf_internal_r+0x3f8>
1000802c:	b0c0030b 	ldhu	r3,12(r22)
10008030:	01000284 	movi	r4,10
10008034:	1805883a 	mov	r2,r3
10008038:	1080068c 	andi	r2,r2,26
1000803c:	113f541e 	bne	r2,r4,10007d90 <__alt_data_end+0xf8007d90>
10008040:	b080038b 	ldhu	r2,14(r22)
10008044:	113fffcc 	andi	r4,r2,65535
10008048:	2120001c 	xori	r4,r4,32768
1000804c:	21200004 	addi	r4,r4,-32768
10008050:	203f4f16 	blt	r4,zero,10007d90 <__alt_data_end+0xf8007d90>
10008054:	b2c01917 	ldw	r11,100(r22)
10008058:	b2800717 	ldw	r10,28(r22)
1000805c:	b2400917 	ldw	r9,36(r22)
10008060:	d9812a17 	ldw	r6,1192(sp)
10008064:	d9c12d17 	ldw	r7,1204(sp)
10008068:	02010004 	movi	r8,1024
1000806c:	18ffff4c 	andi	r3,r3,65533
10008070:	d881078d 	sth	r2,1054(sp)
10008074:	b809883a 	mov	r4,r23
10008078:	d8800404 	addi	r2,sp,16
1000807c:	d9410404 	addi	r5,sp,1040
10008080:	d8c1070d 	sth	r3,1052(sp)
10008084:	dac11d15 	stw	r11,1140(sp)
10008088:	da810b15 	stw	r10,1068(sp)
1000808c:	da410d15 	stw	r9,1076(sp)
10008090:	d8810415 	stw	r2,1040(sp)
10008094:	d8810815 	stw	r2,1056(sp)
10008098:	da010615 	stw	r8,1048(sp)
1000809c:	da010915 	stw	r8,1060(sp)
100080a0:	d8010a15 	stw	zero,1064(sp)
100080a4:	0007ce80 	call	10007ce8 <___vfprintf_internal_r>
100080a8:	1021883a 	mov	r16,r2
100080ac:	10000416 	blt	r2,zero,100080c0 <___vfprintf_internal_r+0x3d8>
100080b0:	b809883a 	mov	r4,r23
100080b4:	d9410404 	addi	r5,sp,1040
100080b8:	000b8880 	call	1000b888 <_fflush_r>
100080bc:	1007301e 	bne	r2,zero,10009d80 <___vfprintf_internal_r+0x2098>
100080c0:	d881070b 	ldhu	r2,1052(sp)
100080c4:	1080100c 	andi	r2,r2,64
100080c8:	10000326 	beq	r2,zero,100080d8 <___vfprintf_internal_r+0x3f0>
100080cc:	b080030b 	ldhu	r2,12(r22)
100080d0:	10801014 	ori	r2,r2,64
100080d4:	b080030d 	sth	r2,12(r22)
100080d8:	8005883a 	mov	r2,r16
100080dc:	00000106 	br	100080e4 <___vfprintf_internal_r+0x3fc>
100080e0:	00bfffc4 	movi	r2,-1
100080e4:	dfc14917 	ldw	ra,1316(sp)
100080e8:	df014817 	ldw	fp,1312(sp)
100080ec:	ddc14717 	ldw	r23,1308(sp)
100080f0:	dd814617 	ldw	r22,1304(sp)
100080f4:	dd414517 	ldw	r21,1300(sp)
100080f8:	dd014417 	ldw	r20,1296(sp)
100080fc:	dcc14317 	ldw	r19,1292(sp)
10008100:	dc814217 	ldw	r18,1288(sp)
10008104:	dc414117 	ldw	r17,1284(sp)
10008108:	dc014017 	ldw	r16,1280(sp)
1000810c:	dec14a04 	addi	sp,sp,1320
10008110:	f800283a 	ret
10008114:	b809883a 	mov	r4,r23
10008118:	b00b883a 	mov	r5,r22
1000811c:	d9811e04 	addi	r6,sp,1144
10008120:	000e5ac0 	call	1000e5ac <__sprint_r>
10008124:	1000081e 	bne	r2,zero,10008148 <___vfprintf_internal_r+0x460>
10008128:	da000404 	addi	r8,sp,16
1000812c:	003f4506 	br	10007e44 <__alt_data_end+0xf8007e44>
10008130:	d8812017 	ldw	r2,1152(sp)
10008134:	10000426 	beq	r2,zero,10008148 <___vfprintf_internal_r+0x460>
10008138:	b809883a 	mov	r4,r23
1000813c:	b00b883a 	mov	r5,r22
10008140:	d9811e04 	addi	r6,sp,1144
10008144:	000e5ac0 	call	1000e5ac <__sprint_r>
10008148:	b080030b 	ldhu	r2,12(r22)
1000814c:	1080100c 	andi	r2,r2,64
10008150:	103fe31e 	bne	r2,zero,100080e0 <__alt_data_end+0xf80080e0>
10008154:	d8812f17 	ldw	r2,1212(sp)
10008158:	003fe206 	br	100080e4 <__alt_data_end+0xf80080e4>
1000815c:	b809883a 	mov	r4,r23
10008160:	000be440 	call	1000be44 <__sinit>
10008164:	003ef806 	br	10007d48 <__alt_data_end+0xf8007d48>
10008168:	e005883a 	mov	r2,fp
1000816c:	9cc00114 	ori	r19,r19,4
10008170:	e4000007 	ldb	r16,0(fp)
10008174:	003f4406 	br	10007e88 <__alt_data_end+0xf8007e88>
10008178:	e4000007 	ldb	r16,0(fp)
1000817c:	01000a84 	movi	r4,42
10008180:	e0800044 	addi	r2,fp,1
10008184:	8106f626 	beq	r16,r4,10009d60 <___vfprintf_internal_r+0x2078>
10008188:	857ff404 	addi	r21,r16,-48
1000818c:	1039883a 	mov	fp,r2
10008190:	0013883a 	mov	r9,zero
10008194:	957f3d36 	bltu	r18,r21,10007e8c <__alt_data_end+0xf8007e8c>
10008198:	0009883a 	mov	r4,zero
1000819c:	01400284 	movi	r5,10
100081a0:	0007bcc0 	call	10007bcc <__mulsi3>
100081a4:	e4000007 	ldb	r16,0(fp)
100081a8:	a889883a 	add	r4,r21,r2
100081ac:	e7000044 	addi	fp,fp,1
100081b0:	857ff404 	addi	r21,r16,-48
100081b4:	957ff92e 	bgeu	r18,r21,1000819c <__alt_data_end+0xf800819c>
100081b8:	2013883a 	mov	r9,r4
100081bc:	203f330e 	bge	r4,zero,10007e8c <__alt_data_end+0xf8007e8c>
100081c0:	027fffc4 	movi	r9,-1
100081c4:	003f3106 	br	10007e8c <__alt_data_end+0xf8007e8c>
100081c8:	9cc02014 	ori	r19,r19,128
100081cc:	e005883a 	mov	r2,fp
100081d0:	e4000007 	ldb	r16,0(fp)
100081d4:	003f2c06 	br	10007e88 <__alt_data_end+0xf8007e88>
100081d8:	857ff404 	addi	r21,r16,-48
100081dc:	d8012e15 	stw	zero,1208(sp)
100081e0:	e021883a 	mov	r16,fp
100081e4:	0009883a 	mov	r4,zero
100081e8:	da412c15 	stw	r9,1200(sp)
100081ec:	01400284 	movi	r5,10
100081f0:	0007bcc0 	call	10007bcc <__mulsi3>
100081f4:	81400007 	ldb	r5,0(r16)
100081f8:	1549883a 	add	r4,r2,r21
100081fc:	e7000044 	addi	fp,fp,1
10008200:	2d7ff404 	addi	r21,r5,-48
10008204:	e021883a 	mov	r16,fp
10008208:	957ff82e 	bgeu	r18,r21,100081ec <__alt_data_end+0xf80081ec>
1000820c:	2821883a 	mov	r16,r5
10008210:	d9012e15 	stw	r4,1208(sp)
10008214:	da412c17 	ldw	r9,1200(sp)
10008218:	003f1c06 	br	10007e8c <__alt_data_end+0xf8007e8c>
1000821c:	da012a17 	ldw	r8,1192(sp)
10008220:	df012a15 	stw	fp,1192(sp)
10008224:	9839883a 	mov	fp,r19
10008228:	dcc12b03 	ldbu	r19,1196(sp)
1000822c:	e7000414 	ori	fp,fp,16
10008230:	e080080c 	andi	r2,fp,32
10008234:	dcc12785 	stb	r19,1182(sp)
10008238:	d8c12d17 	ldw	r3,1204(sp)
1000823c:	1001ce26 	beq	r2,zero,10008978 <___vfprintf_internal_r+0xc90>
10008240:	d9012d17 	ldw	r4,1204(sp)
10008244:	18800117 	ldw	r2,4(r3)
10008248:	1c800017 	ldw	r18,0(r3)
1000824c:	21000204 	addi	r4,r4,8
10008250:	d9012d15 	stw	r4,1204(sp)
10008254:	102b883a 	mov	r21,r2
10008258:	10044916 	blt	r2,zero,10009380 <___vfprintf_internal_r+0x1698>
1000825c:	dcc12783 	ldbu	r19,1182(sp)
10008260:	da413215 	stw	r9,1224(sp)
10008264:	00800044 	movi	r2,1
10008268:	9546b03a 	or	r3,r18,r21
1000826c:	48000216 	blt	r9,zero,10008278 <___vfprintf_internal_r+0x590>
10008270:	013fdfc4 	movi	r4,-129
10008274:	e138703a 	and	fp,fp,r4
10008278:	1802251e 	bne	r3,zero,10008b10 <___vfprintf_internal_r+0xe28>
1000827c:	48031726 	beq	r9,zero,10008edc <___vfprintf_internal_r+0x11f4>
10008280:	10803fcc 	andi	r2,r2,255
10008284:	00c00044 	movi	r3,1
10008288:	10c24526 	beq	r2,r3,10008ba0 <___vfprintf_internal_r+0xeb8>
1000828c:	00c00084 	movi	r3,2
10008290:	10c33426 	beq	r2,r3,10008f64 <___vfprintf_internal_r+0x127c>
10008294:	d8c10e04 	addi	r3,sp,1080
10008298:	9008d0fa 	srli	r4,r18,3
1000829c:	a80a977a 	slli	r5,r21,29
100082a0:	a82ad0fa 	srli	r21,r21,3
100082a4:	948001cc 	andi	r18,r18,7
100082a8:	90800c04 	addi	r2,r18,48
100082ac:	18ffffc4 	addi	r3,r3,-1
100082b0:	2924b03a 	or	r18,r5,r4
100082b4:	18800005 	stb	r2,0(r3)
100082b8:	9548b03a 	or	r4,r18,r21
100082bc:	203ff61e 	bne	r4,zero,10008298 <__alt_data_end+0xf8008298>
100082c0:	e100004c 	andi	r4,fp,1
100082c4:	d8c13115 	stw	r3,1220(sp)
100082c8:	20039a1e 	bne	r4,zero,10009134 <___vfprintf_internal_r+0x144c>
100082cc:	d8812817 	ldw	r2,1184(sp)
100082d0:	10e3c83a 	sub	r17,r2,r3
100082d4:	8805883a 	mov	r2,r17
100082d8:	8a40010e 	bge	r17,r9,100082e0 <___vfprintf_internal_r+0x5f8>
100082dc:	4805883a 	mov	r2,r9
100082e0:	d8812b15 	stw	r2,1196(sp)
100082e4:	d8013415 	stw	zero,1232(sp)
100082e8:	98803fcc 	andi	r2,r19,255
100082ec:	1080201c 	xori	r2,r2,128
100082f0:	10bfe004 	addi	r2,r2,-128
100082f4:	10000326 	beq	r2,zero,10008304 <___vfprintf_internal_r+0x61c>
100082f8:	d8c12b17 	ldw	r3,1196(sp)
100082fc:	18c00044 	addi	r3,r3,1
10008300:	d8c12b15 	stw	r3,1196(sp)
10008304:	e0c0008c 	andi	r3,fp,2
10008308:	d8c12c15 	stw	r3,1200(sp)
1000830c:	18000326 	beq	r3,zero,1000831c <___vfprintf_internal_r+0x634>
10008310:	d8c12b17 	ldw	r3,1196(sp)
10008314:	18c00084 	addi	r3,r3,2
10008318:	d8c12b15 	stw	r3,1196(sp)
1000831c:	e0c0210c 	andi	r3,fp,132
10008320:	d8c13015 	stw	r3,1216(sp)
10008324:	1801f81e 	bne	r3,zero,10008b08 <___vfprintf_internal_r+0xe20>
10008328:	d9012e17 	ldw	r4,1208(sp)
1000832c:	d8c12b17 	ldw	r3,1196(sp)
10008330:	20ebc83a 	sub	r21,r4,r3
10008334:	0541f40e 	bge	zero,r21,10008b08 <___vfprintf_internal_r+0xe20>
10008338:	02400404 	movi	r9,16
1000833c:	d8c12017 	ldw	r3,1152(sp)
10008340:	d8811f17 	ldw	r2,1148(sp)
10008344:	4d45750e 	bge	r9,r21,1000991c <___vfprintf_internal_r+0x1c34>
10008348:	01440074 	movhi	r5,4097
1000834c:	2951d484 	addi	r5,r5,18258
10008350:	d9413615 	stw	r5,1240(sp)
10008354:	4827883a 	mov	r19,r9
10008358:	048001c4 	movi	r18,7
1000835c:	00000306 	br	1000836c <___vfprintf_internal_r+0x684>
10008360:	ad7ffc04 	addi	r21,r21,-16
10008364:	42000204 	addi	r8,r8,8
10008368:	9d40130e 	bge	r19,r21,100083b8 <___vfprintf_internal_r+0x6d0>
1000836c:	01040074 	movhi	r4,4097
10008370:	18c00404 	addi	r3,r3,16
10008374:	10800044 	addi	r2,r2,1
10008378:	2111d484 	addi	r4,r4,18258
1000837c:	41000015 	stw	r4,0(r8)
10008380:	44c00115 	stw	r19,4(r8)
10008384:	d8c12015 	stw	r3,1152(sp)
10008388:	d8811f15 	stw	r2,1148(sp)
1000838c:	90bff40e 	bge	r18,r2,10008360 <__alt_data_end+0xf8008360>
10008390:	b809883a 	mov	r4,r23
10008394:	b00b883a 	mov	r5,r22
10008398:	d9811e04 	addi	r6,sp,1144
1000839c:	000e5ac0 	call	1000e5ac <__sprint_r>
100083a0:	103f691e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
100083a4:	ad7ffc04 	addi	r21,r21,-16
100083a8:	d8c12017 	ldw	r3,1152(sp)
100083ac:	d8811f17 	ldw	r2,1148(sp)
100083b0:	da000404 	addi	r8,sp,16
100083b4:	9d7fed16 	blt	r19,r21,1000836c <__alt_data_end+0xf800836c>
100083b8:	d9413617 	ldw	r5,1240(sp)
100083bc:	a8c7883a 	add	r3,r21,r3
100083c0:	10800044 	addi	r2,r2,1
100083c4:	41400015 	stw	r5,0(r8)
100083c8:	45400115 	stw	r21,4(r8)
100083cc:	d8c12015 	stw	r3,1152(sp)
100083d0:	d8811f15 	stw	r2,1148(sp)
100083d4:	010001c4 	movi	r4,7
100083d8:	20832b16 	blt	r4,r2,10009088 <___vfprintf_internal_r+0x13a0>
100083dc:	d8812787 	ldb	r2,1182(sp)
100083e0:	42000204 	addi	r8,r8,8
100083e4:	10000c26 	beq	r2,zero,10008418 <___vfprintf_internal_r+0x730>
100083e8:	d8811f17 	ldw	r2,1148(sp)
100083ec:	d9012784 	addi	r4,sp,1182
100083f0:	18c00044 	addi	r3,r3,1
100083f4:	10800044 	addi	r2,r2,1
100083f8:	41000015 	stw	r4,0(r8)
100083fc:	01000044 	movi	r4,1
10008400:	41000115 	stw	r4,4(r8)
10008404:	d8c12015 	stw	r3,1152(sp)
10008408:	d8811f15 	stw	r2,1148(sp)
1000840c:	010001c4 	movi	r4,7
10008410:	2082c416 	blt	r4,r2,10008f24 <___vfprintf_internal_r+0x123c>
10008414:	42000204 	addi	r8,r8,8
10008418:	d8812c17 	ldw	r2,1200(sp)
1000841c:	10000c26 	beq	r2,zero,10008450 <___vfprintf_internal_r+0x768>
10008420:	d8811f17 	ldw	r2,1148(sp)
10008424:	d9012704 	addi	r4,sp,1180
10008428:	18c00084 	addi	r3,r3,2
1000842c:	10800044 	addi	r2,r2,1
10008430:	41000015 	stw	r4,0(r8)
10008434:	01000084 	movi	r4,2
10008438:	41000115 	stw	r4,4(r8)
1000843c:	d8c12015 	stw	r3,1152(sp)
10008440:	d8811f15 	stw	r2,1148(sp)
10008444:	010001c4 	movi	r4,7
10008448:	2082be16 	blt	r4,r2,10008f44 <___vfprintf_internal_r+0x125c>
1000844c:	42000204 	addi	r8,r8,8
10008450:	d9013017 	ldw	r4,1216(sp)
10008454:	00802004 	movi	r2,128
10008458:	20822026 	beq	r4,r2,10008cdc <___vfprintf_internal_r+0xff4>
1000845c:	d9413217 	ldw	r5,1224(sp)
10008460:	2c67c83a 	sub	r19,r5,r17
10008464:	04c0260e 	bge	zero,r19,10008500 <___vfprintf_internal_r+0x818>
10008468:	05400404 	movi	r21,16
1000846c:	d8811f17 	ldw	r2,1148(sp)
10008470:	acc4720e 	bge	r21,r19,1000963c <___vfprintf_internal_r+0x1954>
10008474:	01440074 	movhi	r5,4097
10008478:	2951d084 	addi	r5,r5,18242
1000847c:	d9412c15 	stw	r5,1200(sp)
10008480:	048001c4 	movi	r18,7
10008484:	00000306 	br	10008494 <___vfprintf_internal_r+0x7ac>
10008488:	9cfffc04 	addi	r19,r19,-16
1000848c:	42000204 	addi	r8,r8,8
10008490:	acc0110e 	bge	r21,r19,100084d8 <___vfprintf_internal_r+0x7f0>
10008494:	18c00404 	addi	r3,r3,16
10008498:	10800044 	addi	r2,r2,1
1000849c:	45000015 	stw	r20,0(r8)
100084a0:	45400115 	stw	r21,4(r8)
100084a4:	d8c12015 	stw	r3,1152(sp)
100084a8:	d8811f15 	stw	r2,1148(sp)
100084ac:	90bff60e 	bge	r18,r2,10008488 <__alt_data_end+0xf8008488>
100084b0:	b809883a 	mov	r4,r23
100084b4:	b00b883a 	mov	r5,r22
100084b8:	d9811e04 	addi	r6,sp,1144
100084bc:	000e5ac0 	call	1000e5ac <__sprint_r>
100084c0:	103f211e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
100084c4:	9cfffc04 	addi	r19,r19,-16
100084c8:	d8c12017 	ldw	r3,1152(sp)
100084cc:	d8811f17 	ldw	r2,1148(sp)
100084d0:	da000404 	addi	r8,sp,16
100084d4:	acffef16 	blt	r21,r19,10008494 <__alt_data_end+0xf8008494>
100084d8:	d9012c17 	ldw	r4,1200(sp)
100084dc:	1cc7883a 	add	r3,r3,r19
100084e0:	10800044 	addi	r2,r2,1
100084e4:	41000015 	stw	r4,0(r8)
100084e8:	44c00115 	stw	r19,4(r8)
100084ec:	d8c12015 	stw	r3,1152(sp)
100084f0:	d8811f15 	stw	r2,1148(sp)
100084f4:	010001c4 	movi	r4,7
100084f8:	20828216 	blt	r4,r2,10008f04 <___vfprintf_internal_r+0x121c>
100084fc:	42000204 	addi	r8,r8,8
10008500:	e080400c 	andi	r2,fp,256
10008504:	1001ac1e 	bne	r2,zero,10008bb8 <___vfprintf_internal_r+0xed0>
10008508:	d8811f17 	ldw	r2,1148(sp)
1000850c:	d9413117 	ldw	r5,1220(sp)
10008510:	1c47883a 	add	r3,r3,r17
10008514:	10800044 	addi	r2,r2,1
10008518:	41400015 	stw	r5,0(r8)
1000851c:	44400115 	stw	r17,4(r8)
10008520:	d8c12015 	stw	r3,1152(sp)
10008524:	d8811f15 	stw	r2,1148(sp)
10008528:	010001c4 	movi	r4,7
1000852c:	20825d16 	blt	r4,r2,10008ea4 <___vfprintf_internal_r+0x11bc>
10008530:	42000204 	addi	r8,r8,8
10008534:	e080010c 	andi	r2,fp,4
10008538:	10003126 	beq	r2,zero,10008600 <___vfprintf_internal_r+0x918>
1000853c:	d8812e17 	ldw	r2,1208(sp)
10008540:	d9012b17 	ldw	r4,1196(sp)
10008544:	1121c83a 	sub	r16,r2,r4
10008548:	04002d0e 	bge	zero,r16,10008600 <___vfprintf_internal_r+0x918>
1000854c:	04400404 	movi	r17,16
10008550:	d8811f17 	ldw	r2,1148(sp)
10008554:	8c05340e 	bge	r17,r16,10009a28 <___vfprintf_internal_r+0x1d40>
10008558:	01040074 	movhi	r4,4097
1000855c:	2111d484 	addi	r4,r4,18258
10008560:	d9013615 	stw	r4,1240(sp)
10008564:	048001c4 	movi	r18,7
10008568:	00000306 	br	10008578 <___vfprintf_internal_r+0x890>
1000856c:	843ffc04 	addi	r16,r16,-16
10008570:	42000204 	addi	r8,r8,8
10008574:	8c00130e 	bge	r17,r16,100085c4 <___vfprintf_internal_r+0x8dc>
10008578:	01440074 	movhi	r5,4097
1000857c:	18c00404 	addi	r3,r3,16
10008580:	10800044 	addi	r2,r2,1
10008584:	2951d484 	addi	r5,r5,18258
10008588:	41400015 	stw	r5,0(r8)
1000858c:	44400115 	stw	r17,4(r8)
10008590:	d8c12015 	stw	r3,1152(sp)
10008594:	d8811f15 	stw	r2,1148(sp)
10008598:	90bff40e 	bge	r18,r2,1000856c <__alt_data_end+0xf800856c>
1000859c:	b809883a 	mov	r4,r23
100085a0:	b00b883a 	mov	r5,r22
100085a4:	d9811e04 	addi	r6,sp,1144
100085a8:	000e5ac0 	call	1000e5ac <__sprint_r>
100085ac:	103ee61e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
100085b0:	843ffc04 	addi	r16,r16,-16
100085b4:	d8c12017 	ldw	r3,1152(sp)
100085b8:	d8811f17 	ldw	r2,1148(sp)
100085bc:	da000404 	addi	r8,sp,16
100085c0:	8c3fed16 	blt	r17,r16,10008578 <__alt_data_end+0xf8008578>
100085c4:	d9013617 	ldw	r4,1240(sp)
100085c8:	1c07883a 	add	r3,r3,r16
100085cc:	10800044 	addi	r2,r2,1
100085d0:	41000015 	stw	r4,0(r8)
100085d4:	44000115 	stw	r16,4(r8)
100085d8:	d8c12015 	stw	r3,1152(sp)
100085dc:	d8811f15 	stw	r2,1148(sp)
100085e0:	010001c4 	movi	r4,7
100085e4:	2080060e 	bge	r4,r2,10008600 <___vfprintf_internal_r+0x918>
100085e8:	b809883a 	mov	r4,r23
100085ec:	b00b883a 	mov	r5,r22
100085f0:	d9811e04 	addi	r6,sp,1144
100085f4:	000e5ac0 	call	1000e5ac <__sprint_r>
100085f8:	103ed31e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
100085fc:	d8c12017 	ldw	r3,1152(sp)
10008600:	df012b17 	ldw	fp,1196(sp)
10008604:	d9412e17 	ldw	r5,1208(sp)
10008608:	e140010e 	bge	fp,r5,10008610 <___vfprintf_internal_r+0x928>
1000860c:	2839883a 	mov	fp,r5
10008610:	d8812f17 	ldw	r2,1212(sp)
10008614:	1705883a 	add	r2,r2,fp
10008618:	d8812f15 	stw	r2,1212(sp)
1000861c:	1802291e 	bne	r3,zero,10008ec4 <___vfprintf_internal_r+0x11dc>
10008620:	d8c12a17 	ldw	r3,1192(sp)
10008624:	d8011f15 	stw	zero,1148(sp)
10008628:	da000404 	addi	r8,sp,16
1000862c:	18800007 	ldb	r2,0(r3)
10008630:	103ded1e 	bne	r2,zero,10007de8 <__alt_data_end+0xf8007de8>
10008634:	dc012a17 	ldw	r16,1192(sp)
10008638:	003e0506 	br	10007e50 <__alt_data_end+0xf8007e50>
1000863c:	d9012d17 	ldw	r4,1204(sp)
10008640:	d9412d17 	ldw	r5,1204(sp)
10008644:	da012a17 	ldw	r8,1192(sp)
10008648:	21000017 	ldw	r4,0(r4)
1000864c:	29400117 	ldw	r5,4(r5)
10008650:	df012a15 	stw	fp,1192(sp)
10008654:	9839883a 	mov	fp,r19
10008658:	dcc12b03 	ldbu	r19,1196(sp)
1000865c:	d9013715 	stw	r4,1244(sp)
10008660:	d9413915 	stw	r5,1252(sp)
10008664:	da013f15 	stw	r8,1276(sp)
10008668:	da413e15 	stw	r9,1272(sp)
1000866c:	dcc12785 	stb	r19,1182(sp)
10008670:	0004ef40 	call	10004ef4 <__fpclassifyd>
10008674:	d8c12d17 	ldw	r3,1204(sp)
10008678:	04400044 	movi	r17,1
1000867c:	da013f17 	ldw	r8,1276(sp)
10008680:	1c800204 	addi	r18,r3,8
10008684:	da413e17 	ldw	r9,1272(sp)
10008688:	d9013717 	ldw	r4,1244(sp)
1000868c:	d9413917 	ldw	r5,1252(sp)
10008690:	1443451e 	bne	r2,r17,100093a8 <___vfprintf_internal_r+0x16c0>
10008694:	000d883a 	mov	r6,zero
10008698:	000f883a 	mov	r7,zero
1000869c:	00067f40 	call	100067f4 <__ledf2>
100086a0:	da013f17 	ldw	r8,1276(sp)
100086a4:	1004fe16 	blt	r2,zero,10009aa0 <___vfprintf_internal_r+0x1db8>
100086a8:	dcc12783 	ldbu	r19,1182(sp)
100086ac:	008011c4 	movi	r2,71
100086b0:	14045d0e 	bge	r2,r16,10009828 <___vfprintf_internal_r+0x1b40>
100086b4:	01440074 	movhi	r5,4097
100086b8:	2951c104 	addi	r5,r5,18180
100086bc:	d9413115 	stw	r5,1220(sp)
100086c0:	00c000c4 	movi	r3,3
100086c4:	00bfdfc4 	movi	r2,-129
100086c8:	d8c12b15 	stw	r3,1196(sp)
100086cc:	e0b8703a 	and	fp,fp,r2
100086d0:	dc812d15 	stw	r18,1204(sp)
100086d4:	1823883a 	mov	r17,r3
100086d8:	d8013215 	stw	zero,1224(sp)
100086dc:	d8013415 	stw	zero,1232(sp)
100086e0:	003f0106 	br	100082e8 <__alt_data_end+0xf80082e8>
100086e4:	9cc00214 	ori	r19,r19,8
100086e8:	e005883a 	mov	r2,fp
100086ec:	e4000007 	ldb	r16,0(fp)
100086f0:	003de506 	br	10007e88 <__alt_data_end+0xf8007e88>
100086f4:	da012a17 	ldw	r8,1192(sp)
100086f8:	df012a15 	stw	fp,1192(sp)
100086fc:	9f000414 	ori	fp,r19,16
10008700:	e0c0080c 	andi	r3,fp,32
10008704:	d8812d17 	ldw	r2,1204(sp)
10008708:	18007626 	beq	r3,zero,100088e4 <___vfprintf_internal_r+0xbfc>
1000870c:	d9412d17 	ldw	r5,1204(sp)
10008710:	14800017 	ldw	r18,0(r2)
10008714:	15400117 	ldw	r21,4(r2)
10008718:	29400204 	addi	r5,r5,8
1000871c:	d9412d15 	stw	r5,1204(sp)
10008720:	0005883a 	mov	r2,zero
10008724:	9546b03a 	or	r3,r18,r21
10008728:	d8012785 	stb	zero,1182(sp)
1000872c:	da413215 	stw	r9,1224(sp)
10008730:	0027883a 	mov	r19,zero
10008734:	003ecd06 	br	1000826c <__alt_data_end+0xf800826c>
10008738:	da012a17 	ldw	r8,1192(sp)
1000873c:	df012a15 	stw	fp,1192(sp)
10008740:	9f000414 	ori	fp,r19,16
10008744:	e0c0080c 	andi	r3,fp,32
10008748:	d8812d17 	ldw	r2,1204(sp)
1000874c:	18002c26 	beq	r3,zero,10008800 <___vfprintf_internal_r+0xb18>
10008750:	d9012d17 	ldw	r4,1204(sp)
10008754:	14800017 	ldw	r18,0(r2)
10008758:	15400117 	ldw	r21,4(r2)
1000875c:	21000204 	addi	r4,r4,8
10008760:	d9012d15 	stw	r4,1204(sp)
10008764:	00800044 	movi	r2,1
10008768:	9546b03a 	or	r3,r18,r21
1000876c:	003fee06 	br	10008728 <__alt_data_end+0xf8008728>
10008770:	da012a17 	ldw	r8,1192(sp)
10008774:	df012a15 	stw	fp,1192(sp)
10008778:	9839883a 	mov	fp,r19
1000877c:	dcc12b03 	ldbu	r19,1196(sp)
10008780:	01440074 	movhi	r5,4097
10008784:	2951c404 	addi	r5,r5,18192
10008788:	dcc12785 	stb	r19,1182(sp)
1000878c:	d9413b15 	stw	r5,1260(sp)
10008790:	e0c0080c 	andi	r3,fp,32
10008794:	d8812d17 	ldw	r2,1204(sp)
10008798:	18002e26 	beq	r3,zero,10008854 <___vfprintf_internal_r+0xb6c>
1000879c:	d9412d17 	ldw	r5,1204(sp)
100087a0:	14800017 	ldw	r18,0(r2)
100087a4:	15400117 	ldw	r21,4(r2)
100087a8:	29400204 	addi	r5,r5,8
100087ac:	d9412d15 	stw	r5,1204(sp)
100087b0:	e080004c 	andi	r2,fp,1
100087b4:	10025c26 	beq	r2,zero,10009128 <___vfprintf_internal_r+0x1440>
100087b8:	9546b03a 	or	r3,r18,r21
100087bc:	18038f26 	beq	r3,zero,100095fc <___vfprintf_internal_r+0x1914>
100087c0:	00800c04 	movi	r2,48
100087c4:	d8812705 	stb	r2,1180(sp)
100087c8:	dc012745 	stb	r16,1181(sp)
100087cc:	e7000094 	ori	fp,fp,2
100087d0:	00800084 	movi	r2,2
100087d4:	003fd406 	br	10008728 <__alt_data_end+0xf8008728>
100087d8:	9cc00814 	ori	r19,r19,32
100087dc:	e005883a 	mov	r2,fp
100087e0:	e4000007 	ldb	r16,0(fp)
100087e4:	003da806 	br	10007e88 <__alt_data_end+0xf8007e88>
100087e8:	da012a17 	ldw	r8,1192(sp)
100087ec:	df012a15 	stw	fp,1192(sp)
100087f0:	9839883a 	mov	fp,r19
100087f4:	e0c0080c 	andi	r3,fp,32
100087f8:	d8812d17 	ldw	r2,1204(sp)
100087fc:	183fd41e 	bne	r3,zero,10008750 <__alt_data_end+0xf8008750>
10008800:	e0c0040c 	andi	r3,fp,16
10008804:	18035f26 	beq	r3,zero,10009584 <___vfprintf_internal_r+0x189c>
10008808:	d9412d17 	ldw	r5,1204(sp)
1000880c:	14800017 	ldw	r18,0(r2)
10008810:	002b883a 	mov	r21,zero
10008814:	29400104 	addi	r5,r5,4
10008818:	d9412d15 	stw	r5,1204(sp)
1000881c:	00800044 	movi	r2,1
10008820:	9007883a 	mov	r3,r18
10008824:	003fc006 	br	10008728 <__alt_data_end+0xf8008728>
10008828:	da012a17 	ldw	r8,1192(sp)
1000882c:	df012a15 	stw	fp,1192(sp)
10008830:	9839883a 	mov	fp,r19
10008834:	dcc12b03 	ldbu	r19,1196(sp)
10008838:	01040074 	movhi	r4,4097
1000883c:	2111c904 	addi	r4,r4,18212
10008840:	d9013b15 	stw	r4,1260(sp)
10008844:	dcc12785 	stb	r19,1182(sp)
10008848:	e0c0080c 	andi	r3,fp,32
1000884c:	d8812d17 	ldw	r2,1204(sp)
10008850:	183fd21e 	bne	r3,zero,1000879c <__alt_data_end+0xf800879c>
10008854:	e0c0040c 	andi	r3,fp,16
10008858:	18035426 	beq	r3,zero,100095ac <___vfprintf_internal_r+0x18c4>
1000885c:	d8c12d17 	ldw	r3,1204(sp)
10008860:	14800017 	ldw	r18,0(r2)
10008864:	002b883a 	mov	r21,zero
10008868:	18c00104 	addi	r3,r3,4
1000886c:	d8c12d15 	stw	r3,1204(sp)
10008870:	003fcf06 	br	100087b0 <__alt_data_end+0xf80087b0>
10008874:	e4000007 	ldb	r16,0(fp)
10008878:	00801b04 	movi	r2,108
1000887c:	8083f726 	beq	r16,r2,1000985c <___vfprintf_internal_r+0x1b74>
10008880:	9cc00414 	ori	r19,r19,16
10008884:	e005883a 	mov	r2,fp
10008888:	003d7f06 	br	10007e88 <__alt_data_end+0xf8007e88>
1000888c:	da012a17 	ldw	r8,1192(sp)
10008890:	df012a15 	stw	fp,1192(sp)
10008894:	9839883a 	mov	fp,r19
10008898:	dcc12b03 	ldbu	r19,1196(sp)
1000889c:	e080080c 	andi	r2,fp,32
100088a0:	dcc12785 	stb	r19,1182(sp)
100088a4:	10032226 	beq	r2,zero,10009530 <___vfprintf_internal_r+0x1848>
100088a8:	d9412d17 	ldw	r5,1204(sp)
100088ac:	d9012f17 	ldw	r4,1212(sp)
100088b0:	28800017 	ldw	r2,0(r5)
100088b4:	2007d7fa 	srai	r3,r4,31
100088b8:	29400104 	addi	r5,r5,4
100088bc:	d9412d15 	stw	r5,1204(sp)
100088c0:	11000015 	stw	r4,0(r2)
100088c4:	10c00115 	stw	r3,4(r2)
100088c8:	003d4406 	br	10007ddc <__alt_data_end+0xf8007ddc>
100088cc:	da012a17 	ldw	r8,1192(sp)
100088d0:	df012a15 	stw	fp,1192(sp)
100088d4:	9839883a 	mov	fp,r19
100088d8:	e0c0080c 	andi	r3,fp,32
100088dc:	d8812d17 	ldw	r2,1204(sp)
100088e0:	183f8a1e 	bne	r3,zero,1000870c <__alt_data_end+0xf800870c>
100088e4:	e0c0040c 	andi	r3,fp,16
100088e8:	18031c26 	beq	r3,zero,1000955c <___vfprintf_internal_r+0x1874>
100088ec:	14800017 	ldw	r18,0(r2)
100088f0:	d8812d17 	ldw	r2,1204(sp)
100088f4:	002b883a 	mov	r21,zero
100088f8:	9007883a 	mov	r3,r18
100088fc:	10800104 	addi	r2,r2,4
10008900:	d8812d15 	stw	r2,1204(sp)
10008904:	0005883a 	mov	r2,zero
10008908:	003f8706 	br	10008728 <__alt_data_end+0xf8008728>
1000890c:	d9412d17 	ldw	r5,1204(sp)
10008910:	00800c04 	movi	r2,48
10008914:	d8812705 	stb	r2,1180(sp)
10008918:	2c800017 	ldw	r18,0(r5)
1000891c:	00801e04 	movi	r2,120
10008920:	d8812745 	stb	r2,1181(sp)
10008924:	00840074 	movhi	r2,4097
10008928:	1091c904 	addi	r2,r2,18212
1000892c:	29400104 	addi	r5,r5,4
10008930:	da012a17 	ldw	r8,1192(sp)
10008934:	d8813b15 	stw	r2,1260(sp)
10008938:	df012a15 	stw	fp,1192(sp)
1000893c:	002b883a 	mov	r21,zero
10008940:	9f000094 	ori	fp,r19,2
10008944:	d9412d15 	stw	r5,1204(sp)
10008948:	00800084 	movi	r2,2
1000894c:	04001e04 	movi	r16,120
10008950:	9007883a 	mov	r3,r18
10008954:	003f7406 	br	10008728 <__alt_data_end+0xf8008728>
10008958:	da012a17 	ldw	r8,1192(sp)
1000895c:	df012a15 	stw	fp,1192(sp)
10008960:	9839883a 	mov	fp,r19
10008964:	dcc12b03 	ldbu	r19,1196(sp)
10008968:	e080080c 	andi	r2,fp,32
1000896c:	d8c12d17 	ldw	r3,1204(sp)
10008970:	dcc12785 	stb	r19,1182(sp)
10008974:	103e321e 	bne	r2,zero,10008240 <__alt_data_end+0xf8008240>
10008978:	e080040c 	andi	r2,fp,16
1000897c:	10031326 	beq	r2,zero,100095cc <___vfprintf_internal_r+0x18e4>
10008980:	1c800017 	ldw	r18,0(r3)
10008984:	d9412d17 	ldw	r5,1204(sp)
10008988:	902bd7fa 	srai	r21,r18,31
1000898c:	29400104 	addi	r5,r5,4
10008990:	d9412d15 	stw	r5,1204(sp)
10008994:	a805883a 	mov	r2,r21
10008998:	003e2f06 	br	10008258 <__alt_data_end+0xf8008258>
1000899c:	9cc01014 	ori	r19,r19,64
100089a0:	e005883a 	mov	r2,fp
100089a4:	e4000007 	ldb	r16,0(fp)
100089a8:	003d3706 	br	10007e88 <__alt_data_end+0xf8007e88>
100089ac:	d8c12d17 	ldw	r3,1204(sp)
100089b0:	d9012d17 	ldw	r4,1204(sp)
100089b4:	da012a17 	ldw	r8,1192(sp)
100089b8:	18800017 	ldw	r2,0(r3)
100089bc:	21000104 	addi	r4,r4,4
100089c0:	00c00044 	movi	r3,1
100089c4:	df012a15 	stw	fp,1192(sp)
100089c8:	d8c12b15 	stw	r3,1196(sp)
100089cc:	9839883a 	mov	fp,r19
100089d0:	d8012785 	stb	zero,1182(sp)
100089d4:	d8810405 	stb	r2,1040(sp)
100089d8:	d9012d15 	stw	r4,1204(sp)
100089dc:	1823883a 	mov	r17,r3
100089e0:	d8c10404 	addi	r3,sp,1040
100089e4:	d8013215 	stw	zero,1224(sp)
100089e8:	d8013415 	stw	zero,1232(sp)
100089ec:	d8c13115 	stw	r3,1220(sp)
100089f0:	0005883a 	mov	r2,zero
100089f4:	003e4306 	br	10008304 <__alt_data_end+0xf8008304>
100089f8:	d8812b07 	ldb	r2,1196(sp)
100089fc:	1002fc1e 	bne	r2,zero,100095f0 <___vfprintf_internal_r+0x1908>
10008a00:	00c00804 	movi	r3,32
10008a04:	d8c12b05 	stb	r3,1196(sp)
10008a08:	e005883a 	mov	r2,fp
10008a0c:	e4000007 	ldb	r16,0(fp)
10008a10:	003d1d06 	br	10007e88 <__alt_data_end+0xf8007e88>
10008a14:	9cc00054 	ori	r19,r19,1
10008a18:	e005883a 	mov	r2,fp
10008a1c:	e4000007 	ldb	r16,0(fp)
10008a20:	003d1906 	br	10007e88 <__alt_data_end+0xf8007e88>
10008a24:	d9012d17 	ldw	r4,1204(sp)
10008a28:	d9412d17 	ldw	r5,1204(sp)
10008a2c:	21000017 	ldw	r4,0(r4)
10008a30:	28c00104 	addi	r3,r5,4
10008a34:	d9012e15 	stw	r4,1208(sp)
10008a38:	20038c16 	blt	r4,zero,1000986c <___vfprintf_internal_r+0x1b84>
10008a3c:	d8c12d15 	stw	r3,1204(sp)
10008a40:	e005883a 	mov	r2,fp
10008a44:	e4000007 	ldb	r16,0(fp)
10008a48:	003d0f06 	br	10007e88 <__alt_data_end+0xf8007e88>
10008a4c:	00c00ac4 	movi	r3,43
10008a50:	d8c12b05 	stb	r3,1196(sp)
10008a54:	e005883a 	mov	r2,fp
10008a58:	e4000007 	ldb	r16,0(fp)
10008a5c:	003d0a06 	br	10007e88 <__alt_data_end+0xf8007e88>
10008a60:	d8c12d17 	ldw	r3,1204(sp)
10008a64:	d9012d17 	ldw	r4,1204(sp)
10008a68:	da012a17 	ldw	r8,1192(sp)
10008a6c:	18c00017 	ldw	r3,0(r3)
10008a70:	df012a15 	stw	fp,1192(sp)
10008a74:	d8012785 	stb	zero,1182(sp)
10008a78:	d8c13115 	stw	r3,1220(sp)
10008a7c:	9839883a 	mov	fp,r19
10008a80:	24800104 	addi	r18,r4,4
10008a84:	1803f726 	beq	r3,zero,10009a64 <___vfprintf_internal_r+0x1d7c>
10008a88:	d9013117 	ldw	r4,1220(sp)
10008a8c:	48038916 	blt	r9,zero,100098b4 <___vfprintf_internal_r+0x1bcc>
10008a90:	480d883a 	mov	r6,r9
10008a94:	000b883a 	mov	r5,zero
10008a98:	da013f15 	stw	r8,1276(sp)
10008a9c:	da413e15 	stw	r9,1272(sp)
10008aa0:	000ce580 	call	1000ce58 <memchr>
10008aa4:	da013f17 	ldw	r8,1276(sp)
10008aa8:	da413e17 	ldw	r9,1272(sp)
10008aac:	10045926 	beq	r2,zero,10009c14 <___vfprintf_internal_r+0x1f2c>
10008ab0:	d8c13117 	ldw	r3,1220(sp)
10008ab4:	10e3c83a 	sub	r17,r2,r3
10008ab8:	4c433516 	blt	r9,r17,10009790 <___vfprintf_internal_r+0x1aa8>
10008abc:	8805883a 	mov	r2,r17
10008ac0:	88038116 	blt	r17,zero,100098c8 <___vfprintf_internal_r+0x1be0>
10008ac4:	dcc12783 	ldbu	r19,1182(sp)
10008ac8:	d8812b15 	stw	r2,1196(sp)
10008acc:	dc812d15 	stw	r18,1204(sp)
10008ad0:	d8013215 	stw	zero,1224(sp)
10008ad4:	d8013415 	stw	zero,1232(sp)
10008ad8:	003e0306 	br	100082e8 <__alt_data_end+0xf80082e8>
10008adc:	da012a17 	ldw	r8,1192(sp)
10008ae0:	df012a15 	stw	fp,1192(sp)
10008ae4:	9839883a 	mov	fp,r19
10008ae8:	dcc12b03 	ldbu	r19,1196(sp)
10008aec:	dcc12785 	stb	r19,1182(sp)
10008af0:	803d8f26 	beq	r16,zero,10008130 <__alt_data_end+0xf8008130>
10008af4:	00c00044 	movi	r3,1
10008af8:	d8c12b15 	stw	r3,1196(sp)
10008afc:	dc010405 	stb	r16,1040(sp)
10008b00:	d8012785 	stb	zero,1182(sp)
10008b04:	003fb506 	br	100089dc <__alt_data_end+0xf80089dc>
10008b08:	d8c12017 	ldw	r3,1152(sp)
10008b0c:	003e3506 	br	100083e4 <__alt_data_end+0xf80083e4>
10008b10:	10803fcc 	andi	r2,r2,255
10008b14:	00c00044 	movi	r3,1
10008b18:	10fddc1e 	bne	r2,r3,1000828c <__alt_data_end+0xf800828c>
10008b1c:	a800021e 	bne	r21,zero,10008b28 <___vfprintf_internal_r+0xe40>
10008b20:	00800244 	movi	r2,9
10008b24:	14801e2e 	bgeu	r2,r18,10008ba0 <___vfprintf_internal_r+0xeb8>
10008b28:	dc012b15 	stw	r16,1196(sp)
10008b2c:	dc410e04 	addi	r17,sp,1080
10008b30:	9021883a 	mov	r16,r18
10008b34:	da012c15 	stw	r8,1200(sp)
10008b38:	a825883a 	mov	r18,r21
10008b3c:	482b883a 	mov	r21,r9
10008b40:	8009883a 	mov	r4,r16
10008b44:	900b883a 	mov	r5,r18
10008b48:	01800284 	movi	r6,10
10008b4c:	000f883a 	mov	r7,zero
10008b50:	00116440 	call	10011644 <__umoddi3>
10008b54:	10800c04 	addi	r2,r2,48
10008b58:	8c7fffc4 	addi	r17,r17,-1
10008b5c:	8009883a 	mov	r4,r16
10008b60:	900b883a 	mov	r5,r18
10008b64:	01800284 	movi	r6,10
10008b68:	000f883a 	mov	r7,zero
10008b6c:	88800005 	stb	r2,0(r17)
10008b70:	00110040 	call	10011004 <__udivdi3>
10008b74:	1021883a 	mov	r16,r2
10008b78:	10c4b03a 	or	r2,r2,r3
10008b7c:	1825883a 	mov	r18,r3
10008b80:	103fef1e 	bne	r2,zero,10008b40 <__alt_data_end+0xf8008b40>
10008b84:	d9012817 	ldw	r4,1184(sp)
10008b88:	dc413115 	stw	r17,1220(sp)
10008b8c:	dc012b17 	ldw	r16,1196(sp)
10008b90:	da012c17 	ldw	r8,1200(sp)
10008b94:	a813883a 	mov	r9,r21
10008b98:	2463c83a 	sub	r17,r4,r17
10008b9c:	003dcd06 	br	100082d4 <__alt_data_end+0xf80082d4>
10008ba0:	94800c04 	addi	r18,r18,48
10008ba4:	d8c10dc4 	addi	r3,sp,1079
10008ba8:	dc810dc5 	stb	r18,1079(sp)
10008bac:	dc413c17 	ldw	r17,1264(sp)
10008bb0:	d8c13115 	stw	r3,1220(sp)
10008bb4:	003dc706 	br	100082d4 <__alt_data_end+0xf80082d4>
10008bb8:	00801944 	movi	r2,101
10008bbc:	1400720e 	bge	r2,r16,10008d88 <___vfprintf_internal_r+0x10a0>
10008bc0:	d9013717 	ldw	r4,1244(sp)
10008bc4:	d9413917 	ldw	r5,1252(sp)
10008bc8:	000d883a 	mov	r6,zero
10008bcc:	000f883a 	mov	r7,zero
10008bd0:	d8c13d15 	stw	r3,1268(sp)
10008bd4:	da013f15 	stw	r8,1276(sp)
10008bd8:	00066900 	call	10006690 <__eqdf2>
10008bdc:	d8c13d17 	ldw	r3,1268(sp)
10008be0:	da013f17 	ldw	r8,1276(sp)
10008be4:	1000f41e 	bne	r2,zero,10008fb8 <___vfprintf_internal_r+0x12d0>
10008be8:	d8811f17 	ldw	r2,1148(sp)
10008bec:	01040074 	movhi	r4,4097
10008bf0:	2111d004 	addi	r4,r4,18240
10008bf4:	18c00044 	addi	r3,r3,1
10008bf8:	10800044 	addi	r2,r2,1
10008bfc:	41000015 	stw	r4,0(r8)
10008c00:	01000044 	movi	r4,1
10008c04:	41000115 	stw	r4,4(r8)
10008c08:	d8c12015 	stw	r3,1152(sp)
10008c0c:	d8811f15 	stw	r2,1148(sp)
10008c10:	010001c4 	movi	r4,7
10008c14:	20828d16 	blt	r4,r2,1000964c <___vfprintf_internal_r+0x1964>
10008c18:	42000204 	addi	r8,r8,8
10008c1c:	d8812617 	ldw	r2,1176(sp)
10008c20:	d9413317 	ldw	r5,1228(sp)
10008c24:	11400216 	blt	r2,r5,10008c30 <___vfprintf_internal_r+0xf48>
10008c28:	e080004c 	andi	r2,fp,1
10008c2c:	103e4126 	beq	r2,zero,10008534 <__alt_data_end+0xf8008534>
10008c30:	d8813817 	ldw	r2,1248(sp)
10008c34:	d9013517 	ldw	r4,1236(sp)
10008c38:	d9413817 	ldw	r5,1248(sp)
10008c3c:	1887883a 	add	r3,r3,r2
10008c40:	d8811f17 	ldw	r2,1148(sp)
10008c44:	41000015 	stw	r4,0(r8)
10008c48:	41400115 	stw	r5,4(r8)
10008c4c:	10800044 	addi	r2,r2,1
10008c50:	d8c12015 	stw	r3,1152(sp)
10008c54:	d8811f15 	stw	r2,1148(sp)
10008c58:	010001c4 	movi	r4,7
10008c5c:	20830916 	blt	r4,r2,10009884 <___vfprintf_internal_r+0x1b9c>
10008c60:	42000204 	addi	r8,r8,8
10008c64:	d8813317 	ldw	r2,1228(sp)
10008c68:	143fffc4 	addi	r16,r2,-1
10008c6c:	043e310e 	bge	zero,r16,10008534 <__alt_data_end+0xf8008534>
10008c70:	04400404 	movi	r17,16
10008c74:	d8811f17 	ldw	r2,1148(sp)
10008c78:	8c007e0e 	bge	r17,r16,10008e74 <___vfprintf_internal_r+0x118c>
10008c7c:	01440074 	movhi	r5,4097
10008c80:	2951d084 	addi	r5,r5,18242
10008c84:	d9412c15 	stw	r5,1200(sp)
10008c88:	04c001c4 	movi	r19,7
10008c8c:	00000306 	br	10008c9c <___vfprintf_internal_r+0xfb4>
10008c90:	42000204 	addi	r8,r8,8
10008c94:	843ffc04 	addi	r16,r16,-16
10008c98:	8c00790e 	bge	r17,r16,10008e80 <___vfprintf_internal_r+0x1198>
10008c9c:	18c00404 	addi	r3,r3,16
10008ca0:	10800044 	addi	r2,r2,1
10008ca4:	45000015 	stw	r20,0(r8)
10008ca8:	44400115 	stw	r17,4(r8)
10008cac:	d8c12015 	stw	r3,1152(sp)
10008cb0:	d8811f15 	stw	r2,1148(sp)
10008cb4:	98bff60e 	bge	r19,r2,10008c90 <__alt_data_end+0xf8008c90>
10008cb8:	b809883a 	mov	r4,r23
10008cbc:	b00b883a 	mov	r5,r22
10008cc0:	d9811e04 	addi	r6,sp,1144
10008cc4:	000e5ac0 	call	1000e5ac <__sprint_r>
10008cc8:	103d1f1e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10008ccc:	d8c12017 	ldw	r3,1152(sp)
10008cd0:	d8811f17 	ldw	r2,1148(sp)
10008cd4:	da000404 	addi	r8,sp,16
10008cd8:	003fee06 	br	10008c94 <__alt_data_end+0xf8008c94>
10008cdc:	d9412e17 	ldw	r5,1208(sp)
10008ce0:	d8812b17 	ldw	r2,1196(sp)
10008ce4:	28a7c83a 	sub	r19,r5,r2
10008ce8:	04fddc0e 	bge	zero,r19,1000845c <__alt_data_end+0xf800845c>
10008cec:	05400404 	movi	r21,16
10008cf0:	d8811f17 	ldw	r2,1148(sp)
10008cf4:	acc3870e 	bge	r21,r19,10009b14 <___vfprintf_internal_r+0x1e2c>
10008cf8:	01440074 	movhi	r5,4097
10008cfc:	2951d084 	addi	r5,r5,18242
10008d00:	d9412c15 	stw	r5,1200(sp)
10008d04:	048001c4 	movi	r18,7
10008d08:	00000306 	br	10008d18 <___vfprintf_internal_r+0x1030>
10008d0c:	9cfffc04 	addi	r19,r19,-16
10008d10:	42000204 	addi	r8,r8,8
10008d14:	acc0110e 	bge	r21,r19,10008d5c <___vfprintf_internal_r+0x1074>
10008d18:	18c00404 	addi	r3,r3,16
10008d1c:	10800044 	addi	r2,r2,1
10008d20:	45000015 	stw	r20,0(r8)
10008d24:	45400115 	stw	r21,4(r8)
10008d28:	d8c12015 	stw	r3,1152(sp)
10008d2c:	d8811f15 	stw	r2,1148(sp)
10008d30:	90bff60e 	bge	r18,r2,10008d0c <__alt_data_end+0xf8008d0c>
10008d34:	b809883a 	mov	r4,r23
10008d38:	b00b883a 	mov	r5,r22
10008d3c:	d9811e04 	addi	r6,sp,1144
10008d40:	000e5ac0 	call	1000e5ac <__sprint_r>
10008d44:	103d001e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10008d48:	9cfffc04 	addi	r19,r19,-16
10008d4c:	d8c12017 	ldw	r3,1152(sp)
10008d50:	d8811f17 	ldw	r2,1148(sp)
10008d54:	da000404 	addi	r8,sp,16
10008d58:	acffef16 	blt	r21,r19,10008d18 <__alt_data_end+0xf8008d18>
10008d5c:	d9012c17 	ldw	r4,1200(sp)
10008d60:	1cc7883a 	add	r3,r3,r19
10008d64:	10800044 	addi	r2,r2,1
10008d68:	41000015 	stw	r4,0(r8)
10008d6c:	44c00115 	stw	r19,4(r8)
10008d70:	d8c12015 	stw	r3,1152(sp)
10008d74:	d8811f15 	stw	r2,1148(sp)
10008d78:	010001c4 	movi	r4,7
10008d7c:	20817816 	blt	r4,r2,10009360 <___vfprintf_internal_r+0x1678>
10008d80:	42000204 	addi	r8,r8,8
10008d84:	003db506 	br	1000845c <__alt_data_end+0xf800845c>
10008d88:	d9413317 	ldw	r5,1228(sp)
10008d8c:	00800044 	movi	r2,1
10008d90:	18c00044 	addi	r3,r3,1
10008d94:	11413e0e 	bge	r2,r5,10009290 <___vfprintf_internal_r+0x15a8>
10008d98:	dc011f17 	ldw	r16,1148(sp)
10008d9c:	d8813117 	ldw	r2,1220(sp)
10008da0:	d8c12015 	stw	r3,1152(sp)
10008da4:	84000044 	addi	r16,r16,1
10008da8:	40800015 	stw	r2,0(r8)
10008dac:	00800044 	movi	r2,1
10008db0:	40800115 	stw	r2,4(r8)
10008db4:	dc011f15 	stw	r16,1148(sp)
10008db8:	008001c4 	movi	r2,7
10008dbc:	14015616 	blt	r2,r16,10009318 <___vfprintf_internal_r+0x1630>
10008dc0:	42000204 	addi	r8,r8,8
10008dc4:	d9013817 	ldw	r4,1248(sp)
10008dc8:	d9413517 	ldw	r5,1236(sp)
10008dcc:	84000044 	addi	r16,r16,1
10008dd0:	1907883a 	add	r3,r3,r4
10008dd4:	41400015 	stw	r5,0(r8)
10008dd8:	41000115 	stw	r4,4(r8)
10008ddc:	d8c12015 	stw	r3,1152(sp)
10008de0:	dc011f15 	stw	r16,1148(sp)
10008de4:	008001c4 	movi	r2,7
10008de8:	14015416 	blt	r2,r16,1000933c <___vfprintf_internal_r+0x1654>
10008dec:	44400204 	addi	r17,r8,8
10008df0:	d9013717 	ldw	r4,1244(sp)
10008df4:	d9413917 	ldw	r5,1252(sp)
10008df8:	000d883a 	mov	r6,zero
10008dfc:	000f883a 	mov	r7,zero
10008e00:	d8c13d15 	stw	r3,1268(sp)
10008e04:	00066900 	call	10006690 <__eqdf2>
10008e08:	d8c13d17 	ldw	r3,1268(sp)
10008e0c:	1000a726 	beq	r2,zero,100090ac <___vfprintf_internal_r+0x13c4>
10008e10:	d9013317 	ldw	r4,1228(sp)
10008e14:	d9413117 	ldw	r5,1220(sp)
10008e18:	84000044 	addi	r16,r16,1
10008e1c:	20bfffc4 	addi	r2,r4,-1
10008e20:	1887883a 	add	r3,r3,r2
10008e24:	29000044 	addi	r4,r5,1
10008e28:	88800115 	stw	r2,4(r17)
10008e2c:	89000015 	stw	r4,0(r17)
10008e30:	d8c12015 	stw	r3,1152(sp)
10008e34:	dc011f15 	stw	r16,1148(sp)
10008e38:	008001c4 	movi	r2,7
10008e3c:	14012d16 	blt	r2,r16,100092f4 <___vfprintf_internal_r+0x160c>
10008e40:	8c400204 	addi	r17,r17,8
10008e44:	d9413a17 	ldw	r5,1256(sp)
10008e48:	dcc122c4 	addi	r19,sp,1163
10008e4c:	84000044 	addi	r16,r16,1
10008e50:	28c7883a 	add	r3,r5,r3
10008e54:	8cc00015 	stw	r19,0(r17)
10008e58:	89400115 	stw	r5,4(r17)
10008e5c:	d8c12015 	stw	r3,1152(sp)
10008e60:	dc011f15 	stw	r16,1148(sp)
10008e64:	008001c4 	movi	r2,7
10008e68:	14000e16 	blt	r2,r16,10008ea4 <___vfprintf_internal_r+0x11bc>
10008e6c:	8a000204 	addi	r8,r17,8
10008e70:	003db006 	br	10008534 <__alt_data_end+0xf8008534>
10008e74:	01040074 	movhi	r4,4097
10008e78:	2111d084 	addi	r4,r4,18242
10008e7c:	d9012c15 	stw	r4,1200(sp)
10008e80:	d9012c17 	ldw	r4,1200(sp)
10008e84:	1c07883a 	add	r3,r3,r16
10008e88:	44000115 	stw	r16,4(r8)
10008e8c:	41000015 	stw	r4,0(r8)
10008e90:	10800044 	addi	r2,r2,1
10008e94:	d8c12015 	stw	r3,1152(sp)
10008e98:	d8811f15 	stw	r2,1148(sp)
10008e9c:	010001c4 	movi	r4,7
10008ea0:	20bda30e 	bge	r4,r2,10008530 <__alt_data_end+0xf8008530>
10008ea4:	b809883a 	mov	r4,r23
10008ea8:	b00b883a 	mov	r5,r22
10008eac:	d9811e04 	addi	r6,sp,1144
10008eb0:	000e5ac0 	call	1000e5ac <__sprint_r>
10008eb4:	103ca41e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10008eb8:	d8c12017 	ldw	r3,1152(sp)
10008ebc:	da000404 	addi	r8,sp,16
10008ec0:	003d9c06 	br	10008534 <__alt_data_end+0xf8008534>
10008ec4:	b809883a 	mov	r4,r23
10008ec8:	b00b883a 	mov	r5,r22
10008ecc:	d9811e04 	addi	r6,sp,1144
10008ed0:	000e5ac0 	call	1000e5ac <__sprint_r>
10008ed4:	103dd226 	beq	r2,zero,10008620 <__alt_data_end+0xf8008620>
10008ed8:	003c9b06 	br	10008148 <__alt_data_end+0xf8008148>
10008edc:	10803fcc 	andi	r2,r2,255
10008ee0:	1000311e 	bne	r2,zero,10008fa8 <___vfprintf_internal_r+0x12c0>
10008ee4:	e080004c 	andi	r2,fp,1
10008ee8:	10002f26 	beq	r2,zero,10008fa8 <___vfprintf_internal_r+0x12c0>
10008eec:	00800c04 	movi	r2,48
10008ef0:	d8c10dc4 	addi	r3,sp,1079
10008ef4:	d8810dc5 	stb	r2,1079(sp)
10008ef8:	dc413c17 	ldw	r17,1264(sp)
10008efc:	d8c13115 	stw	r3,1220(sp)
10008f00:	003cf406 	br	100082d4 <__alt_data_end+0xf80082d4>
10008f04:	b809883a 	mov	r4,r23
10008f08:	b00b883a 	mov	r5,r22
10008f0c:	d9811e04 	addi	r6,sp,1144
10008f10:	000e5ac0 	call	1000e5ac <__sprint_r>
10008f14:	103c8c1e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10008f18:	d8c12017 	ldw	r3,1152(sp)
10008f1c:	da000404 	addi	r8,sp,16
10008f20:	003d7706 	br	10008500 <__alt_data_end+0xf8008500>
10008f24:	b809883a 	mov	r4,r23
10008f28:	b00b883a 	mov	r5,r22
10008f2c:	d9811e04 	addi	r6,sp,1144
10008f30:	000e5ac0 	call	1000e5ac <__sprint_r>
10008f34:	103c841e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10008f38:	d8c12017 	ldw	r3,1152(sp)
10008f3c:	da000404 	addi	r8,sp,16
10008f40:	003d3506 	br	10008418 <__alt_data_end+0xf8008418>
10008f44:	b809883a 	mov	r4,r23
10008f48:	b00b883a 	mov	r5,r22
10008f4c:	d9811e04 	addi	r6,sp,1144
10008f50:	000e5ac0 	call	1000e5ac <__sprint_r>
10008f54:	103c7c1e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10008f58:	d8c12017 	ldw	r3,1152(sp)
10008f5c:	da000404 	addi	r8,sp,16
10008f60:	003d3b06 	br	10008450 <__alt_data_end+0xf8008450>
10008f64:	d9413b17 	ldw	r5,1260(sp)
10008f68:	d8c10e04 	addi	r3,sp,1080
10008f6c:	908003cc 	andi	r2,r18,15
10008f70:	a808973a 	slli	r4,r21,28
10008f74:	2885883a 	add	r2,r5,r2
10008f78:	9024d13a 	srli	r18,r18,4
10008f7c:	10800003 	ldbu	r2,0(r2)
10008f80:	a82ad13a 	srli	r21,r21,4
10008f84:	18ffffc4 	addi	r3,r3,-1
10008f88:	24a4b03a 	or	r18,r4,r18
10008f8c:	18800005 	stb	r2,0(r3)
10008f90:	9544b03a 	or	r2,r18,r21
10008f94:	103ff51e 	bne	r2,zero,10008f6c <__alt_data_end+0xf8008f6c>
10008f98:	d9412817 	ldw	r5,1184(sp)
10008f9c:	d8c13115 	stw	r3,1220(sp)
10008fa0:	28e3c83a 	sub	r17,r5,r3
10008fa4:	003ccb06 	br	100082d4 <__alt_data_end+0xf80082d4>
10008fa8:	d8c10e04 	addi	r3,sp,1080
10008fac:	0023883a 	mov	r17,zero
10008fb0:	d8c13115 	stw	r3,1220(sp)
10008fb4:	003cc706 	br	100082d4 <__alt_data_end+0xf80082d4>
10008fb8:	dc012617 	ldw	r16,1176(sp)
10008fbc:	0401ab0e 	bge	zero,r16,1000966c <___vfprintf_internal_r+0x1984>
10008fc0:	d8813317 	ldw	r2,1228(sp)
10008fc4:	d9413117 	ldw	r5,1220(sp)
10008fc8:	d9013417 	ldw	r4,1232(sp)
10008fcc:	1023883a 	mov	r17,r2
10008fd0:	28a1883a 	add	r16,r5,r2
10008fd4:	2080010e 	bge	r4,r2,10008fdc <___vfprintf_internal_r+0x12f4>
10008fd8:	2023883a 	mov	r17,r4
10008fdc:	04400b0e 	bge	zero,r17,1000900c <___vfprintf_internal_r+0x1324>
10008fe0:	d8811f17 	ldw	r2,1148(sp)
10008fe4:	d9413117 	ldw	r5,1220(sp)
10008fe8:	1c47883a 	add	r3,r3,r17
10008fec:	10800044 	addi	r2,r2,1
10008ff0:	41400015 	stw	r5,0(r8)
10008ff4:	44400115 	stw	r17,4(r8)
10008ff8:	d8c12015 	stw	r3,1152(sp)
10008ffc:	d8811f15 	stw	r2,1148(sp)
10009000:	010001c4 	movi	r4,7
10009004:	20826716 	blt	r4,r2,100099a4 <___vfprintf_internal_r+0x1cbc>
10009008:	42000204 	addi	r8,r8,8
1000900c:	88026316 	blt	r17,zero,1000999c <___vfprintf_internal_r+0x1cb4>
10009010:	d8813417 	ldw	r2,1232(sp)
10009014:	1463c83a 	sub	r17,r2,r17
10009018:	0440590e 	bge	zero,r17,10009180 <___vfprintf_internal_r+0x1498>
1000901c:	04c00404 	movi	r19,16
10009020:	d8811f17 	ldw	r2,1148(sp)
10009024:	9c41770e 	bge	r19,r17,10009604 <___vfprintf_internal_r+0x191c>
10009028:	01440074 	movhi	r5,4097
1000902c:	2951d084 	addi	r5,r5,18242
10009030:	d9412c15 	stw	r5,1200(sp)
10009034:	054001c4 	movi	r21,7
10009038:	00000306 	br	10009048 <___vfprintf_internal_r+0x1360>
1000903c:	42000204 	addi	r8,r8,8
10009040:	8c7ffc04 	addi	r17,r17,-16
10009044:	9c41720e 	bge	r19,r17,10009610 <___vfprintf_internal_r+0x1928>
10009048:	18c00404 	addi	r3,r3,16
1000904c:	10800044 	addi	r2,r2,1
10009050:	45000015 	stw	r20,0(r8)
10009054:	44c00115 	stw	r19,4(r8)
10009058:	d8c12015 	stw	r3,1152(sp)
1000905c:	d8811f15 	stw	r2,1148(sp)
10009060:	a8bff60e 	bge	r21,r2,1000903c <__alt_data_end+0xf800903c>
10009064:	b809883a 	mov	r4,r23
10009068:	b00b883a 	mov	r5,r22
1000906c:	d9811e04 	addi	r6,sp,1144
10009070:	000e5ac0 	call	1000e5ac <__sprint_r>
10009074:	103c341e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10009078:	d8c12017 	ldw	r3,1152(sp)
1000907c:	d8811f17 	ldw	r2,1148(sp)
10009080:	da000404 	addi	r8,sp,16
10009084:	003fee06 	br	10009040 <__alt_data_end+0xf8009040>
10009088:	b809883a 	mov	r4,r23
1000908c:	b00b883a 	mov	r5,r22
10009090:	d9811e04 	addi	r6,sp,1144
10009094:	000e5ac0 	call	1000e5ac <__sprint_r>
10009098:	103c2b1e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
1000909c:	d8c12017 	ldw	r3,1152(sp)
100090a0:	d8812787 	ldb	r2,1182(sp)
100090a4:	da000404 	addi	r8,sp,16
100090a8:	003cce06 	br	100083e4 <__alt_data_end+0xf80083e4>
100090ac:	d8813317 	ldw	r2,1228(sp)
100090b0:	14ffffc4 	addi	r19,r2,-1
100090b4:	04ff630e 	bge	zero,r19,10008e44 <__alt_data_end+0xf8008e44>
100090b8:	05400404 	movi	r21,16
100090bc:	acc0810e 	bge	r21,r19,100092c4 <___vfprintf_internal_r+0x15dc>
100090c0:	01440074 	movhi	r5,4097
100090c4:	2951d084 	addi	r5,r5,18242
100090c8:	d9412c15 	stw	r5,1200(sp)
100090cc:	01c001c4 	movi	r7,7
100090d0:	00000306 	br	100090e0 <___vfprintf_internal_r+0x13f8>
100090d4:	8c400204 	addi	r17,r17,8
100090d8:	9cfffc04 	addi	r19,r19,-16
100090dc:	acc07c0e 	bge	r21,r19,100092d0 <___vfprintf_internal_r+0x15e8>
100090e0:	18c00404 	addi	r3,r3,16
100090e4:	84000044 	addi	r16,r16,1
100090e8:	8d000015 	stw	r20,0(r17)
100090ec:	8d400115 	stw	r21,4(r17)
100090f0:	d8c12015 	stw	r3,1152(sp)
100090f4:	dc011f15 	stw	r16,1148(sp)
100090f8:	3c3ff60e 	bge	r7,r16,100090d4 <__alt_data_end+0xf80090d4>
100090fc:	b809883a 	mov	r4,r23
10009100:	b00b883a 	mov	r5,r22
10009104:	d9811e04 	addi	r6,sp,1144
10009108:	d9c13d15 	stw	r7,1268(sp)
1000910c:	000e5ac0 	call	1000e5ac <__sprint_r>
10009110:	d9c13d17 	ldw	r7,1268(sp)
10009114:	103c0c1e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10009118:	d8c12017 	ldw	r3,1152(sp)
1000911c:	dc011f17 	ldw	r16,1148(sp)
10009120:	dc400404 	addi	r17,sp,16
10009124:	003fec06 	br	100090d8 <__alt_data_end+0xf80090d8>
10009128:	00800084 	movi	r2,2
1000912c:	9546b03a 	or	r3,r18,r21
10009130:	003d7d06 	br	10008728 <__alt_data_end+0xf8008728>
10009134:	10803fcc 	andi	r2,r2,255
10009138:	1080201c 	xori	r2,r2,128
1000913c:	10bfe004 	addi	r2,r2,-128
10009140:	01000c04 	movi	r4,48
10009144:	1101d726 	beq	r2,r4,100098a4 <___vfprintf_internal_r+0x1bbc>
10009148:	d9413117 	ldw	r5,1220(sp)
1000914c:	d8812817 	ldw	r2,1184(sp)
10009150:	193fffc5 	stb	r4,-1(r3)
10009154:	297fffc4 	addi	r5,r5,-1
10009158:	d9413115 	stw	r5,1220(sp)
1000915c:	1163c83a 	sub	r17,r2,r5
10009160:	003c5c06 	br	100082d4 <__alt_data_end+0xf80082d4>
10009164:	b809883a 	mov	r4,r23
10009168:	b00b883a 	mov	r5,r22
1000916c:	d9811e04 	addi	r6,sp,1144
10009170:	000e5ac0 	call	1000e5ac <__sprint_r>
10009174:	103bf41e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10009178:	d8c12017 	ldw	r3,1152(sp)
1000917c:	da000404 	addi	r8,sp,16
10009180:	d9413117 	ldw	r5,1220(sp)
10009184:	d9013417 	ldw	r4,1232(sp)
10009188:	d8812617 	ldw	r2,1176(sp)
1000918c:	2923883a 	add	r17,r5,r4
10009190:	d9413317 	ldw	r5,1228(sp)
10009194:	11400216 	blt	r2,r5,100091a0 <___vfprintf_internal_r+0x14b8>
10009198:	e100004c 	andi	r4,fp,1
1000919c:	20000d26 	beq	r4,zero,100091d4 <___vfprintf_internal_r+0x14ec>
100091a0:	d9013817 	ldw	r4,1248(sp)
100091a4:	d9413517 	ldw	r5,1236(sp)
100091a8:	1907883a 	add	r3,r3,r4
100091ac:	d9011f17 	ldw	r4,1148(sp)
100091b0:	41400015 	stw	r5,0(r8)
100091b4:	d9413817 	ldw	r5,1248(sp)
100091b8:	21000044 	addi	r4,r4,1
100091bc:	d8c12015 	stw	r3,1152(sp)
100091c0:	41400115 	stw	r5,4(r8)
100091c4:	d9011f15 	stw	r4,1148(sp)
100091c8:	014001c4 	movi	r5,7
100091cc:	2901fd16 	blt	r5,r4,100099c4 <___vfprintf_internal_r+0x1cdc>
100091d0:	42000204 	addi	r8,r8,8
100091d4:	d9013317 	ldw	r4,1228(sp)
100091d8:	2085c83a 	sub	r2,r4,r2
100091dc:	8449c83a 	sub	r4,r16,r17
100091e0:	1021883a 	mov	r16,r2
100091e4:	2080010e 	bge	r4,r2,100091ec <___vfprintf_internal_r+0x1504>
100091e8:	2021883a 	mov	r16,r4
100091ec:	04000a0e 	bge	zero,r16,10009218 <___vfprintf_internal_r+0x1530>
100091f0:	d9011f17 	ldw	r4,1148(sp)
100091f4:	1c07883a 	add	r3,r3,r16
100091f8:	44400015 	stw	r17,0(r8)
100091fc:	21000044 	addi	r4,r4,1
10009200:	44000115 	stw	r16,4(r8)
10009204:	d8c12015 	stw	r3,1152(sp)
10009208:	d9011f15 	stw	r4,1148(sp)
1000920c:	014001c4 	movi	r5,7
10009210:	29020916 	blt	r5,r4,10009a38 <___vfprintf_internal_r+0x1d50>
10009214:	42000204 	addi	r8,r8,8
10009218:	80020116 	blt	r16,zero,10009a20 <___vfprintf_internal_r+0x1d38>
1000921c:	1421c83a 	sub	r16,r2,r16
10009220:	043cc40e 	bge	zero,r16,10008534 <__alt_data_end+0xf8008534>
10009224:	04400404 	movi	r17,16
10009228:	d8811f17 	ldw	r2,1148(sp)
1000922c:	8c3f110e 	bge	r17,r16,10008e74 <__alt_data_end+0xf8008e74>
10009230:	01440074 	movhi	r5,4097
10009234:	2951d084 	addi	r5,r5,18242
10009238:	d9412c15 	stw	r5,1200(sp)
1000923c:	04c001c4 	movi	r19,7
10009240:	00000306 	br	10009250 <___vfprintf_internal_r+0x1568>
10009244:	42000204 	addi	r8,r8,8
10009248:	843ffc04 	addi	r16,r16,-16
1000924c:	8c3f0c0e 	bge	r17,r16,10008e80 <__alt_data_end+0xf8008e80>
10009250:	18c00404 	addi	r3,r3,16
10009254:	10800044 	addi	r2,r2,1
10009258:	45000015 	stw	r20,0(r8)
1000925c:	44400115 	stw	r17,4(r8)
10009260:	d8c12015 	stw	r3,1152(sp)
10009264:	d8811f15 	stw	r2,1148(sp)
10009268:	98bff60e 	bge	r19,r2,10009244 <__alt_data_end+0xf8009244>
1000926c:	b809883a 	mov	r4,r23
10009270:	b00b883a 	mov	r5,r22
10009274:	d9811e04 	addi	r6,sp,1144
10009278:	000e5ac0 	call	1000e5ac <__sprint_r>
1000927c:	103bb21e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10009280:	d8c12017 	ldw	r3,1152(sp)
10009284:	d8811f17 	ldw	r2,1148(sp)
10009288:	da000404 	addi	r8,sp,16
1000928c:	003fee06 	br	10009248 <__alt_data_end+0xf8009248>
10009290:	e088703a 	and	r4,fp,r2
10009294:	203ec01e 	bne	r4,zero,10008d98 <__alt_data_end+0xf8008d98>
10009298:	dc011f17 	ldw	r16,1148(sp)
1000929c:	d9013117 	ldw	r4,1220(sp)
100092a0:	40800115 	stw	r2,4(r8)
100092a4:	84000044 	addi	r16,r16,1
100092a8:	41000015 	stw	r4,0(r8)
100092ac:	d8c12015 	stw	r3,1152(sp)
100092b0:	dc011f15 	stw	r16,1148(sp)
100092b4:	008001c4 	movi	r2,7
100092b8:	14000e16 	blt	r2,r16,100092f4 <___vfprintf_internal_r+0x160c>
100092bc:	44400204 	addi	r17,r8,8
100092c0:	003ee006 	br	10008e44 <__alt_data_end+0xf8008e44>
100092c4:	01040074 	movhi	r4,4097
100092c8:	2111d084 	addi	r4,r4,18242
100092cc:	d9012c15 	stw	r4,1200(sp)
100092d0:	d8812c17 	ldw	r2,1200(sp)
100092d4:	1cc7883a 	add	r3,r3,r19
100092d8:	84000044 	addi	r16,r16,1
100092dc:	88800015 	stw	r2,0(r17)
100092e0:	8cc00115 	stw	r19,4(r17)
100092e4:	d8c12015 	stw	r3,1152(sp)
100092e8:	dc011f15 	stw	r16,1148(sp)
100092ec:	008001c4 	movi	r2,7
100092f0:	143ed30e 	bge	r2,r16,10008e40 <__alt_data_end+0xf8008e40>
100092f4:	b809883a 	mov	r4,r23
100092f8:	b00b883a 	mov	r5,r22
100092fc:	d9811e04 	addi	r6,sp,1144
10009300:	000e5ac0 	call	1000e5ac <__sprint_r>
10009304:	103b901e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10009308:	d8c12017 	ldw	r3,1152(sp)
1000930c:	dc011f17 	ldw	r16,1148(sp)
10009310:	dc400404 	addi	r17,sp,16
10009314:	003ecb06 	br	10008e44 <__alt_data_end+0xf8008e44>
10009318:	b809883a 	mov	r4,r23
1000931c:	b00b883a 	mov	r5,r22
10009320:	d9811e04 	addi	r6,sp,1144
10009324:	000e5ac0 	call	1000e5ac <__sprint_r>
10009328:	103b871e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
1000932c:	d8c12017 	ldw	r3,1152(sp)
10009330:	dc011f17 	ldw	r16,1148(sp)
10009334:	da000404 	addi	r8,sp,16
10009338:	003ea206 	br	10008dc4 <__alt_data_end+0xf8008dc4>
1000933c:	b809883a 	mov	r4,r23
10009340:	b00b883a 	mov	r5,r22
10009344:	d9811e04 	addi	r6,sp,1144
10009348:	000e5ac0 	call	1000e5ac <__sprint_r>
1000934c:	103b7e1e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10009350:	d8c12017 	ldw	r3,1152(sp)
10009354:	dc011f17 	ldw	r16,1148(sp)
10009358:	dc400404 	addi	r17,sp,16
1000935c:	003ea406 	br	10008df0 <__alt_data_end+0xf8008df0>
10009360:	b809883a 	mov	r4,r23
10009364:	b00b883a 	mov	r5,r22
10009368:	d9811e04 	addi	r6,sp,1144
1000936c:	000e5ac0 	call	1000e5ac <__sprint_r>
10009370:	103b751e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10009374:	d8c12017 	ldw	r3,1152(sp)
10009378:	da000404 	addi	r8,sp,16
1000937c:	003c3706 	br	1000845c <__alt_data_end+0xf800845c>
10009380:	04a5c83a 	sub	r18,zero,r18
10009384:	9004c03a 	cmpne	r2,r18,zero
10009388:	056bc83a 	sub	r21,zero,r21
1000938c:	a8abc83a 	sub	r21,r21,r2
10009390:	04c00b44 	movi	r19,45
10009394:	dcc12785 	stb	r19,1182(sp)
10009398:	da413215 	stw	r9,1224(sp)
1000939c:	00800044 	movi	r2,1
100093a0:	9546b03a 	or	r3,r18,r21
100093a4:	003bb106 	br	1000826c <__alt_data_end+0xf800826c>
100093a8:	da013f15 	stw	r8,1276(sp)
100093ac:	da413e15 	stw	r9,1272(sp)
100093b0:	0004ef40 	call	10004ef4 <__fpclassifyd>
100093b4:	da013f17 	ldw	r8,1276(sp)
100093b8:	da413e17 	ldw	r9,1272(sp)
100093bc:	1000e526 	beq	r2,zero,10009754 <___vfprintf_internal_r+0x1a6c>
100093c0:	04fff7c4 	movi	r19,-33
100093c4:	00bfffc4 	movi	r2,-1
100093c8:	84e6703a 	and	r19,r16,r19
100093cc:	48822926 	beq	r9,r2,10009c74 <___vfprintf_internal_r+0x1f8c>
100093d0:	008011c4 	movi	r2,71
100093d4:	98821626 	beq	r19,r2,10009c30 <___vfprintf_internal_r+0x1f48>
100093d8:	d9013917 	ldw	r4,1252(sp)
100093dc:	e0c04014 	ori	r3,fp,256
100093e0:	d8c12d15 	stw	r3,1204(sp)
100093e4:	20021f16 	blt	r4,zero,10009c64 <___vfprintf_internal_r+0x1f7c>
100093e8:	dc413917 	ldw	r17,1252(sp)
100093ec:	d8012b05 	stb	zero,1196(sp)
100093f0:	00801984 	movi	r2,102
100093f4:	80814d26 	beq	r16,r2,1000992c <___vfprintf_internal_r+0x1c44>
100093f8:	00801184 	movi	r2,70
100093fc:	80814b26 	beq	r16,r2,1000992c <___vfprintf_internal_r+0x1c44>
10009400:	00801144 	movi	r2,69
10009404:	98821d26 	beq	r19,r2,10009c7c <___vfprintf_internal_r+0x1f94>
10009408:	482b883a 	mov	r21,r9
1000940c:	d8812604 	addi	r2,sp,1176
10009410:	d8800115 	stw	r2,4(sp)
10009414:	d9413717 	ldw	r5,1244(sp)
10009418:	d8812504 	addi	r2,sp,1172
1000941c:	d8800215 	stw	r2,8(sp)
10009420:	d8812104 	addi	r2,sp,1156
10009424:	dd400015 	stw	r21,0(sp)
10009428:	d8800315 	stw	r2,12(sp)
1000942c:	b809883a 	mov	r4,r23
10009430:	880d883a 	mov	r6,r17
10009434:	01c00084 	movi	r7,2
10009438:	da013f15 	stw	r8,1276(sp)
1000943c:	da413e15 	stw	r9,1272(sp)
10009440:	000a1600 	call	1000a160 <_dtoa_r>
10009444:	d8813115 	stw	r2,1220(sp)
10009448:	008019c4 	movi	r2,103
1000944c:	da013f17 	ldw	r8,1276(sp)
10009450:	da413e17 	ldw	r9,1272(sp)
10009454:	80800226 	beq	r16,r2,10009460 <___vfprintf_internal_r+0x1778>
10009458:	008011c4 	movi	r2,71
1000945c:	8081451e 	bne	r16,r2,10009974 <___vfprintf_internal_r+0x1c8c>
10009460:	e080004c 	andi	r2,fp,1
10009464:	10021e26 	beq	r2,zero,10009ce0 <___vfprintf_internal_r+0x1ff8>
10009468:	d8c13117 	ldw	r3,1220(sp)
1000946c:	1d55883a 	add	r10,r3,r21
10009470:	d9013717 	ldw	r4,1244(sp)
10009474:	880b883a 	mov	r5,r17
10009478:	000d883a 	mov	r6,zero
1000947c:	000f883a 	mov	r7,zero
10009480:	da013f15 	stw	r8,1276(sp)
10009484:	da413e15 	stw	r9,1272(sp)
10009488:	da813d15 	stw	r10,1268(sp)
1000948c:	00066900 	call	10006690 <__eqdf2>
10009490:	da013f17 	ldw	r8,1276(sp)
10009494:	da413e17 	ldw	r9,1272(sp)
10009498:	da813d17 	ldw	r10,1268(sp)
1000949c:	1001a126 	beq	r2,zero,10009b24 <___vfprintf_internal_r+0x1e3c>
100094a0:	d8812117 	ldw	r2,1156(sp)
100094a4:	1280062e 	bgeu	r2,r10,100094c0 <___vfprintf_internal_r+0x17d8>
100094a8:	01000c04 	movi	r4,48
100094ac:	10c00044 	addi	r3,r2,1
100094b0:	d8c12115 	stw	r3,1156(sp)
100094b4:	11000005 	stb	r4,0(r2)
100094b8:	d8812117 	ldw	r2,1156(sp)
100094bc:	12bffb36 	bltu	r2,r10,100094ac <__alt_data_end+0xf80094ac>
100094c0:	d8c13117 	ldw	r3,1220(sp)
100094c4:	10c5c83a 	sub	r2,r2,r3
100094c8:	d8813315 	stw	r2,1228(sp)
100094cc:	008011c4 	movi	r2,71
100094d0:	98818926 	beq	r19,r2,10009af8 <___vfprintf_internal_r+0x1e10>
100094d4:	00801944 	movi	r2,101
100094d8:	14023c0e 	bge	r2,r16,10009dcc <___vfprintf_internal_r+0x20e4>
100094dc:	d8c12617 	ldw	r3,1176(sp)
100094e0:	00801984 	movi	r2,102
100094e4:	d8c13415 	stw	r3,1232(sp)
100094e8:	8081ef26 	beq	r16,r2,10009ca8 <___vfprintf_internal_r+0x1fc0>
100094ec:	d8c13417 	ldw	r3,1232(sp)
100094f0:	d9013317 	ldw	r4,1228(sp)
100094f4:	1901e316 	blt	r3,r4,10009c84 <___vfprintf_internal_r+0x1f9c>
100094f8:	e080004c 	andi	r2,fp,1
100094fc:	1001f426 	beq	r2,zero,10009cd0 <___vfprintf_internal_r+0x1fe8>
10009500:	d8c13417 	ldw	r3,1232(sp)
10009504:	1c400044 	addi	r17,r3,1
10009508:	8839883a 	mov	fp,r17
1000950c:	8801e416 	blt	r17,zero,10009ca0 <___vfprintf_internal_r+0x1fb8>
10009510:	dd412b07 	ldb	r21,1196(sp)
10009514:	a801701e 	bne	r21,zero,10009ad8 <___vfprintf_internal_r+0x1df0>
10009518:	df012b15 	stw	fp,1196(sp)
1000951c:	dcc12783 	ldbu	r19,1182(sp)
10009520:	df012d17 	ldw	fp,1204(sp)
10009524:	d8013215 	stw	zero,1224(sp)
10009528:	dc812d15 	stw	r18,1204(sp)
1000952c:	003b6e06 	br	100082e8 <__alt_data_end+0xf80082e8>
10009530:	e080040c 	andi	r2,fp,16
10009534:	1000b51e 	bne	r2,zero,1000980c <___vfprintf_internal_r+0x1b24>
10009538:	e080100c 	andi	r2,fp,64
1000953c:	10015b26 	beq	r2,zero,10009aac <___vfprintf_internal_r+0x1dc4>
10009540:	d9012d17 	ldw	r4,1204(sp)
10009544:	d9412f17 	ldw	r5,1212(sp)
10009548:	20800017 	ldw	r2,0(r4)
1000954c:	21000104 	addi	r4,r4,4
10009550:	d9012d15 	stw	r4,1204(sp)
10009554:	1140000d 	sth	r5,0(r2)
10009558:	003a2006 	br	10007ddc <__alt_data_end+0xf8007ddc>
1000955c:	e0c0100c 	andi	r3,fp,64
10009560:	1800a226 	beq	r3,zero,100097ec <___vfprintf_internal_r+0x1b04>
10009564:	d8c12d17 	ldw	r3,1204(sp)
10009568:	1480000b 	ldhu	r18,0(r2)
1000956c:	002b883a 	mov	r21,zero
10009570:	18c00104 	addi	r3,r3,4
10009574:	d8c12d15 	stw	r3,1204(sp)
10009578:	0005883a 	mov	r2,zero
1000957c:	9007883a 	mov	r3,r18
10009580:	003c6906 	br	10008728 <__alt_data_end+0xf8008728>
10009584:	e0c0100c 	andi	r3,fp,64
10009588:	18009026 	beq	r3,zero,100097cc <___vfprintf_internal_r+0x1ae4>
1000958c:	1480000b 	ldhu	r18,0(r2)
10009590:	d8812d17 	ldw	r2,1204(sp)
10009594:	002b883a 	mov	r21,zero
10009598:	9007883a 	mov	r3,r18
1000959c:	10800104 	addi	r2,r2,4
100095a0:	d8812d15 	stw	r2,1204(sp)
100095a4:	00800044 	movi	r2,1
100095a8:	003c5f06 	br	10008728 <__alt_data_end+0xf8008728>
100095ac:	e0c0100c 	andi	r3,fp,64
100095b0:	18008026 	beq	r3,zero,100097b4 <___vfprintf_internal_r+0x1acc>
100095b4:	d9012d17 	ldw	r4,1204(sp)
100095b8:	1480000b 	ldhu	r18,0(r2)
100095bc:	002b883a 	mov	r21,zero
100095c0:	21000104 	addi	r4,r4,4
100095c4:	d9012d15 	stw	r4,1204(sp)
100095c8:	003c7906 	br	100087b0 <__alt_data_end+0xf80087b0>
100095cc:	e080100c 	andi	r2,fp,64
100095d0:	10007126 	beq	r2,zero,10009798 <___vfprintf_internal_r+0x1ab0>
100095d4:	1c80000f 	ldh	r18,0(r3)
100095d8:	d8812d17 	ldw	r2,1204(sp)
100095dc:	902bd7fa 	srai	r21,r18,31
100095e0:	10800104 	addi	r2,r2,4
100095e4:	d8812d15 	stw	r2,1204(sp)
100095e8:	a805883a 	mov	r2,r21
100095ec:	003b1a06 	br	10008258 <__alt_data_end+0xf8008258>
100095f0:	e4000007 	ldb	r16,0(fp)
100095f4:	e005883a 	mov	r2,fp
100095f8:	003a2306 	br	10007e88 <__alt_data_end+0xf8007e88>
100095fc:	00800084 	movi	r2,2
10009600:	003c4906 	br	10008728 <__alt_data_end+0xf8008728>
10009604:	01040074 	movhi	r4,4097
10009608:	2111d084 	addi	r4,r4,18242
1000960c:	d9012c15 	stw	r4,1200(sp)
10009610:	d9012c17 	ldw	r4,1200(sp)
10009614:	1c47883a 	add	r3,r3,r17
10009618:	10800044 	addi	r2,r2,1
1000961c:	41000015 	stw	r4,0(r8)
10009620:	44400115 	stw	r17,4(r8)
10009624:	d8c12015 	stw	r3,1152(sp)
10009628:	d8811f15 	stw	r2,1148(sp)
1000962c:	010001c4 	movi	r4,7
10009630:	20becc16 	blt	r4,r2,10009164 <__alt_data_end+0xf8009164>
10009634:	42000204 	addi	r8,r8,8
10009638:	003ed106 	br	10009180 <__alt_data_end+0xf8009180>
1000963c:	01040074 	movhi	r4,4097
10009640:	2111d084 	addi	r4,r4,18242
10009644:	d9012c15 	stw	r4,1200(sp)
10009648:	003ba306 	br	100084d8 <__alt_data_end+0xf80084d8>
1000964c:	b809883a 	mov	r4,r23
10009650:	b00b883a 	mov	r5,r22
10009654:	d9811e04 	addi	r6,sp,1144
10009658:	000e5ac0 	call	1000e5ac <__sprint_r>
1000965c:	103aba1e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10009660:	d8c12017 	ldw	r3,1152(sp)
10009664:	da000404 	addi	r8,sp,16
10009668:	003d6c06 	br	10008c1c <__alt_data_end+0xf8008c1c>
1000966c:	d8811f17 	ldw	r2,1148(sp)
10009670:	01440074 	movhi	r5,4097
10009674:	01000044 	movi	r4,1
10009678:	18c00044 	addi	r3,r3,1
1000967c:	10800044 	addi	r2,r2,1
10009680:	2951d004 	addi	r5,r5,18240
10009684:	41000115 	stw	r4,4(r8)
10009688:	41400015 	stw	r5,0(r8)
1000968c:	d8c12015 	stw	r3,1152(sp)
10009690:	d8811f15 	stw	r2,1148(sp)
10009694:	010001c4 	movi	r4,7
10009698:	20806716 	blt	r4,r2,10009838 <___vfprintf_internal_r+0x1b50>
1000969c:	42000204 	addi	r8,r8,8
100096a0:	8000041e 	bne	r16,zero,100096b4 <___vfprintf_internal_r+0x19cc>
100096a4:	d8813317 	ldw	r2,1228(sp)
100096a8:	1000021e 	bne	r2,zero,100096b4 <___vfprintf_internal_r+0x19cc>
100096ac:	e080004c 	andi	r2,fp,1
100096b0:	103ba026 	beq	r2,zero,10008534 <__alt_data_end+0xf8008534>
100096b4:	d9013817 	ldw	r4,1248(sp)
100096b8:	d8811f17 	ldw	r2,1148(sp)
100096bc:	d9413517 	ldw	r5,1236(sp)
100096c0:	1907883a 	add	r3,r3,r4
100096c4:	10800044 	addi	r2,r2,1
100096c8:	41000115 	stw	r4,4(r8)
100096cc:	41400015 	stw	r5,0(r8)
100096d0:	d8c12015 	stw	r3,1152(sp)
100096d4:	d8811f15 	stw	r2,1148(sp)
100096d8:	010001c4 	movi	r4,7
100096dc:	20815716 	blt	r4,r2,10009c3c <___vfprintf_internal_r+0x1f54>
100096e0:	42000204 	addi	r8,r8,8
100096e4:	0421c83a 	sub	r16,zero,r16
100096e8:	0400810e 	bge	zero,r16,100098f0 <___vfprintf_internal_r+0x1c08>
100096ec:	04400404 	movi	r17,16
100096f0:	8c00bd0e 	bge	r17,r16,100099e8 <___vfprintf_internal_r+0x1d00>
100096f4:	01440074 	movhi	r5,4097
100096f8:	2951d084 	addi	r5,r5,18242
100096fc:	d9412c15 	stw	r5,1200(sp)
10009700:	04c001c4 	movi	r19,7
10009704:	00000306 	br	10009714 <___vfprintf_internal_r+0x1a2c>
10009708:	42000204 	addi	r8,r8,8
1000970c:	843ffc04 	addi	r16,r16,-16
10009710:	8c00b80e 	bge	r17,r16,100099f4 <___vfprintf_internal_r+0x1d0c>
10009714:	18c00404 	addi	r3,r3,16
10009718:	10800044 	addi	r2,r2,1
1000971c:	45000015 	stw	r20,0(r8)
10009720:	44400115 	stw	r17,4(r8)
10009724:	d8c12015 	stw	r3,1152(sp)
10009728:	d8811f15 	stw	r2,1148(sp)
1000972c:	98bff60e 	bge	r19,r2,10009708 <__alt_data_end+0xf8009708>
10009730:	b809883a 	mov	r4,r23
10009734:	b00b883a 	mov	r5,r22
10009738:	d9811e04 	addi	r6,sp,1144
1000973c:	000e5ac0 	call	1000e5ac <__sprint_r>
10009740:	103a811e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10009744:	d8c12017 	ldw	r3,1152(sp)
10009748:	d8811f17 	ldw	r2,1148(sp)
1000974c:	da000404 	addi	r8,sp,16
10009750:	003fee06 	br	1000970c <__alt_data_end+0xf800970c>
10009754:	008011c4 	movi	r2,71
10009758:	1400db16 	blt	r2,r16,10009ac8 <___vfprintf_internal_r+0x1de0>
1000975c:	01040074 	movhi	r4,4097
10009760:	2111c204 	addi	r4,r4,18184
10009764:	d9013115 	stw	r4,1220(sp)
10009768:	00c000c4 	movi	r3,3
1000976c:	00bfdfc4 	movi	r2,-129
10009770:	d8c12b15 	stw	r3,1196(sp)
10009774:	e0b8703a 	and	fp,fp,r2
10009778:	dcc12783 	ldbu	r19,1182(sp)
1000977c:	dc812d15 	stw	r18,1204(sp)
10009780:	1823883a 	mov	r17,r3
10009784:	d8013215 	stw	zero,1224(sp)
10009788:	d8013415 	stw	zero,1232(sp)
1000978c:	003ad606 	br	100082e8 <__alt_data_end+0xf80082e8>
10009790:	4823883a 	mov	r17,r9
10009794:	003cc906 	br	10008abc <__alt_data_end+0xf8008abc>
10009798:	1c800017 	ldw	r18,0(r3)
1000979c:	d8c12d17 	ldw	r3,1204(sp)
100097a0:	902bd7fa 	srai	r21,r18,31
100097a4:	18c00104 	addi	r3,r3,4
100097a8:	d8c12d15 	stw	r3,1204(sp)
100097ac:	a805883a 	mov	r2,r21
100097b0:	003aa906 	br	10008258 <__alt_data_end+0xf8008258>
100097b4:	d9412d17 	ldw	r5,1204(sp)
100097b8:	14800017 	ldw	r18,0(r2)
100097bc:	002b883a 	mov	r21,zero
100097c0:	29400104 	addi	r5,r5,4
100097c4:	d9412d15 	stw	r5,1204(sp)
100097c8:	003bf906 	br	100087b0 <__alt_data_end+0xf80087b0>
100097cc:	d8c12d17 	ldw	r3,1204(sp)
100097d0:	14800017 	ldw	r18,0(r2)
100097d4:	002b883a 	mov	r21,zero
100097d8:	18c00104 	addi	r3,r3,4
100097dc:	d8c12d15 	stw	r3,1204(sp)
100097e0:	00800044 	movi	r2,1
100097e4:	9007883a 	mov	r3,r18
100097e8:	003bcf06 	br	10008728 <__alt_data_end+0xf8008728>
100097ec:	d9012d17 	ldw	r4,1204(sp)
100097f0:	14800017 	ldw	r18,0(r2)
100097f4:	002b883a 	mov	r21,zero
100097f8:	21000104 	addi	r4,r4,4
100097fc:	d9012d15 	stw	r4,1204(sp)
10009800:	0005883a 	mov	r2,zero
10009804:	9007883a 	mov	r3,r18
10009808:	003bc706 	br	10008728 <__alt_data_end+0xf8008728>
1000980c:	d9412d17 	ldw	r5,1204(sp)
10009810:	d8c12f17 	ldw	r3,1212(sp)
10009814:	28800017 	ldw	r2,0(r5)
10009818:	29400104 	addi	r5,r5,4
1000981c:	d9412d15 	stw	r5,1204(sp)
10009820:	10c00015 	stw	r3,0(r2)
10009824:	00396d06 	br	10007ddc <__alt_data_end+0xf8007ddc>
10009828:	01040074 	movhi	r4,4097
1000982c:	2111c004 	addi	r4,r4,18176
10009830:	d9013115 	stw	r4,1220(sp)
10009834:	003ba206 	br	100086c0 <__alt_data_end+0xf80086c0>
10009838:	b809883a 	mov	r4,r23
1000983c:	b00b883a 	mov	r5,r22
10009840:	d9811e04 	addi	r6,sp,1144
10009844:	000e5ac0 	call	1000e5ac <__sprint_r>
10009848:	103a3f1e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
1000984c:	dc012617 	ldw	r16,1176(sp)
10009850:	d8c12017 	ldw	r3,1152(sp)
10009854:	da000404 	addi	r8,sp,16
10009858:	003f9106 	br	100096a0 <__alt_data_end+0xf80096a0>
1000985c:	e0800044 	addi	r2,fp,1
10009860:	9cc00814 	ori	r19,r19,32
10009864:	e4000047 	ldb	r16,1(fp)
10009868:	00398706 	br	10007e88 <__alt_data_end+0xf8007e88>
1000986c:	d8812e17 	ldw	r2,1208(sp)
10009870:	d8c12d15 	stw	r3,1204(sp)
10009874:	0085c83a 	sub	r2,zero,r2
10009878:	d8812e15 	stw	r2,1208(sp)
1000987c:	e005883a 	mov	r2,fp
10009880:	003a3a06 	br	1000816c <__alt_data_end+0xf800816c>
10009884:	b809883a 	mov	r4,r23
10009888:	b00b883a 	mov	r5,r22
1000988c:	d9811e04 	addi	r6,sp,1144
10009890:	000e5ac0 	call	1000e5ac <__sprint_r>
10009894:	103a2c1e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10009898:	d8c12017 	ldw	r3,1152(sp)
1000989c:	da000404 	addi	r8,sp,16
100098a0:	003cf006 	br	10008c64 <__alt_data_end+0xf8008c64>
100098a4:	d8c12817 	ldw	r3,1184(sp)
100098a8:	d9013117 	ldw	r4,1220(sp)
100098ac:	1923c83a 	sub	r17,r3,r4
100098b0:	003a8806 	br	100082d4 <__alt_data_end+0xf80082d4>
100098b4:	da013f15 	stw	r8,1276(sp)
100098b8:	000e4180 	call	1000e418 <strlen>
100098bc:	1023883a 	mov	r17,r2
100098c0:	da013f17 	ldw	r8,1276(sp)
100098c4:	883c7f0e 	bge	r17,zero,10008ac4 <__alt_data_end+0xf8008ac4>
100098c8:	0005883a 	mov	r2,zero
100098cc:	003c7d06 	br	10008ac4 <__alt_data_end+0xf8008ac4>
100098d0:	b809883a 	mov	r4,r23
100098d4:	b00b883a 	mov	r5,r22
100098d8:	d9811e04 	addi	r6,sp,1144
100098dc:	000e5ac0 	call	1000e5ac <__sprint_r>
100098e0:	103a191e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
100098e4:	d8c12017 	ldw	r3,1152(sp)
100098e8:	d8811f17 	ldw	r2,1148(sp)
100098ec:	da000404 	addi	r8,sp,16
100098f0:	d9413317 	ldw	r5,1228(sp)
100098f4:	d9013117 	ldw	r4,1220(sp)
100098f8:	10800044 	addi	r2,r2,1
100098fc:	28c7883a 	add	r3,r5,r3
10009900:	41000015 	stw	r4,0(r8)
10009904:	41400115 	stw	r5,4(r8)
10009908:	d8c12015 	stw	r3,1152(sp)
1000990c:	d8811f15 	stw	r2,1148(sp)
10009910:	010001c4 	movi	r4,7
10009914:	20bb060e 	bge	r4,r2,10008530 <__alt_data_end+0xf8008530>
10009918:	003d6206 	br	10008ea4 <__alt_data_end+0xf8008ea4>
1000991c:	01040074 	movhi	r4,4097
10009920:	2111d484 	addi	r4,r4,18258
10009924:	d9013615 	stw	r4,1240(sp)
10009928:	003aa306 	br	100083b8 <__alt_data_end+0xf80083b8>
1000992c:	d8812604 	addi	r2,sp,1176
10009930:	d8800115 	stw	r2,4(sp)
10009934:	d9413717 	ldw	r5,1244(sp)
10009938:	d8812504 	addi	r2,sp,1172
1000993c:	d8800215 	stw	r2,8(sp)
10009940:	d8812104 	addi	r2,sp,1156
10009944:	da400015 	stw	r9,0(sp)
10009948:	d8800315 	stw	r2,12(sp)
1000994c:	b809883a 	mov	r4,r23
10009950:	880d883a 	mov	r6,r17
10009954:	01c000c4 	movi	r7,3
10009958:	da013f15 	stw	r8,1276(sp)
1000995c:	da413e15 	stw	r9,1272(sp)
10009960:	000a1600 	call	1000a160 <_dtoa_r>
10009964:	da413e17 	ldw	r9,1272(sp)
10009968:	da013f17 	ldw	r8,1276(sp)
1000996c:	d8813115 	stw	r2,1220(sp)
10009970:	482b883a 	mov	r21,r9
10009974:	d8c13117 	ldw	r3,1220(sp)
10009978:	00801184 	movi	r2,70
1000997c:	1d55883a 	add	r10,r3,r21
10009980:	98bebb1e 	bne	r19,r2,10009470 <__alt_data_end+0xf8009470>
10009984:	19000007 	ldb	r4,0(r3)
10009988:	00800c04 	movi	r2,48
1000998c:	2080dd26 	beq	r4,r2,10009d04 <___vfprintf_internal_r+0x201c>
10009990:	d8c12617 	ldw	r3,1176(sp)
10009994:	50d5883a 	add	r10,r10,r3
10009998:	003eb506 	br	10009470 <__alt_data_end+0xf8009470>
1000999c:	0023883a 	mov	r17,zero
100099a0:	003d9b06 	br	10009010 <__alt_data_end+0xf8009010>
100099a4:	b809883a 	mov	r4,r23
100099a8:	b00b883a 	mov	r5,r22
100099ac:	d9811e04 	addi	r6,sp,1144
100099b0:	000e5ac0 	call	1000e5ac <__sprint_r>
100099b4:	1039e41e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
100099b8:	d8c12017 	ldw	r3,1152(sp)
100099bc:	da000404 	addi	r8,sp,16
100099c0:	003d9206 	br	1000900c <__alt_data_end+0xf800900c>
100099c4:	b809883a 	mov	r4,r23
100099c8:	b00b883a 	mov	r5,r22
100099cc:	d9811e04 	addi	r6,sp,1144
100099d0:	000e5ac0 	call	1000e5ac <__sprint_r>
100099d4:	1039dc1e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
100099d8:	d8812617 	ldw	r2,1176(sp)
100099dc:	d8c12017 	ldw	r3,1152(sp)
100099e0:	da000404 	addi	r8,sp,16
100099e4:	003dfb06 	br	100091d4 <__alt_data_end+0xf80091d4>
100099e8:	01040074 	movhi	r4,4097
100099ec:	2111d084 	addi	r4,r4,18242
100099f0:	d9012c15 	stw	r4,1200(sp)
100099f4:	d9012c17 	ldw	r4,1200(sp)
100099f8:	1c07883a 	add	r3,r3,r16
100099fc:	10800044 	addi	r2,r2,1
10009a00:	41000015 	stw	r4,0(r8)
10009a04:	44000115 	stw	r16,4(r8)
10009a08:	d8c12015 	stw	r3,1152(sp)
10009a0c:	d8811f15 	stw	r2,1148(sp)
10009a10:	010001c4 	movi	r4,7
10009a14:	20bfae16 	blt	r4,r2,100098d0 <__alt_data_end+0xf80098d0>
10009a18:	42000204 	addi	r8,r8,8
10009a1c:	003fb406 	br	100098f0 <__alt_data_end+0xf80098f0>
10009a20:	0021883a 	mov	r16,zero
10009a24:	003dfd06 	br	1000921c <__alt_data_end+0xf800921c>
10009a28:	01440074 	movhi	r5,4097
10009a2c:	2951d484 	addi	r5,r5,18258
10009a30:	d9413615 	stw	r5,1240(sp)
10009a34:	003ae306 	br	100085c4 <__alt_data_end+0xf80085c4>
10009a38:	b809883a 	mov	r4,r23
10009a3c:	b00b883a 	mov	r5,r22
10009a40:	d9811e04 	addi	r6,sp,1144
10009a44:	000e5ac0 	call	1000e5ac <__sprint_r>
10009a48:	1039bf1e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10009a4c:	d8812617 	ldw	r2,1176(sp)
10009a50:	d9413317 	ldw	r5,1228(sp)
10009a54:	d8c12017 	ldw	r3,1152(sp)
10009a58:	da000404 	addi	r8,sp,16
10009a5c:	2885c83a 	sub	r2,r5,r2
10009a60:	003ded06 	br	10009218 <__alt_data_end+0xf8009218>
10009a64:	00800184 	movi	r2,6
10009a68:	1240012e 	bgeu	r2,r9,10009a70 <___vfprintf_internal_r+0x1d88>
10009a6c:	1013883a 	mov	r9,r2
10009a70:	4823883a 	mov	r17,r9
10009a74:	4805883a 	mov	r2,r9
10009a78:	4800b216 	blt	r9,zero,10009d44 <___vfprintf_internal_r+0x205c>
10009a7c:	01440074 	movhi	r5,4097
10009a80:	2951ce04 	addi	r5,r5,18232
10009a84:	d8812b15 	stw	r2,1196(sp)
10009a88:	dc812d15 	stw	r18,1204(sp)
10009a8c:	d8013215 	stw	zero,1224(sp)
10009a90:	d8013415 	stw	zero,1232(sp)
10009a94:	d9413115 	stw	r5,1220(sp)
10009a98:	0005883a 	mov	r2,zero
10009a9c:	003a1906 	br	10008304 <__alt_data_end+0xf8008304>
10009aa0:	04c00b44 	movi	r19,45
10009aa4:	dcc12785 	stb	r19,1182(sp)
10009aa8:	003b0006 	br	100086ac <__alt_data_end+0xf80086ac>
10009aac:	d8c12d17 	ldw	r3,1204(sp)
10009ab0:	d9012f17 	ldw	r4,1212(sp)
10009ab4:	18800017 	ldw	r2,0(r3)
10009ab8:	18c00104 	addi	r3,r3,4
10009abc:	d8c12d15 	stw	r3,1204(sp)
10009ac0:	11000015 	stw	r4,0(r2)
10009ac4:	0038c506 	br	10007ddc <__alt_data_end+0xf8007ddc>
10009ac8:	01440074 	movhi	r5,4097
10009acc:	2951c304 	addi	r5,r5,18188
10009ad0:	d9413115 	stw	r5,1220(sp)
10009ad4:	003f2406 	br	10009768 <__alt_data_end+0xf8009768>
10009ad8:	00800b44 	movi	r2,45
10009adc:	d8812785 	stb	r2,1182(sp)
10009ae0:	df012b15 	stw	fp,1196(sp)
10009ae4:	d8013215 	stw	zero,1224(sp)
10009ae8:	df012d17 	ldw	fp,1204(sp)
10009aec:	00800b44 	movi	r2,45
10009af0:	dc812d15 	stw	r18,1204(sp)
10009af4:	003a0006 	br	100082f8 <__alt_data_end+0xf80082f8>
10009af8:	d8c12617 	ldw	r3,1176(sp)
10009afc:	00bfff44 	movi	r2,-3
10009b00:	18800a16 	blt	r3,r2,10009b2c <___vfprintf_internal_r+0x1e44>
10009b04:	48c00916 	blt	r9,r3,10009b2c <___vfprintf_internal_r+0x1e44>
10009b08:	d8c13415 	stw	r3,1232(sp)
10009b0c:	040019c4 	movi	r16,103
10009b10:	003e7606 	br	100094ec <__alt_data_end+0xf80094ec>
10009b14:	01040074 	movhi	r4,4097
10009b18:	2111d084 	addi	r4,r4,18242
10009b1c:	d9012c15 	stw	r4,1200(sp)
10009b20:	003c8e06 	br	10008d5c <__alt_data_end+0xf8008d5c>
10009b24:	5005883a 	mov	r2,r10
10009b28:	003e6506 	br	100094c0 <__alt_data_end+0xf80094c0>
10009b2c:	843fff84 	addi	r16,r16,-2
10009b30:	1d7fffc4 	addi	r21,r3,-1
10009b34:	dd412615 	stw	r21,1176(sp)
10009b38:	dc0122c5 	stb	r16,1163(sp)
10009b3c:	a8009216 	blt	r21,zero,10009d88 <___vfprintf_internal_r+0x20a0>
10009b40:	00800ac4 	movi	r2,43
10009b44:	d8812305 	stb	r2,1164(sp)
10009b48:	00800244 	movi	r2,9
10009b4c:	1540660e 	bge	r2,r21,10009ce8 <___vfprintf_internal_r+0x2000>
10009b50:	dcc122c4 	addi	r19,sp,1163
10009b54:	dc012c15 	stw	r16,1200(sp)
10009b58:	4023883a 	mov	r17,r8
10009b5c:	9821883a 	mov	r16,r19
10009b60:	a809883a 	mov	r4,r21
10009b64:	01400284 	movi	r5,10
10009b68:	00054080 	call	10005408 <__modsi3>
10009b6c:	10800c04 	addi	r2,r2,48
10009b70:	843fffc4 	addi	r16,r16,-1
10009b74:	a809883a 	mov	r4,r21
10009b78:	01400284 	movi	r5,10
10009b7c:	80800005 	stb	r2,0(r16)
10009b80:	00053b40 	call	100053b4 <__divsi3>
10009b84:	01000244 	movi	r4,9
10009b88:	102b883a 	mov	r21,r2
10009b8c:	20bff416 	blt	r4,r2,10009b60 <__alt_data_end+0xf8009b60>
10009b90:	8811883a 	mov	r8,r17
10009b94:	10800c04 	addi	r2,r2,48
10009b98:	8023883a 	mov	r17,r16
10009b9c:	897fffc4 	addi	r5,r17,-1
10009ba0:	88bfffc5 	stb	r2,-1(r17)
10009ba4:	dc012c17 	ldw	r16,1200(sp)
10009ba8:	2cc08a2e 	bgeu	r5,r19,10009dd4 <___vfprintf_internal_r+0x20ec>
10009bac:	d9812384 	addi	r6,sp,1166
10009bb0:	344dc83a 	sub	r6,r6,r17
10009bb4:	d9012344 	addi	r4,sp,1165
10009bb8:	998d883a 	add	r6,r19,r6
10009bbc:	00000106 	br	10009bc4 <___vfprintf_internal_r+0x1edc>
10009bc0:	28800003 	ldbu	r2,0(r5)
10009bc4:	20800005 	stb	r2,0(r4)
10009bc8:	21000044 	addi	r4,r4,1
10009bcc:	29400044 	addi	r5,r5,1
10009bd0:	21bffb1e 	bne	r4,r6,10009bc0 <__alt_data_end+0xf8009bc0>
10009bd4:	d8812304 	addi	r2,sp,1164
10009bd8:	1445c83a 	sub	r2,r2,r17
10009bdc:	d9412344 	addi	r5,sp,1165
10009be0:	2885883a 	add	r2,r5,r2
10009be4:	14e7c83a 	sub	r19,r2,r19
10009be8:	d8813317 	ldw	r2,1228(sp)
10009bec:	d8c13317 	ldw	r3,1228(sp)
10009bf0:	dcc13a15 	stw	r19,1256(sp)
10009bf4:	14e3883a 	add	r17,r2,r19
10009bf8:	00800044 	movi	r2,1
10009bfc:	10c0550e 	bge	r2,r3,10009d54 <___vfprintf_internal_r+0x206c>
10009c00:	8c400044 	addi	r17,r17,1
10009c04:	8839883a 	mov	fp,r17
10009c08:	88005016 	blt	r17,zero,10009d4c <___vfprintf_internal_r+0x2064>
10009c0c:	d8013415 	stw	zero,1232(sp)
10009c10:	003e3f06 	br	10009510 <__alt_data_end+0xf8009510>
10009c14:	da412b15 	stw	r9,1196(sp)
10009c18:	dcc12783 	ldbu	r19,1182(sp)
10009c1c:	4823883a 	mov	r17,r9
10009c20:	dc812d15 	stw	r18,1204(sp)
10009c24:	d8013215 	stw	zero,1224(sp)
10009c28:	d8013415 	stw	zero,1232(sp)
10009c2c:	0039ae06 	br	100082e8 <__alt_data_end+0xf80082e8>
10009c30:	483de91e 	bne	r9,zero,100093d8 <__alt_data_end+0xf80093d8>
10009c34:	8813883a 	mov	r9,r17
10009c38:	003de706 	br	100093d8 <__alt_data_end+0xf80093d8>
10009c3c:	b809883a 	mov	r4,r23
10009c40:	b00b883a 	mov	r5,r22
10009c44:	d9811e04 	addi	r6,sp,1144
10009c48:	000e5ac0 	call	1000e5ac <__sprint_r>
10009c4c:	10393e1e 	bne	r2,zero,10008148 <__alt_data_end+0xf8008148>
10009c50:	dc012617 	ldw	r16,1176(sp)
10009c54:	d8c12017 	ldw	r3,1152(sp)
10009c58:	d8811f17 	ldw	r2,1148(sp)
10009c5c:	da000404 	addi	r8,sp,16
10009c60:	003ea006 	br	100096e4 <__alt_data_end+0xf80096e4>
10009c64:	00c00b44 	movi	r3,45
10009c68:	2460003c 	xorhi	r17,r4,32768
10009c6c:	d8c12b05 	stb	r3,1196(sp)
10009c70:	003ddf06 	br	100093f0 <__alt_data_end+0xf80093f0>
10009c74:	02400184 	movi	r9,6
10009c78:	003dd706 	br	100093d8 <__alt_data_end+0xf80093d8>
10009c7c:	4d400044 	addi	r21,r9,1
10009c80:	003de206 	br	1000940c <__alt_data_end+0xf800940c>
10009c84:	d8c13417 	ldw	r3,1232(sp)
10009c88:	00c0490e 	bge	zero,r3,10009db0 <___vfprintf_internal_r+0x20c8>
10009c8c:	04400044 	movi	r17,1
10009c90:	d9013317 	ldw	r4,1228(sp)
10009c94:	8923883a 	add	r17,r17,r4
10009c98:	8839883a 	mov	fp,r17
10009c9c:	883e1c0e 	bge	r17,zero,10009510 <__alt_data_end+0xf8009510>
10009ca0:	0039883a 	mov	fp,zero
10009ca4:	003e1a06 	br	10009510 <__alt_data_end+0xf8009510>
10009ca8:	00c03b0e 	bge	zero,r3,10009d98 <___vfprintf_internal_r+0x20b0>
10009cac:	4800021e 	bne	r9,zero,10009cb8 <___vfprintf_internal_r+0x1fd0>
10009cb0:	e080004c 	andi	r2,fp,1
10009cb4:	10000626 	beq	r2,zero,10009cd0 <___vfprintf_internal_r+0x1fe8>
10009cb8:	d8c13417 	ldw	r3,1232(sp)
10009cbc:	4a400044 	addi	r9,r9,1
10009cc0:	1a63883a 	add	r17,r3,r9
10009cc4:	8839883a 	mov	fp,r17
10009cc8:	883e110e 	bge	r17,zero,10009510 <__alt_data_end+0xf8009510>
10009ccc:	003ff406 	br	10009ca0 <__alt_data_end+0xf8009ca0>
10009cd0:	1839883a 	mov	fp,r3
10009cd4:	18004116 	blt	r3,zero,10009ddc <___vfprintf_internal_r+0x20f4>
10009cd8:	dc413417 	ldw	r17,1232(sp)
10009cdc:	003e0c06 	br	10009510 <__alt_data_end+0xf8009510>
10009ce0:	d8812117 	ldw	r2,1156(sp)
10009ce4:	003df606 	br	100094c0 <__alt_data_end+0xf80094c0>
10009ce8:	00800c04 	movi	r2,48
10009cec:	a8c00c04 	addi	r3,r21,48
10009cf0:	d8812345 	stb	r2,1165(sp)
10009cf4:	d8c12385 	stb	r3,1166(sp)
10009cf8:	d88123c4 	addi	r2,sp,1167
10009cfc:	dcc122c4 	addi	r19,sp,1163
10009d00:	003fb806 	br	10009be4 <__alt_data_end+0xf8009be4>
10009d04:	d9013717 	ldw	r4,1244(sp)
10009d08:	880b883a 	mov	r5,r17
10009d0c:	000d883a 	mov	r6,zero
10009d10:	000f883a 	mov	r7,zero
10009d14:	da013f15 	stw	r8,1276(sp)
10009d18:	da413e15 	stw	r9,1272(sp)
10009d1c:	da813d15 	stw	r10,1268(sp)
10009d20:	00066900 	call	10006690 <__eqdf2>
10009d24:	da013f17 	ldw	r8,1276(sp)
10009d28:	da413e17 	ldw	r9,1272(sp)
10009d2c:	da813d17 	ldw	r10,1268(sp)
10009d30:	103f1726 	beq	r2,zero,10009990 <__alt_data_end+0xf8009990>
10009d34:	00800044 	movi	r2,1
10009d38:	1547c83a 	sub	r3,r2,r21
10009d3c:	d8c12615 	stw	r3,1176(sp)
10009d40:	003f1406 	br	10009994 <__alt_data_end+0xf8009994>
10009d44:	0005883a 	mov	r2,zero
10009d48:	003f4c06 	br	10009a7c <__alt_data_end+0xf8009a7c>
10009d4c:	0039883a 	mov	fp,zero
10009d50:	003fae06 	br	10009c0c <__alt_data_end+0xf8009c0c>
10009d54:	e084703a 	and	r2,fp,r2
10009d58:	103faa26 	beq	r2,zero,10009c04 <__alt_data_end+0xf8009c04>
10009d5c:	003fa806 	br	10009c00 <__alt_data_end+0xf8009c00>
10009d60:	d9412d17 	ldw	r5,1204(sp)
10009d64:	2a400017 	ldw	r9,0(r5)
10009d68:	28c00104 	addi	r3,r5,4
10009d6c:	d8c12d15 	stw	r3,1204(sp)
10009d70:	483ebc0e 	bge	r9,zero,10009864 <__alt_data_end+0xf8009864>
10009d74:	027fffc4 	movi	r9,-1
10009d78:	e4000047 	ldb	r16,1(fp)
10009d7c:	00384206 	br	10007e88 <__alt_data_end+0xf8007e88>
10009d80:	043fffc4 	movi	r16,-1
10009d84:	0038ce06 	br	100080c0 <__alt_data_end+0xf80080c0>
10009d88:	00800b44 	movi	r2,45
10009d8c:	056bc83a 	sub	r21,zero,r21
10009d90:	d8812305 	stb	r2,1164(sp)
10009d94:	003f6c06 	br	10009b48 <__alt_data_end+0xf8009b48>
10009d98:	4800081e 	bne	r9,zero,10009dbc <___vfprintf_internal_r+0x20d4>
10009d9c:	e080004c 	andi	r2,fp,1
10009da0:	1000061e 	bne	r2,zero,10009dbc <___vfprintf_internal_r+0x20d4>
10009da4:	07000044 	movi	fp,1
10009da8:	e023883a 	mov	r17,fp
10009dac:	003dd806 	br	10009510 <__alt_data_end+0xf8009510>
10009db0:	04400084 	movi	r17,2
10009db4:	88e3c83a 	sub	r17,r17,r3
10009db8:	003fb506 	br	10009c90 <__alt_data_end+0xf8009c90>
10009dbc:	4c400084 	addi	r17,r9,2
10009dc0:	8839883a 	mov	fp,r17
10009dc4:	883dd20e 	bge	r17,zero,10009510 <__alt_data_end+0xf8009510>
10009dc8:	003fb506 	br	10009ca0 <__alt_data_end+0xf8009ca0>
10009dcc:	d8c12617 	ldw	r3,1176(sp)
10009dd0:	003f5706 	br	10009b30 <__alt_data_end+0xf8009b30>
10009dd4:	d8812344 	addi	r2,sp,1165
10009dd8:	003f8206 	br	10009be4 <__alt_data_end+0xf8009be4>
10009ddc:	0039883a 	mov	fp,zero
10009de0:	003fbd06 	br	10009cd8 <__alt_data_end+0xf8009cd8>

10009de4 <__vfprintf_internal>:
10009de4:	2007883a 	mov	r3,r4
10009de8:	010400b4 	movhi	r4,4098
10009dec:	21026d04 	addi	r4,r4,2484
10009df0:	21000017 	ldw	r4,0(r4)
10009df4:	2805883a 	mov	r2,r5
10009df8:	300f883a 	mov	r7,r6
10009dfc:	180b883a 	mov	r5,r3
10009e00:	100d883a 	mov	r6,r2
10009e04:	0007ce81 	jmpi	10007ce8 <___vfprintf_internal_r>

10009e08 <__swsetup_r>:
10009e08:	008400b4 	movhi	r2,4098
10009e0c:	defffd04 	addi	sp,sp,-12
10009e10:	10826d04 	addi	r2,r2,2484
10009e14:	dc400115 	stw	r17,4(sp)
10009e18:	2023883a 	mov	r17,r4
10009e1c:	11000017 	ldw	r4,0(r2)
10009e20:	dc000015 	stw	r16,0(sp)
10009e24:	dfc00215 	stw	ra,8(sp)
10009e28:	2821883a 	mov	r16,r5
10009e2c:	20000226 	beq	r4,zero,10009e38 <__swsetup_r+0x30>
10009e30:	20c00e17 	ldw	r3,56(r4)
10009e34:	18002e26 	beq	r3,zero,10009ef0 <__swsetup_r+0xe8>
10009e38:	8080030b 	ldhu	r2,12(r16)
10009e3c:	10c0020c 	andi	r3,r2,8
10009e40:	100d883a 	mov	r6,r2
10009e44:	18000f26 	beq	r3,zero,10009e84 <__swsetup_r+0x7c>
10009e48:	80c00417 	ldw	r3,16(r16)
10009e4c:	18001526 	beq	r3,zero,10009ea4 <__swsetup_r+0x9c>
10009e50:	1100004c 	andi	r4,r2,1
10009e54:	20001c1e 	bne	r4,zero,10009ec8 <__swsetup_r+0xc0>
10009e58:	1080008c 	andi	r2,r2,2
10009e5c:	1000261e 	bne	r2,zero,10009ef8 <__swsetup_r+0xf0>
10009e60:	80800517 	ldw	r2,20(r16)
10009e64:	80800215 	stw	r2,8(r16)
10009e68:	18001c26 	beq	r3,zero,10009edc <__swsetup_r+0xd4>
10009e6c:	0005883a 	mov	r2,zero
10009e70:	dfc00217 	ldw	ra,8(sp)
10009e74:	dc400117 	ldw	r17,4(sp)
10009e78:	dc000017 	ldw	r16,0(sp)
10009e7c:	dec00304 	addi	sp,sp,12
10009e80:	f800283a 	ret
10009e84:	3080040c 	andi	r2,r6,16
10009e88:	10001726 	beq	r2,zero,10009ee8 <__swsetup_r+0xe0>
10009e8c:	3080010c 	andi	r2,r6,4
10009e90:	10001b1e 	bne	r2,zero,10009f00 <__swsetup_r+0xf8>
10009e94:	80c00417 	ldw	r3,16(r16)
10009e98:	30800214 	ori	r2,r6,8
10009e9c:	8080030d 	sth	r2,12(r16)
10009ea0:	183feb1e 	bne	r3,zero,10009e50 <__alt_data_end+0xf8009e50>
10009ea4:	1140a00c 	andi	r5,r2,640
10009ea8:	01008004 	movi	r4,512
10009eac:	293fe826 	beq	r5,r4,10009e50 <__alt_data_end+0xf8009e50>
10009eb0:	8809883a 	mov	r4,r17
10009eb4:	800b883a 	mov	r5,r16
10009eb8:	000c4f80 	call	1000c4f8 <__smakebuf_r>
10009ebc:	8080030b 	ldhu	r2,12(r16)
10009ec0:	80c00417 	ldw	r3,16(r16)
10009ec4:	003fe206 	br	10009e50 <__alt_data_end+0xf8009e50>
10009ec8:	80800517 	ldw	r2,20(r16)
10009ecc:	80000215 	stw	zero,8(r16)
10009ed0:	0085c83a 	sub	r2,zero,r2
10009ed4:	80800615 	stw	r2,24(r16)
10009ed8:	183fe41e 	bne	r3,zero,10009e6c <__alt_data_end+0xf8009e6c>
10009edc:	8080030b 	ldhu	r2,12(r16)
10009ee0:	1080200c 	andi	r2,r2,128
10009ee4:	103fe226 	beq	r2,zero,10009e70 <__alt_data_end+0xf8009e70>
10009ee8:	00bfffc4 	movi	r2,-1
10009eec:	003fe006 	br	10009e70 <__alt_data_end+0xf8009e70>
10009ef0:	000be440 	call	1000be44 <__sinit>
10009ef4:	003fd006 	br	10009e38 <__alt_data_end+0xf8009e38>
10009ef8:	0005883a 	mov	r2,zero
10009efc:	003fd906 	br	10009e64 <__alt_data_end+0xf8009e64>
10009f00:	81400c17 	ldw	r5,48(r16)
10009f04:	28000626 	beq	r5,zero,10009f20 <__swsetup_r+0x118>
10009f08:	80801004 	addi	r2,r16,64
10009f0c:	28800326 	beq	r5,r2,10009f1c <__swsetup_r+0x114>
10009f10:	8809883a 	mov	r4,r17
10009f14:	000bfb80 	call	1000bfb8 <_free_r>
10009f18:	8180030b 	ldhu	r6,12(r16)
10009f1c:	80000c15 	stw	zero,48(r16)
10009f20:	80c00417 	ldw	r3,16(r16)
10009f24:	00bff6c4 	movi	r2,-37
10009f28:	118c703a 	and	r6,r2,r6
10009f2c:	80000115 	stw	zero,4(r16)
10009f30:	80c00015 	stw	r3,0(r16)
10009f34:	003fd806 	br	10009e98 <__alt_data_end+0xf8009e98>

10009f38 <quorem>:
10009f38:	defff204 	addi	sp,sp,-56
10009f3c:	ddc00b15 	stw	r23,44(sp)
10009f40:	20800417 	ldw	r2,16(r4)
10009f44:	2dc00417 	ldw	r23,16(r5)
10009f48:	dfc00d15 	stw	ra,52(sp)
10009f4c:	df000c15 	stw	fp,48(sp)
10009f50:	dd800a15 	stw	r22,40(sp)
10009f54:	dd400915 	stw	r21,36(sp)
10009f58:	dd000815 	stw	r20,32(sp)
10009f5c:	dcc00715 	stw	r19,28(sp)
10009f60:	dc800615 	stw	r18,24(sp)
10009f64:	dc400515 	stw	r17,20(sp)
10009f68:	dc000415 	stw	r16,16(sp)
10009f6c:	15c07a16 	blt	r2,r23,1000a158 <quorem+0x220>
10009f70:	bdffffc4 	addi	r23,r23,-1
10009f74:	bde9883a 	add	r20,r23,r23
10009f78:	28c00504 	addi	r3,r5,20
10009f7c:	a529883a 	add	r20,r20,r20
10009f80:	1d39883a 	add	fp,r3,r20
10009f84:	24c00504 	addi	r19,r4,20
10009f88:	d9400215 	stw	r5,8(sp)
10009f8c:	9d29883a 	add	r20,r19,r20
10009f90:	e1400017 	ldw	r5,0(fp)
10009f94:	d9000015 	stw	r4,0(sp)
10009f98:	a1000017 	ldw	r4,0(r20)
10009f9c:	29400044 	addi	r5,r5,1
10009fa0:	d8c00115 	stw	r3,4(sp)
10009fa4:	dd000315 	stw	r20,12(sp)
10009fa8:	00054640 	call	10005464 <__udivsi3>
10009fac:	1025883a 	mov	r18,r2
10009fb0:	10003026 	beq	r2,zero,1000a074 <quorem+0x13c>
10009fb4:	dc400117 	ldw	r17,4(sp)
10009fb8:	9829883a 	mov	r20,r19
10009fbc:	002d883a 	mov	r22,zero
10009fc0:	0021883a 	mov	r16,zero
10009fc4:	8d400017 	ldw	r21,0(r17)
10009fc8:	900b883a 	mov	r5,r18
10009fcc:	8c400104 	addi	r17,r17,4
10009fd0:	a93fffcc 	andi	r4,r21,65535
10009fd4:	0007bcc0 	call	10007bcc <__mulsi3>
10009fd8:	a808d43a 	srli	r4,r21,16
10009fdc:	900b883a 	mov	r5,r18
10009fe0:	b0ad883a 	add	r22,r22,r2
10009fe4:	0007bcc0 	call	10007bcc <__mulsi3>
10009fe8:	a1000017 	ldw	r4,0(r20)
10009fec:	b00cd43a 	srli	r6,r22,16
10009ff0:	b0ffffcc 	andi	r3,r22,65535
10009ff4:	217fffcc 	andi	r5,r4,65535
10009ff8:	2c21883a 	add	r16,r5,r16
10009ffc:	80c7c83a 	sub	r3,r16,r3
1000a000:	2008d43a 	srli	r4,r4,16
1000a004:	3085883a 	add	r2,r6,r2
1000a008:	1821d43a 	srai	r16,r3,16
1000a00c:	117fffcc 	andi	r5,r2,65535
1000a010:	2149c83a 	sub	r4,r4,r5
1000a014:	2421883a 	add	r16,r4,r16
1000a018:	8008943a 	slli	r4,r16,16
1000a01c:	18ffffcc 	andi	r3,r3,65535
1000a020:	102cd43a 	srli	r22,r2,16
1000a024:	20c8b03a 	or	r4,r4,r3
1000a028:	a1000015 	stw	r4,0(r20)
1000a02c:	8021d43a 	srai	r16,r16,16
1000a030:	a5000104 	addi	r20,r20,4
1000a034:	e47fe32e 	bgeu	fp,r17,10009fc4 <__alt_data_end+0xf8009fc4>
1000a038:	d8c00317 	ldw	r3,12(sp)
1000a03c:	18800017 	ldw	r2,0(r3)
1000a040:	10000c1e 	bne	r2,zero,1000a074 <quorem+0x13c>
1000a044:	18bfff04 	addi	r2,r3,-4
1000a048:	9880082e 	bgeu	r19,r2,1000a06c <quorem+0x134>
1000a04c:	18ffff17 	ldw	r3,-4(r3)
1000a050:	18000326 	beq	r3,zero,1000a060 <quorem+0x128>
1000a054:	00000506 	br	1000a06c <quorem+0x134>
1000a058:	10c00017 	ldw	r3,0(r2)
1000a05c:	1800031e 	bne	r3,zero,1000a06c <quorem+0x134>
1000a060:	10bfff04 	addi	r2,r2,-4
1000a064:	bdffffc4 	addi	r23,r23,-1
1000a068:	98bffb36 	bltu	r19,r2,1000a058 <__alt_data_end+0xf800a058>
1000a06c:	d8c00017 	ldw	r3,0(sp)
1000a070:	1dc00415 	stw	r23,16(r3)
1000a074:	d9000017 	ldw	r4,0(sp)
1000a078:	d9400217 	ldw	r5,8(sp)
1000a07c:	000db180 	call	1000db18 <__mcmp>
1000a080:	10002816 	blt	r2,zero,1000a124 <quorem+0x1ec>
1000a084:	dc400117 	ldw	r17,4(sp)
1000a088:	94800044 	addi	r18,r18,1
1000a08c:	980d883a 	mov	r6,r19
1000a090:	0007883a 	mov	r3,zero
1000a094:	31000017 	ldw	r4,0(r6)
1000a098:	89400017 	ldw	r5,0(r17)
1000a09c:	31800104 	addi	r6,r6,4
1000a0a0:	20bfffcc 	andi	r2,r4,65535
1000a0a4:	10c7883a 	add	r3,r2,r3
1000a0a8:	28bfffcc 	andi	r2,r5,65535
1000a0ac:	1885c83a 	sub	r2,r3,r2
1000a0b0:	280ad43a 	srli	r5,r5,16
1000a0b4:	2008d43a 	srli	r4,r4,16
1000a0b8:	1007d43a 	srai	r3,r2,16
1000a0bc:	10bfffcc 	andi	r2,r2,65535
1000a0c0:	2149c83a 	sub	r4,r4,r5
1000a0c4:	20c9883a 	add	r4,r4,r3
1000a0c8:	200a943a 	slli	r5,r4,16
1000a0cc:	8c400104 	addi	r17,r17,4
1000a0d0:	2007d43a 	srai	r3,r4,16
1000a0d4:	2884b03a 	or	r2,r5,r2
1000a0d8:	30bfff15 	stw	r2,-4(r6)
1000a0dc:	e47fed2e 	bgeu	fp,r17,1000a094 <__alt_data_end+0xf800a094>
1000a0e0:	bdc5883a 	add	r2,r23,r23
1000a0e4:	1085883a 	add	r2,r2,r2
1000a0e8:	9887883a 	add	r3,r19,r2
1000a0ec:	18800017 	ldw	r2,0(r3)
1000a0f0:	10000c1e 	bne	r2,zero,1000a124 <quorem+0x1ec>
1000a0f4:	18bfff04 	addi	r2,r3,-4
1000a0f8:	9880082e 	bgeu	r19,r2,1000a11c <quorem+0x1e4>
1000a0fc:	18ffff17 	ldw	r3,-4(r3)
1000a100:	18000326 	beq	r3,zero,1000a110 <quorem+0x1d8>
1000a104:	00000506 	br	1000a11c <quorem+0x1e4>
1000a108:	10c00017 	ldw	r3,0(r2)
1000a10c:	1800031e 	bne	r3,zero,1000a11c <quorem+0x1e4>
1000a110:	10bfff04 	addi	r2,r2,-4
1000a114:	bdffffc4 	addi	r23,r23,-1
1000a118:	98bffb36 	bltu	r19,r2,1000a108 <__alt_data_end+0xf800a108>
1000a11c:	d8c00017 	ldw	r3,0(sp)
1000a120:	1dc00415 	stw	r23,16(r3)
1000a124:	9005883a 	mov	r2,r18
1000a128:	dfc00d17 	ldw	ra,52(sp)
1000a12c:	df000c17 	ldw	fp,48(sp)
1000a130:	ddc00b17 	ldw	r23,44(sp)
1000a134:	dd800a17 	ldw	r22,40(sp)
1000a138:	dd400917 	ldw	r21,36(sp)
1000a13c:	dd000817 	ldw	r20,32(sp)
1000a140:	dcc00717 	ldw	r19,28(sp)
1000a144:	dc800617 	ldw	r18,24(sp)
1000a148:	dc400517 	ldw	r17,20(sp)
1000a14c:	dc000417 	ldw	r16,16(sp)
1000a150:	dec00e04 	addi	sp,sp,56
1000a154:	f800283a 	ret
1000a158:	0005883a 	mov	r2,zero
1000a15c:	003ff206 	br	1000a128 <__alt_data_end+0xf800a128>

1000a160 <_dtoa_r>:
1000a160:	20801017 	ldw	r2,64(r4)
1000a164:	deffde04 	addi	sp,sp,-136
1000a168:	dd401d15 	stw	r21,116(sp)
1000a16c:	dcc01b15 	stw	r19,108(sp)
1000a170:	dc801a15 	stw	r18,104(sp)
1000a174:	dc401915 	stw	r17,100(sp)
1000a178:	dc001815 	stw	r16,96(sp)
1000a17c:	dfc02115 	stw	ra,132(sp)
1000a180:	df002015 	stw	fp,128(sp)
1000a184:	ddc01f15 	stw	r23,124(sp)
1000a188:	dd801e15 	stw	r22,120(sp)
1000a18c:	dd001c15 	stw	r20,112(sp)
1000a190:	d9c00315 	stw	r7,12(sp)
1000a194:	2021883a 	mov	r16,r4
1000a198:	302b883a 	mov	r21,r6
1000a19c:	2825883a 	mov	r18,r5
1000a1a0:	dc402417 	ldw	r17,144(sp)
1000a1a4:	3027883a 	mov	r19,r6
1000a1a8:	10000826 	beq	r2,zero,1000a1cc <_dtoa_r+0x6c>
1000a1ac:	21801117 	ldw	r6,68(r4)
1000a1b0:	00c00044 	movi	r3,1
1000a1b4:	100b883a 	mov	r5,r2
1000a1b8:	1986983a 	sll	r3,r3,r6
1000a1bc:	11800115 	stw	r6,4(r2)
1000a1c0:	10c00215 	stw	r3,8(r2)
1000a1c4:	000d2440 	call	1000d244 <_Bfree>
1000a1c8:	80001015 	stw	zero,64(r16)
1000a1cc:	a8002d16 	blt	r21,zero,1000a284 <_dtoa_r+0x124>
1000a1d0:	88000015 	stw	zero,0(r17)
1000a1d4:	a8dffc2c 	andhi	r3,r21,32752
1000a1d8:	009ffc34 	movhi	r2,32752
1000a1dc:	18801b26 	beq	r3,r2,1000a24c <_dtoa_r+0xec>
1000a1e0:	9009883a 	mov	r4,r18
1000a1e4:	980b883a 	mov	r5,r19
1000a1e8:	000d883a 	mov	r6,zero
1000a1ec:	000f883a 	mov	r7,zero
1000a1f0:	00066900 	call	10006690 <__eqdf2>
1000a1f4:	10002a1e 	bne	r2,zero,1000a2a0 <_dtoa_r+0x140>
1000a1f8:	d8c02317 	ldw	r3,140(sp)
1000a1fc:	d9002517 	ldw	r4,148(sp)
1000a200:	00800044 	movi	r2,1
1000a204:	18800015 	stw	r2,0(r3)
1000a208:	2001a226 	beq	r4,zero,1000a894 <_dtoa_r+0x734>
1000a20c:	00840074 	movhi	r2,4097
1000a210:	1091d044 	addi	r2,r2,18241
1000a214:	20800015 	stw	r2,0(r4)
1000a218:	10bfffc4 	addi	r2,r2,-1
1000a21c:	dfc02117 	ldw	ra,132(sp)
1000a220:	df002017 	ldw	fp,128(sp)
1000a224:	ddc01f17 	ldw	r23,124(sp)
1000a228:	dd801e17 	ldw	r22,120(sp)
1000a22c:	dd401d17 	ldw	r21,116(sp)
1000a230:	dd001c17 	ldw	r20,112(sp)
1000a234:	dcc01b17 	ldw	r19,108(sp)
1000a238:	dc801a17 	ldw	r18,104(sp)
1000a23c:	dc401917 	ldw	r17,100(sp)
1000a240:	dc001817 	ldw	r16,96(sp)
1000a244:	dec02204 	addi	sp,sp,136
1000a248:	f800283a 	ret
1000a24c:	d8c02317 	ldw	r3,140(sp)
1000a250:	0089c3c4 	movi	r2,9999
1000a254:	18800015 	stw	r2,0(r3)
1000a258:	90017c26 	beq	r18,zero,1000a84c <_dtoa_r+0x6ec>
1000a25c:	00840074 	movhi	r2,4097
1000a260:	1091dc04 	addi	r2,r2,18288
1000a264:	d9002517 	ldw	r4,148(sp)
1000a268:	203fec26 	beq	r4,zero,1000a21c <__alt_data_end+0xf800a21c>
1000a26c:	10c000c7 	ldb	r3,3(r2)
1000a270:	18017d1e 	bne	r3,zero,1000a868 <_dtoa_r+0x708>
1000a274:	10c000c4 	addi	r3,r2,3
1000a278:	d9802517 	ldw	r6,148(sp)
1000a27c:	30c00015 	stw	r3,0(r6)
1000a280:	003fe606 	br	1000a21c <__alt_data_end+0xf800a21c>
1000a284:	04e00034 	movhi	r19,32768
1000a288:	9cffffc4 	addi	r19,r19,-1
1000a28c:	00800044 	movi	r2,1
1000a290:	ace6703a 	and	r19,r21,r19
1000a294:	88800015 	stw	r2,0(r17)
1000a298:	982b883a 	mov	r21,r19
1000a29c:	003fcd06 	br	1000a1d4 <__alt_data_end+0xf800a1d4>
1000a2a0:	d8800204 	addi	r2,sp,8
1000a2a4:	a822d53a 	srli	r17,r21,20
1000a2a8:	d8800015 	stw	r2,0(sp)
1000a2ac:	8009883a 	mov	r4,r16
1000a2b0:	900b883a 	mov	r5,r18
1000a2b4:	980d883a 	mov	r6,r19
1000a2b8:	d9c00104 	addi	r7,sp,4
1000a2bc:	000de8c0 	call	1000de8c <__d2b>
1000a2c0:	1039883a 	mov	fp,r2
1000a2c4:	88016a1e 	bne	r17,zero,1000a870 <_dtoa_r+0x710>
1000a2c8:	dd000217 	ldw	r20,8(sp)
1000a2cc:	dc400117 	ldw	r17,4(sp)
1000a2d0:	00befbc4 	movi	r2,-1041
1000a2d4:	a463883a 	add	r17,r20,r17
1000a2d8:	8882ea16 	blt	r17,r2,1000ae84 <_dtoa_r+0xd24>
1000a2dc:	00bf0384 	movi	r2,-1010
1000a2e0:	1445c83a 	sub	r2,r2,r17
1000a2e4:	89010484 	addi	r4,r17,1042
1000a2e8:	a8aa983a 	sll	r21,r21,r2
1000a2ec:	9108d83a 	srl	r4,r18,r4
1000a2f0:	a908b03a 	or	r4,r21,r4
1000a2f4:	0011c600 	call	10011c60 <__floatunsidf>
1000a2f8:	017f8434 	movhi	r5,65040
1000a2fc:	01800044 	movi	r6,1
1000a300:	1009883a 	mov	r4,r2
1000a304:	194b883a 	add	r5,r3,r5
1000a308:	8c7fffc4 	addi	r17,r17,-1
1000a30c:	d9800f15 	stw	r6,60(sp)
1000a310:	000d883a 	mov	r6,zero
1000a314:	01cffe34 	movhi	r7,16376
1000a318:	00071400 	call	10007140 <__subdf3>
1000a31c:	0198dbf4 	movhi	r6,25455
1000a320:	01cff4f4 	movhi	r7,16339
1000a324:	1009883a 	mov	r4,r2
1000a328:	180b883a 	mov	r5,r3
1000a32c:	3190d844 	addi	r6,r6,17249
1000a330:	39e1e9c4 	addi	r7,r7,-30809
1000a334:	00068d40 	call	100068d4 <__muldf3>
1000a338:	01a2d874 	movhi	r6,35681
1000a33c:	01cff1f4 	movhi	r7,16327
1000a340:	180b883a 	mov	r5,r3
1000a344:	31b22cc4 	addi	r6,r6,-14157
1000a348:	39e28a04 	addi	r7,r7,-30168
1000a34c:	1009883a 	mov	r4,r2
1000a350:	00054740 	call	10005474 <__adddf3>
1000a354:	8809883a 	mov	r4,r17
1000a358:	102d883a 	mov	r22,r2
1000a35c:	182b883a 	mov	r21,r3
1000a360:	0007a980 	call	10007a98 <__floatsidf>
1000a364:	019427f4 	movhi	r6,20639
1000a368:	01cff4f4 	movhi	r7,16339
1000a36c:	1009883a 	mov	r4,r2
1000a370:	180b883a 	mov	r5,r3
1000a374:	319e7ec4 	addi	r6,r6,31227
1000a378:	39d104c4 	addi	r7,r7,17427
1000a37c:	00068d40 	call	100068d4 <__muldf3>
1000a380:	b009883a 	mov	r4,r22
1000a384:	a80b883a 	mov	r5,r21
1000a388:	100d883a 	mov	r6,r2
1000a38c:	180f883a 	mov	r7,r3
1000a390:	00054740 	call	10005474 <__adddf3>
1000a394:	1009883a 	mov	r4,r2
1000a398:	180b883a 	mov	r5,r3
1000a39c:	102d883a 	mov	r22,r2
1000a3a0:	182b883a 	mov	r21,r3
1000a3a4:	0007a100 	call	10007a10 <__fixdfsi>
1000a3a8:	b009883a 	mov	r4,r22
1000a3ac:	a80b883a 	mov	r5,r21
1000a3b0:	000d883a 	mov	r6,zero
1000a3b4:	000f883a 	mov	r7,zero
1000a3b8:	d8800515 	stw	r2,20(sp)
1000a3bc:	00067f40 	call	100067f4 <__ledf2>
1000a3c0:	10023116 	blt	r2,zero,1000ac88 <_dtoa_r+0xb28>
1000a3c4:	d8c00517 	ldw	r3,20(sp)
1000a3c8:	00800584 	movi	r2,22
1000a3cc:	10c21f36 	bltu	r2,r3,1000ac4c <_dtoa_r+0xaec>
1000a3d0:	180490fa 	slli	r2,r3,3
1000a3d4:	00c40074 	movhi	r3,4097
1000a3d8:	18d1f704 	addi	r3,r3,18396
1000a3dc:	1885883a 	add	r2,r3,r2
1000a3e0:	11000017 	ldw	r4,0(r2)
1000a3e4:	11400117 	ldw	r5,4(r2)
1000a3e8:	900d883a 	mov	r6,r18
1000a3ec:	980f883a 	mov	r7,r19
1000a3f0:	00067140 	call	10006714 <__gedf2>
1000a3f4:	0082a70e 	bge	zero,r2,1000ae94 <_dtoa_r+0xd34>
1000a3f8:	d9000517 	ldw	r4,20(sp)
1000a3fc:	d8000c15 	stw	zero,48(sp)
1000a400:	213fffc4 	addi	r4,r4,-1
1000a404:	d9000515 	stw	r4,20(sp)
1000a408:	a463c83a 	sub	r17,r20,r17
1000a40c:	8dbfffc4 	addi	r22,r17,-1
1000a410:	b0021916 	blt	r22,zero,1000ac78 <_dtoa_r+0xb18>
1000a414:	d8000815 	stw	zero,32(sp)
1000a418:	d8800517 	ldw	r2,20(sp)
1000a41c:	10020e16 	blt	r2,zero,1000ac58 <_dtoa_r+0xaf8>
1000a420:	b0ad883a 	add	r22,r22,r2
1000a424:	d8800a15 	stw	r2,40(sp)
1000a428:	d8000915 	stw	zero,36(sp)
1000a42c:	d8c00317 	ldw	r3,12(sp)
1000a430:	00800244 	movi	r2,9
1000a434:	10c11a36 	bltu	r2,r3,1000a8a0 <_dtoa_r+0x740>
1000a438:	00800144 	movi	r2,5
1000a43c:	10c4fc0e 	bge	r2,r3,1000b830 <_dtoa_r+0x16d0>
1000a440:	18ffff04 	addi	r3,r3,-4
1000a444:	d8c00315 	stw	r3,12(sp)
1000a448:	0029883a 	mov	r20,zero
1000a44c:	d9800317 	ldw	r6,12(sp)
1000a450:	008000c4 	movi	r2,3
1000a454:	3083bd26 	beq	r6,r2,1000b34c <_dtoa_r+0x11ec>
1000a458:	1183670e 	bge	r2,r6,1000b1f8 <_dtoa_r+0x1098>
1000a45c:	d8c00317 	ldw	r3,12(sp)
1000a460:	00800104 	movi	r2,4
1000a464:	1882e726 	beq	r3,r2,1000b004 <_dtoa_r+0xea4>
1000a468:	00800144 	movi	r2,5
1000a46c:	1884f21e 	bne	r3,r2,1000b838 <_dtoa_r+0x16d8>
1000a470:	00800044 	movi	r2,1
1000a474:	d8800b15 	stw	r2,44(sp)
1000a478:	d8c02217 	ldw	r3,136(sp)
1000a47c:	d9000517 	ldw	r4,20(sp)
1000a480:	1907883a 	add	r3,r3,r4
1000a484:	19800044 	addi	r6,r3,1
1000a488:	d8c00d15 	stw	r3,52(sp)
1000a48c:	d9800615 	stw	r6,24(sp)
1000a490:	0183c30e 	bge	zero,r6,1000b3a0 <_dtoa_r+0x1240>
1000a494:	d9800617 	ldw	r6,24(sp)
1000a498:	3023883a 	mov	r17,r6
1000a49c:	80001115 	stw	zero,68(r16)
1000a4a0:	008005c4 	movi	r2,23
1000a4a4:	1184f62e 	bgeu	r2,r6,1000b880 <_dtoa_r+0x1720>
1000a4a8:	00c00044 	movi	r3,1
1000a4ac:	00800104 	movi	r2,4
1000a4b0:	1085883a 	add	r2,r2,r2
1000a4b4:	11000504 	addi	r4,r2,20
1000a4b8:	180b883a 	mov	r5,r3
1000a4bc:	18c00044 	addi	r3,r3,1
1000a4c0:	313ffb2e 	bgeu	r6,r4,1000a4b0 <__alt_data_end+0xf800a4b0>
1000a4c4:	81401115 	stw	r5,68(r16)
1000a4c8:	8009883a 	mov	r4,r16
1000a4cc:	000d19c0 	call	1000d19c <_Balloc>
1000a4d0:	d8800715 	stw	r2,28(sp)
1000a4d4:	80801015 	stw	r2,64(r16)
1000a4d8:	00800384 	movi	r2,14
1000a4dc:	1440fd36 	bltu	r2,r17,1000a8d4 <_dtoa_r+0x774>
1000a4e0:	a000fc26 	beq	r20,zero,1000a8d4 <_dtoa_r+0x774>
1000a4e4:	d8800517 	ldw	r2,20(sp)
1000a4e8:	0083b90e 	bge	zero,r2,1000b3d0 <_dtoa_r+0x1270>
1000a4ec:	d8c00517 	ldw	r3,20(sp)
1000a4f0:	108003cc 	andi	r2,r2,15
1000a4f4:	100490fa 	slli	r2,r2,3
1000a4f8:	182fd13a 	srai	r23,r3,4
1000a4fc:	00c40074 	movhi	r3,4097
1000a500:	18d1f704 	addi	r3,r3,18396
1000a504:	1885883a 	add	r2,r3,r2
1000a508:	b8c0040c 	andi	r3,r23,16
1000a50c:	12c00017 	ldw	r11,0(r2)
1000a510:	12800117 	ldw	r10,4(r2)
1000a514:	18039726 	beq	r3,zero,1000b374 <_dtoa_r+0x1214>
1000a518:	00840074 	movhi	r2,4097
1000a51c:	1091ed04 	addi	r2,r2,18356
1000a520:	11800817 	ldw	r6,32(r2)
1000a524:	11c00917 	ldw	r7,36(r2)
1000a528:	9009883a 	mov	r4,r18
1000a52c:	980b883a 	mov	r5,r19
1000a530:	da801615 	stw	r10,88(sp)
1000a534:	dac01515 	stw	r11,84(sp)
1000a538:	0005d100 	call	10005d10 <__divdf3>
1000a53c:	da801617 	ldw	r10,88(sp)
1000a540:	dac01517 	ldw	r11,84(sp)
1000a544:	bdc003cc 	andi	r23,r23,15
1000a548:	044000c4 	movi	r17,3
1000a54c:	d8800e15 	stw	r2,56(sp)
1000a550:	182b883a 	mov	r21,r3
1000a554:	b8001126 	beq	r23,zero,1000a59c <_dtoa_r+0x43c>
1000a558:	05040074 	movhi	r20,4097
1000a55c:	a511ed04 	addi	r20,r20,18356
1000a560:	5805883a 	mov	r2,r11
1000a564:	5007883a 	mov	r3,r10
1000a568:	b980004c 	andi	r6,r23,1
1000a56c:	1009883a 	mov	r4,r2
1000a570:	b82fd07a 	srai	r23,r23,1
1000a574:	180b883a 	mov	r5,r3
1000a578:	30000426 	beq	r6,zero,1000a58c <_dtoa_r+0x42c>
1000a57c:	a1800017 	ldw	r6,0(r20)
1000a580:	a1c00117 	ldw	r7,4(r20)
1000a584:	8c400044 	addi	r17,r17,1
1000a588:	00068d40 	call	100068d4 <__muldf3>
1000a58c:	a5000204 	addi	r20,r20,8
1000a590:	b83ff51e 	bne	r23,zero,1000a568 <__alt_data_end+0xf800a568>
1000a594:	1017883a 	mov	r11,r2
1000a598:	1815883a 	mov	r10,r3
1000a59c:	d9000e17 	ldw	r4,56(sp)
1000a5a0:	a80b883a 	mov	r5,r21
1000a5a4:	580d883a 	mov	r6,r11
1000a5a8:	500f883a 	mov	r7,r10
1000a5ac:	0005d100 	call	10005d10 <__divdf3>
1000a5b0:	1029883a 	mov	r20,r2
1000a5b4:	182b883a 	mov	r21,r3
1000a5b8:	d9800c17 	ldw	r6,48(sp)
1000a5bc:	30000626 	beq	r6,zero,1000a5d8 <_dtoa_r+0x478>
1000a5c0:	a009883a 	mov	r4,r20
1000a5c4:	a80b883a 	mov	r5,r21
1000a5c8:	000d883a 	mov	r6,zero
1000a5cc:	01cffc34 	movhi	r7,16368
1000a5d0:	00067f40 	call	100067f4 <__ledf2>
1000a5d4:	10043216 	blt	r2,zero,1000b6a0 <_dtoa_r+0x1540>
1000a5d8:	8809883a 	mov	r4,r17
1000a5dc:	0007a980 	call	10007a98 <__floatsidf>
1000a5e0:	1009883a 	mov	r4,r2
1000a5e4:	180b883a 	mov	r5,r3
1000a5e8:	a00d883a 	mov	r6,r20
1000a5ec:	a80f883a 	mov	r7,r21
1000a5f0:	00068d40 	call	100068d4 <__muldf3>
1000a5f4:	000d883a 	mov	r6,zero
1000a5f8:	1009883a 	mov	r4,r2
1000a5fc:	180b883a 	mov	r5,r3
1000a600:	01d00734 	movhi	r7,16412
1000a604:	00054740 	call	10005474 <__adddf3>
1000a608:	1023883a 	mov	r17,r2
1000a60c:	d9800617 	ldw	r6,24(sp)
1000a610:	00bf3034 	movhi	r2,64704
1000a614:	1885883a 	add	r2,r3,r2
1000a618:	d8800e15 	stw	r2,56(sp)
1000a61c:	30032e26 	beq	r6,zero,1000b2d8 <_dtoa_r+0x1178>
1000a620:	d8c00517 	ldw	r3,20(sp)
1000a624:	da800617 	ldw	r10,24(sp)
1000a628:	d8c01215 	stw	r3,72(sp)
1000a62c:	d9000b17 	ldw	r4,44(sp)
1000a630:	2003b026 	beq	r4,zero,1000b4f4 <_dtoa_r+0x1394>
1000a634:	50bfffc4 	addi	r2,r10,-1
1000a638:	100490fa 	slli	r2,r2,3
1000a63c:	00c40074 	movhi	r3,4097
1000a640:	18d1f704 	addi	r3,r3,18396
1000a644:	1885883a 	add	r2,r3,r2
1000a648:	11800017 	ldw	r6,0(r2)
1000a64c:	11c00117 	ldw	r7,4(r2)
1000a650:	d8800717 	ldw	r2,28(sp)
1000a654:	0009883a 	mov	r4,zero
1000a658:	014ff834 	movhi	r5,16352
1000a65c:	da801615 	stw	r10,88(sp)
1000a660:	15c00044 	addi	r23,r2,1
1000a664:	0005d100 	call	10005d10 <__divdf3>
1000a668:	d9c00e17 	ldw	r7,56(sp)
1000a66c:	880d883a 	mov	r6,r17
1000a670:	1009883a 	mov	r4,r2
1000a674:	180b883a 	mov	r5,r3
1000a678:	00071400 	call	10007140 <__subdf3>
1000a67c:	a80b883a 	mov	r5,r21
1000a680:	a009883a 	mov	r4,r20
1000a684:	d8c01015 	stw	r3,64(sp)
1000a688:	d8800e15 	stw	r2,56(sp)
1000a68c:	0007a100 	call	10007a10 <__fixdfsi>
1000a690:	1009883a 	mov	r4,r2
1000a694:	d8801715 	stw	r2,92(sp)
1000a698:	0007a980 	call	10007a98 <__floatsidf>
1000a69c:	a009883a 	mov	r4,r20
1000a6a0:	a80b883a 	mov	r5,r21
1000a6a4:	100d883a 	mov	r6,r2
1000a6a8:	180f883a 	mov	r7,r3
1000a6ac:	00071400 	call	10007140 <__subdf3>
1000a6b0:	da001717 	ldw	r8,92(sp)
1000a6b4:	1829883a 	mov	r20,r3
1000a6b8:	d8c00717 	ldw	r3,28(sp)
1000a6bc:	d9000e17 	ldw	r4,56(sp)
1000a6c0:	d9401017 	ldw	r5,64(sp)
1000a6c4:	42000c04 	addi	r8,r8,48
1000a6c8:	1023883a 	mov	r17,r2
1000a6cc:	1a000005 	stb	r8,0(r3)
1000a6d0:	880d883a 	mov	r6,r17
1000a6d4:	a00f883a 	mov	r7,r20
1000a6d8:	402b883a 	mov	r21,r8
1000a6dc:	00067140 	call	10006714 <__gedf2>
1000a6e0:	00844516 	blt	zero,r2,1000b7f8 <_dtoa_r+0x1698>
1000a6e4:	0009883a 	mov	r4,zero
1000a6e8:	014ffc34 	movhi	r5,16368
1000a6ec:	880d883a 	mov	r6,r17
1000a6f0:	a00f883a 	mov	r7,r20
1000a6f4:	00071400 	call	10007140 <__subdf3>
1000a6f8:	d9000e17 	ldw	r4,56(sp)
1000a6fc:	d9401017 	ldw	r5,64(sp)
1000a700:	100d883a 	mov	r6,r2
1000a704:	180f883a 	mov	r7,r3
1000a708:	00067140 	call	10006714 <__gedf2>
1000a70c:	da801617 	ldw	r10,88(sp)
1000a710:	00843616 	blt	zero,r2,1000b7ec <_dtoa_r+0x168c>
1000a714:	00800044 	movi	r2,1
1000a718:	12806e0e 	bge	r2,r10,1000a8d4 <_dtoa_r+0x774>
1000a71c:	d9000717 	ldw	r4,28(sp)
1000a720:	dd801315 	stw	r22,76(sp)
1000a724:	dc001115 	stw	r16,68(sp)
1000a728:	2295883a 	add	r10,r4,r10
1000a72c:	dcc01415 	stw	r19,80(sp)
1000a730:	502d883a 	mov	r22,r10
1000a734:	dcc01017 	ldw	r19,64(sp)
1000a738:	b821883a 	mov	r16,r23
1000a73c:	dc801015 	stw	r18,64(sp)
1000a740:	dc800e17 	ldw	r18,56(sp)
1000a744:	00000906 	br	1000a76c <_dtoa_r+0x60c>
1000a748:	00071400 	call	10007140 <__subdf3>
1000a74c:	1009883a 	mov	r4,r2
1000a750:	180b883a 	mov	r5,r3
1000a754:	900d883a 	mov	r6,r18
1000a758:	980f883a 	mov	r7,r19
1000a75c:	00067f40 	call	100067f4 <__ledf2>
1000a760:	10040e16 	blt	r2,zero,1000b79c <_dtoa_r+0x163c>
1000a764:	b821883a 	mov	r16,r23
1000a768:	bd841026 	beq	r23,r22,1000b7ac <_dtoa_r+0x164c>
1000a76c:	9009883a 	mov	r4,r18
1000a770:	980b883a 	mov	r5,r19
1000a774:	000d883a 	mov	r6,zero
1000a778:	01d00934 	movhi	r7,16420
1000a77c:	00068d40 	call	100068d4 <__muldf3>
1000a780:	000d883a 	mov	r6,zero
1000a784:	01d00934 	movhi	r7,16420
1000a788:	8809883a 	mov	r4,r17
1000a78c:	a00b883a 	mov	r5,r20
1000a790:	1025883a 	mov	r18,r2
1000a794:	1827883a 	mov	r19,r3
1000a798:	00068d40 	call	100068d4 <__muldf3>
1000a79c:	180b883a 	mov	r5,r3
1000a7a0:	1009883a 	mov	r4,r2
1000a7a4:	1823883a 	mov	r17,r3
1000a7a8:	1029883a 	mov	r20,r2
1000a7ac:	0007a100 	call	10007a10 <__fixdfsi>
1000a7b0:	1009883a 	mov	r4,r2
1000a7b4:	102b883a 	mov	r21,r2
1000a7b8:	0007a980 	call	10007a98 <__floatsidf>
1000a7bc:	a009883a 	mov	r4,r20
1000a7c0:	880b883a 	mov	r5,r17
1000a7c4:	100d883a 	mov	r6,r2
1000a7c8:	180f883a 	mov	r7,r3
1000a7cc:	00071400 	call	10007140 <__subdf3>
1000a7d0:	ad400c04 	addi	r21,r21,48
1000a7d4:	1009883a 	mov	r4,r2
1000a7d8:	180b883a 	mov	r5,r3
1000a7dc:	900d883a 	mov	r6,r18
1000a7e0:	980f883a 	mov	r7,r19
1000a7e4:	85400005 	stb	r21,0(r16)
1000a7e8:	1023883a 	mov	r17,r2
1000a7ec:	1829883a 	mov	r20,r3
1000a7f0:	00067f40 	call	100067f4 <__ledf2>
1000a7f4:	bdc00044 	addi	r23,r23,1
1000a7f8:	0009883a 	mov	r4,zero
1000a7fc:	014ffc34 	movhi	r5,16368
1000a800:	880d883a 	mov	r6,r17
1000a804:	a00f883a 	mov	r7,r20
1000a808:	103fcf0e 	bge	r2,zero,1000a748 <__alt_data_end+0xf800a748>
1000a80c:	d9801217 	ldw	r6,72(sp)
1000a810:	dc001117 	ldw	r16,68(sp)
1000a814:	d9800515 	stw	r6,20(sp)
1000a818:	8009883a 	mov	r4,r16
1000a81c:	e00b883a 	mov	r5,fp
1000a820:	000d2440 	call	1000d244 <_Bfree>
1000a824:	d8c00517 	ldw	r3,20(sp)
1000a828:	d9002317 	ldw	r4,140(sp)
1000a82c:	d9802517 	ldw	r6,148(sp)
1000a830:	b8000005 	stb	zero,0(r23)
1000a834:	18800044 	addi	r2,r3,1
1000a838:	20800015 	stw	r2,0(r4)
1000a83c:	30027226 	beq	r6,zero,1000b208 <_dtoa_r+0x10a8>
1000a840:	35c00015 	stw	r23,0(r6)
1000a844:	d8800717 	ldw	r2,28(sp)
1000a848:	003e7406 	br	1000a21c <__alt_data_end+0xf800a21c>
1000a84c:	00800434 	movhi	r2,16
1000a850:	10bfffc4 	addi	r2,r2,-1
1000a854:	a8aa703a 	and	r21,r21,r2
1000a858:	a83e801e 	bne	r21,zero,1000a25c <__alt_data_end+0xf800a25c>
1000a85c:	00840074 	movhi	r2,4097
1000a860:	1091d904 	addi	r2,r2,18276
1000a864:	003e7f06 	br	1000a264 <__alt_data_end+0xf800a264>
1000a868:	10c00204 	addi	r3,r2,8
1000a86c:	003e8206 	br	1000a278 <__alt_data_end+0xf800a278>
1000a870:	01400434 	movhi	r5,16
1000a874:	297fffc4 	addi	r5,r5,-1
1000a878:	994a703a 	and	r5,r19,r5
1000a87c:	9009883a 	mov	r4,r18
1000a880:	8c7f0044 	addi	r17,r17,-1023
1000a884:	294ffc34 	orhi	r5,r5,16368
1000a888:	dd000217 	ldw	r20,8(sp)
1000a88c:	d8000f15 	stw	zero,60(sp)
1000a890:	003e9f06 	br	1000a310 <__alt_data_end+0xf800a310>
1000a894:	00840074 	movhi	r2,4097
1000a898:	1091d004 	addi	r2,r2,18240
1000a89c:	003e5f06 	br	1000a21c <__alt_data_end+0xf800a21c>
1000a8a0:	80001115 	stw	zero,68(r16)
1000a8a4:	8009883a 	mov	r4,r16
1000a8a8:	000b883a 	mov	r5,zero
1000a8ac:	000d19c0 	call	1000d19c <_Balloc>
1000a8b0:	01bfffc4 	movi	r6,-1
1000a8b4:	d8800715 	stw	r2,28(sp)
1000a8b8:	80801015 	stw	r2,64(r16)
1000a8bc:	00800044 	movi	r2,1
1000a8c0:	d9800615 	stw	r6,24(sp)
1000a8c4:	d8800b15 	stw	r2,44(sp)
1000a8c8:	d8002215 	stw	zero,136(sp)
1000a8cc:	d9800d15 	stw	r6,52(sp)
1000a8d0:	d8000315 	stw	zero,12(sp)
1000a8d4:	d8800117 	ldw	r2,4(sp)
1000a8d8:	10008e16 	blt	r2,zero,1000ab14 <_dtoa_r+0x9b4>
1000a8dc:	d9000517 	ldw	r4,20(sp)
1000a8e0:	00c00384 	movi	r3,14
1000a8e4:	19008b16 	blt	r3,r4,1000ab14 <_dtoa_r+0x9b4>
1000a8e8:	200490fa 	slli	r2,r4,3
1000a8ec:	00c40074 	movhi	r3,4097
1000a8f0:	d9802217 	ldw	r6,136(sp)
1000a8f4:	18d1f704 	addi	r3,r3,18396
1000a8f8:	1885883a 	add	r2,r3,r2
1000a8fc:	14400017 	ldw	r17,0(r2)
1000a900:	15000117 	ldw	r20,4(r2)
1000a904:	3001c716 	blt	r6,zero,1000b024 <_dtoa_r+0xec4>
1000a908:	880d883a 	mov	r6,r17
1000a90c:	a00f883a 	mov	r7,r20
1000a910:	9009883a 	mov	r4,r18
1000a914:	980b883a 	mov	r5,r19
1000a918:	0005d100 	call	10005d10 <__divdf3>
1000a91c:	180b883a 	mov	r5,r3
1000a920:	1009883a 	mov	r4,r2
1000a924:	0007a100 	call	10007a10 <__fixdfsi>
1000a928:	1009883a 	mov	r4,r2
1000a92c:	102d883a 	mov	r22,r2
1000a930:	0007a980 	call	10007a98 <__floatsidf>
1000a934:	1009883a 	mov	r4,r2
1000a938:	180b883a 	mov	r5,r3
1000a93c:	880d883a 	mov	r6,r17
1000a940:	a00f883a 	mov	r7,r20
1000a944:	00068d40 	call	100068d4 <__muldf3>
1000a948:	9009883a 	mov	r4,r18
1000a94c:	980b883a 	mov	r5,r19
1000a950:	100d883a 	mov	r6,r2
1000a954:	180f883a 	mov	r7,r3
1000a958:	00071400 	call	10007140 <__subdf3>
1000a95c:	d9000717 	ldw	r4,28(sp)
1000a960:	d9800617 	ldw	r6,24(sp)
1000a964:	180b883a 	mov	r5,r3
1000a968:	b0c00c04 	addi	r3,r22,48
1000a96c:	20c00005 	stb	r3,0(r4)
1000a970:	25c00044 	addi	r23,r4,1
1000a974:	01000044 	movi	r4,1
1000a978:	1011883a 	mov	r8,r2
1000a97c:	2807883a 	mov	r3,r5
1000a980:	31003d26 	beq	r6,r4,1000aa78 <_dtoa_r+0x918>
1000a984:	000d883a 	mov	r6,zero
1000a988:	01d00934 	movhi	r7,16420
1000a98c:	1009883a 	mov	r4,r2
1000a990:	00068d40 	call	100068d4 <__muldf3>
1000a994:	1009883a 	mov	r4,r2
1000a998:	180b883a 	mov	r5,r3
1000a99c:	000d883a 	mov	r6,zero
1000a9a0:	000f883a 	mov	r7,zero
1000a9a4:	1027883a 	mov	r19,r2
1000a9a8:	182b883a 	mov	r21,r3
1000a9ac:	00066900 	call	10006690 <__eqdf2>
1000a9b0:	103f9926 	beq	r2,zero,1000a818 <__alt_data_end+0xf800a818>
1000a9b4:	d8c00617 	ldw	r3,24(sp)
1000a9b8:	d9000717 	ldw	r4,28(sp)
1000a9bc:	b825883a 	mov	r18,r23
1000a9c0:	18bfffc4 	addi	r2,r3,-1
1000a9c4:	20ad883a 	add	r22,r4,r2
1000a9c8:	dc000315 	stw	r16,12(sp)
1000a9cc:	00000a06 	br	1000a9f8 <_dtoa_r+0x898>
1000a9d0:	00068d40 	call	100068d4 <__muldf3>
1000a9d4:	1009883a 	mov	r4,r2
1000a9d8:	180b883a 	mov	r5,r3
1000a9dc:	000d883a 	mov	r6,zero
1000a9e0:	000f883a 	mov	r7,zero
1000a9e4:	1027883a 	mov	r19,r2
1000a9e8:	182b883a 	mov	r21,r3
1000a9ec:	b825883a 	mov	r18,r23
1000a9f0:	00066900 	call	10006690 <__eqdf2>
1000a9f4:	10022626 	beq	r2,zero,1000b290 <_dtoa_r+0x1130>
1000a9f8:	880d883a 	mov	r6,r17
1000a9fc:	a00f883a 	mov	r7,r20
1000aa00:	9809883a 	mov	r4,r19
1000aa04:	a80b883a 	mov	r5,r21
1000aa08:	0005d100 	call	10005d10 <__divdf3>
1000aa0c:	180b883a 	mov	r5,r3
1000aa10:	1009883a 	mov	r4,r2
1000aa14:	0007a100 	call	10007a10 <__fixdfsi>
1000aa18:	1009883a 	mov	r4,r2
1000aa1c:	1021883a 	mov	r16,r2
1000aa20:	0007a980 	call	10007a98 <__floatsidf>
1000aa24:	1009883a 	mov	r4,r2
1000aa28:	180b883a 	mov	r5,r3
1000aa2c:	880d883a 	mov	r6,r17
1000aa30:	a00f883a 	mov	r7,r20
1000aa34:	00068d40 	call	100068d4 <__muldf3>
1000aa38:	9809883a 	mov	r4,r19
1000aa3c:	a80b883a 	mov	r5,r21
1000aa40:	100d883a 	mov	r6,r2
1000aa44:	180f883a 	mov	r7,r3
1000aa48:	00071400 	call	10007140 <__subdf3>
1000aa4c:	82000c04 	addi	r8,r16,48
1000aa50:	92000005 	stb	r8,0(r18)
1000aa54:	1009883a 	mov	r4,r2
1000aa58:	180b883a 	mov	r5,r3
1000aa5c:	000d883a 	mov	r6,zero
1000aa60:	01d00934 	movhi	r7,16420
1000aa64:	1011883a 	mov	r8,r2
1000aa68:	bdc00044 	addi	r23,r23,1
1000aa6c:	95bfd81e 	bne	r18,r22,1000a9d0 <__alt_data_end+0xf800a9d0>
1000aa70:	802d883a 	mov	r22,r16
1000aa74:	dc000317 	ldw	r16,12(sp)
1000aa78:	4009883a 	mov	r4,r8
1000aa7c:	180b883a 	mov	r5,r3
1000aa80:	400d883a 	mov	r6,r8
1000aa84:	180f883a 	mov	r7,r3
1000aa88:	00054740 	call	10005474 <__adddf3>
1000aa8c:	8809883a 	mov	r4,r17
1000aa90:	a00b883a 	mov	r5,r20
1000aa94:	100d883a 	mov	r6,r2
1000aa98:	180f883a 	mov	r7,r3
1000aa9c:	1027883a 	mov	r19,r2
1000aaa0:	1825883a 	mov	r18,r3
1000aaa4:	00067f40 	call	100067f4 <__ledf2>
1000aaa8:	10000816 	blt	r2,zero,1000aacc <_dtoa_r+0x96c>
1000aaac:	8809883a 	mov	r4,r17
1000aab0:	a00b883a 	mov	r5,r20
1000aab4:	980d883a 	mov	r6,r19
1000aab8:	900f883a 	mov	r7,r18
1000aabc:	00066900 	call	10006690 <__eqdf2>
1000aac0:	103f551e 	bne	r2,zero,1000a818 <__alt_data_end+0xf800a818>
1000aac4:	b580004c 	andi	r22,r22,1
1000aac8:	b03f5326 	beq	r22,zero,1000a818 <__alt_data_end+0xf800a818>
1000aacc:	bd7fffc3 	ldbu	r21,-1(r23)
1000aad0:	b8bfffc4 	addi	r2,r23,-1
1000aad4:	1007883a 	mov	r3,r2
1000aad8:	01400e44 	movi	r5,57
1000aadc:	d9800717 	ldw	r6,28(sp)
1000aae0:	00000506 	br	1000aaf8 <_dtoa_r+0x998>
1000aae4:	18ffffc4 	addi	r3,r3,-1
1000aae8:	30825e26 	beq	r6,r2,1000b464 <_dtoa_r+0x1304>
1000aaec:	1d400003 	ldbu	r21,0(r3)
1000aaf0:	102f883a 	mov	r23,r2
1000aaf4:	10bfffc4 	addi	r2,r2,-1
1000aaf8:	a9003fcc 	andi	r4,r21,255
1000aafc:	2100201c 	xori	r4,r4,128
1000ab00:	213fe004 	addi	r4,r4,-128
1000ab04:	217ff726 	beq	r4,r5,1000aae4 <__alt_data_end+0xf800aae4>
1000ab08:	aa000044 	addi	r8,r21,1
1000ab0c:	12000005 	stb	r8,0(r2)
1000ab10:	003f4106 	br	1000a818 <__alt_data_end+0xf800a818>
1000ab14:	d8c00b17 	ldw	r3,44(sp)
1000ab18:	18006726 	beq	r3,zero,1000acb8 <_dtoa_r+0xb58>
1000ab1c:	d9000317 	ldw	r4,12(sp)
1000ab20:	00c00044 	movi	r3,1
1000ab24:	19016a0e 	bge	r3,r4,1000b0d0 <_dtoa_r+0xf70>
1000ab28:	d8800617 	ldw	r2,24(sp)
1000ab2c:	d8c00917 	ldw	r3,36(sp)
1000ab30:	157fffc4 	addi	r21,r2,-1
1000ab34:	1d420716 	blt	r3,r21,1000b354 <_dtoa_r+0x11f4>
1000ab38:	1d6bc83a 	sub	r21,r3,r21
1000ab3c:	d8800617 	ldw	r2,24(sp)
1000ab40:	1002c716 	blt	r2,zero,1000b660 <_dtoa_r+0x1500>
1000ab44:	dd000817 	ldw	r20,32(sp)
1000ab48:	d8800617 	ldw	r2,24(sp)
1000ab4c:	d9800817 	ldw	r6,32(sp)
1000ab50:	8009883a 	mov	r4,r16
1000ab54:	01400044 	movi	r5,1
1000ab58:	308d883a 	add	r6,r6,r2
1000ab5c:	d9800815 	stw	r6,32(sp)
1000ab60:	b0ad883a 	add	r22,r22,r2
1000ab64:	000d5c40 	call	1000d5c4 <__i2b>
1000ab68:	1023883a 	mov	r17,r2
1000ab6c:	a0000826 	beq	r20,zero,1000ab90 <_dtoa_r+0xa30>
1000ab70:	0580070e 	bge	zero,r22,1000ab90 <_dtoa_r+0xa30>
1000ab74:	b005883a 	mov	r2,r22
1000ab78:	a5812016 	blt	r20,r22,1000affc <_dtoa_r+0xe9c>
1000ab7c:	d8c00817 	ldw	r3,32(sp)
1000ab80:	a0a9c83a 	sub	r20,r20,r2
1000ab84:	b0adc83a 	sub	r22,r22,r2
1000ab88:	1887c83a 	sub	r3,r3,r2
1000ab8c:	d8c00815 	stw	r3,32(sp)
1000ab90:	d9000917 	ldw	r4,36(sp)
1000ab94:	0100140e 	bge	zero,r4,1000abe8 <_dtoa_r+0xa88>
1000ab98:	d9800b17 	ldw	r6,44(sp)
1000ab9c:	3001e526 	beq	r6,zero,1000b334 <_dtoa_r+0x11d4>
1000aba0:	05400e0e 	bge	zero,r21,1000abdc <_dtoa_r+0xa7c>
1000aba4:	880b883a 	mov	r5,r17
1000aba8:	8009883a 	mov	r4,r16
1000abac:	a80d883a 	mov	r6,r21
1000abb0:	000d8900 	call	1000d890 <__pow5mult>
1000abb4:	e00d883a 	mov	r6,fp
1000abb8:	8009883a 	mov	r4,r16
1000abbc:	100b883a 	mov	r5,r2
1000abc0:	1023883a 	mov	r17,r2
1000abc4:	000d6000 	call	1000d600 <__multiply>
1000abc8:	102f883a 	mov	r23,r2
1000abcc:	e00b883a 	mov	r5,fp
1000abd0:	8009883a 	mov	r4,r16
1000abd4:	000d2440 	call	1000d244 <_Bfree>
1000abd8:	b839883a 	mov	fp,r23
1000abdc:	d8800917 	ldw	r2,36(sp)
1000abe0:	154dc83a 	sub	r6,r2,r21
1000abe4:	3001281e 	bne	r6,zero,1000b088 <_dtoa_r+0xf28>
1000abe8:	05c00044 	movi	r23,1
1000abec:	8009883a 	mov	r4,r16
1000abf0:	b80b883a 	mov	r5,r23
1000abf4:	000d5c40 	call	1000d5c4 <__i2b>
1000abf8:	d8c00a17 	ldw	r3,40(sp)
1000abfc:	102b883a 	mov	r21,r2
1000ac00:	00c0310e 	bge	zero,r3,1000acc8 <_dtoa_r+0xb68>
1000ac04:	8009883a 	mov	r4,r16
1000ac08:	100b883a 	mov	r5,r2
1000ac0c:	180d883a 	mov	r6,r3
1000ac10:	000d8900 	call	1000d890 <__pow5mult>
1000ac14:	d9000317 	ldw	r4,12(sp)
1000ac18:	102b883a 	mov	r21,r2
1000ac1c:	b9011f0e 	bge	r23,r4,1000b09c <_dtoa_r+0xf3c>
1000ac20:	0027883a 	mov	r19,zero
1000ac24:	a8800417 	ldw	r2,16(r21)
1000ac28:	10800104 	addi	r2,r2,4
1000ac2c:	1085883a 	add	r2,r2,r2
1000ac30:	1085883a 	add	r2,r2,r2
1000ac34:	a885883a 	add	r2,r21,r2
1000ac38:	11000017 	ldw	r4,0(r2)
1000ac3c:	000d4ac0 	call	1000d4ac <__hi0bits>
1000ac40:	00c00804 	movi	r3,32
1000ac44:	1885c83a 	sub	r2,r3,r2
1000ac48:	00002506 	br	1000ace0 <_dtoa_r+0xb80>
1000ac4c:	01800044 	movi	r6,1
1000ac50:	d9800c15 	stw	r6,48(sp)
1000ac54:	003dec06 	br	1000a408 <__alt_data_end+0xf800a408>
1000ac58:	d8c00817 	ldw	r3,32(sp)
1000ac5c:	d9000517 	ldw	r4,20(sp)
1000ac60:	d8000a15 	stw	zero,40(sp)
1000ac64:	1907c83a 	sub	r3,r3,r4
1000ac68:	010dc83a 	sub	r6,zero,r4
1000ac6c:	d8c00815 	stw	r3,32(sp)
1000ac70:	d9800915 	stw	r6,36(sp)
1000ac74:	003ded06 	br	1000a42c <__alt_data_end+0xf800a42c>
1000ac78:	05adc83a 	sub	r22,zero,r22
1000ac7c:	dd800815 	stw	r22,32(sp)
1000ac80:	002d883a 	mov	r22,zero
1000ac84:	003de406 	br	1000a418 <__alt_data_end+0xf800a418>
1000ac88:	d9000517 	ldw	r4,20(sp)
1000ac8c:	0007a980 	call	10007a98 <__floatsidf>
1000ac90:	1009883a 	mov	r4,r2
1000ac94:	180b883a 	mov	r5,r3
1000ac98:	b00d883a 	mov	r6,r22
1000ac9c:	a80f883a 	mov	r7,r21
1000aca0:	00066900 	call	10006690 <__eqdf2>
1000aca4:	103dc726 	beq	r2,zero,1000a3c4 <__alt_data_end+0xf800a3c4>
1000aca8:	d8800517 	ldw	r2,20(sp)
1000acac:	10bfffc4 	addi	r2,r2,-1
1000acb0:	d8800515 	stw	r2,20(sp)
1000acb4:	003dc306 	br	1000a3c4 <__alt_data_end+0xf800a3c4>
1000acb8:	dd400917 	ldw	r21,36(sp)
1000acbc:	dd000817 	ldw	r20,32(sp)
1000acc0:	0023883a 	mov	r17,zero
1000acc4:	003fa906 	br	1000ab6c <__alt_data_end+0xf800ab6c>
1000acc8:	d9800317 	ldw	r6,12(sp)
1000accc:	b981670e 	bge	r23,r6,1000b26c <_dtoa_r+0x110c>
1000acd0:	0027883a 	mov	r19,zero
1000acd4:	d8c00a17 	ldw	r3,40(sp)
1000acd8:	183fd21e 	bne	r3,zero,1000ac24 <__alt_data_end+0xf800ac24>
1000acdc:	00800044 	movi	r2,1
1000ace0:	1585883a 	add	r2,r2,r22
1000ace4:	108007cc 	andi	r2,r2,31
1000ace8:	10005f26 	beq	r2,zero,1000ae68 <_dtoa_r+0xd08>
1000acec:	00c00804 	movi	r3,32
1000acf0:	1887c83a 	sub	r3,r3,r2
1000acf4:	01000104 	movi	r4,4
1000acf8:	20c2dd0e 	bge	r4,r3,1000b870 <_dtoa_r+0x1710>
1000acfc:	d9000817 	ldw	r4,32(sp)
1000ad00:	00c00704 	movi	r3,28
1000ad04:	1885c83a 	sub	r2,r3,r2
1000ad08:	2089883a 	add	r4,r4,r2
1000ad0c:	d9000815 	stw	r4,32(sp)
1000ad10:	a0a9883a 	add	r20,r20,r2
1000ad14:	b0ad883a 	add	r22,r22,r2
1000ad18:	d8800817 	ldw	r2,32(sp)
1000ad1c:	0080050e 	bge	zero,r2,1000ad34 <_dtoa_r+0xbd4>
1000ad20:	e00b883a 	mov	r5,fp
1000ad24:	8009883a 	mov	r4,r16
1000ad28:	100d883a 	mov	r6,r2
1000ad2c:	000d9d00 	call	1000d9d0 <__lshift>
1000ad30:	1039883a 	mov	fp,r2
1000ad34:	0580050e 	bge	zero,r22,1000ad4c <_dtoa_r+0xbec>
1000ad38:	a80b883a 	mov	r5,r21
1000ad3c:	8009883a 	mov	r4,r16
1000ad40:	b00d883a 	mov	r6,r22
1000ad44:	000d9d00 	call	1000d9d0 <__lshift>
1000ad48:	102b883a 	mov	r21,r2
1000ad4c:	d8c00c17 	ldw	r3,48(sp)
1000ad50:	1801161e 	bne	r3,zero,1000b1ac <_dtoa_r+0x104c>
1000ad54:	d8c00617 	ldw	r3,24(sp)
1000ad58:	00c12d0e 	bge	zero,r3,1000b210 <_dtoa_r+0x10b0>
1000ad5c:	d8c00b17 	ldw	r3,44(sp)
1000ad60:	1800571e 	bne	r3,zero,1000aec0 <_dtoa_r+0xd60>
1000ad64:	dc800717 	ldw	r18,28(sp)
1000ad68:	dcc00617 	ldw	r19,24(sp)
1000ad6c:	9029883a 	mov	r20,r18
1000ad70:	00000206 	br	1000ad7c <_dtoa_r+0xc1c>
1000ad74:	000d26c0 	call	1000d26c <__multadd>
1000ad78:	1039883a 	mov	fp,r2
1000ad7c:	e009883a 	mov	r4,fp
1000ad80:	a80b883a 	mov	r5,r21
1000ad84:	0009f380 	call	10009f38 <quorem>
1000ad88:	10800c04 	addi	r2,r2,48
1000ad8c:	90800005 	stb	r2,0(r18)
1000ad90:	94800044 	addi	r18,r18,1
1000ad94:	9507c83a 	sub	r3,r18,r20
1000ad98:	8009883a 	mov	r4,r16
1000ad9c:	e00b883a 	mov	r5,fp
1000ada0:	01800284 	movi	r6,10
1000ada4:	000f883a 	mov	r7,zero
1000ada8:	1cfff216 	blt	r3,r19,1000ad74 <__alt_data_end+0xf800ad74>
1000adac:	1011883a 	mov	r8,r2
1000adb0:	d8800617 	ldw	r2,24(sp)
1000adb4:	00822e0e 	bge	zero,r2,1000b670 <_dtoa_r+0x1510>
1000adb8:	d9000717 	ldw	r4,28(sp)
1000adbc:	0025883a 	mov	r18,zero
1000adc0:	20af883a 	add	r23,r4,r2
1000adc4:	e00b883a 	mov	r5,fp
1000adc8:	01800044 	movi	r6,1
1000adcc:	8009883a 	mov	r4,r16
1000add0:	da001715 	stw	r8,92(sp)
1000add4:	000d9d00 	call	1000d9d0 <__lshift>
1000add8:	1009883a 	mov	r4,r2
1000addc:	a80b883a 	mov	r5,r21
1000ade0:	1039883a 	mov	fp,r2
1000ade4:	000db180 	call	1000db18 <__mcmp>
1000ade8:	da001717 	ldw	r8,92(sp)
1000adec:	00816e0e 	bge	zero,r2,1000b3a8 <_dtoa_r+0x1248>
1000adf0:	b93fffc3 	ldbu	r4,-1(r23)
1000adf4:	b8bfffc4 	addi	r2,r23,-1
1000adf8:	1007883a 	mov	r3,r2
1000adfc:	01800e44 	movi	r6,57
1000ae00:	d9c00717 	ldw	r7,28(sp)
1000ae04:	00000506 	br	1000ae1c <_dtoa_r+0xcbc>
1000ae08:	18ffffc4 	addi	r3,r3,-1
1000ae0c:	38811926 	beq	r7,r2,1000b274 <_dtoa_r+0x1114>
1000ae10:	19000003 	ldbu	r4,0(r3)
1000ae14:	102f883a 	mov	r23,r2
1000ae18:	10bfffc4 	addi	r2,r2,-1
1000ae1c:	21403fcc 	andi	r5,r4,255
1000ae20:	2940201c 	xori	r5,r5,128
1000ae24:	297fe004 	addi	r5,r5,-128
1000ae28:	29bff726 	beq	r5,r6,1000ae08 <__alt_data_end+0xf800ae08>
1000ae2c:	21000044 	addi	r4,r4,1
1000ae30:	11000005 	stb	r4,0(r2)
1000ae34:	8009883a 	mov	r4,r16
1000ae38:	a80b883a 	mov	r5,r21
1000ae3c:	000d2440 	call	1000d244 <_Bfree>
1000ae40:	883e7526 	beq	r17,zero,1000a818 <__alt_data_end+0xf800a818>
1000ae44:	90000426 	beq	r18,zero,1000ae58 <_dtoa_r+0xcf8>
1000ae48:	94400326 	beq	r18,r17,1000ae58 <_dtoa_r+0xcf8>
1000ae4c:	8009883a 	mov	r4,r16
1000ae50:	900b883a 	mov	r5,r18
1000ae54:	000d2440 	call	1000d244 <_Bfree>
1000ae58:	8009883a 	mov	r4,r16
1000ae5c:	880b883a 	mov	r5,r17
1000ae60:	000d2440 	call	1000d244 <_Bfree>
1000ae64:	003e6c06 	br	1000a818 <__alt_data_end+0xf800a818>
1000ae68:	00800704 	movi	r2,28
1000ae6c:	d9800817 	ldw	r6,32(sp)
1000ae70:	a0a9883a 	add	r20,r20,r2
1000ae74:	b0ad883a 	add	r22,r22,r2
1000ae78:	308d883a 	add	r6,r6,r2
1000ae7c:	d9800815 	stw	r6,32(sp)
1000ae80:	003fa506 	br	1000ad18 <__alt_data_end+0xf800ad18>
1000ae84:	013efb84 	movi	r4,-1042
1000ae88:	246bc83a 	sub	r21,r4,r17
1000ae8c:	9548983a 	sll	r4,r18,r21
1000ae90:	003d1806 	br	1000a2f4 <__alt_data_end+0xf800a2f4>
1000ae94:	d8000c15 	stw	zero,48(sp)
1000ae98:	003d5b06 	br	1000a408 <__alt_data_end+0xf800a408>
1000ae9c:	880b883a 	mov	r5,r17
1000aea0:	8009883a 	mov	r4,r16
1000aea4:	01800284 	movi	r6,10
1000aea8:	000f883a 	mov	r7,zero
1000aeac:	000d26c0 	call	1000d26c <__multadd>
1000aeb0:	1023883a 	mov	r17,r2
1000aeb4:	d8800d17 	ldw	r2,52(sp)
1000aeb8:	0082550e 	bge	zero,r2,1000b810 <_dtoa_r+0x16b0>
1000aebc:	d8800615 	stw	r2,24(sp)
1000aec0:	0500050e 	bge	zero,r20,1000aed8 <_dtoa_r+0xd78>
1000aec4:	880b883a 	mov	r5,r17
1000aec8:	8009883a 	mov	r4,r16
1000aecc:	a00d883a 	mov	r6,r20
1000aed0:	000d9d00 	call	1000d9d0 <__lshift>
1000aed4:	1023883a 	mov	r17,r2
1000aed8:	98016a1e 	bne	r19,zero,1000b484 <_dtoa_r+0x1324>
1000aedc:	8829883a 	mov	r20,r17
1000aee0:	d9000617 	ldw	r4,24(sp)
1000aee4:	dcc00717 	ldw	r19,28(sp)
1000aee8:	9480004c 	andi	r18,r18,1
1000aeec:	20bfffc4 	addi	r2,r4,-1
1000aef0:	9885883a 	add	r2,r19,r2
1000aef4:	d8800415 	stw	r2,16(sp)
1000aef8:	dc800615 	stw	r18,24(sp)
1000aefc:	e009883a 	mov	r4,fp
1000af00:	a80b883a 	mov	r5,r21
1000af04:	0009f380 	call	10009f38 <quorem>
1000af08:	e009883a 	mov	r4,fp
1000af0c:	880b883a 	mov	r5,r17
1000af10:	102f883a 	mov	r23,r2
1000af14:	000db180 	call	1000db18 <__mcmp>
1000af18:	8009883a 	mov	r4,r16
1000af1c:	a80b883a 	mov	r5,r21
1000af20:	a00d883a 	mov	r6,r20
1000af24:	102d883a 	mov	r22,r2
1000af28:	000db780 	call	1000db78 <__mdiff>
1000af2c:	1007883a 	mov	r3,r2
1000af30:	10800317 	ldw	r2,12(r2)
1000af34:	bc800c04 	addi	r18,r23,48
1000af38:	1000971e 	bne	r2,zero,1000b198 <_dtoa_r+0x1038>
1000af3c:	180b883a 	mov	r5,r3
1000af40:	e009883a 	mov	r4,fp
1000af44:	d8c01515 	stw	r3,84(sp)
1000af48:	000db180 	call	1000db18 <__mcmp>
1000af4c:	d8c01517 	ldw	r3,84(sp)
1000af50:	8009883a 	mov	r4,r16
1000af54:	d8801515 	stw	r2,84(sp)
1000af58:	180b883a 	mov	r5,r3
1000af5c:	000d2440 	call	1000d244 <_Bfree>
1000af60:	d8801517 	ldw	r2,84(sp)
1000af64:	1000041e 	bne	r2,zero,1000af78 <_dtoa_r+0xe18>
1000af68:	d9800317 	ldw	r6,12(sp)
1000af6c:	3000021e 	bne	r6,zero,1000af78 <_dtoa_r+0xe18>
1000af70:	d8c00617 	ldw	r3,24(sp)
1000af74:	18007626 	beq	r3,zero,1000b150 <_dtoa_r+0xff0>
1000af78:	b0005b16 	blt	r22,zero,1000b0e8 <_dtoa_r+0xf88>
1000af7c:	b000041e 	bne	r22,zero,1000af90 <_dtoa_r+0xe30>
1000af80:	d9000317 	ldw	r4,12(sp)
1000af84:	2000021e 	bne	r4,zero,1000af90 <_dtoa_r+0xe30>
1000af88:	d8c00617 	ldw	r3,24(sp)
1000af8c:	18005626 	beq	r3,zero,1000b0e8 <_dtoa_r+0xf88>
1000af90:	00814d16 	blt	zero,r2,1000b4c8 <_dtoa_r+0x1368>
1000af94:	d8c00417 	ldw	r3,16(sp)
1000af98:	9d800044 	addi	r22,r19,1
1000af9c:	9c800005 	stb	r18,0(r19)
1000afa0:	b02f883a 	mov	r23,r22
1000afa4:	98c14c26 	beq	r19,r3,1000b4d8 <_dtoa_r+0x1378>
1000afa8:	e00b883a 	mov	r5,fp
1000afac:	8009883a 	mov	r4,r16
1000afb0:	01800284 	movi	r6,10
1000afb4:	000f883a 	mov	r7,zero
1000afb8:	000d26c0 	call	1000d26c <__multadd>
1000afbc:	1039883a 	mov	fp,r2
1000afc0:	8d006d26 	beq	r17,r20,1000b178 <_dtoa_r+0x1018>
1000afc4:	880b883a 	mov	r5,r17
1000afc8:	01800284 	movi	r6,10
1000afcc:	000f883a 	mov	r7,zero
1000afd0:	8009883a 	mov	r4,r16
1000afd4:	000d26c0 	call	1000d26c <__multadd>
1000afd8:	a00b883a 	mov	r5,r20
1000afdc:	8009883a 	mov	r4,r16
1000afe0:	01800284 	movi	r6,10
1000afe4:	000f883a 	mov	r7,zero
1000afe8:	1023883a 	mov	r17,r2
1000afec:	000d26c0 	call	1000d26c <__multadd>
1000aff0:	1029883a 	mov	r20,r2
1000aff4:	b027883a 	mov	r19,r22
1000aff8:	003fc006 	br	1000aefc <__alt_data_end+0xf800aefc>
1000affc:	a005883a 	mov	r2,r20
1000b000:	003ede06 	br	1000ab7c <__alt_data_end+0xf800ab7c>
1000b004:	01000044 	movi	r4,1
1000b008:	d9000b15 	stw	r4,44(sp)
1000b00c:	d9802217 	ldw	r6,136(sp)
1000b010:	0180dc0e 	bge	zero,r6,1000b384 <_dtoa_r+0x1224>
1000b014:	3023883a 	mov	r17,r6
1000b018:	d9800d15 	stw	r6,52(sp)
1000b01c:	d9800615 	stw	r6,24(sp)
1000b020:	003d1e06 	br	1000a49c <__alt_data_end+0xf800a49c>
1000b024:	d8800617 	ldw	r2,24(sp)
1000b028:	00be3716 	blt	zero,r2,1000a908 <__alt_data_end+0xf800a908>
1000b02c:	1000be1e 	bne	r2,zero,1000b328 <_dtoa_r+0x11c8>
1000b030:	8809883a 	mov	r4,r17
1000b034:	a00b883a 	mov	r5,r20
1000b038:	000d883a 	mov	r6,zero
1000b03c:	01d00534 	movhi	r7,16404
1000b040:	00068d40 	call	100068d4 <__muldf3>
1000b044:	1009883a 	mov	r4,r2
1000b048:	180b883a 	mov	r5,r3
1000b04c:	900d883a 	mov	r6,r18
1000b050:	980f883a 	mov	r7,r19
1000b054:	00067140 	call	10006714 <__gedf2>
1000b058:	002b883a 	mov	r21,zero
1000b05c:	0023883a 	mov	r17,zero
1000b060:	10007a16 	blt	r2,zero,1000b24c <_dtoa_r+0x10ec>
1000b064:	d9002217 	ldw	r4,136(sp)
1000b068:	ddc00717 	ldw	r23,28(sp)
1000b06c:	0108303a 	nor	r4,zero,r4
1000b070:	d9000515 	stw	r4,20(sp)
1000b074:	8009883a 	mov	r4,r16
1000b078:	a80b883a 	mov	r5,r21
1000b07c:	000d2440 	call	1000d244 <_Bfree>
1000b080:	883f751e 	bne	r17,zero,1000ae58 <__alt_data_end+0xf800ae58>
1000b084:	003de406 	br	1000a818 <__alt_data_end+0xf800a818>
1000b088:	e00b883a 	mov	r5,fp
1000b08c:	8009883a 	mov	r4,r16
1000b090:	000d8900 	call	1000d890 <__pow5mult>
1000b094:	1039883a 	mov	fp,r2
1000b098:	003ed306 	br	1000abe8 <__alt_data_end+0xf800abe8>
1000b09c:	903ee01e 	bne	r18,zero,1000ac20 <__alt_data_end+0xf800ac20>
1000b0a0:	00800434 	movhi	r2,16
1000b0a4:	10bfffc4 	addi	r2,r2,-1
1000b0a8:	9884703a 	and	r2,r19,r2
1000b0ac:	103f081e 	bne	r2,zero,1000acd0 <__alt_data_end+0xf800acd0>
1000b0b0:	9cdffc2c 	andhi	r19,r19,32752
1000b0b4:	983f0626 	beq	r19,zero,1000acd0 <__alt_data_end+0xf800acd0>
1000b0b8:	d8800817 	ldw	r2,32(sp)
1000b0bc:	b5800044 	addi	r22,r22,1
1000b0c0:	04c00044 	movi	r19,1
1000b0c4:	10800044 	addi	r2,r2,1
1000b0c8:	d8800815 	stw	r2,32(sp)
1000b0cc:	003f0106 	br	1000acd4 <__alt_data_end+0xf800acd4>
1000b0d0:	d9800f17 	ldw	r6,60(sp)
1000b0d4:	30016826 	beq	r6,zero,1000b678 <_dtoa_r+0x1518>
1000b0d8:	10810cc4 	addi	r2,r2,1075
1000b0dc:	dd400917 	ldw	r21,36(sp)
1000b0e0:	dd000817 	ldw	r20,32(sp)
1000b0e4:	003e9906 	br	1000ab4c <__alt_data_end+0xf800ab4c>
1000b0e8:	9011883a 	mov	r8,r18
1000b0ec:	4007883a 	mov	r3,r8
1000b0f0:	e02d883a 	mov	r22,fp
1000b0f4:	0080100e 	bge	zero,r2,1000b138 <_dtoa_r+0xfd8>
1000b0f8:	01800044 	movi	r6,1
1000b0fc:	8009883a 	mov	r4,r16
1000b100:	e00b883a 	mov	r5,fp
1000b104:	da001515 	stw	r8,84(sp)
1000b108:	da001715 	stw	r8,92(sp)
1000b10c:	000d9d00 	call	1000d9d0 <__lshift>
1000b110:	1009883a 	mov	r4,r2
1000b114:	a80b883a 	mov	r5,r21
1000b118:	102d883a 	mov	r22,r2
1000b11c:	000db180 	call	1000db18 <__mcmp>
1000b120:	d8c01517 	ldw	r3,84(sp)
1000b124:	da001717 	ldw	r8,92(sp)
1000b128:	0081a50e 	bge	zero,r2,1000b7c0 <_dtoa_r+0x1660>
1000b12c:	00800e44 	movi	r2,57
1000b130:	40817b26 	beq	r8,r2,1000b720 <_dtoa_r+0x15c0>
1000b134:	40c00044 	addi	r3,r8,1
1000b138:	8825883a 	mov	r18,r17
1000b13c:	9dc00044 	addi	r23,r19,1
1000b140:	98c00005 	stb	r3,0(r19)
1000b144:	a023883a 	mov	r17,r20
1000b148:	b039883a 	mov	fp,r22
1000b14c:	003f3906 	br	1000ae34 <__alt_data_end+0xf800ae34>
1000b150:	00800e44 	movi	r2,57
1000b154:	9011883a 	mov	r8,r18
1000b158:	90817226 	beq	r18,r2,1000b724 <_dtoa_r+0x15c4>
1000b15c:	0580010e 	bge	zero,r22,1000b164 <_dtoa_r+0x1004>
1000b160:	ba000c44 	addi	r8,r23,49
1000b164:	8825883a 	mov	r18,r17
1000b168:	9dc00044 	addi	r23,r19,1
1000b16c:	9a000005 	stb	r8,0(r19)
1000b170:	a023883a 	mov	r17,r20
1000b174:	003f2f06 	br	1000ae34 <__alt_data_end+0xf800ae34>
1000b178:	880b883a 	mov	r5,r17
1000b17c:	8009883a 	mov	r4,r16
1000b180:	01800284 	movi	r6,10
1000b184:	000f883a 	mov	r7,zero
1000b188:	000d26c0 	call	1000d26c <__multadd>
1000b18c:	1023883a 	mov	r17,r2
1000b190:	1029883a 	mov	r20,r2
1000b194:	003f9706 	br	1000aff4 <__alt_data_end+0xf800aff4>
1000b198:	8009883a 	mov	r4,r16
1000b19c:	180b883a 	mov	r5,r3
1000b1a0:	000d2440 	call	1000d244 <_Bfree>
1000b1a4:	00800044 	movi	r2,1
1000b1a8:	003f7306 	br	1000af78 <__alt_data_end+0xf800af78>
1000b1ac:	e009883a 	mov	r4,fp
1000b1b0:	a80b883a 	mov	r5,r21
1000b1b4:	000db180 	call	1000db18 <__mcmp>
1000b1b8:	103ee60e 	bge	r2,zero,1000ad54 <__alt_data_end+0xf800ad54>
1000b1bc:	8009883a 	mov	r4,r16
1000b1c0:	e00b883a 	mov	r5,fp
1000b1c4:	01800284 	movi	r6,10
1000b1c8:	000f883a 	mov	r7,zero
1000b1cc:	000d26c0 	call	1000d26c <__multadd>
1000b1d0:	d9000517 	ldw	r4,20(sp)
1000b1d4:	d9800b17 	ldw	r6,44(sp)
1000b1d8:	1039883a 	mov	fp,r2
1000b1dc:	213fffc4 	addi	r4,r4,-1
1000b1e0:	d9000515 	stw	r4,20(sp)
1000b1e4:	303f2d1e 	bne	r6,zero,1000ae9c <__alt_data_end+0xf800ae9c>
1000b1e8:	d9000d17 	ldw	r4,52(sp)
1000b1ec:	0101780e 	bge	zero,r4,1000b7d0 <_dtoa_r+0x1670>
1000b1f0:	d9000615 	stw	r4,24(sp)
1000b1f4:	003edb06 	br	1000ad64 <__alt_data_end+0xf800ad64>
1000b1f8:	00800084 	movi	r2,2
1000b1fc:	30818e1e 	bne	r6,r2,1000b838 <_dtoa_r+0x16d8>
1000b200:	d8000b15 	stw	zero,44(sp)
1000b204:	003f8106 	br	1000b00c <__alt_data_end+0xf800b00c>
1000b208:	d8800717 	ldw	r2,28(sp)
1000b20c:	003c0306 	br	1000a21c <__alt_data_end+0xf800a21c>
1000b210:	d9000317 	ldw	r4,12(sp)
1000b214:	00800084 	movi	r2,2
1000b218:	113ed00e 	bge	r2,r4,1000ad5c <__alt_data_end+0xf800ad5c>
1000b21c:	d8c00617 	ldw	r3,24(sp)
1000b220:	183f901e 	bne	r3,zero,1000b064 <__alt_data_end+0xf800b064>
1000b224:	a80b883a 	mov	r5,r21
1000b228:	8009883a 	mov	r4,r16
1000b22c:	01800144 	movi	r6,5
1000b230:	000f883a 	mov	r7,zero
1000b234:	000d26c0 	call	1000d26c <__multadd>
1000b238:	e009883a 	mov	r4,fp
1000b23c:	100b883a 	mov	r5,r2
1000b240:	102b883a 	mov	r21,r2
1000b244:	000db180 	call	1000db18 <__mcmp>
1000b248:	00bf860e 	bge	zero,r2,1000b064 <__alt_data_end+0xf800b064>
1000b24c:	d9800717 	ldw	r6,28(sp)
1000b250:	00800c44 	movi	r2,49
1000b254:	30800005 	stb	r2,0(r6)
1000b258:	d8800517 	ldw	r2,20(sp)
1000b25c:	35c00044 	addi	r23,r6,1
1000b260:	10800044 	addi	r2,r2,1
1000b264:	d8800515 	stw	r2,20(sp)
1000b268:	003f8206 	br	1000b074 <__alt_data_end+0xf800b074>
1000b26c:	903e981e 	bne	r18,zero,1000acd0 <__alt_data_end+0xf800acd0>
1000b270:	003f8b06 	br	1000b0a0 <__alt_data_end+0xf800b0a0>
1000b274:	d9800517 	ldw	r6,20(sp)
1000b278:	d8c00717 	ldw	r3,28(sp)
1000b27c:	00800c44 	movi	r2,49
1000b280:	31800044 	addi	r6,r6,1
1000b284:	d9800515 	stw	r6,20(sp)
1000b288:	18800005 	stb	r2,0(r3)
1000b28c:	003ee906 	br	1000ae34 <__alt_data_end+0xf800ae34>
1000b290:	dc000317 	ldw	r16,12(sp)
1000b294:	003d6006 	br	1000a818 <__alt_data_end+0xf800a818>
1000b298:	8809883a 	mov	r4,r17
1000b29c:	0007a980 	call	10007a98 <__floatsidf>
1000b2a0:	a009883a 	mov	r4,r20
1000b2a4:	a80b883a 	mov	r5,r21
1000b2a8:	100d883a 	mov	r6,r2
1000b2ac:	180f883a 	mov	r7,r3
1000b2b0:	00068d40 	call	100068d4 <__muldf3>
1000b2b4:	1009883a 	mov	r4,r2
1000b2b8:	180b883a 	mov	r5,r3
1000b2bc:	000d883a 	mov	r6,zero
1000b2c0:	01d00734 	movhi	r7,16412
1000b2c4:	00054740 	call	10005474 <__adddf3>
1000b2c8:	1023883a 	mov	r17,r2
1000b2cc:	00bf3034 	movhi	r2,64704
1000b2d0:	1885883a 	add	r2,r3,r2
1000b2d4:	d8800e15 	stw	r2,56(sp)
1000b2d8:	a009883a 	mov	r4,r20
1000b2dc:	a80b883a 	mov	r5,r21
1000b2e0:	000d883a 	mov	r6,zero
1000b2e4:	01d00534 	movhi	r7,16404
1000b2e8:	00071400 	call	10007140 <__subdf3>
1000b2ec:	d9c00e17 	ldw	r7,56(sp)
1000b2f0:	1009883a 	mov	r4,r2
1000b2f4:	180b883a 	mov	r5,r3
1000b2f8:	880d883a 	mov	r6,r17
1000b2fc:	102b883a 	mov	r21,r2
1000b300:	1829883a 	mov	r20,r3
1000b304:	00067140 	call	10006714 <__gedf2>
1000b308:	00807716 	blt	zero,r2,1000b4e8 <_dtoa_r+0x1388>
1000b30c:	d8800e17 	ldw	r2,56(sp)
1000b310:	a809883a 	mov	r4,r21
1000b314:	a00b883a 	mov	r5,r20
1000b318:	11e0003c 	xorhi	r7,r2,32768
1000b31c:	880d883a 	mov	r6,r17
1000b320:	00067f40 	call	100067f4 <__ledf2>
1000b324:	103d6b0e 	bge	r2,zero,1000a8d4 <__alt_data_end+0xf800a8d4>
1000b328:	002b883a 	mov	r21,zero
1000b32c:	0023883a 	mov	r17,zero
1000b330:	003f4c06 	br	1000b064 <__alt_data_end+0xf800b064>
1000b334:	d9800917 	ldw	r6,36(sp)
1000b338:	e00b883a 	mov	r5,fp
1000b33c:	8009883a 	mov	r4,r16
1000b340:	000d8900 	call	1000d890 <__pow5mult>
1000b344:	1039883a 	mov	fp,r2
1000b348:	003e2706 	br	1000abe8 <__alt_data_end+0xf800abe8>
1000b34c:	d8000b15 	stw	zero,44(sp)
1000b350:	003c4906 	br	1000a478 <__alt_data_end+0xf800a478>
1000b354:	d9000917 	ldw	r4,36(sp)
1000b358:	d9800a17 	ldw	r6,40(sp)
1000b35c:	dd400915 	stw	r21,36(sp)
1000b360:	a905c83a 	sub	r2,r21,r4
1000b364:	308d883a 	add	r6,r6,r2
1000b368:	d9800a15 	stw	r6,40(sp)
1000b36c:	002b883a 	mov	r21,zero
1000b370:	003df206 	br	1000ab3c <__alt_data_end+0xf800ab3c>
1000b374:	dc800e15 	stw	r18,56(sp)
1000b378:	982b883a 	mov	r21,r19
1000b37c:	04400084 	movi	r17,2
1000b380:	003c7406 	br	1000a554 <__alt_data_end+0xf800a554>
1000b384:	04400044 	movi	r17,1
1000b388:	dc400d15 	stw	r17,52(sp)
1000b38c:	dc400615 	stw	r17,24(sp)
1000b390:	dc402215 	stw	r17,136(sp)
1000b394:	80001115 	stw	zero,68(r16)
1000b398:	000b883a 	mov	r5,zero
1000b39c:	003c4a06 	br	1000a4c8 <__alt_data_end+0xf800a4c8>
1000b3a0:	3023883a 	mov	r17,r6
1000b3a4:	003ffb06 	br	1000b394 <__alt_data_end+0xf800b394>
1000b3a8:	1000021e 	bne	r2,zero,1000b3b4 <_dtoa_r+0x1254>
1000b3ac:	4200004c 	andi	r8,r8,1
1000b3b0:	403e8f1e 	bne	r8,zero,1000adf0 <__alt_data_end+0xf800adf0>
1000b3b4:	01000c04 	movi	r4,48
1000b3b8:	00000106 	br	1000b3c0 <_dtoa_r+0x1260>
1000b3bc:	102f883a 	mov	r23,r2
1000b3c0:	b8bfffc4 	addi	r2,r23,-1
1000b3c4:	10c00007 	ldb	r3,0(r2)
1000b3c8:	193ffc26 	beq	r3,r4,1000b3bc <__alt_data_end+0xf800b3bc>
1000b3cc:	003e9906 	br	1000ae34 <__alt_data_end+0xf800ae34>
1000b3d0:	d9000517 	ldw	r4,20(sp)
1000b3d4:	012fc83a 	sub	r23,zero,r4
1000b3d8:	b800ad26 	beq	r23,zero,1000b690 <_dtoa_r+0x1530>
1000b3dc:	b88003cc 	andi	r2,r23,15
1000b3e0:	100490fa 	slli	r2,r2,3
1000b3e4:	00c40074 	movhi	r3,4097
1000b3e8:	18d1f704 	addi	r3,r3,18396
1000b3ec:	1885883a 	add	r2,r3,r2
1000b3f0:	11800017 	ldw	r6,0(r2)
1000b3f4:	11c00117 	ldw	r7,4(r2)
1000b3f8:	b82fd13a 	srai	r23,r23,4
1000b3fc:	9009883a 	mov	r4,r18
1000b400:	980b883a 	mov	r5,r19
1000b404:	00068d40 	call	100068d4 <__muldf3>
1000b408:	1029883a 	mov	r20,r2
1000b40c:	182b883a 	mov	r21,r3
1000b410:	b800f426 	beq	r23,zero,1000b7e4 <_dtoa_r+0x1684>
1000b414:	02040074 	movhi	r8,4097
1000b418:	4211ed04 	addi	r8,r8,18356
1000b41c:	8029883a 	mov	r20,r16
1000b420:	04400084 	movi	r17,2
1000b424:	4021883a 	mov	r16,r8
1000b428:	b980004c 	andi	r6,r23,1
1000b42c:	1009883a 	mov	r4,r2
1000b430:	b82fd07a 	srai	r23,r23,1
1000b434:	180b883a 	mov	r5,r3
1000b438:	30000426 	beq	r6,zero,1000b44c <_dtoa_r+0x12ec>
1000b43c:	81800017 	ldw	r6,0(r16)
1000b440:	81c00117 	ldw	r7,4(r16)
1000b444:	8c400044 	addi	r17,r17,1
1000b448:	00068d40 	call	100068d4 <__muldf3>
1000b44c:	84000204 	addi	r16,r16,8
1000b450:	b83ff51e 	bne	r23,zero,1000b428 <__alt_data_end+0xf800b428>
1000b454:	a021883a 	mov	r16,r20
1000b458:	182b883a 	mov	r21,r3
1000b45c:	1029883a 	mov	r20,r2
1000b460:	003c5506 	br	1000a5b8 <__alt_data_end+0xf800a5b8>
1000b464:	d9800517 	ldw	r6,20(sp)
1000b468:	d9000717 	ldw	r4,28(sp)
1000b46c:	00c00c04 	movi	r3,48
1000b470:	31800044 	addi	r6,r6,1
1000b474:	d9800515 	stw	r6,20(sp)
1000b478:	20c00005 	stb	r3,0(r4)
1000b47c:	02000c44 	movi	r8,49
1000b480:	003da206 	br	1000ab0c <__alt_data_end+0xf800ab0c>
1000b484:	89400117 	ldw	r5,4(r17)
1000b488:	8009883a 	mov	r4,r16
1000b48c:	000d19c0 	call	1000d19c <_Balloc>
1000b490:	89800417 	ldw	r6,16(r17)
1000b494:	11000304 	addi	r4,r2,12
1000b498:	89400304 	addi	r5,r17,12
1000b49c:	31800084 	addi	r6,r6,2
1000b4a0:	318d883a 	add	r6,r6,r6
1000b4a4:	318d883a 	add	r6,r6,r6
1000b4a8:	1027883a 	mov	r19,r2
1000b4ac:	000cf400 	call	1000cf40 <memcpy>
1000b4b0:	8009883a 	mov	r4,r16
1000b4b4:	980b883a 	mov	r5,r19
1000b4b8:	01800044 	movi	r6,1
1000b4bc:	000d9d00 	call	1000d9d0 <__lshift>
1000b4c0:	1029883a 	mov	r20,r2
1000b4c4:	003e8606 	br	1000aee0 <__alt_data_end+0xf800aee0>
1000b4c8:	00800e44 	movi	r2,57
1000b4cc:	90809526 	beq	r18,r2,1000b724 <_dtoa_r+0x15c4>
1000b4d0:	92000044 	addi	r8,r18,1
1000b4d4:	003f2306 	br	1000b164 <__alt_data_end+0xf800b164>
1000b4d8:	9011883a 	mov	r8,r18
1000b4dc:	8825883a 	mov	r18,r17
1000b4e0:	a023883a 	mov	r17,r20
1000b4e4:	003e3706 	br	1000adc4 <__alt_data_end+0xf800adc4>
1000b4e8:	002b883a 	mov	r21,zero
1000b4ec:	0023883a 	mov	r17,zero
1000b4f0:	003f5606 	br	1000b24c <__alt_data_end+0xf800b24c>
1000b4f4:	51bfffc4 	addi	r6,r10,-1
1000b4f8:	300490fa 	slli	r2,r6,3
1000b4fc:	00c40074 	movhi	r3,4097
1000b500:	18d1f704 	addi	r3,r3,18396
1000b504:	1885883a 	add	r2,r3,r2
1000b508:	d9c00e17 	ldw	r7,56(sp)
1000b50c:	11000017 	ldw	r4,0(r2)
1000b510:	11400117 	ldw	r5,4(r2)
1000b514:	d8800717 	ldw	r2,28(sp)
1000b518:	d9801015 	stw	r6,64(sp)
1000b51c:	880d883a 	mov	r6,r17
1000b520:	da801615 	stw	r10,88(sp)
1000b524:	15c00044 	addi	r23,r2,1
1000b528:	00068d40 	call	100068d4 <__muldf3>
1000b52c:	a80b883a 	mov	r5,r21
1000b530:	a009883a 	mov	r4,r20
1000b534:	d8c01115 	stw	r3,68(sp)
1000b538:	d8800e15 	stw	r2,56(sp)
1000b53c:	0007a100 	call	10007a10 <__fixdfsi>
1000b540:	1009883a 	mov	r4,r2
1000b544:	1023883a 	mov	r17,r2
1000b548:	0007a980 	call	10007a98 <__floatsidf>
1000b54c:	a009883a 	mov	r4,r20
1000b550:	a80b883a 	mov	r5,r21
1000b554:	100d883a 	mov	r6,r2
1000b558:	180f883a 	mov	r7,r3
1000b55c:	00071400 	call	10007140 <__subdf3>
1000b560:	1813883a 	mov	r9,r3
1000b564:	d8c00717 	ldw	r3,28(sp)
1000b568:	8c400c04 	addi	r17,r17,48
1000b56c:	1011883a 	mov	r8,r2
1000b570:	1c400005 	stb	r17,0(r3)
1000b574:	da801617 	ldw	r10,88(sp)
1000b578:	00800044 	movi	r2,1
1000b57c:	50802326 	beq	r10,r2,1000b60c <_dtoa_r+0x14ac>
1000b580:	d8800717 	ldw	r2,28(sp)
1000b584:	b82b883a 	mov	r21,r23
1000b588:	dc001315 	stw	r16,76(sp)
1000b58c:	12a9883a 	add	r20,r2,r10
1000b590:	4807883a 	mov	r3,r9
1000b594:	4005883a 	mov	r2,r8
1000b598:	dc801415 	stw	r18,80(sp)
1000b59c:	000d883a 	mov	r6,zero
1000b5a0:	01d00934 	movhi	r7,16420
1000b5a4:	1009883a 	mov	r4,r2
1000b5a8:	180b883a 	mov	r5,r3
1000b5ac:	00068d40 	call	100068d4 <__muldf3>
1000b5b0:	180b883a 	mov	r5,r3
1000b5b4:	1009883a 	mov	r4,r2
1000b5b8:	1821883a 	mov	r16,r3
1000b5bc:	1025883a 	mov	r18,r2
1000b5c0:	0007a100 	call	10007a10 <__fixdfsi>
1000b5c4:	1009883a 	mov	r4,r2
1000b5c8:	1023883a 	mov	r17,r2
1000b5cc:	0007a980 	call	10007a98 <__floatsidf>
1000b5d0:	9009883a 	mov	r4,r18
1000b5d4:	800b883a 	mov	r5,r16
1000b5d8:	100d883a 	mov	r6,r2
1000b5dc:	180f883a 	mov	r7,r3
1000b5e0:	8c400c04 	addi	r17,r17,48
1000b5e4:	00071400 	call	10007140 <__subdf3>
1000b5e8:	ad400044 	addi	r21,r21,1
1000b5ec:	ac7fffc5 	stb	r17,-1(r21)
1000b5f0:	ad3fea1e 	bne	r21,r20,1000b59c <__alt_data_end+0xf800b59c>
1000b5f4:	1813883a 	mov	r9,r3
1000b5f8:	d8c01017 	ldw	r3,64(sp)
1000b5fc:	dc001317 	ldw	r16,76(sp)
1000b600:	dc801417 	ldw	r18,80(sp)
1000b604:	1011883a 	mov	r8,r2
1000b608:	b8ef883a 	add	r23,r23,r3
1000b60c:	d9000e17 	ldw	r4,56(sp)
1000b610:	d9401117 	ldw	r5,68(sp)
1000b614:	000d883a 	mov	r6,zero
1000b618:	01cff834 	movhi	r7,16352
1000b61c:	da001715 	stw	r8,92(sp)
1000b620:	da401515 	stw	r9,84(sp)
1000b624:	00054740 	call	10005474 <__adddf3>
1000b628:	da001717 	ldw	r8,92(sp)
1000b62c:	da401517 	ldw	r9,84(sp)
1000b630:	1009883a 	mov	r4,r2
1000b634:	400d883a 	mov	r6,r8
1000b638:	480f883a 	mov	r7,r9
1000b63c:	180b883a 	mov	r5,r3
1000b640:	00067f40 	call	100067f4 <__ledf2>
1000b644:	da001717 	ldw	r8,92(sp)
1000b648:	da401517 	ldw	r9,84(sp)
1000b64c:	10003b0e 	bge	r2,zero,1000b73c <_dtoa_r+0x15dc>
1000b650:	d9001217 	ldw	r4,72(sp)
1000b654:	bd7fffc3 	ldbu	r21,-1(r23)
1000b658:	d9000515 	stw	r4,20(sp)
1000b65c:	003d1c06 	br	1000aad0 <__alt_data_end+0xf800aad0>
1000b660:	d8c00817 	ldw	r3,32(sp)
1000b664:	18a9c83a 	sub	r20,r3,r2
1000b668:	0005883a 	mov	r2,zero
1000b66c:	003d3706 	br	1000ab4c <__alt_data_end+0xf800ab4c>
1000b670:	00800044 	movi	r2,1
1000b674:	003dd006 	br	1000adb8 <__alt_data_end+0xf800adb8>
1000b678:	d8c00217 	ldw	r3,8(sp)
1000b67c:	00800d84 	movi	r2,54
1000b680:	dd400917 	ldw	r21,36(sp)
1000b684:	10c5c83a 	sub	r2,r2,r3
1000b688:	dd000817 	ldw	r20,32(sp)
1000b68c:	003d2f06 	br	1000ab4c <__alt_data_end+0xf800ab4c>
1000b690:	9029883a 	mov	r20,r18
1000b694:	982b883a 	mov	r21,r19
1000b698:	04400084 	movi	r17,2
1000b69c:	003bc606 	br	1000a5b8 <__alt_data_end+0xf800a5b8>
1000b6a0:	d8800617 	ldw	r2,24(sp)
1000b6a4:	103efc26 	beq	r2,zero,1000b298 <__alt_data_end+0xf800b298>
1000b6a8:	d8c00d17 	ldw	r3,52(sp)
1000b6ac:	00fc890e 	bge	zero,r3,1000a8d4 <__alt_data_end+0xf800a8d4>
1000b6b0:	a80b883a 	mov	r5,r21
1000b6b4:	a009883a 	mov	r4,r20
1000b6b8:	000d883a 	mov	r6,zero
1000b6bc:	01d00934 	movhi	r7,16420
1000b6c0:	00068d40 	call	100068d4 <__muldf3>
1000b6c4:	89000044 	addi	r4,r17,1
1000b6c8:	1029883a 	mov	r20,r2
1000b6cc:	182b883a 	mov	r21,r3
1000b6d0:	0007a980 	call	10007a98 <__floatsidf>
1000b6d4:	a009883a 	mov	r4,r20
1000b6d8:	a80b883a 	mov	r5,r21
1000b6dc:	100d883a 	mov	r6,r2
1000b6e0:	180f883a 	mov	r7,r3
1000b6e4:	00068d40 	call	100068d4 <__muldf3>
1000b6e8:	1009883a 	mov	r4,r2
1000b6ec:	180b883a 	mov	r5,r3
1000b6f0:	000d883a 	mov	r6,zero
1000b6f4:	01d00734 	movhi	r7,16412
1000b6f8:	00054740 	call	10005474 <__adddf3>
1000b6fc:	d9000517 	ldw	r4,20(sp)
1000b700:	1023883a 	mov	r17,r2
1000b704:	00bf3034 	movhi	r2,64704
1000b708:	213fffc4 	addi	r4,r4,-1
1000b70c:	1885883a 	add	r2,r3,r2
1000b710:	d9001215 	stw	r4,72(sp)
1000b714:	d8800e15 	stw	r2,56(sp)
1000b718:	da800d17 	ldw	r10,52(sp)
1000b71c:	003bc306 	br	1000a62c <__alt_data_end+0xf800a62c>
1000b720:	b039883a 	mov	fp,r22
1000b724:	01000e44 	movi	r4,57
1000b728:	8825883a 	mov	r18,r17
1000b72c:	9dc00044 	addi	r23,r19,1
1000b730:	99000005 	stb	r4,0(r19)
1000b734:	a023883a 	mov	r17,r20
1000b738:	003dae06 	br	1000adf4 <__alt_data_end+0xf800adf4>
1000b73c:	d9800e17 	ldw	r6,56(sp)
1000b740:	d9c01117 	ldw	r7,68(sp)
1000b744:	0009883a 	mov	r4,zero
1000b748:	014ff834 	movhi	r5,16352
1000b74c:	da001715 	stw	r8,92(sp)
1000b750:	da401515 	stw	r9,84(sp)
1000b754:	00071400 	call	10007140 <__subdf3>
1000b758:	da001717 	ldw	r8,92(sp)
1000b75c:	da401517 	ldw	r9,84(sp)
1000b760:	1009883a 	mov	r4,r2
1000b764:	180b883a 	mov	r5,r3
1000b768:	400d883a 	mov	r6,r8
1000b76c:	480f883a 	mov	r7,r9
1000b770:	00067140 	call	10006714 <__gedf2>
1000b774:	00bc570e 	bge	zero,r2,1000a8d4 <__alt_data_end+0xf800a8d4>
1000b778:	01000c04 	movi	r4,48
1000b77c:	00000106 	br	1000b784 <_dtoa_r+0x1624>
1000b780:	102f883a 	mov	r23,r2
1000b784:	b8bfffc4 	addi	r2,r23,-1
1000b788:	10c00007 	ldb	r3,0(r2)
1000b78c:	193ffc26 	beq	r3,r4,1000b780 <__alt_data_end+0xf800b780>
1000b790:	d9801217 	ldw	r6,72(sp)
1000b794:	d9800515 	stw	r6,20(sp)
1000b798:	003c1f06 	br	1000a818 <__alt_data_end+0xf800a818>
1000b79c:	d8801217 	ldw	r2,72(sp)
1000b7a0:	dc001117 	ldw	r16,68(sp)
1000b7a4:	d8800515 	stw	r2,20(sp)
1000b7a8:	003cc906 	br	1000aad0 <__alt_data_end+0xf800aad0>
1000b7ac:	dd801317 	ldw	r22,76(sp)
1000b7b0:	dc001117 	ldw	r16,68(sp)
1000b7b4:	dcc01417 	ldw	r19,80(sp)
1000b7b8:	dc801017 	ldw	r18,64(sp)
1000b7bc:	003c4506 	br	1000a8d4 <__alt_data_end+0xf800a8d4>
1000b7c0:	103e5d1e 	bne	r2,zero,1000b138 <__alt_data_end+0xf800b138>
1000b7c4:	4080004c 	andi	r2,r8,1
1000b7c8:	103e5b26 	beq	r2,zero,1000b138 <__alt_data_end+0xf800b138>
1000b7cc:	003e5706 	br	1000b12c <__alt_data_end+0xf800b12c>
1000b7d0:	d8c00317 	ldw	r3,12(sp)
1000b7d4:	00800084 	movi	r2,2
1000b7d8:	10c00a16 	blt	r2,r3,1000b804 <_dtoa_r+0x16a4>
1000b7dc:	d9000d17 	ldw	r4,52(sp)
1000b7e0:	003e8306 	br	1000b1f0 <__alt_data_end+0xf800b1f0>
1000b7e4:	04400084 	movi	r17,2
1000b7e8:	003b7306 	br	1000a5b8 <__alt_data_end+0xf800a5b8>
1000b7ec:	d9801217 	ldw	r6,72(sp)
1000b7f0:	d9800515 	stw	r6,20(sp)
1000b7f4:	003cb606 	br	1000aad0 <__alt_data_end+0xf800aad0>
1000b7f8:	d9001217 	ldw	r4,72(sp)
1000b7fc:	d9000515 	stw	r4,20(sp)
1000b800:	003c0506 	br	1000a818 <__alt_data_end+0xf800a818>
1000b804:	d9800d17 	ldw	r6,52(sp)
1000b808:	d9800615 	stw	r6,24(sp)
1000b80c:	003e8306 	br	1000b21c <__alt_data_end+0xf800b21c>
1000b810:	d9800317 	ldw	r6,12(sp)
1000b814:	00800084 	movi	r2,2
1000b818:	11800216 	blt	r2,r6,1000b824 <_dtoa_r+0x16c4>
1000b81c:	d8800d17 	ldw	r2,52(sp)
1000b820:	003da606 	br	1000aebc <__alt_data_end+0xf800aebc>
1000b824:	d8800d17 	ldw	r2,52(sp)
1000b828:	d8800615 	stw	r2,24(sp)
1000b82c:	003e7b06 	br	1000b21c <__alt_data_end+0xf800b21c>
1000b830:	05000044 	movi	r20,1
1000b834:	003b0506 	br	1000a44c <__alt_data_end+0xf800a44c>
1000b838:	8009883a 	mov	r4,r16
1000b83c:	80001115 	stw	zero,68(r16)
1000b840:	000b883a 	mov	r5,zero
1000b844:	000d19c0 	call	1000d19c <_Balloc>
1000b848:	d8800715 	stw	r2,28(sp)
1000b84c:	d8c00717 	ldw	r3,28(sp)
1000b850:	00bfffc4 	movi	r2,-1
1000b854:	01000044 	movi	r4,1
1000b858:	d8800615 	stw	r2,24(sp)
1000b85c:	80c01015 	stw	r3,64(r16)
1000b860:	d9000b15 	stw	r4,44(sp)
1000b864:	d8002215 	stw	zero,136(sp)
1000b868:	d8800d15 	stw	r2,52(sp)
1000b86c:	003c1906 	br	1000a8d4 <__alt_data_end+0xf800a8d4>
1000b870:	193d2926 	beq	r3,r4,1000ad18 <__alt_data_end+0xf800ad18>
1000b874:	00c00f04 	movi	r3,60
1000b878:	1885c83a 	sub	r2,r3,r2
1000b87c:	003d7b06 	br	1000ae6c <__alt_data_end+0xf800ae6c>
1000b880:	000b883a 	mov	r5,zero
1000b884:	003b1006 	br	1000a4c8 <__alt_data_end+0xf800a4c8>

1000b888 <_fflush_r>:
1000b888:	defffb04 	addi	sp,sp,-20
1000b88c:	dcc00315 	stw	r19,12(sp)
1000b890:	dc000015 	stw	r16,0(sp)
1000b894:	dfc00415 	stw	ra,16(sp)
1000b898:	dc800215 	stw	r18,8(sp)
1000b89c:	dc400115 	stw	r17,4(sp)
1000b8a0:	2027883a 	mov	r19,r4
1000b8a4:	2821883a 	mov	r16,r5
1000b8a8:	20000226 	beq	r4,zero,1000b8b4 <_fflush_r+0x2c>
1000b8ac:	20800e17 	ldw	r2,56(r4)
1000b8b0:	10005326 	beq	r2,zero,1000ba00 <_fflush_r+0x178>
1000b8b4:	8080030b 	ldhu	r2,12(r16)
1000b8b8:	10ffffcc 	andi	r3,r2,65535
1000b8bc:	18e0001c 	xori	r3,r3,32768
1000b8c0:	18e00004 	addi	r3,r3,-32768
1000b8c4:	18002c26 	beq	r3,zero,1000b978 <_fflush_r+0xf0>
1000b8c8:	10c0020c 	andi	r3,r2,8
1000b8cc:	1800321e 	bne	r3,zero,1000b998 <_fflush_r+0x110>
1000b8d0:	80c00117 	ldw	r3,4(r16)
1000b8d4:	10820014 	ori	r2,r2,2048
1000b8d8:	8080030d 	sth	r2,12(r16)
1000b8dc:	00c0570e 	bge	zero,r3,1000ba3c <_fflush_r+0x1b4>
1000b8e0:	82000a17 	ldw	r8,40(r16)
1000b8e4:	40002426 	beq	r8,zero,1000b978 <_fflush_r+0xf0>
1000b8e8:	9c400017 	ldw	r17,0(r19)
1000b8ec:	10c4000c 	andi	r3,r2,4096
1000b8f0:	98000015 	stw	zero,0(r19)
1000b8f4:	18004626 	beq	r3,zero,1000ba10 <_fflush_r+0x188>
1000b8f8:	81801417 	ldw	r6,80(r16)
1000b8fc:	10c0010c 	andi	r3,r2,4
1000b900:	18000626 	beq	r3,zero,1000b91c <_fflush_r+0x94>
1000b904:	80c00117 	ldw	r3,4(r16)
1000b908:	80800c17 	ldw	r2,48(r16)
1000b90c:	30cdc83a 	sub	r6,r6,r3
1000b910:	10000226 	beq	r2,zero,1000b91c <_fflush_r+0x94>
1000b914:	80800f17 	ldw	r2,60(r16)
1000b918:	308dc83a 	sub	r6,r6,r2
1000b91c:	81400717 	ldw	r5,28(r16)
1000b920:	9809883a 	mov	r4,r19
1000b924:	000f883a 	mov	r7,zero
1000b928:	403ee83a 	callr	r8
1000b92c:	00ffffc4 	movi	r3,-1
1000b930:	10c04526 	beq	r2,r3,1000ba48 <_fflush_r+0x1c0>
1000b934:	80c0030b 	ldhu	r3,12(r16)
1000b938:	81000417 	ldw	r4,16(r16)
1000b93c:	80000115 	stw	zero,4(r16)
1000b940:	197dffcc 	andi	r5,r3,63487
1000b944:	8140030d 	sth	r5,12(r16)
1000b948:	81000015 	stw	r4,0(r16)
1000b94c:	18c4000c 	andi	r3,r3,4096
1000b950:	18000126 	beq	r3,zero,1000b958 <_fflush_r+0xd0>
1000b954:	80801415 	stw	r2,80(r16)
1000b958:	81400c17 	ldw	r5,48(r16)
1000b95c:	9c400015 	stw	r17,0(r19)
1000b960:	28000526 	beq	r5,zero,1000b978 <_fflush_r+0xf0>
1000b964:	80801004 	addi	r2,r16,64
1000b968:	28800226 	beq	r5,r2,1000b974 <_fflush_r+0xec>
1000b96c:	9809883a 	mov	r4,r19
1000b970:	000bfb80 	call	1000bfb8 <_free_r>
1000b974:	80000c15 	stw	zero,48(r16)
1000b978:	0005883a 	mov	r2,zero
1000b97c:	dfc00417 	ldw	ra,16(sp)
1000b980:	dcc00317 	ldw	r19,12(sp)
1000b984:	dc800217 	ldw	r18,8(sp)
1000b988:	dc400117 	ldw	r17,4(sp)
1000b98c:	dc000017 	ldw	r16,0(sp)
1000b990:	dec00504 	addi	sp,sp,20
1000b994:	f800283a 	ret
1000b998:	84800417 	ldw	r18,16(r16)
1000b99c:	903ff626 	beq	r18,zero,1000b978 <__alt_data_end+0xf800b978>
1000b9a0:	84400017 	ldw	r17,0(r16)
1000b9a4:	108000cc 	andi	r2,r2,3
1000b9a8:	84800015 	stw	r18,0(r16)
1000b9ac:	8ca3c83a 	sub	r17,r17,r18
1000b9b0:	10001526 	beq	r2,zero,1000ba08 <_fflush_r+0x180>
1000b9b4:	0005883a 	mov	r2,zero
1000b9b8:	80800215 	stw	r2,8(r16)
1000b9bc:	04400316 	blt	zero,r17,1000b9cc <_fflush_r+0x144>
1000b9c0:	003fed06 	br	1000b978 <__alt_data_end+0xf800b978>
1000b9c4:	90a5883a 	add	r18,r18,r2
1000b9c8:	047feb0e 	bge	zero,r17,1000b978 <__alt_data_end+0xf800b978>
1000b9cc:	80800917 	ldw	r2,36(r16)
1000b9d0:	81400717 	ldw	r5,28(r16)
1000b9d4:	880f883a 	mov	r7,r17
1000b9d8:	900d883a 	mov	r6,r18
1000b9dc:	9809883a 	mov	r4,r19
1000b9e0:	103ee83a 	callr	r2
1000b9e4:	88a3c83a 	sub	r17,r17,r2
1000b9e8:	00bff616 	blt	zero,r2,1000b9c4 <__alt_data_end+0xf800b9c4>
1000b9ec:	80c0030b 	ldhu	r3,12(r16)
1000b9f0:	00bfffc4 	movi	r2,-1
1000b9f4:	18c01014 	ori	r3,r3,64
1000b9f8:	80c0030d 	sth	r3,12(r16)
1000b9fc:	003fdf06 	br	1000b97c <__alt_data_end+0xf800b97c>
1000ba00:	000be440 	call	1000be44 <__sinit>
1000ba04:	003fab06 	br	1000b8b4 <__alt_data_end+0xf800b8b4>
1000ba08:	80800517 	ldw	r2,20(r16)
1000ba0c:	003fea06 	br	1000b9b8 <__alt_data_end+0xf800b9b8>
1000ba10:	81400717 	ldw	r5,28(r16)
1000ba14:	000d883a 	mov	r6,zero
1000ba18:	9809883a 	mov	r4,r19
1000ba1c:	01c00044 	movi	r7,1
1000ba20:	403ee83a 	callr	r8
1000ba24:	100d883a 	mov	r6,r2
1000ba28:	00bfffc4 	movi	r2,-1
1000ba2c:	30801326 	beq	r6,r2,1000ba7c <_fflush_r+0x1f4>
1000ba30:	8080030b 	ldhu	r2,12(r16)
1000ba34:	82000a17 	ldw	r8,40(r16)
1000ba38:	003fb006 	br	1000b8fc <__alt_data_end+0xf800b8fc>
1000ba3c:	80c00f17 	ldw	r3,60(r16)
1000ba40:	00ffa716 	blt	zero,r3,1000b8e0 <__alt_data_end+0xf800b8e0>
1000ba44:	003fcc06 	br	1000b978 <__alt_data_end+0xf800b978>
1000ba48:	98c00017 	ldw	r3,0(r19)
1000ba4c:	183fb926 	beq	r3,zero,1000b934 <__alt_data_end+0xf800b934>
1000ba50:	01000744 	movi	r4,29
1000ba54:	19000226 	beq	r3,r4,1000ba60 <_fflush_r+0x1d8>
1000ba58:	01000584 	movi	r4,22
1000ba5c:	1900101e 	bne	r3,r4,1000baa0 <_fflush_r+0x218>
1000ba60:	8080030b 	ldhu	r2,12(r16)
1000ba64:	80c00417 	ldw	r3,16(r16)
1000ba68:	80000115 	stw	zero,4(r16)
1000ba6c:	10bdffcc 	andi	r2,r2,63487
1000ba70:	8080030d 	sth	r2,12(r16)
1000ba74:	80c00015 	stw	r3,0(r16)
1000ba78:	003fb706 	br	1000b958 <__alt_data_end+0xf800b958>
1000ba7c:	98800017 	ldw	r2,0(r19)
1000ba80:	103feb26 	beq	r2,zero,1000ba30 <__alt_data_end+0xf800ba30>
1000ba84:	00c00744 	movi	r3,29
1000ba88:	10c00226 	beq	r2,r3,1000ba94 <_fflush_r+0x20c>
1000ba8c:	00c00584 	movi	r3,22
1000ba90:	10ffd61e 	bne	r2,r3,1000b9ec <__alt_data_end+0xf800b9ec>
1000ba94:	9c400015 	stw	r17,0(r19)
1000ba98:	0005883a 	mov	r2,zero
1000ba9c:	003fb706 	br	1000b97c <__alt_data_end+0xf800b97c>
1000baa0:	80c0030b 	ldhu	r3,12(r16)
1000baa4:	18c01014 	ori	r3,r3,64
1000baa8:	80c0030d 	sth	r3,12(r16)
1000baac:	003fb306 	br	1000b97c <__alt_data_end+0xf800b97c>

1000bab0 <fflush>:
1000bab0:	20000526 	beq	r4,zero,1000bac8 <fflush+0x18>
1000bab4:	008400b4 	movhi	r2,4098
1000bab8:	10826d04 	addi	r2,r2,2484
1000babc:	200b883a 	mov	r5,r4
1000bac0:	11000017 	ldw	r4,0(r2)
1000bac4:	000b8881 	jmpi	1000b888 <_fflush_r>
1000bac8:	008400b4 	movhi	r2,4098
1000bacc:	10826c04 	addi	r2,r2,2480
1000bad0:	11000017 	ldw	r4,0(r2)
1000bad4:	01440074 	movhi	r5,4097
1000bad8:	296e2204 	addi	r5,r5,-18296
1000badc:	000c3601 	jmpi	1000c360 <_fwalk_reent>

1000bae0 <__fp_lock>:
1000bae0:	0005883a 	mov	r2,zero
1000bae4:	f800283a 	ret

1000bae8 <__fp_unlock>:
1000bae8:	0005883a 	mov	r2,zero
1000baec:	f800283a 	ret

1000baf0 <_cleanup_r>:
1000baf0:	01440074 	movhi	r5,4097
1000baf4:	297f2504 	addi	r5,r5,-876
1000baf8:	000c2a81 	jmpi	1000c2a8 <_fwalk>

1000bafc <__sinit.part.1>:
1000bafc:	defff604 	addi	sp,sp,-40
1000bb00:	00c40074 	movhi	r3,4097
1000bb04:	dfc00915 	stw	ra,36(sp)
1000bb08:	df000815 	stw	fp,32(sp)
1000bb0c:	ddc00715 	stw	r23,28(sp)
1000bb10:	dd800615 	stw	r22,24(sp)
1000bb14:	dd400515 	stw	r21,20(sp)
1000bb18:	dd000415 	stw	r20,16(sp)
1000bb1c:	dcc00315 	stw	r19,12(sp)
1000bb20:	dc800215 	stw	r18,8(sp)
1000bb24:	dc400115 	stw	r17,4(sp)
1000bb28:	dc000015 	stw	r16,0(sp)
1000bb2c:	18eebc04 	addi	r3,r3,-17680
1000bb30:	24000117 	ldw	r16,4(r4)
1000bb34:	20c00f15 	stw	r3,60(r4)
1000bb38:	07000044 	movi	fp,1
1000bb3c:	00c000c4 	movi	r3,3
1000bb40:	2080bb04 	addi	r2,r4,748
1000bb44:	20c0b915 	stw	r3,740(r4)
1000bb48:	27000e15 	stw	fp,56(r4)
1000bb4c:	2080ba15 	stw	r2,744(r4)
1000bb50:	2000b815 	stw	zero,736(r4)
1000bb54:	05c00204 	movi	r23,8
1000bb58:	00800104 	movi	r2,4
1000bb5c:	2025883a 	mov	r18,r4
1000bb60:	b80d883a 	mov	r6,r23
1000bb64:	81001704 	addi	r4,r16,92
1000bb68:	000b883a 	mov	r5,zero
1000bb6c:	80000015 	stw	zero,0(r16)
1000bb70:	80000115 	stw	zero,4(r16)
1000bb74:	80000215 	stw	zero,8(r16)
1000bb78:	8080030d 	sth	r2,12(r16)
1000bb7c:	80001915 	stw	zero,100(r16)
1000bb80:	8000038d 	sth	zero,14(r16)
1000bb84:	80000415 	stw	zero,16(r16)
1000bb88:	80000515 	stw	zero,20(r16)
1000bb8c:	80000615 	stw	zero,24(r16)
1000bb90:	000d0780 	call	1000d078 <memset>
1000bb94:	05840074 	movhi	r22,4097
1000bb98:	94400217 	ldw	r17,8(r18)
1000bb9c:	05440074 	movhi	r21,4097
1000bba0:	05040074 	movhi	r20,4097
1000bba4:	04c40074 	movhi	r19,4097
1000bba8:	b5b88e04 	addi	r22,r22,-7624
1000bbac:	ad78a504 	addi	r21,r21,-7532
1000bbb0:	a538c404 	addi	r20,r20,-7408
1000bbb4:	9cf8db04 	addi	r19,r19,-7316
1000bbb8:	85800815 	stw	r22,32(r16)
1000bbbc:	85400915 	stw	r21,36(r16)
1000bbc0:	85000a15 	stw	r20,40(r16)
1000bbc4:	84c00b15 	stw	r19,44(r16)
1000bbc8:	84000715 	stw	r16,28(r16)
1000bbcc:	00800284 	movi	r2,10
1000bbd0:	89001704 	addi	r4,r17,92
1000bbd4:	b80d883a 	mov	r6,r23
1000bbd8:	000b883a 	mov	r5,zero
1000bbdc:	88000015 	stw	zero,0(r17)
1000bbe0:	88000115 	stw	zero,4(r17)
1000bbe4:	88000215 	stw	zero,8(r17)
1000bbe8:	8880030d 	sth	r2,12(r17)
1000bbec:	88001915 	stw	zero,100(r17)
1000bbf0:	8f00038d 	sth	fp,14(r17)
1000bbf4:	88000415 	stw	zero,16(r17)
1000bbf8:	88000515 	stw	zero,20(r17)
1000bbfc:	88000615 	stw	zero,24(r17)
1000bc00:	000d0780 	call	1000d078 <memset>
1000bc04:	94000317 	ldw	r16,12(r18)
1000bc08:	00800484 	movi	r2,18
1000bc0c:	8c400715 	stw	r17,28(r17)
1000bc10:	8d800815 	stw	r22,32(r17)
1000bc14:	8d400915 	stw	r21,36(r17)
1000bc18:	8d000a15 	stw	r20,40(r17)
1000bc1c:	8cc00b15 	stw	r19,44(r17)
1000bc20:	8080030d 	sth	r2,12(r16)
1000bc24:	00800084 	movi	r2,2
1000bc28:	80000015 	stw	zero,0(r16)
1000bc2c:	80000115 	stw	zero,4(r16)
1000bc30:	80000215 	stw	zero,8(r16)
1000bc34:	80001915 	stw	zero,100(r16)
1000bc38:	8080038d 	sth	r2,14(r16)
1000bc3c:	80000415 	stw	zero,16(r16)
1000bc40:	80000515 	stw	zero,20(r16)
1000bc44:	80000615 	stw	zero,24(r16)
1000bc48:	81001704 	addi	r4,r16,92
1000bc4c:	000b883a 	mov	r5,zero
1000bc50:	b80d883a 	mov	r6,r23
1000bc54:	000d0780 	call	1000d078 <memset>
1000bc58:	84000715 	stw	r16,28(r16)
1000bc5c:	85800815 	stw	r22,32(r16)
1000bc60:	85400915 	stw	r21,36(r16)
1000bc64:	85000a15 	stw	r20,40(r16)
1000bc68:	84c00b15 	stw	r19,44(r16)
1000bc6c:	dfc00917 	ldw	ra,36(sp)
1000bc70:	df000817 	ldw	fp,32(sp)
1000bc74:	ddc00717 	ldw	r23,28(sp)
1000bc78:	dd800617 	ldw	r22,24(sp)
1000bc7c:	dd400517 	ldw	r21,20(sp)
1000bc80:	dd000417 	ldw	r20,16(sp)
1000bc84:	dcc00317 	ldw	r19,12(sp)
1000bc88:	dc800217 	ldw	r18,8(sp)
1000bc8c:	dc400117 	ldw	r17,4(sp)
1000bc90:	dc000017 	ldw	r16,0(sp)
1000bc94:	dec00a04 	addi	sp,sp,40
1000bc98:	f800283a 	ret

1000bc9c <__sfmoreglue>:
1000bc9c:	defffc04 	addi	sp,sp,-16
1000bca0:	dc800215 	stw	r18,8(sp)
1000bca4:	2825883a 	mov	r18,r5
1000bca8:	dc000015 	stw	r16,0(sp)
1000bcac:	01401a04 	movi	r5,104
1000bcb0:	2021883a 	mov	r16,r4
1000bcb4:	9009883a 	mov	r4,r18
1000bcb8:	dfc00315 	stw	ra,12(sp)
1000bcbc:	dc400115 	stw	r17,4(sp)
1000bcc0:	0007bcc0 	call	10007bcc <__mulsi3>
1000bcc4:	8009883a 	mov	r4,r16
1000bcc8:	11400304 	addi	r5,r2,12
1000bccc:	1023883a 	mov	r17,r2
1000bcd0:	000c6b00 	call	1000c6b0 <_malloc_r>
1000bcd4:	1021883a 	mov	r16,r2
1000bcd8:	10000726 	beq	r2,zero,1000bcf8 <__sfmoreglue+0x5c>
1000bcdc:	11000304 	addi	r4,r2,12
1000bce0:	10000015 	stw	zero,0(r2)
1000bce4:	14800115 	stw	r18,4(r2)
1000bce8:	11000215 	stw	r4,8(r2)
1000bcec:	000b883a 	mov	r5,zero
1000bcf0:	880d883a 	mov	r6,r17
1000bcf4:	000d0780 	call	1000d078 <memset>
1000bcf8:	8005883a 	mov	r2,r16
1000bcfc:	dfc00317 	ldw	ra,12(sp)
1000bd00:	dc800217 	ldw	r18,8(sp)
1000bd04:	dc400117 	ldw	r17,4(sp)
1000bd08:	dc000017 	ldw	r16,0(sp)
1000bd0c:	dec00404 	addi	sp,sp,16
1000bd10:	f800283a 	ret

1000bd14 <__sfp>:
1000bd14:	008400b4 	movhi	r2,4098
1000bd18:	defffb04 	addi	sp,sp,-20
1000bd1c:	10826c04 	addi	r2,r2,2480
1000bd20:	dc800215 	stw	r18,8(sp)
1000bd24:	14800017 	ldw	r18,0(r2)
1000bd28:	dcc00315 	stw	r19,12(sp)
1000bd2c:	dfc00415 	stw	ra,16(sp)
1000bd30:	90800e17 	ldw	r2,56(r18)
1000bd34:	dc400115 	stw	r17,4(sp)
1000bd38:	dc000015 	stw	r16,0(sp)
1000bd3c:	2027883a 	mov	r19,r4
1000bd40:	1000021e 	bne	r2,zero,1000bd4c <__sfp+0x38>
1000bd44:	9009883a 	mov	r4,r18
1000bd48:	000bafc0 	call	1000bafc <__sinit.part.1>
1000bd4c:	9480b804 	addi	r18,r18,736
1000bd50:	047fffc4 	movi	r17,-1
1000bd54:	91400117 	ldw	r5,4(r18)
1000bd58:	94000217 	ldw	r16,8(r18)
1000bd5c:	297fffc4 	addi	r5,r5,-1
1000bd60:	28000a16 	blt	r5,zero,1000bd8c <__sfp+0x78>
1000bd64:	8080030f 	ldh	r2,12(r16)
1000bd68:	10000c26 	beq	r2,zero,1000bd9c <__sfp+0x88>
1000bd6c:	80c01d04 	addi	r3,r16,116
1000bd70:	00000206 	br	1000bd7c <__sfp+0x68>
1000bd74:	18bfe60f 	ldh	r2,-104(r3)
1000bd78:	10000826 	beq	r2,zero,1000bd9c <__sfp+0x88>
1000bd7c:	297fffc4 	addi	r5,r5,-1
1000bd80:	1c3ffd04 	addi	r16,r3,-12
1000bd84:	18c01a04 	addi	r3,r3,104
1000bd88:	2c7ffa1e 	bne	r5,r17,1000bd74 <__alt_data_end+0xf800bd74>
1000bd8c:	90800017 	ldw	r2,0(r18)
1000bd90:	10001d26 	beq	r2,zero,1000be08 <__sfp+0xf4>
1000bd94:	1025883a 	mov	r18,r2
1000bd98:	003fee06 	br	1000bd54 <__alt_data_end+0xf800bd54>
1000bd9c:	00bfffc4 	movi	r2,-1
1000bda0:	8080038d 	sth	r2,14(r16)
1000bda4:	00800044 	movi	r2,1
1000bda8:	8080030d 	sth	r2,12(r16)
1000bdac:	80001915 	stw	zero,100(r16)
1000bdb0:	80000015 	stw	zero,0(r16)
1000bdb4:	80000215 	stw	zero,8(r16)
1000bdb8:	80000115 	stw	zero,4(r16)
1000bdbc:	80000415 	stw	zero,16(r16)
1000bdc0:	80000515 	stw	zero,20(r16)
1000bdc4:	80000615 	stw	zero,24(r16)
1000bdc8:	81001704 	addi	r4,r16,92
1000bdcc:	000b883a 	mov	r5,zero
1000bdd0:	01800204 	movi	r6,8
1000bdd4:	000d0780 	call	1000d078 <memset>
1000bdd8:	8005883a 	mov	r2,r16
1000bddc:	80000c15 	stw	zero,48(r16)
1000bde0:	80000d15 	stw	zero,52(r16)
1000bde4:	80001115 	stw	zero,68(r16)
1000bde8:	80001215 	stw	zero,72(r16)
1000bdec:	dfc00417 	ldw	ra,16(sp)
1000bdf0:	dcc00317 	ldw	r19,12(sp)
1000bdf4:	dc800217 	ldw	r18,8(sp)
1000bdf8:	dc400117 	ldw	r17,4(sp)
1000bdfc:	dc000017 	ldw	r16,0(sp)
1000be00:	dec00504 	addi	sp,sp,20
1000be04:	f800283a 	ret
1000be08:	9809883a 	mov	r4,r19
1000be0c:	01400104 	movi	r5,4
1000be10:	000bc9c0 	call	1000bc9c <__sfmoreglue>
1000be14:	90800015 	stw	r2,0(r18)
1000be18:	103fde1e 	bne	r2,zero,1000bd94 <__alt_data_end+0xf800bd94>
1000be1c:	00800304 	movi	r2,12
1000be20:	98800015 	stw	r2,0(r19)
1000be24:	0005883a 	mov	r2,zero
1000be28:	003ff006 	br	1000bdec <__alt_data_end+0xf800bdec>

1000be2c <_cleanup>:
1000be2c:	008400b4 	movhi	r2,4098
1000be30:	10826c04 	addi	r2,r2,2480
1000be34:	11000017 	ldw	r4,0(r2)
1000be38:	01440074 	movhi	r5,4097
1000be3c:	297f2504 	addi	r5,r5,-876
1000be40:	000c2a81 	jmpi	1000c2a8 <_fwalk>

1000be44 <__sinit>:
1000be44:	20800e17 	ldw	r2,56(r4)
1000be48:	10000126 	beq	r2,zero,1000be50 <__sinit+0xc>
1000be4c:	f800283a 	ret
1000be50:	000bafc1 	jmpi	1000bafc <__sinit.part.1>

1000be54 <__sfp_lock_acquire>:
1000be54:	f800283a 	ret

1000be58 <__sfp_lock_release>:
1000be58:	f800283a 	ret

1000be5c <__sinit_lock_acquire>:
1000be5c:	f800283a 	ret

1000be60 <__sinit_lock_release>:
1000be60:	f800283a 	ret

1000be64 <__fp_lock_all>:
1000be64:	008400b4 	movhi	r2,4098
1000be68:	10826d04 	addi	r2,r2,2484
1000be6c:	11000017 	ldw	r4,0(r2)
1000be70:	01440074 	movhi	r5,4097
1000be74:	296eb804 	addi	r5,r5,-17696
1000be78:	000c2a81 	jmpi	1000c2a8 <_fwalk>

1000be7c <__fp_unlock_all>:
1000be7c:	008400b4 	movhi	r2,4098
1000be80:	10826d04 	addi	r2,r2,2484
1000be84:	11000017 	ldw	r4,0(r2)
1000be88:	01440074 	movhi	r5,4097
1000be8c:	296eba04 	addi	r5,r5,-17688
1000be90:	000c2a81 	jmpi	1000c2a8 <_fwalk>

1000be94 <_malloc_trim_r>:
1000be94:	defffb04 	addi	sp,sp,-20
1000be98:	dcc00315 	stw	r19,12(sp)
1000be9c:	04c400b4 	movhi	r19,4098
1000bea0:	dc800215 	stw	r18,8(sp)
1000bea4:	dc400115 	stw	r17,4(sp)
1000bea8:	dc000015 	stw	r16,0(sp)
1000beac:	dfc00415 	stw	ra,16(sp)
1000beb0:	2821883a 	mov	r16,r5
1000beb4:	9cfce704 	addi	r19,r19,-3172
1000beb8:	2025883a 	mov	r18,r4
1000bebc:	00122e40 	call	100122e4 <__malloc_lock>
1000bec0:	98800217 	ldw	r2,8(r19)
1000bec4:	14400117 	ldw	r17,4(r2)
1000bec8:	00bfff04 	movi	r2,-4
1000becc:	88a2703a 	and	r17,r17,r2
1000bed0:	8c21c83a 	sub	r16,r17,r16
1000bed4:	8403fbc4 	addi	r16,r16,4079
1000bed8:	8020d33a 	srli	r16,r16,12
1000bedc:	0083ffc4 	movi	r2,4095
1000bee0:	843fffc4 	addi	r16,r16,-1
1000bee4:	8020933a 	slli	r16,r16,12
1000bee8:	1400060e 	bge	r2,r16,1000bf04 <_malloc_trim_r+0x70>
1000beec:	9009883a 	mov	r4,r18
1000bef0:	000b883a 	mov	r5,zero
1000bef4:	000e1e40 	call	1000e1e4 <_sbrk_r>
1000bef8:	98c00217 	ldw	r3,8(r19)
1000befc:	1c47883a 	add	r3,r3,r17
1000bf00:	10c00a26 	beq	r2,r3,1000bf2c <_malloc_trim_r+0x98>
1000bf04:	9009883a 	mov	r4,r18
1000bf08:	00123040 	call	10012304 <__malloc_unlock>
1000bf0c:	0005883a 	mov	r2,zero
1000bf10:	dfc00417 	ldw	ra,16(sp)
1000bf14:	dcc00317 	ldw	r19,12(sp)
1000bf18:	dc800217 	ldw	r18,8(sp)
1000bf1c:	dc400117 	ldw	r17,4(sp)
1000bf20:	dc000017 	ldw	r16,0(sp)
1000bf24:	dec00504 	addi	sp,sp,20
1000bf28:	f800283a 	ret
1000bf2c:	9009883a 	mov	r4,r18
1000bf30:	040bc83a 	sub	r5,zero,r16
1000bf34:	000e1e40 	call	1000e1e4 <_sbrk_r>
1000bf38:	00ffffc4 	movi	r3,-1
1000bf3c:	10c00d26 	beq	r2,r3,1000bf74 <_malloc_trim_r+0xe0>
1000bf40:	00c400f4 	movhi	r3,4099
1000bf44:	18f2c704 	addi	r3,r3,-13540
1000bf48:	18800017 	ldw	r2,0(r3)
1000bf4c:	99000217 	ldw	r4,8(r19)
1000bf50:	8c23c83a 	sub	r17,r17,r16
1000bf54:	8c400054 	ori	r17,r17,1
1000bf58:	1421c83a 	sub	r16,r2,r16
1000bf5c:	24400115 	stw	r17,4(r4)
1000bf60:	9009883a 	mov	r4,r18
1000bf64:	1c000015 	stw	r16,0(r3)
1000bf68:	00123040 	call	10012304 <__malloc_unlock>
1000bf6c:	00800044 	movi	r2,1
1000bf70:	003fe706 	br	1000bf10 <__alt_data_end+0xf800bf10>
1000bf74:	9009883a 	mov	r4,r18
1000bf78:	000b883a 	mov	r5,zero
1000bf7c:	000e1e40 	call	1000e1e4 <_sbrk_r>
1000bf80:	99000217 	ldw	r4,8(r19)
1000bf84:	014003c4 	movi	r5,15
1000bf88:	1107c83a 	sub	r3,r2,r4
1000bf8c:	28ffdd0e 	bge	r5,r3,1000bf04 <__alt_data_end+0xf800bf04>
1000bf90:	014400b4 	movhi	r5,4098
1000bf94:	29426f04 	addi	r5,r5,2492
1000bf98:	29400017 	ldw	r5,0(r5)
1000bf9c:	18c00054 	ori	r3,r3,1
1000bfa0:	20c00115 	stw	r3,4(r4)
1000bfa4:	00c400f4 	movhi	r3,4099
1000bfa8:	1145c83a 	sub	r2,r2,r5
1000bfac:	18f2c704 	addi	r3,r3,-13540
1000bfb0:	18800015 	stw	r2,0(r3)
1000bfb4:	003fd306 	br	1000bf04 <__alt_data_end+0xf800bf04>

1000bfb8 <_free_r>:
1000bfb8:	28004c26 	beq	r5,zero,1000c0ec <_free_r+0x134>
1000bfbc:	defffd04 	addi	sp,sp,-12
1000bfc0:	dc400115 	stw	r17,4(sp)
1000bfc4:	dc000015 	stw	r16,0(sp)
1000bfc8:	2023883a 	mov	r17,r4
1000bfcc:	2821883a 	mov	r16,r5
1000bfd0:	dfc00215 	stw	ra,8(sp)
1000bfd4:	00122e40 	call	100122e4 <__malloc_lock>
1000bfd8:	813fff17 	ldw	r4,-4(r16)
1000bfdc:	00bfff84 	movi	r2,-2
1000bfe0:	024400b4 	movhi	r9,4098
1000bfe4:	81bffe04 	addi	r6,r16,-8
1000bfe8:	2084703a 	and	r2,r4,r2
1000bfec:	4a7ce704 	addi	r9,r9,-3172
1000bff0:	308b883a 	add	r5,r6,r2
1000bff4:	2a000117 	ldw	r8,4(r5)
1000bff8:	49c00217 	ldw	r7,8(r9)
1000bffc:	00ffff04 	movi	r3,-4
1000c000:	40c6703a 	and	r3,r8,r3
1000c004:	39405326 	beq	r7,r5,1000c154 <_free_r+0x19c>
1000c008:	28c00115 	stw	r3,4(r5)
1000c00c:	2100004c 	andi	r4,r4,1
1000c010:	2000091e 	bne	r4,zero,1000c038 <_free_r+0x80>
1000c014:	81fffe17 	ldw	r7,-8(r16)
1000c018:	4a000204 	addi	r8,r9,8
1000c01c:	31cdc83a 	sub	r6,r6,r7
1000c020:	31000217 	ldw	r4,8(r6)
1000c024:	11c5883a 	add	r2,r2,r7
1000c028:	22006126 	beq	r4,r8,1000c1b0 <_free_r+0x1f8>
1000c02c:	31c00317 	ldw	r7,12(r6)
1000c030:	21c00315 	stw	r7,12(r4)
1000c034:	39000215 	stw	r4,8(r7)
1000c038:	28c9883a 	add	r4,r5,r3
1000c03c:	21c00117 	ldw	r7,4(r4)
1000c040:	39c0004c 	andi	r7,r7,1
1000c044:	38000d1e 	bne	r7,zero,1000c07c <_free_r+0xc4>
1000c048:	29000217 	ldw	r4,8(r5)
1000c04c:	10c5883a 	add	r2,r2,r3
1000c050:	00c400b4 	movhi	r3,4098
1000c054:	18fce904 	addi	r3,r3,-3164
1000c058:	20c07526 	beq	r4,r3,1000c230 <_free_r+0x278>
1000c05c:	29c00317 	ldw	r7,12(r5)
1000c060:	11400054 	ori	r5,r2,1
1000c064:	3087883a 	add	r3,r6,r2
1000c068:	21c00315 	stw	r7,12(r4)
1000c06c:	39000215 	stw	r4,8(r7)
1000c070:	31400115 	stw	r5,4(r6)
1000c074:	18800015 	stw	r2,0(r3)
1000c078:	00000406 	br	1000c08c <_free_r+0xd4>
1000c07c:	10c00054 	ori	r3,r2,1
1000c080:	30c00115 	stw	r3,4(r6)
1000c084:	3087883a 	add	r3,r6,r2
1000c088:	18800015 	stw	r2,0(r3)
1000c08c:	00c07fc4 	movi	r3,511
1000c090:	18801736 	bltu	r3,r2,1000c0f0 <_free_r+0x138>
1000c094:	1004d0fa 	srli	r2,r2,3
1000c098:	01400044 	movi	r5,1
1000c09c:	49000117 	ldw	r4,4(r9)
1000c0a0:	1087883a 	add	r3,r2,r2
1000c0a4:	18c7883a 	add	r3,r3,r3
1000c0a8:	1005d0ba 	srai	r2,r2,2
1000c0ac:	18c7883a 	add	r3,r3,r3
1000c0b0:	1a47883a 	add	r3,r3,r9
1000c0b4:	19c00217 	ldw	r7,8(r3)
1000c0b8:	2884983a 	sll	r2,r5,r2
1000c0bc:	30c00315 	stw	r3,12(r6)
1000c0c0:	31c00215 	stw	r7,8(r6)
1000c0c4:	1104b03a 	or	r2,r2,r4
1000c0c8:	19800215 	stw	r6,8(r3)
1000c0cc:	48800115 	stw	r2,4(r9)
1000c0d0:	39800315 	stw	r6,12(r7)
1000c0d4:	8809883a 	mov	r4,r17
1000c0d8:	dfc00217 	ldw	ra,8(sp)
1000c0dc:	dc400117 	ldw	r17,4(sp)
1000c0e0:	dc000017 	ldw	r16,0(sp)
1000c0e4:	dec00304 	addi	sp,sp,12
1000c0e8:	00123041 	jmpi	10012304 <__malloc_unlock>
1000c0ec:	f800283a 	ret
1000c0f0:	1006d27a 	srli	r3,r2,9
1000c0f4:	01000104 	movi	r4,4
1000c0f8:	20c04036 	bltu	r4,r3,1000c1fc <_free_r+0x244>
1000c0fc:	1006d1ba 	srli	r3,r2,6
1000c100:	19400e04 	addi	r5,r3,56
1000c104:	2947883a 	add	r3,r5,r5
1000c108:	18c7883a 	add	r3,r3,r3
1000c10c:	18c7883a 	add	r3,r3,r3
1000c110:	1a49883a 	add	r4,r3,r9
1000c114:	20c00217 	ldw	r3,8(r4)
1000c118:	01c400b4 	movhi	r7,4098
1000c11c:	39fce704 	addi	r7,r7,-3172
1000c120:	19003b26 	beq	r3,r4,1000c210 <_free_r+0x258>
1000c124:	01ffff04 	movi	r7,-4
1000c128:	19400117 	ldw	r5,4(r3)
1000c12c:	29ca703a 	and	r5,r5,r7
1000c130:	1140022e 	bgeu	r2,r5,1000c13c <_free_r+0x184>
1000c134:	18c00217 	ldw	r3,8(r3)
1000c138:	20fffb1e 	bne	r4,r3,1000c128 <__alt_data_end+0xf800c128>
1000c13c:	18800317 	ldw	r2,12(r3)
1000c140:	30800315 	stw	r2,12(r6)
1000c144:	30c00215 	stw	r3,8(r6)
1000c148:	11800215 	stw	r6,8(r2)
1000c14c:	19800315 	stw	r6,12(r3)
1000c150:	003fe006 	br	1000c0d4 <__alt_data_end+0xf800c0d4>
1000c154:	2100004c 	andi	r4,r4,1
1000c158:	1885883a 	add	r2,r3,r2
1000c15c:	2000071e 	bne	r4,zero,1000c17c <_free_r+0x1c4>
1000c160:	817ffe17 	ldw	r5,-8(r16)
1000c164:	314dc83a 	sub	r6,r6,r5
1000c168:	30c00317 	ldw	r3,12(r6)
1000c16c:	31000217 	ldw	r4,8(r6)
1000c170:	1145883a 	add	r2,r2,r5
1000c174:	20c00315 	stw	r3,12(r4)
1000c178:	19000215 	stw	r4,8(r3)
1000c17c:	10c00054 	ori	r3,r2,1
1000c180:	30c00115 	stw	r3,4(r6)
1000c184:	00c400b4 	movhi	r3,4098
1000c188:	18c27004 	addi	r3,r3,2496
1000c18c:	18c00017 	ldw	r3,0(r3)
1000c190:	49800215 	stw	r6,8(r9)
1000c194:	10ffcf36 	bltu	r2,r3,1000c0d4 <__alt_data_end+0xf800c0d4>
1000c198:	008400f4 	movhi	r2,4099
1000c19c:	10b2bf04 	addi	r2,r2,-13572
1000c1a0:	11400017 	ldw	r5,0(r2)
1000c1a4:	8809883a 	mov	r4,r17
1000c1a8:	000be940 	call	1000be94 <_malloc_trim_r>
1000c1ac:	003fc906 	br	1000c0d4 <__alt_data_end+0xf800c0d4>
1000c1b0:	28c9883a 	add	r4,r5,r3
1000c1b4:	21000117 	ldw	r4,4(r4)
1000c1b8:	2100004c 	andi	r4,r4,1
1000c1bc:	20000a1e 	bne	r4,zero,1000c1e8 <_free_r+0x230>
1000c1c0:	29000317 	ldw	r4,12(r5)
1000c1c4:	29400217 	ldw	r5,8(r5)
1000c1c8:	10c5883a 	add	r2,r2,r3
1000c1cc:	10c00054 	ori	r3,r2,1
1000c1d0:	29000315 	stw	r4,12(r5)
1000c1d4:	21400215 	stw	r5,8(r4)
1000c1d8:	30c00115 	stw	r3,4(r6)
1000c1dc:	308d883a 	add	r6,r6,r2
1000c1e0:	30800015 	stw	r2,0(r6)
1000c1e4:	003fbb06 	br	1000c0d4 <__alt_data_end+0xf800c0d4>
1000c1e8:	10c00054 	ori	r3,r2,1
1000c1ec:	30c00115 	stw	r3,4(r6)
1000c1f0:	308d883a 	add	r6,r6,r2
1000c1f4:	30800015 	stw	r2,0(r6)
1000c1f8:	003fb606 	br	1000c0d4 <__alt_data_end+0xf800c0d4>
1000c1fc:	01000504 	movi	r4,20
1000c200:	20c01436 	bltu	r4,r3,1000c254 <_free_r+0x29c>
1000c204:	194016c4 	addi	r5,r3,91
1000c208:	2947883a 	add	r3,r5,r5
1000c20c:	003fbe06 	br	1000c108 <__alt_data_end+0xf800c108>
1000c210:	280bd0ba 	srai	r5,r5,2
1000c214:	00800044 	movi	r2,1
1000c218:	39000117 	ldw	r4,4(r7)
1000c21c:	114a983a 	sll	r5,r2,r5
1000c220:	1805883a 	mov	r2,r3
1000c224:	2908b03a 	or	r4,r5,r4
1000c228:	39000115 	stw	r4,4(r7)
1000c22c:	003fc406 	br	1000c140 <__alt_data_end+0xf800c140>
1000c230:	49800515 	stw	r6,20(r9)
1000c234:	49800415 	stw	r6,16(r9)
1000c238:	10c00054 	ori	r3,r2,1
1000c23c:	31000315 	stw	r4,12(r6)
1000c240:	31000215 	stw	r4,8(r6)
1000c244:	30c00115 	stw	r3,4(r6)
1000c248:	308d883a 	add	r6,r6,r2
1000c24c:	30800015 	stw	r2,0(r6)
1000c250:	003fa006 	br	1000c0d4 <__alt_data_end+0xf800c0d4>
1000c254:	01001504 	movi	r4,84
1000c258:	20c00436 	bltu	r4,r3,1000c26c <_free_r+0x2b4>
1000c25c:	1006d33a 	srli	r3,r2,12
1000c260:	19401b84 	addi	r5,r3,110
1000c264:	2947883a 	add	r3,r5,r5
1000c268:	003fa706 	br	1000c108 <__alt_data_end+0xf800c108>
1000c26c:	01005504 	movi	r4,340
1000c270:	20c00436 	bltu	r4,r3,1000c284 <_free_r+0x2cc>
1000c274:	1006d3fa 	srli	r3,r2,15
1000c278:	19401dc4 	addi	r5,r3,119
1000c27c:	2947883a 	add	r3,r5,r5
1000c280:	003fa106 	br	1000c108 <__alt_data_end+0xf800c108>
1000c284:	01015504 	movi	r4,1364
1000c288:	20c00436 	bltu	r4,r3,1000c29c <_free_r+0x2e4>
1000c28c:	1006d4ba 	srli	r3,r2,18
1000c290:	19401f04 	addi	r5,r3,124
1000c294:	2947883a 	add	r3,r5,r5
1000c298:	003f9b06 	br	1000c108 <__alt_data_end+0xf800c108>
1000c29c:	00c03f04 	movi	r3,252
1000c2a0:	01401f84 	movi	r5,126
1000c2a4:	003f9806 	br	1000c108 <__alt_data_end+0xf800c108>

1000c2a8 <_fwalk>:
1000c2a8:	defff804 	addi	sp,sp,-32
1000c2ac:	dd400515 	stw	r21,20(sp)
1000c2b0:	2540b804 	addi	r21,r4,736
1000c2b4:	dd800615 	stw	r22,24(sp)
1000c2b8:	dd000415 	stw	r20,16(sp)
1000c2bc:	dfc00715 	stw	ra,28(sp)
1000c2c0:	dcc00315 	stw	r19,12(sp)
1000c2c4:	dc800215 	stw	r18,8(sp)
1000c2c8:	dc400115 	stw	r17,4(sp)
1000c2cc:	dc000015 	stw	r16,0(sp)
1000c2d0:	2829883a 	mov	r20,r5
1000c2d4:	002d883a 	mov	r22,zero
1000c2d8:	000be540 	call	1000be54 <__sfp_lock_acquire>
1000c2dc:	a8001426 	beq	r21,zero,1000c330 <_fwalk+0x88>
1000c2e0:	04ffffc4 	movi	r19,-1
1000c2e4:	ac400117 	ldw	r17,4(r21)
1000c2e8:	ac800217 	ldw	r18,8(r21)
1000c2ec:	8c7fffc4 	addi	r17,r17,-1
1000c2f0:	88000d16 	blt	r17,zero,1000c328 <_fwalk+0x80>
1000c2f4:	94000304 	addi	r16,r18,12
1000c2f8:	94800384 	addi	r18,r18,14
1000c2fc:	80c0000f 	ldh	r3,0(r16)
1000c300:	8c7fffc4 	addi	r17,r17,-1
1000c304:	813ffd04 	addi	r4,r16,-12
1000c308:	18000426 	beq	r3,zero,1000c31c <_fwalk+0x74>
1000c30c:	90c0000f 	ldh	r3,0(r18)
1000c310:	1cc00226 	beq	r3,r19,1000c31c <_fwalk+0x74>
1000c314:	a03ee83a 	callr	r20
1000c318:	b0acb03a 	or	r22,r22,r2
1000c31c:	84001a04 	addi	r16,r16,104
1000c320:	94801a04 	addi	r18,r18,104
1000c324:	8cfff51e 	bne	r17,r19,1000c2fc <__alt_data_end+0xf800c2fc>
1000c328:	ad400017 	ldw	r21,0(r21)
1000c32c:	a83fed1e 	bne	r21,zero,1000c2e4 <__alt_data_end+0xf800c2e4>
1000c330:	000be580 	call	1000be58 <__sfp_lock_release>
1000c334:	b005883a 	mov	r2,r22
1000c338:	dfc00717 	ldw	ra,28(sp)
1000c33c:	dd800617 	ldw	r22,24(sp)
1000c340:	dd400517 	ldw	r21,20(sp)
1000c344:	dd000417 	ldw	r20,16(sp)
1000c348:	dcc00317 	ldw	r19,12(sp)
1000c34c:	dc800217 	ldw	r18,8(sp)
1000c350:	dc400117 	ldw	r17,4(sp)
1000c354:	dc000017 	ldw	r16,0(sp)
1000c358:	dec00804 	addi	sp,sp,32
1000c35c:	f800283a 	ret

1000c360 <_fwalk_reent>:
1000c360:	defff804 	addi	sp,sp,-32
1000c364:	dd400515 	stw	r21,20(sp)
1000c368:	2540b804 	addi	r21,r4,736
1000c36c:	dd800615 	stw	r22,24(sp)
1000c370:	dd000415 	stw	r20,16(sp)
1000c374:	dcc00315 	stw	r19,12(sp)
1000c378:	dfc00715 	stw	ra,28(sp)
1000c37c:	dc800215 	stw	r18,8(sp)
1000c380:	dc400115 	stw	r17,4(sp)
1000c384:	dc000015 	stw	r16,0(sp)
1000c388:	2027883a 	mov	r19,r4
1000c38c:	2829883a 	mov	r20,r5
1000c390:	002d883a 	mov	r22,zero
1000c394:	000be540 	call	1000be54 <__sfp_lock_acquire>
1000c398:	a8001326 	beq	r21,zero,1000c3e8 <_fwalk_reent+0x88>
1000c39c:	04bfffc4 	movi	r18,-1
1000c3a0:	ac400117 	ldw	r17,4(r21)
1000c3a4:	ac000217 	ldw	r16,8(r21)
1000c3a8:	8c7fffc4 	addi	r17,r17,-1
1000c3ac:	88000c16 	blt	r17,zero,1000c3e0 <_fwalk_reent+0x80>
1000c3b0:	84000304 	addi	r16,r16,12
1000c3b4:	80c0000f 	ldh	r3,0(r16)
1000c3b8:	8c7fffc4 	addi	r17,r17,-1
1000c3bc:	817ffd04 	addi	r5,r16,-12
1000c3c0:	18000526 	beq	r3,zero,1000c3d8 <_fwalk_reent+0x78>
1000c3c4:	80c0008f 	ldh	r3,2(r16)
1000c3c8:	9809883a 	mov	r4,r19
1000c3cc:	1c800226 	beq	r3,r18,1000c3d8 <_fwalk_reent+0x78>
1000c3d0:	a03ee83a 	callr	r20
1000c3d4:	b0acb03a 	or	r22,r22,r2
1000c3d8:	84001a04 	addi	r16,r16,104
1000c3dc:	8cbff51e 	bne	r17,r18,1000c3b4 <__alt_data_end+0xf800c3b4>
1000c3e0:	ad400017 	ldw	r21,0(r21)
1000c3e4:	a83fee1e 	bne	r21,zero,1000c3a0 <__alt_data_end+0xf800c3a0>
1000c3e8:	000be580 	call	1000be58 <__sfp_lock_release>
1000c3ec:	b005883a 	mov	r2,r22
1000c3f0:	dfc00717 	ldw	ra,28(sp)
1000c3f4:	dd800617 	ldw	r22,24(sp)
1000c3f8:	dd400517 	ldw	r21,20(sp)
1000c3fc:	dd000417 	ldw	r20,16(sp)
1000c400:	dcc00317 	ldw	r19,12(sp)
1000c404:	dc800217 	ldw	r18,8(sp)
1000c408:	dc400117 	ldw	r17,4(sp)
1000c40c:	dc000017 	ldw	r16,0(sp)
1000c410:	dec00804 	addi	sp,sp,32
1000c414:	f800283a 	ret

1000c418 <_setlocale_r>:
1000c418:	30001b26 	beq	r6,zero,1000c488 <_setlocale_r+0x70>
1000c41c:	01440074 	movhi	r5,4097
1000c420:	defffe04 	addi	sp,sp,-8
1000c424:	2951dd04 	addi	r5,r5,18292
1000c428:	3009883a 	mov	r4,r6
1000c42c:	dc000015 	stw	r16,0(sp)
1000c430:	dfc00115 	stw	ra,4(sp)
1000c434:	3021883a 	mov	r16,r6
1000c438:	000e3740 	call	1000e374 <strcmp>
1000c43c:	1000061e 	bne	r2,zero,1000c458 <_setlocale_r+0x40>
1000c440:	00840074 	movhi	r2,4097
1000c444:	1091bf04 	addi	r2,r2,18172
1000c448:	dfc00117 	ldw	ra,4(sp)
1000c44c:	dc000017 	ldw	r16,0(sp)
1000c450:	dec00204 	addi	sp,sp,8
1000c454:	f800283a 	ret
1000c458:	01440074 	movhi	r5,4097
1000c45c:	2951bf04 	addi	r5,r5,18172
1000c460:	8009883a 	mov	r4,r16
1000c464:	000e3740 	call	1000e374 <strcmp>
1000c468:	103ff526 	beq	r2,zero,1000c440 <__alt_data_end+0xf800c440>
1000c46c:	01440074 	movhi	r5,4097
1000c470:	2951c804 	addi	r5,r5,18208
1000c474:	8009883a 	mov	r4,r16
1000c478:	000e3740 	call	1000e374 <strcmp>
1000c47c:	103ff026 	beq	r2,zero,1000c440 <__alt_data_end+0xf800c440>
1000c480:	0005883a 	mov	r2,zero
1000c484:	003ff006 	br	1000c448 <__alt_data_end+0xf800c448>
1000c488:	00840074 	movhi	r2,4097
1000c48c:	1091bf04 	addi	r2,r2,18172
1000c490:	f800283a 	ret

1000c494 <__locale_charset>:
1000c494:	008400b4 	movhi	r2,4098
1000c498:	10bcd104 	addi	r2,r2,-3260
1000c49c:	f800283a 	ret

1000c4a0 <__locale_mb_cur_max>:
1000c4a0:	008400b4 	movhi	r2,4098
1000c4a4:	10826e04 	addi	r2,r2,2488
1000c4a8:	10800017 	ldw	r2,0(r2)
1000c4ac:	f800283a 	ret

1000c4b0 <__locale_msgcharset>:
1000c4b0:	008400b4 	movhi	r2,4098
1000c4b4:	10bcc904 	addi	r2,r2,-3292
1000c4b8:	f800283a 	ret

1000c4bc <__locale_cjk_lang>:
1000c4bc:	0005883a 	mov	r2,zero
1000c4c0:	f800283a 	ret

1000c4c4 <_localeconv_r>:
1000c4c4:	008400b4 	movhi	r2,4098
1000c4c8:	10bcd904 	addi	r2,r2,-3228
1000c4cc:	f800283a 	ret

1000c4d0 <setlocale>:
1000c4d0:	00c400b4 	movhi	r3,4098
1000c4d4:	18c26d04 	addi	r3,r3,2484
1000c4d8:	2005883a 	mov	r2,r4
1000c4dc:	19000017 	ldw	r4,0(r3)
1000c4e0:	280d883a 	mov	r6,r5
1000c4e4:	100b883a 	mov	r5,r2
1000c4e8:	000c4181 	jmpi	1000c418 <_setlocale_r>

1000c4ec <localeconv>:
1000c4ec:	008400b4 	movhi	r2,4098
1000c4f0:	10bcd904 	addi	r2,r2,-3228
1000c4f4:	f800283a 	ret

1000c4f8 <__smakebuf_r>:
1000c4f8:	2880030b 	ldhu	r2,12(r5)
1000c4fc:	10c0008c 	andi	r3,r2,2
1000c500:	1800401e 	bne	r3,zero,1000c604 <__smakebuf_r+0x10c>
1000c504:	deffec04 	addi	sp,sp,-80
1000c508:	dc000f15 	stw	r16,60(sp)
1000c50c:	2821883a 	mov	r16,r5
1000c510:	2940038f 	ldh	r5,14(r5)
1000c514:	dc401015 	stw	r17,64(sp)
1000c518:	dfc01315 	stw	ra,76(sp)
1000c51c:	dcc01215 	stw	r19,72(sp)
1000c520:	dc801115 	stw	r18,68(sp)
1000c524:	2023883a 	mov	r17,r4
1000c528:	28001b16 	blt	r5,zero,1000c598 <__smakebuf_r+0xa0>
1000c52c:	d80d883a 	mov	r6,sp
1000c530:	000fe840 	call	1000fe84 <_fstat_r>
1000c534:	10001716 	blt	r2,zero,1000c594 <__smakebuf_r+0x9c>
1000c538:	d8800117 	ldw	r2,4(sp)
1000c53c:	00e00014 	movui	r3,32768
1000c540:	10bc000c 	andi	r2,r2,61440
1000c544:	10c03726 	beq	r2,r3,1000c624 <__smakebuf_r+0x12c>
1000c548:	80c0030b 	ldhu	r3,12(r16)
1000c54c:	18c20014 	ori	r3,r3,2048
1000c550:	80c0030d 	sth	r3,12(r16)
1000c554:	00c80004 	movi	r3,8192
1000c558:	10c03c1e 	bne	r2,r3,1000c64c <__smakebuf_r+0x154>
1000c55c:	8140038f 	ldh	r5,14(r16)
1000c560:	8809883a 	mov	r4,r17
1000c564:	00103800 	call	10010380 <_isatty_r>
1000c568:	10004e26 	beq	r2,zero,1000c6a4 <__smakebuf_r+0x1ac>
1000c56c:	8080030b 	ldhu	r2,12(r16)
1000c570:	04c00044 	movi	r19,1
1000c574:	80c010c4 	addi	r3,r16,67
1000c578:	14c4b03a 	or	r2,r2,r19
1000c57c:	8080030d 	sth	r2,12(r16)
1000c580:	80c00015 	stw	r3,0(r16)
1000c584:	80c00415 	stw	r3,16(r16)
1000c588:	84c00515 	stw	r19,20(r16)
1000c58c:	04810004 	movi	r18,1024
1000c590:	00000706 	br	1000c5b0 <__smakebuf_r+0xb8>
1000c594:	8080030b 	ldhu	r2,12(r16)
1000c598:	10c0200c 	andi	r3,r2,128
1000c59c:	18001f1e 	bne	r3,zero,1000c61c <__smakebuf_r+0x124>
1000c5a0:	04810004 	movi	r18,1024
1000c5a4:	10820014 	ori	r2,r2,2048
1000c5a8:	8080030d 	sth	r2,12(r16)
1000c5ac:	0027883a 	mov	r19,zero
1000c5b0:	8809883a 	mov	r4,r17
1000c5b4:	900b883a 	mov	r5,r18
1000c5b8:	000c6b00 	call	1000c6b0 <_malloc_r>
1000c5bc:	10002e26 	beq	r2,zero,1000c678 <__smakebuf_r+0x180>
1000c5c0:	80c0030b 	ldhu	r3,12(r16)
1000c5c4:	01040074 	movhi	r4,4097
1000c5c8:	212ebc04 	addi	r4,r4,-17680
1000c5cc:	89000f15 	stw	r4,60(r17)
1000c5d0:	18c02014 	ori	r3,r3,128
1000c5d4:	80c0030d 	sth	r3,12(r16)
1000c5d8:	80800015 	stw	r2,0(r16)
1000c5dc:	80800415 	stw	r2,16(r16)
1000c5e0:	84800515 	stw	r18,20(r16)
1000c5e4:	98001c1e 	bne	r19,zero,1000c658 <__smakebuf_r+0x160>
1000c5e8:	dfc01317 	ldw	ra,76(sp)
1000c5ec:	dcc01217 	ldw	r19,72(sp)
1000c5f0:	dc801117 	ldw	r18,68(sp)
1000c5f4:	dc401017 	ldw	r17,64(sp)
1000c5f8:	dc000f17 	ldw	r16,60(sp)
1000c5fc:	dec01404 	addi	sp,sp,80
1000c600:	f800283a 	ret
1000c604:	288010c4 	addi	r2,r5,67
1000c608:	28800015 	stw	r2,0(r5)
1000c60c:	28800415 	stw	r2,16(r5)
1000c610:	00800044 	movi	r2,1
1000c614:	28800515 	stw	r2,20(r5)
1000c618:	f800283a 	ret
1000c61c:	04801004 	movi	r18,64
1000c620:	003fe006 	br	1000c5a4 <__alt_data_end+0xf800c5a4>
1000c624:	81000a17 	ldw	r4,40(r16)
1000c628:	00c40074 	movhi	r3,4097
1000c62c:	18f8c404 	addi	r3,r3,-7408
1000c630:	20ffc51e 	bne	r4,r3,1000c548 <__alt_data_end+0xf800c548>
1000c634:	80c0030b 	ldhu	r3,12(r16)
1000c638:	01010004 	movi	r4,1024
1000c63c:	81001315 	stw	r4,76(r16)
1000c640:	1906b03a 	or	r3,r3,r4
1000c644:	80c0030d 	sth	r3,12(r16)
1000c648:	003fc206 	br	1000c554 <__alt_data_end+0xf800c554>
1000c64c:	0027883a 	mov	r19,zero
1000c650:	04810004 	movi	r18,1024
1000c654:	003fd606 	br	1000c5b0 <__alt_data_end+0xf800c5b0>
1000c658:	8140038f 	ldh	r5,14(r16)
1000c65c:	8809883a 	mov	r4,r17
1000c660:	00103800 	call	10010380 <_isatty_r>
1000c664:	103fe026 	beq	r2,zero,1000c5e8 <__alt_data_end+0xf800c5e8>
1000c668:	8080030b 	ldhu	r2,12(r16)
1000c66c:	10800054 	ori	r2,r2,1
1000c670:	8080030d 	sth	r2,12(r16)
1000c674:	003fdc06 	br	1000c5e8 <__alt_data_end+0xf800c5e8>
1000c678:	8080030b 	ldhu	r2,12(r16)
1000c67c:	10c0800c 	andi	r3,r2,512
1000c680:	183fd91e 	bne	r3,zero,1000c5e8 <__alt_data_end+0xf800c5e8>
1000c684:	10800094 	ori	r2,r2,2
1000c688:	80c010c4 	addi	r3,r16,67
1000c68c:	8080030d 	sth	r2,12(r16)
1000c690:	00800044 	movi	r2,1
1000c694:	80c00015 	stw	r3,0(r16)
1000c698:	80c00415 	stw	r3,16(r16)
1000c69c:	80800515 	stw	r2,20(r16)
1000c6a0:	003fd106 	br	1000c5e8 <__alt_data_end+0xf800c5e8>
1000c6a4:	04c00044 	movi	r19,1
1000c6a8:	04810004 	movi	r18,1024
1000c6ac:	003fc006 	br	1000c5b0 <__alt_data_end+0xf800c5b0>

1000c6b0 <_malloc_r>:
1000c6b0:	defff504 	addi	sp,sp,-44
1000c6b4:	dc800315 	stw	r18,12(sp)
1000c6b8:	dfc00a15 	stw	ra,40(sp)
1000c6bc:	df000915 	stw	fp,36(sp)
1000c6c0:	ddc00815 	stw	r23,32(sp)
1000c6c4:	dd800715 	stw	r22,28(sp)
1000c6c8:	dd400615 	stw	r21,24(sp)
1000c6cc:	dd000515 	stw	r20,20(sp)
1000c6d0:	dcc00415 	stw	r19,16(sp)
1000c6d4:	dc400215 	stw	r17,8(sp)
1000c6d8:	dc000115 	stw	r16,4(sp)
1000c6dc:	288002c4 	addi	r2,r5,11
1000c6e0:	00c00584 	movi	r3,22
1000c6e4:	2025883a 	mov	r18,r4
1000c6e8:	18802a2e 	bgeu	r3,r2,1000c794 <_malloc_r+0xe4>
1000c6ec:	047ffe04 	movi	r17,-8
1000c6f0:	1462703a 	and	r17,r2,r17
1000c6f4:	88009e16 	blt	r17,zero,1000c970 <_malloc_r+0x2c0>
1000c6f8:	89409d36 	bltu	r17,r5,1000c970 <_malloc_r+0x2c0>
1000c6fc:	00122e40 	call	100122e4 <__malloc_lock>
1000c700:	00807dc4 	movi	r2,503
1000c704:	14402736 	bltu	r2,r17,1000c7a4 <_malloc_r+0xf4>
1000c708:	8806d0fa 	srli	r3,r17,3
1000c70c:	04c400b4 	movhi	r19,4098
1000c710:	9cfce704 	addi	r19,r19,-3172
1000c714:	18c5883a 	add	r2,r3,r3
1000c718:	1085883a 	add	r2,r2,r2
1000c71c:	1085883a 	add	r2,r2,r2
1000c720:	9885883a 	add	r2,r19,r2
1000c724:	14000317 	ldw	r16,12(r2)
1000c728:	80814a26 	beq	r16,r2,1000cc54 <_malloc_r+0x5a4>
1000c72c:	80c00117 	ldw	r3,4(r16)
1000c730:	81000317 	ldw	r4,12(r16)
1000c734:	00bfff04 	movi	r2,-4
1000c738:	1884703a 	and	r2,r3,r2
1000c73c:	81400217 	ldw	r5,8(r16)
1000c740:	8085883a 	add	r2,r16,r2
1000c744:	10c00117 	ldw	r3,4(r2)
1000c748:	29000315 	stw	r4,12(r5)
1000c74c:	21400215 	stw	r5,8(r4)
1000c750:	18c00054 	ori	r3,r3,1
1000c754:	10c00115 	stw	r3,4(r2)
1000c758:	9009883a 	mov	r4,r18
1000c75c:	00123040 	call	10012304 <__malloc_unlock>
1000c760:	80800204 	addi	r2,r16,8
1000c764:	dfc00a17 	ldw	ra,40(sp)
1000c768:	df000917 	ldw	fp,36(sp)
1000c76c:	ddc00817 	ldw	r23,32(sp)
1000c770:	dd800717 	ldw	r22,28(sp)
1000c774:	dd400617 	ldw	r21,24(sp)
1000c778:	dd000517 	ldw	r20,20(sp)
1000c77c:	dcc00417 	ldw	r19,16(sp)
1000c780:	dc800317 	ldw	r18,12(sp)
1000c784:	dc400217 	ldw	r17,8(sp)
1000c788:	dc000117 	ldw	r16,4(sp)
1000c78c:	dec00b04 	addi	sp,sp,44
1000c790:	f800283a 	ret
1000c794:	04400404 	movi	r17,16
1000c798:	89407536 	bltu	r17,r5,1000c970 <_malloc_r+0x2c0>
1000c79c:	00122e40 	call	100122e4 <__malloc_lock>
1000c7a0:	003fd906 	br	1000c708 <__alt_data_end+0xf800c708>
1000c7a4:	8806d27a 	srli	r3,r17,9
1000c7a8:	18007526 	beq	r3,zero,1000c980 <_malloc_r+0x2d0>
1000c7ac:	00800104 	movi	r2,4
1000c7b0:	10c0ef36 	bltu	r2,r3,1000cb70 <_malloc_r+0x4c0>
1000c7b4:	8806d1ba 	srli	r3,r17,6
1000c7b8:	19c00e04 	addi	r7,r3,56
1000c7bc:	39cb883a 	add	r5,r7,r7
1000c7c0:	04c400b4 	movhi	r19,4098
1000c7c4:	294b883a 	add	r5,r5,r5
1000c7c8:	9cfce704 	addi	r19,r19,-3172
1000c7cc:	294b883a 	add	r5,r5,r5
1000c7d0:	994b883a 	add	r5,r19,r5
1000c7d4:	2c000317 	ldw	r16,12(r5)
1000c7d8:	2c000e26 	beq	r5,r16,1000c814 <_malloc_r+0x164>
1000c7dc:	80800117 	ldw	r2,4(r16)
1000c7e0:	01bfff04 	movi	r6,-4
1000c7e4:	010003c4 	movi	r4,15
1000c7e8:	1184703a 	and	r2,r2,r6
1000c7ec:	1447c83a 	sub	r3,r2,r17
1000c7f0:	20c00716 	blt	r4,r3,1000c810 <_malloc_r+0x160>
1000c7f4:	1800650e 	bge	r3,zero,1000c98c <_malloc_r+0x2dc>
1000c7f8:	84000317 	ldw	r16,12(r16)
1000c7fc:	2c000526 	beq	r5,r16,1000c814 <_malloc_r+0x164>
1000c800:	80800117 	ldw	r2,4(r16)
1000c804:	1184703a 	and	r2,r2,r6
1000c808:	1447c83a 	sub	r3,r2,r17
1000c80c:	20fff90e 	bge	r4,r3,1000c7f4 <__alt_data_end+0xf800c7f4>
1000c810:	39ffffc4 	addi	r7,r7,-1
1000c814:	38c00044 	addi	r3,r7,1
1000c818:	018400b4 	movhi	r6,4098
1000c81c:	9c000417 	ldw	r16,16(r19)
1000c820:	31bce704 	addi	r6,r6,-3172
1000c824:	32400204 	addi	r9,r6,8
1000c828:	82410326 	beq	r16,r9,1000cc38 <_malloc_r+0x588>
1000c82c:	81000117 	ldw	r4,4(r16)
1000c830:	00bfff04 	movi	r2,-4
1000c834:	208e703a 	and	r7,r4,r2
1000c838:	3c45c83a 	sub	r2,r7,r17
1000c83c:	010003c4 	movi	r4,15
1000c840:	2080ee16 	blt	r4,r2,1000cbfc <_malloc_r+0x54c>
1000c844:	32400515 	stw	r9,20(r6)
1000c848:	32400415 	stw	r9,16(r6)
1000c84c:	1000510e 	bge	r2,zero,1000c994 <_malloc_r+0x2e4>
1000c850:	00807fc4 	movi	r2,511
1000c854:	11c0ce36 	bltu	r2,r7,1000cb90 <_malloc_r+0x4e0>
1000c858:	3808d0fa 	srli	r4,r7,3
1000c85c:	01c00044 	movi	r7,1
1000c860:	30800117 	ldw	r2,4(r6)
1000c864:	210b883a 	add	r5,r4,r4
1000c868:	294b883a 	add	r5,r5,r5
1000c86c:	2009d0ba 	srai	r4,r4,2
1000c870:	294b883a 	add	r5,r5,r5
1000c874:	298b883a 	add	r5,r5,r6
1000c878:	2a000217 	ldw	r8,8(r5)
1000c87c:	3908983a 	sll	r4,r7,r4
1000c880:	81400315 	stw	r5,12(r16)
1000c884:	82000215 	stw	r8,8(r16)
1000c888:	2088b03a 	or	r4,r4,r2
1000c88c:	2c000215 	stw	r16,8(r5)
1000c890:	31000115 	stw	r4,4(r6)
1000c894:	44000315 	stw	r16,12(r8)
1000c898:	1805d0ba 	srai	r2,r3,2
1000c89c:	01400044 	movi	r5,1
1000c8a0:	288a983a 	sll	r5,r5,r2
1000c8a4:	21404336 	bltu	r4,r5,1000c9b4 <_malloc_r+0x304>
1000c8a8:	2144703a 	and	r2,r4,r5
1000c8ac:	10000a1e 	bne	r2,zero,1000c8d8 <_malloc_r+0x228>
1000c8b0:	00bfff04 	movi	r2,-4
1000c8b4:	294b883a 	add	r5,r5,r5
1000c8b8:	1886703a 	and	r3,r3,r2
1000c8bc:	2144703a 	and	r2,r4,r5
1000c8c0:	18c00104 	addi	r3,r3,4
1000c8c4:	1000041e 	bne	r2,zero,1000c8d8 <_malloc_r+0x228>
1000c8c8:	294b883a 	add	r5,r5,r5
1000c8cc:	2144703a 	and	r2,r4,r5
1000c8d0:	18c00104 	addi	r3,r3,4
1000c8d4:	103ffc26 	beq	r2,zero,1000c8c8 <__alt_data_end+0xf800c8c8>
1000c8d8:	023fff04 	movi	r8,-4
1000c8dc:	01c003c4 	movi	r7,15
1000c8e0:	18c5883a 	add	r2,r3,r3
1000c8e4:	1085883a 	add	r2,r2,r2
1000c8e8:	1085883a 	add	r2,r2,r2
1000c8ec:	9895883a 	add	r10,r19,r2
1000c8f0:	52c00304 	addi	r11,r10,12
1000c8f4:	1819883a 	mov	r12,r3
1000c8f8:	5c000017 	ldw	r16,0(r11)
1000c8fc:	59bffd04 	addi	r6,r11,-12
1000c900:	8180041e 	bne	r16,r6,1000c914 <_malloc_r+0x264>
1000c904:	0000ce06 	br	1000cc40 <_malloc_r+0x590>
1000c908:	2000d70e 	bge	r4,zero,1000cc68 <_malloc_r+0x5b8>
1000c90c:	84000317 	ldw	r16,12(r16)
1000c910:	8180cb26 	beq	r16,r6,1000cc40 <_malloc_r+0x590>
1000c914:	80800117 	ldw	r2,4(r16)
1000c918:	1204703a 	and	r2,r2,r8
1000c91c:	1449c83a 	sub	r4,r2,r17
1000c920:	393ff90e 	bge	r7,r4,1000c908 <__alt_data_end+0xf800c908>
1000c924:	80800317 	ldw	r2,12(r16)
1000c928:	80c00217 	ldw	r3,8(r16)
1000c92c:	89400054 	ori	r5,r17,1
1000c930:	81400115 	stw	r5,4(r16)
1000c934:	18800315 	stw	r2,12(r3)
1000c938:	10c00215 	stw	r3,8(r2)
1000c93c:	8463883a 	add	r17,r16,r17
1000c940:	9c400515 	stw	r17,20(r19)
1000c944:	9c400415 	stw	r17,16(r19)
1000c948:	20800054 	ori	r2,r4,1
1000c94c:	88800115 	stw	r2,4(r17)
1000c950:	8a400315 	stw	r9,12(r17)
1000c954:	8a400215 	stw	r9,8(r17)
1000c958:	8923883a 	add	r17,r17,r4
1000c95c:	89000015 	stw	r4,0(r17)
1000c960:	9009883a 	mov	r4,r18
1000c964:	00123040 	call	10012304 <__malloc_unlock>
1000c968:	80800204 	addi	r2,r16,8
1000c96c:	003f7d06 	br	1000c764 <__alt_data_end+0xf800c764>
1000c970:	00800304 	movi	r2,12
1000c974:	90800015 	stw	r2,0(r18)
1000c978:	0005883a 	mov	r2,zero
1000c97c:	003f7906 	br	1000c764 <__alt_data_end+0xf800c764>
1000c980:	01401f84 	movi	r5,126
1000c984:	01c00fc4 	movi	r7,63
1000c988:	003f8d06 	br	1000c7c0 <__alt_data_end+0xf800c7c0>
1000c98c:	81000317 	ldw	r4,12(r16)
1000c990:	003f6a06 	br	1000c73c <__alt_data_end+0xf800c73c>
1000c994:	81c5883a 	add	r2,r16,r7
1000c998:	10c00117 	ldw	r3,4(r2)
1000c99c:	9009883a 	mov	r4,r18
1000c9a0:	18c00054 	ori	r3,r3,1
1000c9a4:	10c00115 	stw	r3,4(r2)
1000c9a8:	00123040 	call	10012304 <__malloc_unlock>
1000c9ac:	80800204 	addi	r2,r16,8
1000c9b0:	003f6c06 	br	1000c764 <__alt_data_end+0xf800c764>
1000c9b4:	9c000217 	ldw	r16,8(r19)
1000c9b8:	00bfff04 	movi	r2,-4
1000c9bc:	85800117 	ldw	r22,4(r16)
1000c9c0:	b0ac703a 	and	r22,r22,r2
1000c9c4:	b4400336 	bltu	r22,r17,1000c9d4 <_malloc_r+0x324>
1000c9c8:	b445c83a 	sub	r2,r22,r17
1000c9cc:	00c003c4 	movi	r3,15
1000c9d0:	18805d16 	blt	r3,r2,1000cb48 <_malloc_r+0x498>
1000c9d4:	05c400b4 	movhi	r23,4098
1000c9d8:	008400f4 	movhi	r2,4099
1000c9dc:	bdc26f04 	addi	r23,r23,2492
1000c9e0:	10b2bf04 	addi	r2,r2,-13572
1000c9e4:	15400017 	ldw	r21,0(r2)
1000c9e8:	b9000017 	ldw	r4,0(r23)
1000c9ec:	00ffffc4 	movi	r3,-1
1000c9f0:	858d883a 	add	r6,r16,r22
1000c9f4:	8d6b883a 	add	r21,r17,r21
1000c9f8:	20c0e426 	beq	r4,r3,1000cd8c <_malloc_r+0x6dc>
1000c9fc:	ad4403c4 	addi	r21,r21,4111
1000ca00:	00fc0004 	movi	r3,-4096
1000ca04:	a8ea703a 	and	r21,r21,r3
1000ca08:	9009883a 	mov	r4,r18
1000ca0c:	a80b883a 	mov	r5,r21
1000ca10:	d9800015 	stw	r6,0(sp)
1000ca14:	000e1e40 	call	1000e1e4 <_sbrk_r>
1000ca18:	00ffffc4 	movi	r3,-1
1000ca1c:	1029883a 	mov	r20,r2
1000ca20:	d9800017 	ldw	r6,0(sp)
1000ca24:	10c0a426 	beq	r2,r3,1000ccb8 <_malloc_r+0x608>
1000ca28:	1180a236 	bltu	r2,r6,1000ccb4 <_malloc_r+0x604>
1000ca2c:	070400f4 	movhi	fp,4099
1000ca30:	e732c704 	addi	fp,fp,-13540
1000ca34:	e0c00017 	ldw	r3,0(fp)
1000ca38:	a8c7883a 	add	r3,r21,r3
1000ca3c:	e0c00015 	stw	r3,0(fp)
1000ca40:	3500da26 	beq	r6,r20,1000cdac <_malloc_r+0x6fc>
1000ca44:	b9000017 	ldw	r4,0(r23)
1000ca48:	00bfffc4 	movi	r2,-1
1000ca4c:	2080e426 	beq	r4,r2,1000cde0 <_malloc_r+0x730>
1000ca50:	a185c83a 	sub	r2,r20,r6
1000ca54:	1885883a 	add	r2,r3,r2
1000ca58:	e0800015 	stw	r2,0(fp)
1000ca5c:	a0c001cc 	andi	r3,r20,7
1000ca60:	1800b526 	beq	r3,zero,1000cd38 <_malloc_r+0x688>
1000ca64:	a0e9c83a 	sub	r20,r20,r3
1000ca68:	00840204 	movi	r2,4104
1000ca6c:	a5000204 	addi	r20,r20,8
1000ca70:	10c7c83a 	sub	r3,r2,r3
1000ca74:	a545883a 	add	r2,r20,r21
1000ca78:	1083ffcc 	andi	r2,r2,4095
1000ca7c:	18abc83a 	sub	r21,r3,r2
1000ca80:	9009883a 	mov	r4,r18
1000ca84:	a80b883a 	mov	r5,r21
1000ca88:	000e1e40 	call	1000e1e4 <_sbrk_r>
1000ca8c:	00ffffc4 	movi	r3,-1
1000ca90:	10c0d026 	beq	r2,r3,1000cdd4 <_malloc_r+0x724>
1000ca94:	1507c83a 	sub	r3,r2,r20
1000ca98:	a8c7883a 	add	r3,r21,r3
1000ca9c:	18c00054 	ori	r3,r3,1
1000caa0:	e0800017 	ldw	r2,0(fp)
1000caa4:	9d000215 	stw	r20,8(r19)
1000caa8:	a0c00115 	stw	r3,4(r20)
1000caac:	a887883a 	add	r3,r21,r2
1000cab0:	e0c00015 	stw	r3,0(fp)
1000cab4:	84c00e26 	beq	r16,r19,1000caf0 <_malloc_r+0x440>
1000cab8:	018003c4 	movi	r6,15
1000cabc:	3580a02e 	bgeu	r6,r22,1000cd40 <_malloc_r+0x690>
1000cac0:	81400117 	ldw	r5,4(r16)
1000cac4:	013ffe04 	movi	r4,-8
1000cac8:	b0bffd04 	addi	r2,r22,-12
1000cacc:	1104703a 	and	r2,r2,r4
1000cad0:	2900004c 	andi	r4,r5,1
1000cad4:	1108b03a 	or	r4,r2,r4
1000cad8:	81000115 	stw	r4,4(r16)
1000cadc:	01400144 	movi	r5,5
1000cae0:	8089883a 	add	r4,r16,r2
1000cae4:	21400115 	stw	r5,4(r4)
1000cae8:	21400215 	stw	r5,8(r4)
1000caec:	3080c036 	bltu	r6,r2,1000cdf0 <_malloc_r+0x740>
1000caf0:	008400f4 	movhi	r2,4099
1000caf4:	10b2be04 	addi	r2,r2,-13576
1000caf8:	11000017 	ldw	r4,0(r2)
1000cafc:	20c0012e 	bgeu	r4,r3,1000cb04 <_malloc_r+0x454>
1000cb00:	10c00015 	stw	r3,0(r2)
1000cb04:	008400f4 	movhi	r2,4099
1000cb08:	10b2bd04 	addi	r2,r2,-13580
1000cb0c:	11000017 	ldw	r4,0(r2)
1000cb10:	9c000217 	ldw	r16,8(r19)
1000cb14:	20c0012e 	bgeu	r4,r3,1000cb1c <_malloc_r+0x46c>
1000cb18:	10c00015 	stw	r3,0(r2)
1000cb1c:	80c00117 	ldw	r3,4(r16)
1000cb20:	00bfff04 	movi	r2,-4
1000cb24:	1886703a 	and	r3,r3,r2
1000cb28:	1c45c83a 	sub	r2,r3,r17
1000cb2c:	1c400236 	bltu	r3,r17,1000cb38 <_malloc_r+0x488>
1000cb30:	00c003c4 	movi	r3,15
1000cb34:	18800416 	blt	r3,r2,1000cb48 <_malloc_r+0x498>
1000cb38:	9009883a 	mov	r4,r18
1000cb3c:	00123040 	call	10012304 <__malloc_unlock>
1000cb40:	0005883a 	mov	r2,zero
1000cb44:	003f0706 	br	1000c764 <__alt_data_end+0xf800c764>
1000cb48:	88c00054 	ori	r3,r17,1
1000cb4c:	80c00115 	stw	r3,4(r16)
1000cb50:	8463883a 	add	r17,r16,r17
1000cb54:	10800054 	ori	r2,r2,1
1000cb58:	9c400215 	stw	r17,8(r19)
1000cb5c:	88800115 	stw	r2,4(r17)
1000cb60:	9009883a 	mov	r4,r18
1000cb64:	00123040 	call	10012304 <__malloc_unlock>
1000cb68:	80800204 	addi	r2,r16,8
1000cb6c:	003efd06 	br	1000c764 <__alt_data_end+0xf800c764>
1000cb70:	00800504 	movi	r2,20
1000cb74:	10c0482e 	bgeu	r2,r3,1000cc98 <_malloc_r+0x5e8>
1000cb78:	00801504 	movi	r2,84
1000cb7c:	10c06836 	bltu	r2,r3,1000cd20 <_malloc_r+0x670>
1000cb80:	8806d33a 	srli	r3,r17,12
1000cb84:	19c01b84 	addi	r7,r3,110
1000cb88:	39cb883a 	add	r5,r7,r7
1000cb8c:	003f0c06 	br	1000c7c0 <__alt_data_end+0xf800c7c0>
1000cb90:	3804d27a 	srli	r2,r7,9
1000cb94:	01000104 	movi	r4,4
1000cb98:	2080422e 	bgeu	r4,r2,1000cca4 <_malloc_r+0x5f4>
1000cb9c:	01000504 	movi	r4,20
1000cba0:	20807c36 	bltu	r4,r2,1000cd94 <_malloc_r+0x6e4>
1000cba4:	110016c4 	addi	r4,r2,91
1000cba8:	210b883a 	add	r5,r4,r4
1000cbac:	294b883a 	add	r5,r5,r5
1000cbb0:	294b883a 	add	r5,r5,r5
1000cbb4:	994b883a 	add	r5,r19,r5
1000cbb8:	28800217 	ldw	r2,8(r5)
1000cbbc:	020400b4 	movhi	r8,4098
1000cbc0:	423ce704 	addi	r8,r8,-3172
1000cbc4:	11406326 	beq	r2,r5,1000cd54 <_malloc_r+0x6a4>
1000cbc8:	01bfff04 	movi	r6,-4
1000cbcc:	11000117 	ldw	r4,4(r2)
1000cbd0:	2188703a 	and	r4,r4,r6
1000cbd4:	3900022e 	bgeu	r7,r4,1000cbe0 <_malloc_r+0x530>
1000cbd8:	10800217 	ldw	r2,8(r2)
1000cbdc:	28bffb1e 	bne	r5,r2,1000cbcc <__alt_data_end+0xf800cbcc>
1000cbe0:	11800317 	ldw	r6,12(r2)
1000cbe4:	99000117 	ldw	r4,4(r19)
1000cbe8:	81800315 	stw	r6,12(r16)
1000cbec:	80800215 	stw	r2,8(r16)
1000cbf0:	34000215 	stw	r16,8(r6)
1000cbf4:	14000315 	stw	r16,12(r2)
1000cbf8:	003f2706 	br	1000c898 <__alt_data_end+0xf800c898>
1000cbfc:	88c00054 	ori	r3,r17,1
1000cc00:	80c00115 	stw	r3,4(r16)
1000cc04:	8463883a 	add	r17,r16,r17
1000cc08:	34400515 	stw	r17,20(r6)
1000cc0c:	34400415 	stw	r17,16(r6)
1000cc10:	10c00054 	ori	r3,r2,1
1000cc14:	8a400315 	stw	r9,12(r17)
1000cc18:	8a400215 	stw	r9,8(r17)
1000cc1c:	88c00115 	stw	r3,4(r17)
1000cc20:	88a3883a 	add	r17,r17,r2
1000cc24:	88800015 	stw	r2,0(r17)
1000cc28:	9009883a 	mov	r4,r18
1000cc2c:	00123040 	call	10012304 <__malloc_unlock>
1000cc30:	80800204 	addi	r2,r16,8
1000cc34:	003ecb06 	br	1000c764 <__alt_data_end+0xf800c764>
1000cc38:	31000117 	ldw	r4,4(r6)
1000cc3c:	003f1606 	br	1000c898 <__alt_data_end+0xf800c898>
1000cc40:	63000044 	addi	r12,r12,1
1000cc44:	608000cc 	andi	r2,r12,3
1000cc48:	5ac00204 	addi	r11,r11,8
1000cc4c:	103f2a1e 	bne	r2,zero,1000c8f8 <__alt_data_end+0xf800c8f8>
1000cc50:	00002106 	br	1000ccd8 <_malloc_r+0x628>
1000cc54:	80800204 	addi	r2,r16,8
1000cc58:	84000517 	ldw	r16,20(r16)
1000cc5c:	143eb31e 	bne	r2,r16,1000c72c <__alt_data_end+0xf800c72c>
1000cc60:	18c00084 	addi	r3,r3,2
1000cc64:	003eec06 	br	1000c818 <__alt_data_end+0xf800c818>
1000cc68:	8085883a 	add	r2,r16,r2
1000cc6c:	10c00117 	ldw	r3,4(r2)
1000cc70:	81000317 	ldw	r4,12(r16)
1000cc74:	81400217 	ldw	r5,8(r16)
1000cc78:	18c00054 	ori	r3,r3,1
1000cc7c:	10c00115 	stw	r3,4(r2)
1000cc80:	29000315 	stw	r4,12(r5)
1000cc84:	21400215 	stw	r5,8(r4)
1000cc88:	9009883a 	mov	r4,r18
1000cc8c:	00123040 	call	10012304 <__malloc_unlock>
1000cc90:	80800204 	addi	r2,r16,8
1000cc94:	003eb306 	br	1000c764 <__alt_data_end+0xf800c764>
1000cc98:	19c016c4 	addi	r7,r3,91
1000cc9c:	39cb883a 	add	r5,r7,r7
1000cca0:	003ec706 	br	1000c7c0 <__alt_data_end+0xf800c7c0>
1000cca4:	3804d1ba 	srli	r2,r7,6
1000cca8:	11000e04 	addi	r4,r2,56
1000ccac:	210b883a 	add	r5,r4,r4
1000ccb0:	003fbe06 	br	1000cbac <__alt_data_end+0xf800cbac>
1000ccb4:	84ff5d26 	beq	r16,r19,1000ca2c <__alt_data_end+0xf800ca2c>
1000ccb8:	9c000217 	ldw	r16,8(r19)
1000ccbc:	00bfff04 	movi	r2,-4
1000ccc0:	80c00117 	ldw	r3,4(r16)
1000ccc4:	1886703a 	and	r3,r3,r2
1000ccc8:	003f9706 	br	1000cb28 <__alt_data_end+0xf800cb28>
1000cccc:	52800017 	ldw	r10,0(r10)
1000ccd0:	18ffffc4 	addi	r3,r3,-1
1000ccd4:	50805c1e 	bne	r10,r2,1000ce48 <_malloc_r+0x798>
1000ccd8:	190000cc 	andi	r4,r3,3
1000ccdc:	50bffe04 	addi	r2,r10,-8
1000cce0:	203ffa1e 	bne	r4,zero,1000cccc <__alt_data_end+0xf800cccc>
1000cce4:	98800117 	ldw	r2,4(r19)
1000cce8:	0146303a 	nor	r3,zero,r5
1000ccec:	1884703a 	and	r2,r3,r2
1000ccf0:	98800115 	stw	r2,4(r19)
1000ccf4:	294b883a 	add	r5,r5,r5
1000ccf8:	117f2e36 	bltu	r2,r5,1000c9b4 <__alt_data_end+0xf800c9b4>
1000ccfc:	283f2d26 	beq	r5,zero,1000c9b4 <__alt_data_end+0xf800c9b4>
1000cd00:	1146703a 	and	r3,r2,r5
1000cd04:	1800521e 	bne	r3,zero,1000ce50 <_malloc_r+0x7a0>
1000cd08:	6007883a 	mov	r3,r12
1000cd0c:	294b883a 	add	r5,r5,r5
1000cd10:	1148703a 	and	r4,r2,r5
1000cd14:	18c00104 	addi	r3,r3,4
1000cd18:	203ffc26 	beq	r4,zero,1000cd0c <__alt_data_end+0xf800cd0c>
1000cd1c:	003ef006 	br	1000c8e0 <__alt_data_end+0xf800c8e0>
1000cd20:	00805504 	movi	r2,340
1000cd24:	10c01336 	bltu	r2,r3,1000cd74 <_malloc_r+0x6c4>
1000cd28:	8806d3fa 	srli	r3,r17,15
1000cd2c:	19c01dc4 	addi	r7,r3,119
1000cd30:	39cb883a 	add	r5,r7,r7
1000cd34:	003ea206 	br	1000c7c0 <__alt_data_end+0xf800c7c0>
1000cd38:	00c40004 	movi	r3,4096
1000cd3c:	003f4d06 	br	1000ca74 <__alt_data_end+0xf800ca74>
1000cd40:	00800044 	movi	r2,1
1000cd44:	a0800115 	stw	r2,4(r20)
1000cd48:	a021883a 	mov	r16,r20
1000cd4c:	0007883a 	mov	r3,zero
1000cd50:	003f7506 	br	1000cb28 <__alt_data_end+0xf800cb28>
1000cd54:	200bd0ba 	srai	r5,r4,2
1000cd58:	01800044 	movi	r6,1
1000cd5c:	41000117 	ldw	r4,4(r8)
1000cd60:	314a983a 	sll	r5,r6,r5
1000cd64:	100d883a 	mov	r6,r2
1000cd68:	2908b03a 	or	r4,r5,r4
1000cd6c:	41000115 	stw	r4,4(r8)
1000cd70:	003f9d06 	br	1000cbe8 <__alt_data_end+0xf800cbe8>
1000cd74:	00815504 	movi	r2,1364
1000cd78:	10c01336 	bltu	r2,r3,1000cdc8 <_malloc_r+0x718>
1000cd7c:	8806d4ba 	srli	r3,r17,18
1000cd80:	19c01f04 	addi	r7,r3,124
1000cd84:	39cb883a 	add	r5,r7,r7
1000cd88:	003e8d06 	br	1000c7c0 <__alt_data_end+0xf800c7c0>
1000cd8c:	ad400404 	addi	r21,r21,16
1000cd90:	003f1d06 	br	1000ca08 <__alt_data_end+0xf800ca08>
1000cd94:	01001504 	movi	r4,84
1000cd98:	20801c36 	bltu	r4,r2,1000ce0c <_malloc_r+0x75c>
1000cd9c:	3804d33a 	srli	r2,r7,12
1000cda0:	11001b84 	addi	r4,r2,110
1000cda4:	210b883a 	add	r5,r4,r4
1000cda8:	003f8006 	br	1000cbac <__alt_data_end+0xf800cbac>
1000cdac:	3083ffcc 	andi	r2,r6,4095
1000cdb0:	103f241e 	bne	r2,zero,1000ca44 <__alt_data_end+0xf800ca44>
1000cdb4:	99000217 	ldw	r4,8(r19)
1000cdb8:	ad85883a 	add	r2,r21,r22
1000cdbc:	10800054 	ori	r2,r2,1
1000cdc0:	20800115 	stw	r2,4(r4)
1000cdc4:	003f4a06 	br	1000caf0 <__alt_data_end+0xf800caf0>
1000cdc8:	01403f04 	movi	r5,252
1000cdcc:	01c01f84 	movi	r7,126
1000cdd0:	003e7b06 	br	1000c7c0 <__alt_data_end+0xf800c7c0>
1000cdd4:	00c00044 	movi	r3,1
1000cdd8:	002b883a 	mov	r21,zero
1000cddc:	003f3006 	br	1000caa0 <__alt_data_end+0xf800caa0>
1000cde0:	008400b4 	movhi	r2,4098
1000cde4:	10826f04 	addi	r2,r2,2492
1000cde8:	15000015 	stw	r20,0(r2)
1000cdec:	003f1b06 	br	1000ca5c <__alt_data_end+0xf800ca5c>
1000cdf0:	9009883a 	mov	r4,r18
1000cdf4:	81400204 	addi	r5,r16,8
1000cdf8:	000bfb80 	call	1000bfb8 <_free_r>
1000cdfc:	008400f4 	movhi	r2,4099
1000ce00:	10b2c704 	addi	r2,r2,-13540
1000ce04:	10c00017 	ldw	r3,0(r2)
1000ce08:	003f3906 	br	1000caf0 <__alt_data_end+0xf800caf0>
1000ce0c:	01005504 	movi	r4,340
1000ce10:	20800436 	bltu	r4,r2,1000ce24 <_malloc_r+0x774>
1000ce14:	3804d3fa 	srli	r2,r7,15
1000ce18:	11001dc4 	addi	r4,r2,119
1000ce1c:	210b883a 	add	r5,r4,r4
1000ce20:	003f6206 	br	1000cbac <__alt_data_end+0xf800cbac>
1000ce24:	01015504 	movi	r4,1364
1000ce28:	20800436 	bltu	r4,r2,1000ce3c <_malloc_r+0x78c>
1000ce2c:	3804d4ba 	srli	r2,r7,18
1000ce30:	11001f04 	addi	r4,r2,124
1000ce34:	210b883a 	add	r5,r4,r4
1000ce38:	003f5c06 	br	1000cbac <__alt_data_end+0xf800cbac>
1000ce3c:	01403f04 	movi	r5,252
1000ce40:	01001f84 	movi	r4,126
1000ce44:	003f5906 	br	1000cbac <__alt_data_end+0xf800cbac>
1000ce48:	98800117 	ldw	r2,4(r19)
1000ce4c:	003fa906 	br	1000ccf4 <__alt_data_end+0xf800ccf4>
1000ce50:	6007883a 	mov	r3,r12
1000ce54:	003ea206 	br	1000c8e0 <__alt_data_end+0xf800c8e0>

1000ce58 <memchr>:
1000ce58:	208000cc 	andi	r2,r4,3
1000ce5c:	280f883a 	mov	r7,r5
1000ce60:	10003526 	beq	r2,zero,1000cf38 <memchr+0xe0>
1000ce64:	30bfffc4 	addi	r2,r6,-1
1000ce68:	30001b26 	beq	r6,zero,1000ced8 <memchr+0x80>
1000ce6c:	21800003 	ldbu	r6,0(r4)
1000ce70:	28c03fcc 	andi	r3,r5,255
1000ce74:	30c01a26 	beq	r6,r3,1000cee0 <memchr+0x88>
1000ce78:	180d883a 	mov	r6,r3
1000ce7c:	00000406 	br	1000ce90 <memchr+0x38>
1000ce80:	10001526 	beq	r2,zero,1000ced8 <memchr+0x80>
1000ce84:	20c00003 	ldbu	r3,0(r4)
1000ce88:	10bfffc4 	addi	r2,r2,-1
1000ce8c:	19801426 	beq	r3,r6,1000cee0 <memchr+0x88>
1000ce90:	21000044 	addi	r4,r4,1
1000ce94:	20c000cc 	andi	r3,r4,3
1000ce98:	183ff91e 	bne	r3,zero,1000ce80 <__alt_data_end+0xf800ce80>
1000ce9c:	024000c4 	movi	r9,3
1000cea0:	48801136 	bltu	r9,r2,1000cee8 <memchr+0x90>
1000cea4:	10000c26 	beq	r2,zero,1000ced8 <memchr+0x80>
1000cea8:	20c00003 	ldbu	r3,0(r4)
1000ceac:	29403fcc 	andi	r5,r5,255
1000ceb0:	19400b26 	beq	r3,r5,1000cee0 <memchr+0x88>
1000ceb4:	20c00044 	addi	r3,r4,1
1000ceb8:	2085883a 	add	r2,r4,r2
1000cebc:	39803fcc 	andi	r6,r7,255
1000cec0:	00000306 	br	1000ced0 <memchr+0x78>
1000cec4:	18c00044 	addi	r3,r3,1
1000cec8:	197fffc3 	ldbu	r5,-1(r3)
1000cecc:	29800426 	beq	r5,r6,1000cee0 <memchr+0x88>
1000ced0:	1809883a 	mov	r4,r3
1000ced4:	18bffb1e 	bne	r3,r2,1000cec4 <__alt_data_end+0xf800cec4>
1000ced8:	0005883a 	mov	r2,zero
1000cedc:	f800283a 	ret
1000cee0:	2005883a 	mov	r2,r4
1000cee4:	f800283a 	ret
1000cee8:	28c03fcc 	andi	r3,r5,255
1000ceec:	1810923a 	slli	r8,r3,8
1000cef0:	02ffbff4 	movhi	r11,65279
1000cef4:	02a02074 	movhi	r10,32897
1000cef8:	40c6b03a 	or	r3,r8,r3
1000cefc:	1810943a 	slli	r8,r3,16
1000cf00:	5affbfc4 	addi	r11,r11,-257
1000cf04:	52a02004 	addi	r10,r10,-32640
1000cf08:	40d0b03a 	or	r8,r8,r3
1000cf0c:	20c00017 	ldw	r3,0(r4)
1000cf10:	40c6f03a 	xor	r3,r8,r3
1000cf14:	1acd883a 	add	r6,r3,r11
1000cf18:	00c6303a 	nor	r3,zero,r3
1000cf1c:	30c6703a 	and	r3,r6,r3
1000cf20:	1a86703a 	and	r3,r3,r10
1000cf24:	183fdf1e 	bne	r3,zero,1000cea4 <__alt_data_end+0xf800cea4>
1000cf28:	10bfff04 	addi	r2,r2,-4
1000cf2c:	21000104 	addi	r4,r4,4
1000cf30:	48bff636 	bltu	r9,r2,1000cf0c <__alt_data_end+0xf800cf0c>
1000cf34:	003fdb06 	br	1000cea4 <__alt_data_end+0xf800cea4>
1000cf38:	3005883a 	mov	r2,r6
1000cf3c:	003fd706 	br	1000ce9c <__alt_data_end+0xf800ce9c>

1000cf40 <memcpy>:
1000cf40:	deffff04 	addi	sp,sp,-4
1000cf44:	dc000015 	stw	r16,0(sp)
1000cf48:	00c003c4 	movi	r3,15
1000cf4c:	2005883a 	mov	r2,r4
1000cf50:	1980432e 	bgeu	r3,r6,1000d060 <memcpy+0x120>
1000cf54:	2146b03a 	or	r3,r4,r5
1000cf58:	18c000cc 	andi	r3,r3,3
1000cf5c:	1800421e 	bne	r3,zero,1000d068 <memcpy+0x128>
1000cf60:	343ffc04 	addi	r16,r6,-16
1000cf64:	8020d13a 	srli	r16,r16,4
1000cf68:	28c00104 	addi	r3,r5,4
1000cf6c:	23400104 	addi	r13,r4,4
1000cf70:	801e913a 	slli	r15,r16,4
1000cf74:	2b000204 	addi	r12,r5,8
1000cf78:	22c00204 	addi	r11,r4,8
1000cf7c:	7bc00504 	addi	r15,r15,20
1000cf80:	2a800304 	addi	r10,r5,12
1000cf84:	22400304 	addi	r9,r4,12
1000cf88:	2bdf883a 	add	r15,r5,r15
1000cf8c:	2811883a 	mov	r8,r5
1000cf90:	200f883a 	mov	r7,r4
1000cf94:	41000017 	ldw	r4,0(r8)
1000cf98:	39c00404 	addi	r7,r7,16
1000cf9c:	18c00404 	addi	r3,r3,16
1000cfa0:	393ffc15 	stw	r4,-16(r7)
1000cfa4:	1bbffc17 	ldw	r14,-16(r3)
1000cfa8:	6b400404 	addi	r13,r13,16
1000cfac:	5ac00404 	addi	r11,r11,16
1000cfb0:	6bbffc15 	stw	r14,-16(r13)
1000cfb4:	63800017 	ldw	r14,0(r12)
1000cfb8:	4a400404 	addi	r9,r9,16
1000cfbc:	42000404 	addi	r8,r8,16
1000cfc0:	5bbffc15 	stw	r14,-16(r11)
1000cfc4:	53800017 	ldw	r14,0(r10)
1000cfc8:	63000404 	addi	r12,r12,16
1000cfcc:	52800404 	addi	r10,r10,16
1000cfd0:	4bbffc15 	stw	r14,-16(r9)
1000cfd4:	1bffef1e 	bne	r3,r15,1000cf94 <__alt_data_end+0xf800cf94>
1000cfd8:	81c00044 	addi	r7,r16,1
1000cfdc:	380e913a 	slli	r7,r7,4
1000cfe0:	310003cc 	andi	r4,r6,15
1000cfe4:	02c000c4 	movi	r11,3
1000cfe8:	11c7883a 	add	r3,r2,r7
1000cfec:	29cb883a 	add	r5,r5,r7
1000cff0:	59001f2e 	bgeu	r11,r4,1000d070 <memcpy+0x130>
1000cff4:	1813883a 	mov	r9,r3
1000cff8:	2811883a 	mov	r8,r5
1000cffc:	200f883a 	mov	r7,r4
1000d000:	42800017 	ldw	r10,0(r8)
1000d004:	4a400104 	addi	r9,r9,4
1000d008:	39ffff04 	addi	r7,r7,-4
1000d00c:	4abfff15 	stw	r10,-4(r9)
1000d010:	42000104 	addi	r8,r8,4
1000d014:	59fffa36 	bltu	r11,r7,1000d000 <__alt_data_end+0xf800d000>
1000d018:	213fff04 	addi	r4,r4,-4
1000d01c:	2008d0ba 	srli	r4,r4,2
1000d020:	318000cc 	andi	r6,r6,3
1000d024:	21000044 	addi	r4,r4,1
1000d028:	2109883a 	add	r4,r4,r4
1000d02c:	2109883a 	add	r4,r4,r4
1000d030:	1907883a 	add	r3,r3,r4
1000d034:	290b883a 	add	r5,r5,r4
1000d038:	30000626 	beq	r6,zero,1000d054 <memcpy+0x114>
1000d03c:	198d883a 	add	r6,r3,r6
1000d040:	29c00003 	ldbu	r7,0(r5)
1000d044:	18c00044 	addi	r3,r3,1
1000d048:	29400044 	addi	r5,r5,1
1000d04c:	19ffffc5 	stb	r7,-1(r3)
1000d050:	19bffb1e 	bne	r3,r6,1000d040 <__alt_data_end+0xf800d040>
1000d054:	dc000017 	ldw	r16,0(sp)
1000d058:	dec00104 	addi	sp,sp,4
1000d05c:	f800283a 	ret
1000d060:	2007883a 	mov	r3,r4
1000d064:	003ff406 	br	1000d038 <__alt_data_end+0xf800d038>
1000d068:	2007883a 	mov	r3,r4
1000d06c:	003ff306 	br	1000d03c <__alt_data_end+0xf800d03c>
1000d070:	200d883a 	mov	r6,r4
1000d074:	003ff006 	br	1000d038 <__alt_data_end+0xf800d038>

1000d078 <memset>:
1000d078:	20c000cc 	andi	r3,r4,3
1000d07c:	2005883a 	mov	r2,r4
1000d080:	18004326 	beq	r3,zero,1000d190 <memset+0x118>
1000d084:	31ffffc4 	addi	r7,r6,-1
1000d088:	30004026 	beq	r6,zero,1000d18c <memset+0x114>
1000d08c:	2813883a 	mov	r9,r5
1000d090:	200d883a 	mov	r6,r4
1000d094:	2007883a 	mov	r3,r4
1000d098:	00000406 	br	1000d0ac <memset+0x34>
1000d09c:	3a3fffc4 	addi	r8,r7,-1
1000d0a0:	31800044 	addi	r6,r6,1
1000d0a4:	38003926 	beq	r7,zero,1000d18c <memset+0x114>
1000d0a8:	400f883a 	mov	r7,r8
1000d0ac:	18c00044 	addi	r3,r3,1
1000d0b0:	32400005 	stb	r9,0(r6)
1000d0b4:	1a0000cc 	andi	r8,r3,3
1000d0b8:	403ff81e 	bne	r8,zero,1000d09c <__alt_data_end+0xf800d09c>
1000d0bc:	010000c4 	movi	r4,3
1000d0c0:	21c02d2e 	bgeu	r4,r7,1000d178 <memset+0x100>
1000d0c4:	29803fcc 	andi	r6,r5,255
1000d0c8:	3008923a 	slli	r4,r6,8
1000d0cc:	218cb03a 	or	r6,r4,r6
1000d0d0:	3008943a 	slli	r4,r6,16
1000d0d4:	218cb03a 	or	r6,r4,r6
1000d0d8:	010003c4 	movi	r4,15
1000d0dc:	21c0182e 	bgeu	r4,r7,1000d140 <memset+0xc8>
1000d0e0:	3b3ffc04 	addi	r12,r7,-16
1000d0e4:	6018d13a 	srli	r12,r12,4
1000d0e8:	1a000104 	addi	r8,r3,4
1000d0ec:	1ac00204 	addi	r11,r3,8
1000d0f0:	6008913a 	slli	r4,r12,4
1000d0f4:	1a800304 	addi	r10,r3,12
1000d0f8:	1813883a 	mov	r9,r3
1000d0fc:	21000504 	addi	r4,r4,20
1000d100:	1909883a 	add	r4,r3,r4
1000d104:	49800015 	stw	r6,0(r9)
1000d108:	41800015 	stw	r6,0(r8)
1000d10c:	59800015 	stw	r6,0(r11)
1000d110:	51800015 	stw	r6,0(r10)
1000d114:	42000404 	addi	r8,r8,16
1000d118:	4a400404 	addi	r9,r9,16
1000d11c:	5ac00404 	addi	r11,r11,16
1000d120:	52800404 	addi	r10,r10,16
1000d124:	413ff71e 	bne	r8,r4,1000d104 <__alt_data_end+0xf800d104>
1000d128:	63000044 	addi	r12,r12,1
1000d12c:	6018913a 	slli	r12,r12,4
1000d130:	39c003cc 	andi	r7,r7,15
1000d134:	010000c4 	movi	r4,3
1000d138:	1b07883a 	add	r3,r3,r12
1000d13c:	21c00e2e 	bgeu	r4,r7,1000d178 <memset+0x100>
1000d140:	1813883a 	mov	r9,r3
1000d144:	3811883a 	mov	r8,r7
1000d148:	010000c4 	movi	r4,3
1000d14c:	49800015 	stw	r6,0(r9)
1000d150:	423fff04 	addi	r8,r8,-4
1000d154:	4a400104 	addi	r9,r9,4
1000d158:	223ffc36 	bltu	r4,r8,1000d14c <__alt_data_end+0xf800d14c>
1000d15c:	393fff04 	addi	r4,r7,-4
1000d160:	2008d0ba 	srli	r4,r4,2
1000d164:	39c000cc 	andi	r7,r7,3
1000d168:	21000044 	addi	r4,r4,1
1000d16c:	2109883a 	add	r4,r4,r4
1000d170:	2109883a 	add	r4,r4,r4
1000d174:	1907883a 	add	r3,r3,r4
1000d178:	38000426 	beq	r7,zero,1000d18c <memset+0x114>
1000d17c:	19cf883a 	add	r7,r3,r7
1000d180:	19400005 	stb	r5,0(r3)
1000d184:	18c00044 	addi	r3,r3,1
1000d188:	19fffd1e 	bne	r3,r7,1000d180 <__alt_data_end+0xf800d180>
1000d18c:	f800283a 	ret
1000d190:	2007883a 	mov	r3,r4
1000d194:	300f883a 	mov	r7,r6
1000d198:	003fc806 	br	1000d0bc <__alt_data_end+0xf800d0bc>

1000d19c <_Balloc>:
1000d19c:	20801317 	ldw	r2,76(r4)
1000d1a0:	defffc04 	addi	sp,sp,-16
1000d1a4:	dc400115 	stw	r17,4(sp)
1000d1a8:	dc000015 	stw	r16,0(sp)
1000d1ac:	dfc00315 	stw	ra,12(sp)
1000d1b0:	dc800215 	stw	r18,8(sp)
1000d1b4:	2023883a 	mov	r17,r4
1000d1b8:	2821883a 	mov	r16,r5
1000d1bc:	10000f26 	beq	r2,zero,1000d1fc <_Balloc+0x60>
1000d1c0:	8407883a 	add	r3,r16,r16
1000d1c4:	18c7883a 	add	r3,r3,r3
1000d1c8:	10c7883a 	add	r3,r2,r3
1000d1cc:	18800017 	ldw	r2,0(r3)
1000d1d0:	10001126 	beq	r2,zero,1000d218 <_Balloc+0x7c>
1000d1d4:	11000017 	ldw	r4,0(r2)
1000d1d8:	19000015 	stw	r4,0(r3)
1000d1dc:	10000415 	stw	zero,16(r2)
1000d1e0:	10000315 	stw	zero,12(r2)
1000d1e4:	dfc00317 	ldw	ra,12(sp)
1000d1e8:	dc800217 	ldw	r18,8(sp)
1000d1ec:	dc400117 	ldw	r17,4(sp)
1000d1f0:	dc000017 	ldw	r16,0(sp)
1000d1f4:	dec00404 	addi	sp,sp,16
1000d1f8:	f800283a 	ret
1000d1fc:	01400104 	movi	r5,4
1000d200:	01800844 	movi	r6,33
1000d204:	000fabc0 	call	1000fabc <_calloc_r>
1000d208:	88801315 	stw	r2,76(r17)
1000d20c:	103fec1e 	bne	r2,zero,1000d1c0 <__alt_data_end+0xf800d1c0>
1000d210:	0005883a 	mov	r2,zero
1000d214:	003ff306 	br	1000d1e4 <__alt_data_end+0xf800d1e4>
1000d218:	01400044 	movi	r5,1
1000d21c:	2c24983a 	sll	r18,r5,r16
1000d220:	8809883a 	mov	r4,r17
1000d224:	91800144 	addi	r6,r18,5
1000d228:	318d883a 	add	r6,r6,r6
1000d22c:	318d883a 	add	r6,r6,r6
1000d230:	000fabc0 	call	1000fabc <_calloc_r>
1000d234:	103ff626 	beq	r2,zero,1000d210 <__alt_data_end+0xf800d210>
1000d238:	14000115 	stw	r16,4(r2)
1000d23c:	14800215 	stw	r18,8(r2)
1000d240:	003fe606 	br	1000d1dc <__alt_data_end+0xf800d1dc>

1000d244 <_Bfree>:
1000d244:	28000826 	beq	r5,zero,1000d268 <_Bfree+0x24>
1000d248:	28c00117 	ldw	r3,4(r5)
1000d24c:	20801317 	ldw	r2,76(r4)
1000d250:	18c7883a 	add	r3,r3,r3
1000d254:	18c7883a 	add	r3,r3,r3
1000d258:	10c5883a 	add	r2,r2,r3
1000d25c:	10c00017 	ldw	r3,0(r2)
1000d260:	28c00015 	stw	r3,0(r5)
1000d264:	11400015 	stw	r5,0(r2)
1000d268:	f800283a 	ret

1000d26c <__multadd>:
1000d26c:	defff704 	addi	sp,sp,-36
1000d270:	dc800215 	stw	r18,8(sp)
1000d274:	2c800417 	ldw	r18,16(r5)
1000d278:	ddc00715 	stw	r23,28(sp)
1000d27c:	dd800615 	stw	r22,24(sp)
1000d280:	dd000415 	stw	r20,16(sp)
1000d284:	dcc00315 	stw	r19,12(sp)
1000d288:	dc400115 	stw	r17,4(sp)
1000d28c:	dc000015 	stw	r16,0(sp)
1000d290:	dfc00815 	stw	ra,32(sp)
1000d294:	dd400515 	stw	r21,20(sp)
1000d298:	2827883a 	mov	r19,r5
1000d29c:	2029883a 	mov	r20,r4
1000d2a0:	3023883a 	mov	r17,r6
1000d2a4:	3821883a 	mov	r16,r7
1000d2a8:	2d800504 	addi	r22,r5,20
1000d2ac:	002f883a 	mov	r23,zero
1000d2b0:	b5400017 	ldw	r21,0(r22)
1000d2b4:	880b883a 	mov	r5,r17
1000d2b8:	bdc00044 	addi	r23,r23,1
1000d2bc:	a93fffcc 	andi	r4,r21,65535
1000d2c0:	0007bcc0 	call	10007bcc <__mulsi3>
1000d2c4:	1421883a 	add	r16,r2,r16
1000d2c8:	a808d43a 	srli	r4,r21,16
1000d2cc:	802ad43a 	srli	r21,r16,16
1000d2d0:	880b883a 	mov	r5,r17
1000d2d4:	0007bcc0 	call	10007bcc <__mulsi3>
1000d2d8:	a88f883a 	add	r7,r21,r2
1000d2dc:	3804943a 	slli	r2,r7,16
1000d2e0:	80ffffcc 	andi	r3,r16,65535
1000d2e4:	b5800104 	addi	r22,r22,4
1000d2e8:	10c7883a 	add	r3,r2,r3
1000d2ec:	b0ffff15 	stw	r3,-4(r22)
1000d2f0:	3820d43a 	srli	r16,r7,16
1000d2f4:	bcbfee16 	blt	r23,r18,1000d2b0 <__alt_data_end+0xf800d2b0>
1000d2f8:	80000926 	beq	r16,zero,1000d320 <__multadd+0xb4>
1000d2fc:	98800217 	ldw	r2,8(r19)
1000d300:	9080130e 	bge	r18,r2,1000d350 <__multadd+0xe4>
1000d304:	90800144 	addi	r2,r18,5
1000d308:	1085883a 	add	r2,r2,r2
1000d30c:	1085883a 	add	r2,r2,r2
1000d310:	9885883a 	add	r2,r19,r2
1000d314:	14000015 	stw	r16,0(r2)
1000d318:	94800044 	addi	r18,r18,1
1000d31c:	9c800415 	stw	r18,16(r19)
1000d320:	9805883a 	mov	r2,r19
1000d324:	dfc00817 	ldw	ra,32(sp)
1000d328:	ddc00717 	ldw	r23,28(sp)
1000d32c:	dd800617 	ldw	r22,24(sp)
1000d330:	dd400517 	ldw	r21,20(sp)
1000d334:	dd000417 	ldw	r20,16(sp)
1000d338:	dcc00317 	ldw	r19,12(sp)
1000d33c:	dc800217 	ldw	r18,8(sp)
1000d340:	dc400117 	ldw	r17,4(sp)
1000d344:	dc000017 	ldw	r16,0(sp)
1000d348:	dec00904 	addi	sp,sp,36
1000d34c:	f800283a 	ret
1000d350:	99400117 	ldw	r5,4(r19)
1000d354:	a009883a 	mov	r4,r20
1000d358:	29400044 	addi	r5,r5,1
1000d35c:	000d19c0 	call	1000d19c <_Balloc>
1000d360:	99800417 	ldw	r6,16(r19)
1000d364:	99400304 	addi	r5,r19,12
1000d368:	11000304 	addi	r4,r2,12
1000d36c:	31800084 	addi	r6,r6,2
1000d370:	318d883a 	add	r6,r6,r6
1000d374:	318d883a 	add	r6,r6,r6
1000d378:	1023883a 	mov	r17,r2
1000d37c:	000cf400 	call	1000cf40 <memcpy>
1000d380:	99000117 	ldw	r4,4(r19)
1000d384:	a0c01317 	ldw	r3,76(r20)
1000d388:	2109883a 	add	r4,r4,r4
1000d38c:	2109883a 	add	r4,r4,r4
1000d390:	1907883a 	add	r3,r3,r4
1000d394:	18800017 	ldw	r2,0(r3)
1000d398:	98800015 	stw	r2,0(r19)
1000d39c:	1cc00015 	stw	r19,0(r3)
1000d3a0:	8827883a 	mov	r19,r17
1000d3a4:	003fd706 	br	1000d304 <__alt_data_end+0xf800d304>

1000d3a8 <__s2b>:
1000d3a8:	defff904 	addi	sp,sp,-28
1000d3ac:	dc400115 	stw	r17,4(sp)
1000d3b0:	dc000015 	stw	r16,0(sp)
1000d3b4:	2023883a 	mov	r17,r4
1000d3b8:	2821883a 	mov	r16,r5
1000d3bc:	39000204 	addi	r4,r7,8
1000d3c0:	01400244 	movi	r5,9
1000d3c4:	dcc00315 	stw	r19,12(sp)
1000d3c8:	dc800215 	stw	r18,8(sp)
1000d3cc:	dfc00615 	stw	ra,24(sp)
1000d3d0:	dd400515 	stw	r21,20(sp)
1000d3d4:	dd000415 	stw	r20,16(sp)
1000d3d8:	3825883a 	mov	r18,r7
1000d3dc:	3027883a 	mov	r19,r6
1000d3e0:	00053b40 	call	100053b4 <__divsi3>
1000d3e4:	00c00044 	movi	r3,1
1000d3e8:	000b883a 	mov	r5,zero
1000d3ec:	1880030e 	bge	r3,r2,1000d3fc <__s2b+0x54>
1000d3f0:	18c7883a 	add	r3,r3,r3
1000d3f4:	29400044 	addi	r5,r5,1
1000d3f8:	18bffd16 	blt	r3,r2,1000d3f0 <__alt_data_end+0xf800d3f0>
1000d3fc:	8809883a 	mov	r4,r17
1000d400:	000d19c0 	call	1000d19c <_Balloc>
1000d404:	d8c00717 	ldw	r3,28(sp)
1000d408:	10c00515 	stw	r3,20(r2)
1000d40c:	00c00044 	movi	r3,1
1000d410:	10c00415 	stw	r3,16(r2)
1000d414:	00c00244 	movi	r3,9
1000d418:	1cc0210e 	bge	r3,r19,1000d4a0 <__s2b+0xf8>
1000d41c:	80eb883a 	add	r21,r16,r3
1000d420:	a829883a 	mov	r20,r21
1000d424:	84e1883a 	add	r16,r16,r19
1000d428:	a1c00007 	ldb	r7,0(r20)
1000d42c:	8809883a 	mov	r4,r17
1000d430:	a5000044 	addi	r20,r20,1
1000d434:	100b883a 	mov	r5,r2
1000d438:	01800284 	movi	r6,10
1000d43c:	39fff404 	addi	r7,r7,-48
1000d440:	000d26c0 	call	1000d26c <__multadd>
1000d444:	a43ff81e 	bne	r20,r16,1000d428 <__alt_data_end+0xf800d428>
1000d448:	ace1883a 	add	r16,r21,r19
1000d44c:	843ffe04 	addi	r16,r16,-8
1000d450:	9c800a0e 	bge	r19,r18,1000d47c <__s2b+0xd4>
1000d454:	94e5c83a 	sub	r18,r18,r19
1000d458:	84a5883a 	add	r18,r16,r18
1000d45c:	81c00007 	ldb	r7,0(r16)
1000d460:	8809883a 	mov	r4,r17
1000d464:	84000044 	addi	r16,r16,1
1000d468:	100b883a 	mov	r5,r2
1000d46c:	01800284 	movi	r6,10
1000d470:	39fff404 	addi	r7,r7,-48
1000d474:	000d26c0 	call	1000d26c <__multadd>
1000d478:	84bff81e 	bne	r16,r18,1000d45c <__alt_data_end+0xf800d45c>
1000d47c:	dfc00617 	ldw	ra,24(sp)
1000d480:	dd400517 	ldw	r21,20(sp)
1000d484:	dd000417 	ldw	r20,16(sp)
1000d488:	dcc00317 	ldw	r19,12(sp)
1000d48c:	dc800217 	ldw	r18,8(sp)
1000d490:	dc400117 	ldw	r17,4(sp)
1000d494:	dc000017 	ldw	r16,0(sp)
1000d498:	dec00704 	addi	sp,sp,28
1000d49c:	f800283a 	ret
1000d4a0:	84000284 	addi	r16,r16,10
1000d4a4:	1827883a 	mov	r19,r3
1000d4a8:	003fe906 	br	1000d450 <__alt_data_end+0xf800d450>

1000d4ac <__hi0bits>:
1000d4ac:	20bfffec 	andhi	r2,r4,65535
1000d4b0:	1000141e 	bne	r2,zero,1000d504 <__hi0bits+0x58>
1000d4b4:	2008943a 	slli	r4,r4,16
1000d4b8:	00800404 	movi	r2,16
1000d4bc:	20ffc02c 	andhi	r3,r4,65280
1000d4c0:	1800021e 	bne	r3,zero,1000d4cc <__hi0bits+0x20>
1000d4c4:	2008923a 	slli	r4,r4,8
1000d4c8:	10800204 	addi	r2,r2,8
1000d4cc:	20fc002c 	andhi	r3,r4,61440
1000d4d0:	1800021e 	bne	r3,zero,1000d4dc <__hi0bits+0x30>
1000d4d4:	2008913a 	slli	r4,r4,4
1000d4d8:	10800104 	addi	r2,r2,4
1000d4dc:	20f0002c 	andhi	r3,r4,49152
1000d4e0:	1800031e 	bne	r3,zero,1000d4f0 <__hi0bits+0x44>
1000d4e4:	2109883a 	add	r4,r4,r4
1000d4e8:	10800084 	addi	r2,r2,2
1000d4ec:	2109883a 	add	r4,r4,r4
1000d4f0:	20000316 	blt	r4,zero,1000d500 <__hi0bits+0x54>
1000d4f4:	2110002c 	andhi	r4,r4,16384
1000d4f8:	2000041e 	bne	r4,zero,1000d50c <__hi0bits+0x60>
1000d4fc:	00800804 	movi	r2,32
1000d500:	f800283a 	ret
1000d504:	0005883a 	mov	r2,zero
1000d508:	003fec06 	br	1000d4bc <__alt_data_end+0xf800d4bc>
1000d50c:	10800044 	addi	r2,r2,1
1000d510:	f800283a 	ret

1000d514 <__lo0bits>:
1000d514:	20c00017 	ldw	r3,0(r4)
1000d518:	188001cc 	andi	r2,r3,7
1000d51c:	10000826 	beq	r2,zero,1000d540 <__lo0bits+0x2c>
1000d520:	1880004c 	andi	r2,r3,1
1000d524:	1000211e 	bne	r2,zero,1000d5ac <__lo0bits+0x98>
1000d528:	1880008c 	andi	r2,r3,2
1000d52c:	1000211e 	bne	r2,zero,1000d5b4 <__lo0bits+0xa0>
1000d530:	1806d0ba 	srli	r3,r3,2
1000d534:	00800084 	movi	r2,2
1000d538:	20c00015 	stw	r3,0(r4)
1000d53c:	f800283a 	ret
1000d540:	18bfffcc 	andi	r2,r3,65535
1000d544:	10001326 	beq	r2,zero,1000d594 <__lo0bits+0x80>
1000d548:	0005883a 	mov	r2,zero
1000d54c:	19403fcc 	andi	r5,r3,255
1000d550:	2800021e 	bne	r5,zero,1000d55c <__lo0bits+0x48>
1000d554:	1806d23a 	srli	r3,r3,8
1000d558:	10800204 	addi	r2,r2,8
1000d55c:	194003cc 	andi	r5,r3,15
1000d560:	2800021e 	bne	r5,zero,1000d56c <__lo0bits+0x58>
1000d564:	1806d13a 	srli	r3,r3,4
1000d568:	10800104 	addi	r2,r2,4
1000d56c:	194000cc 	andi	r5,r3,3
1000d570:	2800021e 	bne	r5,zero,1000d57c <__lo0bits+0x68>
1000d574:	1806d0ba 	srli	r3,r3,2
1000d578:	10800084 	addi	r2,r2,2
1000d57c:	1940004c 	andi	r5,r3,1
1000d580:	2800081e 	bne	r5,zero,1000d5a4 <__lo0bits+0x90>
1000d584:	1806d07a 	srli	r3,r3,1
1000d588:	1800051e 	bne	r3,zero,1000d5a0 <__lo0bits+0x8c>
1000d58c:	00800804 	movi	r2,32
1000d590:	f800283a 	ret
1000d594:	1806d43a 	srli	r3,r3,16
1000d598:	00800404 	movi	r2,16
1000d59c:	003feb06 	br	1000d54c <__alt_data_end+0xf800d54c>
1000d5a0:	10800044 	addi	r2,r2,1
1000d5a4:	20c00015 	stw	r3,0(r4)
1000d5a8:	f800283a 	ret
1000d5ac:	0005883a 	mov	r2,zero
1000d5b0:	f800283a 	ret
1000d5b4:	1806d07a 	srli	r3,r3,1
1000d5b8:	00800044 	movi	r2,1
1000d5bc:	20c00015 	stw	r3,0(r4)
1000d5c0:	f800283a 	ret

1000d5c4 <__i2b>:
1000d5c4:	defffd04 	addi	sp,sp,-12
1000d5c8:	dc000015 	stw	r16,0(sp)
1000d5cc:	04000044 	movi	r16,1
1000d5d0:	dc400115 	stw	r17,4(sp)
1000d5d4:	2823883a 	mov	r17,r5
1000d5d8:	800b883a 	mov	r5,r16
1000d5dc:	dfc00215 	stw	ra,8(sp)
1000d5e0:	000d19c0 	call	1000d19c <_Balloc>
1000d5e4:	14400515 	stw	r17,20(r2)
1000d5e8:	14000415 	stw	r16,16(r2)
1000d5ec:	dfc00217 	ldw	ra,8(sp)
1000d5f0:	dc400117 	ldw	r17,4(sp)
1000d5f4:	dc000017 	ldw	r16,0(sp)
1000d5f8:	dec00304 	addi	sp,sp,12
1000d5fc:	f800283a 	ret

1000d600 <__multiply>:
1000d600:	deffef04 	addi	sp,sp,-68
1000d604:	dc400815 	stw	r17,32(sp)
1000d608:	dc000715 	stw	r16,28(sp)
1000d60c:	2c400417 	ldw	r17,16(r5)
1000d610:	34000417 	ldw	r16,16(r6)
1000d614:	dd800d15 	stw	r22,52(sp)
1000d618:	dc800915 	stw	r18,36(sp)
1000d61c:	dfc01015 	stw	ra,64(sp)
1000d620:	df000f15 	stw	fp,60(sp)
1000d624:	ddc00e15 	stw	r23,56(sp)
1000d628:	dd400c15 	stw	r21,48(sp)
1000d62c:	dd000b15 	stw	r20,44(sp)
1000d630:	dcc00a15 	stw	r19,40(sp)
1000d634:	2825883a 	mov	r18,r5
1000d638:	302d883a 	mov	r22,r6
1000d63c:	8c009116 	blt	r17,r16,1000d884 <__multiply+0x284>
1000d640:	8005883a 	mov	r2,r16
1000d644:	8821883a 	mov	r16,r17
1000d648:	1023883a 	mov	r17,r2
1000d64c:	90800217 	ldw	r2,8(r18)
1000d650:	8447883a 	add	r3,r16,r17
1000d654:	d8c00215 	stw	r3,8(sp)
1000d658:	91400117 	ldw	r5,4(r18)
1000d65c:	10c0010e 	bge	r2,r3,1000d664 <__multiply+0x64>
1000d660:	29400044 	addi	r5,r5,1
1000d664:	000d19c0 	call	1000d19c <_Balloc>
1000d668:	d8c00217 	ldw	r3,8(sp)
1000d66c:	d8800615 	stw	r2,24(sp)
1000d670:	18eb883a 	add	r21,r3,r3
1000d674:	ad6b883a 	add	r21,r21,r21
1000d678:	10c00504 	addi	r3,r2,20
1000d67c:	1d6b883a 	add	r21,r3,r21
1000d680:	d8c00115 	stw	r3,4(sp)
1000d684:	dd400315 	stw	r21,12(sp)
1000d688:	1805883a 	mov	r2,r3
1000d68c:	1d40042e 	bgeu	r3,r21,1000d6a0 <__multiply+0xa0>
1000d690:	d8c00317 	ldw	r3,12(sp)
1000d694:	10000015 	stw	zero,0(r2)
1000d698:	10800104 	addi	r2,r2,4
1000d69c:	10fffc36 	bltu	r2,r3,1000d690 <__alt_data_end+0xf800d690>
1000d6a0:	8c63883a 	add	r17,r17,r17
1000d6a4:	b5800504 	addi	r22,r22,20
1000d6a8:	8c63883a 	add	r17,r17,r17
1000d6ac:	94800504 	addi	r18,r18,20
1000d6b0:	8421883a 	add	r16,r16,r16
1000d6b4:	b463883a 	add	r17,r22,r17
1000d6b8:	8421883a 	add	r16,r16,r16
1000d6bc:	dd800015 	stw	r22,0(sp)
1000d6c0:	dc800415 	stw	r18,16(sp)
1000d6c4:	dc400515 	stw	r17,20(sp)
1000d6c8:	9429883a 	add	r20,r18,r16
1000d6cc:	b4404f2e 	bgeu	r22,r17,1000d80c <__multiply+0x20c>
1000d6d0:	d8c00017 	ldw	r3,0(sp)
1000d6d4:	1c800017 	ldw	r18,0(r3)
1000d6d8:	943fffcc 	andi	r16,r18,65535
1000d6dc:	80001e26 	beq	r16,zero,1000d758 <__multiply+0x158>
1000d6e0:	dd800117 	ldw	r22,4(sp)
1000d6e4:	dd400417 	ldw	r21,16(sp)
1000d6e8:	0025883a 	mov	r18,zero
1000d6ec:	adc00017 	ldw	r23,0(r21)
1000d6f0:	b4c00017 	ldw	r19,0(r22)
1000d6f4:	800b883a 	mov	r5,r16
1000d6f8:	b93fffcc 	andi	r4,r23,65535
1000d6fc:	0007bcc0 	call	10007bcc <__mulsi3>
1000d700:	9c7fffcc 	andi	r17,r19,65535
1000d704:	8885883a 	add	r2,r17,r2
1000d708:	b808d43a 	srli	r4,r23,16
1000d70c:	14a3883a 	add	r17,r2,r18
1000d710:	9826d43a 	srli	r19,r19,16
1000d714:	8824d43a 	srli	r18,r17,16
1000d718:	800b883a 	mov	r5,r16
1000d71c:	0007bcc0 	call	10007bcc <__mulsi3>
1000d720:	9885883a 	add	r2,r19,r2
1000d724:	14a7883a 	add	r19,r2,r18
1000d728:	88ffffcc 	andi	r3,r17,65535
1000d72c:	9822943a 	slli	r17,r19,16
1000d730:	ad400104 	addi	r21,r21,4
1000d734:	b005883a 	mov	r2,r22
1000d738:	88c6b03a 	or	r3,r17,r3
1000d73c:	b0c00015 	stw	r3,0(r22)
1000d740:	9824d43a 	srli	r18,r19,16
1000d744:	b5800104 	addi	r22,r22,4
1000d748:	ad3fe836 	bltu	r21,r20,1000d6ec <__alt_data_end+0xf800d6ec>
1000d74c:	d8c00017 	ldw	r3,0(sp)
1000d750:	14800115 	stw	r18,4(r2)
1000d754:	1c800017 	ldw	r18,0(r3)
1000d758:	9024d43a 	srli	r18,r18,16
1000d75c:	90002226 	beq	r18,zero,1000d7e8 <__multiply+0x1e8>
1000d760:	d8c00117 	ldw	r3,4(sp)
1000d764:	dd800417 	ldw	r22,16(sp)
1000d768:	002f883a 	mov	r23,zero
1000d76c:	1f000017 	ldw	fp,0(r3)
1000d770:	1823883a 	mov	r17,r3
1000d774:	182b883a 	mov	r21,r3
1000d778:	e021883a 	mov	r16,fp
1000d77c:	00000106 	br	1000d784 <__multiply+0x184>
1000d780:	982b883a 	mov	r21,r19
1000d784:	b100000b 	ldhu	r4,0(r22)
1000d788:	8020d43a 	srli	r16,r16,16
1000d78c:	900b883a 	mov	r5,r18
1000d790:	0007bcc0 	call	10007bcc <__mulsi3>
1000d794:	1405883a 	add	r2,r2,r16
1000d798:	15ef883a 	add	r23,r2,r23
1000d79c:	b804943a 	slli	r2,r23,16
1000d7a0:	e0ffffcc 	andi	r3,fp,65535
1000d7a4:	8c400104 	addi	r17,r17,4
1000d7a8:	10c6b03a 	or	r3,r2,r3
1000d7ac:	88ffff15 	stw	r3,-4(r17)
1000d7b0:	b5800104 	addi	r22,r22,4
1000d7b4:	b13fff17 	ldw	r4,-4(r22)
1000d7b8:	acc00104 	addi	r19,r21,4
1000d7bc:	900b883a 	mov	r5,r18
1000d7c0:	2008d43a 	srli	r4,r4,16
1000d7c4:	9c000017 	ldw	r16,0(r19)
1000d7c8:	0007bcc0 	call	10007bcc <__mulsi3>
1000d7cc:	b806d43a 	srli	r3,r23,16
1000d7d0:	813fffcc 	andi	r4,r16,65535
1000d7d4:	1105883a 	add	r2,r2,r4
1000d7d8:	10f9883a 	add	fp,r2,r3
1000d7dc:	e02ed43a 	srli	r23,fp,16
1000d7e0:	b53fe736 	bltu	r22,r20,1000d780 <__alt_data_end+0xf800d780>
1000d7e4:	af000115 	stw	fp,4(r21)
1000d7e8:	d8c00017 	ldw	r3,0(sp)
1000d7ec:	d9000517 	ldw	r4,20(sp)
1000d7f0:	18c00104 	addi	r3,r3,4
1000d7f4:	d8c00015 	stw	r3,0(sp)
1000d7f8:	d8c00117 	ldw	r3,4(sp)
1000d7fc:	18c00104 	addi	r3,r3,4
1000d800:	d8c00115 	stw	r3,4(sp)
1000d804:	d8c00017 	ldw	r3,0(sp)
1000d808:	193fb136 	bltu	r3,r4,1000d6d0 <__alt_data_end+0xf800d6d0>
1000d80c:	d8c00217 	ldw	r3,8(sp)
1000d810:	00c00c0e 	bge	zero,r3,1000d844 <__multiply+0x244>
1000d814:	d8c00317 	ldw	r3,12(sp)
1000d818:	18bfff17 	ldw	r2,-4(r3)
1000d81c:	1d7fff04 	addi	r21,r3,-4
1000d820:	10000326 	beq	r2,zero,1000d830 <__multiply+0x230>
1000d824:	00000706 	br	1000d844 <__multiply+0x244>
1000d828:	a8800017 	ldw	r2,0(r21)
1000d82c:	1000051e 	bne	r2,zero,1000d844 <__multiply+0x244>
1000d830:	d8c00217 	ldw	r3,8(sp)
1000d834:	ad7fff04 	addi	r21,r21,-4
1000d838:	18ffffc4 	addi	r3,r3,-1
1000d83c:	d8c00215 	stw	r3,8(sp)
1000d840:	183ff91e 	bne	r3,zero,1000d828 <__alt_data_end+0xf800d828>
1000d844:	d8c00617 	ldw	r3,24(sp)
1000d848:	d9000217 	ldw	r4,8(sp)
1000d84c:	1805883a 	mov	r2,r3
1000d850:	19000415 	stw	r4,16(r3)
1000d854:	dfc01017 	ldw	ra,64(sp)
1000d858:	df000f17 	ldw	fp,60(sp)
1000d85c:	ddc00e17 	ldw	r23,56(sp)
1000d860:	dd800d17 	ldw	r22,52(sp)
1000d864:	dd400c17 	ldw	r21,48(sp)
1000d868:	dd000b17 	ldw	r20,44(sp)
1000d86c:	dcc00a17 	ldw	r19,40(sp)
1000d870:	dc800917 	ldw	r18,36(sp)
1000d874:	dc400817 	ldw	r17,32(sp)
1000d878:	dc000717 	ldw	r16,28(sp)
1000d87c:	dec01104 	addi	sp,sp,68
1000d880:	f800283a 	ret
1000d884:	3025883a 	mov	r18,r6
1000d888:	282d883a 	mov	r22,r5
1000d88c:	003f6f06 	br	1000d64c <__alt_data_end+0xf800d64c>

1000d890 <__pow5mult>:
1000d890:	defffa04 	addi	sp,sp,-24
1000d894:	dcc00315 	stw	r19,12(sp)
1000d898:	dc800215 	stw	r18,8(sp)
1000d89c:	dc000015 	stw	r16,0(sp)
1000d8a0:	dfc00515 	stw	ra,20(sp)
1000d8a4:	dd000415 	stw	r20,16(sp)
1000d8a8:	dc400115 	stw	r17,4(sp)
1000d8ac:	308000cc 	andi	r2,r6,3
1000d8b0:	3021883a 	mov	r16,r6
1000d8b4:	2027883a 	mov	r19,r4
1000d8b8:	2825883a 	mov	r18,r5
1000d8bc:	10002e1e 	bne	r2,zero,1000d978 <__pow5mult+0xe8>
1000d8c0:	8021d0ba 	srai	r16,r16,2
1000d8c4:	80001a26 	beq	r16,zero,1000d930 <__pow5mult+0xa0>
1000d8c8:	9c401217 	ldw	r17,72(r19)
1000d8cc:	8800061e 	bne	r17,zero,1000d8e8 <__pow5mult+0x58>
1000d8d0:	00003406 	br	1000d9a4 <__pow5mult+0x114>
1000d8d4:	8021d07a 	srai	r16,r16,1
1000d8d8:	80001526 	beq	r16,zero,1000d930 <__pow5mult+0xa0>
1000d8dc:	88800017 	ldw	r2,0(r17)
1000d8e0:	10001c26 	beq	r2,zero,1000d954 <__pow5mult+0xc4>
1000d8e4:	1023883a 	mov	r17,r2
1000d8e8:	80c0004c 	andi	r3,r16,1
1000d8ec:	183ff926 	beq	r3,zero,1000d8d4 <__alt_data_end+0xf800d8d4>
1000d8f0:	900b883a 	mov	r5,r18
1000d8f4:	880d883a 	mov	r6,r17
1000d8f8:	9809883a 	mov	r4,r19
1000d8fc:	000d6000 	call	1000d600 <__multiply>
1000d900:	90001b26 	beq	r18,zero,1000d970 <__pow5mult+0xe0>
1000d904:	91c00117 	ldw	r7,4(r18)
1000d908:	98c01317 	ldw	r3,76(r19)
1000d90c:	8021d07a 	srai	r16,r16,1
1000d910:	39cf883a 	add	r7,r7,r7
1000d914:	39cf883a 	add	r7,r7,r7
1000d918:	19c7883a 	add	r3,r3,r7
1000d91c:	19000017 	ldw	r4,0(r3)
1000d920:	91000015 	stw	r4,0(r18)
1000d924:	1c800015 	stw	r18,0(r3)
1000d928:	1025883a 	mov	r18,r2
1000d92c:	803feb1e 	bne	r16,zero,1000d8dc <__alt_data_end+0xf800d8dc>
1000d930:	9005883a 	mov	r2,r18
1000d934:	dfc00517 	ldw	ra,20(sp)
1000d938:	dd000417 	ldw	r20,16(sp)
1000d93c:	dcc00317 	ldw	r19,12(sp)
1000d940:	dc800217 	ldw	r18,8(sp)
1000d944:	dc400117 	ldw	r17,4(sp)
1000d948:	dc000017 	ldw	r16,0(sp)
1000d94c:	dec00604 	addi	sp,sp,24
1000d950:	f800283a 	ret
1000d954:	9809883a 	mov	r4,r19
1000d958:	880b883a 	mov	r5,r17
1000d95c:	880d883a 	mov	r6,r17
1000d960:	000d6000 	call	1000d600 <__multiply>
1000d964:	88800015 	stw	r2,0(r17)
1000d968:	10000015 	stw	zero,0(r2)
1000d96c:	003fdd06 	br	1000d8e4 <__alt_data_end+0xf800d8e4>
1000d970:	1025883a 	mov	r18,r2
1000d974:	003fd706 	br	1000d8d4 <__alt_data_end+0xf800d8d4>
1000d978:	10bfffc4 	addi	r2,r2,-1
1000d97c:	1085883a 	add	r2,r2,r2
1000d980:	00c40074 	movhi	r3,4097
1000d984:	18d1e004 	addi	r3,r3,18304
1000d988:	1085883a 	add	r2,r2,r2
1000d98c:	1885883a 	add	r2,r3,r2
1000d990:	11800017 	ldw	r6,0(r2)
1000d994:	000f883a 	mov	r7,zero
1000d998:	000d26c0 	call	1000d26c <__multadd>
1000d99c:	1025883a 	mov	r18,r2
1000d9a0:	003fc706 	br	1000d8c0 <__alt_data_end+0xf800d8c0>
1000d9a4:	05000044 	movi	r20,1
1000d9a8:	9809883a 	mov	r4,r19
1000d9ac:	a00b883a 	mov	r5,r20
1000d9b0:	000d19c0 	call	1000d19c <_Balloc>
1000d9b4:	1023883a 	mov	r17,r2
1000d9b8:	00809c44 	movi	r2,625
1000d9bc:	88800515 	stw	r2,20(r17)
1000d9c0:	8d000415 	stw	r20,16(r17)
1000d9c4:	9c401215 	stw	r17,72(r19)
1000d9c8:	88000015 	stw	zero,0(r17)
1000d9cc:	003fc606 	br	1000d8e8 <__alt_data_end+0xf800d8e8>

1000d9d0 <__lshift>:
1000d9d0:	defff904 	addi	sp,sp,-28
1000d9d4:	dd000415 	stw	r20,16(sp)
1000d9d8:	dcc00315 	stw	r19,12(sp)
1000d9dc:	3029d17a 	srai	r20,r6,5
1000d9e0:	2cc00417 	ldw	r19,16(r5)
1000d9e4:	28800217 	ldw	r2,8(r5)
1000d9e8:	dd400515 	stw	r21,20(sp)
1000d9ec:	a4e7883a 	add	r19,r20,r19
1000d9f0:	dc800215 	stw	r18,8(sp)
1000d9f4:	dc400115 	stw	r17,4(sp)
1000d9f8:	dc000015 	stw	r16,0(sp)
1000d9fc:	dfc00615 	stw	ra,24(sp)
1000da00:	9c000044 	addi	r16,r19,1
1000da04:	2823883a 	mov	r17,r5
1000da08:	302b883a 	mov	r21,r6
1000da0c:	2025883a 	mov	r18,r4
1000da10:	29400117 	ldw	r5,4(r5)
1000da14:	1400030e 	bge	r2,r16,1000da24 <__lshift+0x54>
1000da18:	1085883a 	add	r2,r2,r2
1000da1c:	29400044 	addi	r5,r5,1
1000da20:	143ffd16 	blt	r2,r16,1000da18 <__alt_data_end+0xf800da18>
1000da24:	9009883a 	mov	r4,r18
1000da28:	000d19c0 	call	1000d19c <_Balloc>
1000da2c:	11c00504 	addi	r7,r2,20
1000da30:	0500090e 	bge	zero,r20,1000da58 <__lshift+0x88>
1000da34:	3811883a 	mov	r8,r7
1000da38:	0007883a 	mov	r3,zero
1000da3c:	40000015 	stw	zero,0(r8)
1000da40:	18c00044 	addi	r3,r3,1
1000da44:	42000104 	addi	r8,r8,4
1000da48:	1d3ffc1e 	bne	r3,r20,1000da3c <__alt_data_end+0xf800da3c>
1000da4c:	18c7883a 	add	r3,r3,r3
1000da50:	18c7883a 	add	r3,r3,r3
1000da54:	38cf883a 	add	r7,r7,r3
1000da58:	89000417 	ldw	r4,16(r17)
1000da5c:	88c00504 	addi	r3,r17,20
1000da60:	a98007cc 	andi	r6,r21,31
1000da64:	2109883a 	add	r4,r4,r4
1000da68:	2109883a 	add	r4,r4,r4
1000da6c:	1909883a 	add	r4,r3,r4
1000da70:	30002326 	beq	r6,zero,1000db00 <__lshift+0x130>
1000da74:	01400804 	movi	r5,32
1000da78:	298bc83a 	sub	r5,r5,r6
1000da7c:	0013883a 	mov	r9,zero
1000da80:	1a000017 	ldw	r8,0(r3)
1000da84:	3815883a 	mov	r10,r7
1000da88:	39c00104 	addi	r7,r7,4
1000da8c:	4190983a 	sll	r8,r8,r6
1000da90:	18c00104 	addi	r3,r3,4
1000da94:	4a10b03a 	or	r8,r9,r8
1000da98:	3a3fff15 	stw	r8,-4(r7)
1000da9c:	1a3fff17 	ldw	r8,-4(r3)
1000daa0:	4152d83a 	srl	r9,r8,r5
1000daa4:	193ff636 	bltu	r3,r4,1000da80 <__alt_data_end+0xf800da80>
1000daa8:	52400115 	stw	r9,4(r10)
1000daac:	48000126 	beq	r9,zero,1000dab4 <__lshift+0xe4>
1000dab0:	9c000084 	addi	r16,r19,2
1000dab4:	89000117 	ldw	r4,4(r17)
1000dab8:	90c01317 	ldw	r3,76(r18)
1000dabc:	843fffc4 	addi	r16,r16,-1
1000dac0:	2109883a 	add	r4,r4,r4
1000dac4:	2109883a 	add	r4,r4,r4
1000dac8:	1907883a 	add	r3,r3,r4
1000dacc:	19000017 	ldw	r4,0(r3)
1000dad0:	14000415 	stw	r16,16(r2)
1000dad4:	89000015 	stw	r4,0(r17)
1000dad8:	1c400015 	stw	r17,0(r3)
1000dadc:	dfc00617 	ldw	ra,24(sp)
1000dae0:	dd400517 	ldw	r21,20(sp)
1000dae4:	dd000417 	ldw	r20,16(sp)
1000dae8:	dcc00317 	ldw	r19,12(sp)
1000daec:	dc800217 	ldw	r18,8(sp)
1000daf0:	dc400117 	ldw	r17,4(sp)
1000daf4:	dc000017 	ldw	r16,0(sp)
1000daf8:	dec00704 	addi	sp,sp,28
1000dafc:	f800283a 	ret
1000db00:	19400017 	ldw	r5,0(r3)
1000db04:	39c00104 	addi	r7,r7,4
1000db08:	18c00104 	addi	r3,r3,4
1000db0c:	397fff15 	stw	r5,-4(r7)
1000db10:	193ffb36 	bltu	r3,r4,1000db00 <__alt_data_end+0xf800db00>
1000db14:	003fe706 	br	1000dab4 <__alt_data_end+0xf800dab4>

1000db18 <__mcmp>:
1000db18:	20800417 	ldw	r2,16(r4)
1000db1c:	28c00417 	ldw	r3,16(r5)
1000db20:	10c5c83a 	sub	r2,r2,r3
1000db24:	1000111e 	bne	r2,zero,1000db6c <__mcmp+0x54>
1000db28:	18c7883a 	add	r3,r3,r3
1000db2c:	18c7883a 	add	r3,r3,r3
1000db30:	21000504 	addi	r4,r4,20
1000db34:	29400504 	addi	r5,r5,20
1000db38:	20c5883a 	add	r2,r4,r3
1000db3c:	28cb883a 	add	r5,r5,r3
1000db40:	00000106 	br	1000db48 <__mcmp+0x30>
1000db44:	20800a2e 	bgeu	r4,r2,1000db70 <__mcmp+0x58>
1000db48:	10bfff04 	addi	r2,r2,-4
1000db4c:	297fff04 	addi	r5,r5,-4
1000db50:	11800017 	ldw	r6,0(r2)
1000db54:	28c00017 	ldw	r3,0(r5)
1000db58:	30fffa26 	beq	r6,r3,1000db44 <__alt_data_end+0xf800db44>
1000db5c:	30c00236 	bltu	r6,r3,1000db68 <__mcmp+0x50>
1000db60:	00800044 	movi	r2,1
1000db64:	f800283a 	ret
1000db68:	00bfffc4 	movi	r2,-1
1000db6c:	f800283a 	ret
1000db70:	0005883a 	mov	r2,zero
1000db74:	f800283a 	ret

1000db78 <__mdiff>:
1000db78:	defffb04 	addi	sp,sp,-20
1000db7c:	dc000015 	stw	r16,0(sp)
1000db80:	2821883a 	mov	r16,r5
1000db84:	dcc00315 	stw	r19,12(sp)
1000db88:	300b883a 	mov	r5,r6
1000db8c:	2027883a 	mov	r19,r4
1000db90:	8009883a 	mov	r4,r16
1000db94:	dc800215 	stw	r18,8(sp)
1000db98:	dfc00415 	stw	ra,16(sp)
1000db9c:	dc400115 	stw	r17,4(sp)
1000dba0:	3025883a 	mov	r18,r6
1000dba4:	000db180 	call	1000db18 <__mcmp>
1000dba8:	10005226 	beq	r2,zero,1000dcf4 <__mdiff+0x17c>
1000dbac:	10004c16 	blt	r2,zero,1000dce0 <__mdiff+0x168>
1000dbb0:	0023883a 	mov	r17,zero
1000dbb4:	81400117 	ldw	r5,4(r16)
1000dbb8:	9809883a 	mov	r4,r19
1000dbbc:	000d19c0 	call	1000d19c <_Balloc>
1000dbc0:	83400417 	ldw	r13,16(r16)
1000dbc4:	93800417 	ldw	r14,16(r18)
1000dbc8:	81000504 	addi	r4,r16,20
1000dbcc:	6b59883a 	add	r12,r13,r13
1000dbd0:	739d883a 	add	r14,r14,r14
1000dbd4:	6319883a 	add	r12,r12,r12
1000dbd8:	91800504 	addi	r6,r18,20
1000dbdc:	739d883a 	add	r14,r14,r14
1000dbe0:	14400315 	stw	r17,12(r2)
1000dbe4:	2319883a 	add	r12,r4,r12
1000dbe8:	339d883a 	add	r14,r6,r14
1000dbec:	12400504 	addi	r9,r2,20
1000dbf0:	0007883a 	mov	r3,zero
1000dbf4:	22000017 	ldw	r8,0(r4)
1000dbf8:	32800017 	ldw	r10,0(r6)
1000dbfc:	4ac00104 	addi	r11,r9,4
1000dc00:	41ffffcc 	andi	r7,r8,65535
1000dc04:	38c7883a 	add	r3,r7,r3
1000dc08:	51ffffcc 	andi	r7,r10,65535
1000dc0c:	19cfc83a 	sub	r7,r3,r7
1000dc10:	4010d43a 	srli	r8,r8,16
1000dc14:	5014d43a 	srli	r10,r10,16
1000dc18:	3807d43a 	srai	r3,r7,16
1000dc1c:	39ffffcc 	andi	r7,r7,65535
1000dc20:	4291c83a 	sub	r8,r8,r10
1000dc24:	40c7883a 	add	r3,r8,r3
1000dc28:	1810943a 	slli	r8,r3,16
1000dc2c:	31800104 	addi	r6,r6,4
1000dc30:	21000104 	addi	r4,r4,4
1000dc34:	41ceb03a 	or	r7,r8,r7
1000dc38:	49c00015 	stw	r7,0(r9)
1000dc3c:	1807d43a 	srai	r3,r3,16
1000dc40:	580b883a 	mov	r5,r11
1000dc44:	5813883a 	mov	r9,r11
1000dc48:	33bfea36 	bltu	r6,r14,1000dbf4 <__alt_data_end+0xf800dbf4>
1000dc4c:	2011883a 	mov	r8,r4
1000dc50:	2300152e 	bgeu	r4,r12,1000dca8 <__mdiff+0x130>
1000dc54:	21400017 	ldw	r5,0(r4)
1000dc58:	4a400104 	addi	r9,r9,4
1000dc5c:	21000104 	addi	r4,r4,4
1000dc60:	29ffffcc 	andi	r7,r5,65535
1000dc64:	38c7883a 	add	r3,r7,r3
1000dc68:	280ad43a 	srli	r5,r5,16
1000dc6c:	180dd43a 	srai	r6,r3,16
1000dc70:	19ffffcc 	andi	r7,r3,65535
1000dc74:	3147883a 	add	r3,r6,r5
1000dc78:	180a943a 	slli	r5,r3,16
1000dc7c:	1807d43a 	srai	r3,r3,16
1000dc80:	29ceb03a 	or	r7,r5,r7
1000dc84:	49ffff15 	stw	r7,-4(r9)
1000dc88:	233ff236 	bltu	r4,r12,1000dc54 <__alt_data_end+0xf800dc54>
1000dc8c:	0206303a 	nor	r3,zero,r8
1000dc90:	1b07883a 	add	r3,r3,r12
1000dc94:	1806d0ba 	srli	r3,r3,2
1000dc98:	18c00044 	addi	r3,r3,1
1000dc9c:	18c7883a 	add	r3,r3,r3
1000dca0:	18c7883a 	add	r3,r3,r3
1000dca4:	58cb883a 	add	r5,r11,r3
1000dca8:	28ffff04 	addi	r3,r5,-4
1000dcac:	3800041e 	bne	r7,zero,1000dcc0 <__mdiff+0x148>
1000dcb0:	18ffff04 	addi	r3,r3,-4
1000dcb4:	19000017 	ldw	r4,0(r3)
1000dcb8:	6b7fffc4 	addi	r13,r13,-1
1000dcbc:	203ffc26 	beq	r4,zero,1000dcb0 <__alt_data_end+0xf800dcb0>
1000dcc0:	13400415 	stw	r13,16(r2)
1000dcc4:	dfc00417 	ldw	ra,16(sp)
1000dcc8:	dcc00317 	ldw	r19,12(sp)
1000dccc:	dc800217 	ldw	r18,8(sp)
1000dcd0:	dc400117 	ldw	r17,4(sp)
1000dcd4:	dc000017 	ldw	r16,0(sp)
1000dcd8:	dec00504 	addi	sp,sp,20
1000dcdc:	f800283a 	ret
1000dce0:	8005883a 	mov	r2,r16
1000dce4:	04400044 	movi	r17,1
1000dce8:	9021883a 	mov	r16,r18
1000dcec:	1025883a 	mov	r18,r2
1000dcf0:	003fb006 	br	1000dbb4 <__alt_data_end+0xf800dbb4>
1000dcf4:	9809883a 	mov	r4,r19
1000dcf8:	000b883a 	mov	r5,zero
1000dcfc:	000d19c0 	call	1000d19c <_Balloc>
1000dd00:	00c00044 	movi	r3,1
1000dd04:	10c00415 	stw	r3,16(r2)
1000dd08:	10000515 	stw	zero,20(r2)
1000dd0c:	003fed06 	br	1000dcc4 <__alt_data_end+0xf800dcc4>

1000dd10 <__ulp>:
1000dd10:	295ffc2c 	andhi	r5,r5,32752
1000dd14:	00bf3034 	movhi	r2,64704
1000dd18:	2887883a 	add	r3,r5,r2
1000dd1c:	00c0020e 	bge	zero,r3,1000dd28 <__ulp+0x18>
1000dd20:	0005883a 	mov	r2,zero
1000dd24:	f800283a 	ret
1000dd28:	00c7c83a 	sub	r3,zero,r3
1000dd2c:	180bd53a 	srai	r5,r3,20
1000dd30:	008004c4 	movi	r2,19
1000dd34:	11400a0e 	bge	r2,r5,1000dd60 <__ulp+0x50>
1000dd38:	00800c84 	movi	r2,50
1000dd3c:	0007883a 	mov	r3,zero
1000dd40:	11400516 	blt	r2,r5,1000dd58 <__ulp+0x48>
1000dd44:	00800cc4 	movi	r2,51
1000dd48:	114bc83a 	sub	r5,r2,r5
1000dd4c:	00800044 	movi	r2,1
1000dd50:	1144983a 	sll	r2,r2,r5
1000dd54:	f800283a 	ret
1000dd58:	00800044 	movi	r2,1
1000dd5c:	f800283a 	ret
1000dd60:	00800234 	movhi	r2,8
1000dd64:	1147d83a 	sra	r3,r2,r5
1000dd68:	0005883a 	mov	r2,zero
1000dd6c:	f800283a 	ret

1000dd70 <__b2d>:
1000dd70:	defffa04 	addi	sp,sp,-24
1000dd74:	dc000015 	stw	r16,0(sp)
1000dd78:	24000417 	ldw	r16,16(r4)
1000dd7c:	dc400115 	stw	r17,4(sp)
1000dd80:	24400504 	addi	r17,r4,20
1000dd84:	8421883a 	add	r16,r16,r16
1000dd88:	8421883a 	add	r16,r16,r16
1000dd8c:	8c21883a 	add	r16,r17,r16
1000dd90:	dc800215 	stw	r18,8(sp)
1000dd94:	84bfff17 	ldw	r18,-4(r16)
1000dd98:	dd000415 	stw	r20,16(sp)
1000dd9c:	dcc00315 	stw	r19,12(sp)
1000dda0:	9009883a 	mov	r4,r18
1000dda4:	2829883a 	mov	r20,r5
1000dda8:	dfc00515 	stw	ra,20(sp)
1000ddac:	000d4ac0 	call	1000d4ac <__hi0bits>
1000ddb0:	00c00804 	movi	r3,32
1000ddb4:	1887c83a 	sub	r3,r3,r2
1000ddb8:	a0c00015 	stw	r3,0(r20)
1000ddbc:	00c00284 	movi	r3,10
1000ddc0:	84ffff04 	addi	r19,r16,-4
1000ddc4:	18801216 	blt	r3,r2,1000de10 <__b2d+0xa0>
1000ddc8:	014002c4 	movi	r5,11
1000ddcc:	2889c83a 	sub	r4,r5,r2
1000ddd0:	9106d83a 	srl	r3,r18,r4
1000ddd4:	18cffc34 	orhi	r3,r3,16368
1000ddd8:	8cc0282e 	bgeu	r17,r19,1000de7c <__b2d+0x10c>
1000dddc:	817ffe17 	ldw	r5,-8(r16)
1000dde0:	290ad83a 	srl	r5,r5,r4
1000dde4:	10800544 	addi	r2,r2,21
1000dde8:	9084983a 	sll	r2,r18,r2
1000ddec:	2884b03a 	or	r2,r5,r2
1000ddf0:	dfc00517 	ldw	ra,20(sp)
1000ddf4:	dd000417 	ldw	r20,16(sp)
1000ddf8:	dcc00317 	ldw	r19,12(sp)
1000ddfc:	dc800217 	ldw	r18,8(sp)
1000de00:	dc400117 	ldw	r17,4(sp)
1000de04:	dc000017 	ldw	r16,0(sp)
1000de08:	dec00604 	addi	sp,sp,24
1000de0c:	f800283a 	ret
1000de10:	113ffd44 	addi	r4,r2,-11
1000de14:	8cc00f2e 	bgeu	r17,r19,1000de54 <__b2d+0xe4>
1000de18:	81bffe04 	addi	r6,r16,-8
1000de1c:	817ffe17 	ldw	r5,-8(r16)
1000de20:	20001326 	beq	r4,zero,1000de70 <__b2d+0x100>
1000de24:	00c00ac4 	movi	r3,43
1000de28:	1885c83a 	sub	r2,r3,r2
1000de2c:	2886d83a 	srl	r3,r5,r2
1000de30:	9124983a 	sll	r18,r18,r4
1000de34:	90e4b03a 	or	r18,r18,r3
1000de38:	90cffc34 	orhi	r3,r18,16368
1000de3c:	8980112e 	bgeu	r17,r6,1000de84 <__b2d+0x114>
1000de40:	81bffd17 	ldw	r6,-12(r16)
1000de44:	308cd83a 	srl	r6,r6,r2
1000de48:	2904983a 	sll	r2,r5,r4
1000de4c:	1184b03a 	or	r2,r2,r6
1000de50:	003fe706 	br	1000ddf0 <__alt_data_end+0xf800ddf0>
1000de54:	20000526 	beq	r4,zero,1000de6c <__b2d+0xfc>
1000de58:	9124983a 	sll	r18,r18,r4
1000de5c:	000d883a 	mov	r6,zero
1000de60:	000b883a 	mov	r5,zero
1000de64:	90cffc34 	orhi	r3,r18,16368
1000de68:	003ff706 	br	1000de48 <__alt_data_end+0xf800de48>
1000de6c:	000b883a 	mov	r5,zero
1000de70:	90cffc34 	orhi	r3,r18,16368
1000de74:	2805883a 	mov	r2,r5
1000de78:	003fdd06 	br	1000ddf0 <__alt_data_end+0xf800ddf0>
1000de7c:	000b883a 	mov	r5,zero
1000de80:	003fd806 	br	1000dde4 <__alt_data_end+0xf800dde4>
1000de84:	000d883a 	mov	r6,zero
1000de88:	003fef06 	br	1000de48 <__alt_data_end+0xf800de48>

1000de8c <__d2b>:
1000de8c:	defff704 	addi	sp,sp,-36
1000de90:	dc000215 	stw	r16,8(sp)
1000de94:	3021883a 	mov	r16,r6
1000de98:	dc400315 	stw	r17,12(sp)
1000de9c:	8022907a 	slli	r17,r16,1
1000dea0:	dd400715 	stw	r21,28(sp)
1000dea4:	282b883a 	mov	r21,r5
1000dea8:	01400044 	movi	r5,1
1000deac:	dd000615 	stw	r20,24(sp)
1000deb0:	dcc00515 	stw	r19,20(sp)
1000deb4:	dc800415 	stw	r18,16(sp)
1000deb8:	dfc00815 	stw	ra,32(sp)
1000debc:	3829883a 	mov	r20,r7
1000dec0:	dc800917 	ldw	r18,36(sp)
1000dec4:	8822d57a 	srli	r17,r17,21
1000dec8:	000d19c0 	call	1000d19c <_Balloc>
1000decc:	1027883a 	mov	r19,r2
1000ded0:	00800434 	movhi	r2,16
1000ded4:	10bfffc4 	addi	r2,r2,-1
1000ded8:	808c703a 	and	r6,r16,r2
1000dedc:	88000126 	beq	r17,zero,1000dee4 <__d2b+0x58>
1000dee0:	31800434 	orhi	r6,r6,16
1000dee4:	d9800015 	stw	r6,0(sp)
1000dee8:	a8001f26 	beq	r21,zero,1000df68 <__d2b+0xdc>
1000deec:	d9000104 	addi	r4,sp,4
1000def0:	dd400115 	stw	r21,4(sp)
1000def4:	000d5140 	call	1000d514 <__lo0bits>
1000def8:	d8c00017 	ldw	r3,0(sp)
1000defc:	1000291e 	bne	r2,zero,1000dfa4 <__d2b+0x118>
1000df00:	d9000117 	ldw	r4,4(sp)
1000df04:	99000515 	stw	r4,20(r19)
1000df08:	1820c03a 	cmpne	r16,r3,zero
1000df0c:	84000044 	addi	r16,r16,1
1000df10:	98c00615 	stw	r3,24(r19)
1000df14:	9c000415 	stw	r16,16(r19)
1000df18:	88001b1e 	bne	r17,zero,1000df88 <__d2b+0xfc>
1000df1c:	800690ba 	slli	r3,r16,2
1000df20:	10bef384 	addi	r2,r2,-1074
1000df24:	a0800015 	stw	r2,0(r20)
1000df28:	98c5883a 	add	r2,r19,r3
1000df2c:	11000417 	ldw	r4,16(r2)
1000df30:	8020917a 	slli	r16,r16,5
1000df34:	000d4ac0 	call	1000d4ac <__hi0bits>
1000df38:	8085c83a 	sub	r2,r16,r2
1000df3c:	90800015 	stw	r2,0(r18)
1000df40:	9805883a 	mov	r2,r19
1000df44:	dfc00817 	ldw	ra,32(sp)
1000df48:	dd400717 	ldw	r21,28(sp)
1000df4c:	dd000617 	ldw	r20,24(sp)
1000df50:	dcc00517 	ldw	r19,20(sp)
1000df54:	dc800417 	ldw	r18,16(sp)
1000df58:	dc400317 	ldw	r17,12(sp)
1000df5c:	dc000217 	ldw	r16,8(sp)
1000df60:	dec00904 	addi	sp,sp,36
1000df64:	f800283a 	ret
1000df68:	d809883a 	mov	r4,sp
1000df6c:	000d5140 	call	1000d514 <__lo0bits>
1000df70:	d8c00017 	ldw	r3,0(sp)
1000df74:	04000044 	movi	r16,1
1000df78:	9c000415 	stw	r16,16(r19)
1000df7c:	98c00515 	stw	r3,20(r19)
1000df80:	10800804 	addi	r2,r2,32
1000df84:	883fe526 	beq	r17,zero,1000df1c <__alt_data_end+0xf800df1c>
1000df88:	8c7ef344 	addi	r17,r17,-1075
1000df8c:	88a3883a 	add	r17,r17,r2
1000df90:	00c00d44 	movi	r3,53
1000df94:	a4400015 	stw	r17,0(r20)
1000df98:	1885c83a 	sub	r2,r3,r2
1000df9c:	90800015 	stw	r2,0(r18)
1000dfa0:	003fe706 	br	1000df40 <__alt_data_end+0xf800df40>
1000dfa4:	01000804 	movi	r4,32
1000dfa8:	2089c83a 	sub	r4,r4,r2
1000dfac:	1908983a 	sll	r4,r3,r4
1000dfb0:	d9400117 	ldw	r5,4(sp)
1000dfb4:	1886d83a 	srl	r3,r3,r2
1000dfb8:	2148b03a 	or	r4,r4,r5
1000dfbc:	99000515 	stw	r4,20(r19)
1000dfc0:	d8c00015 	stw	r3,0(sp)
1000dfc4:	003fd006 	br	1000df08 <__alt_data_end+0xf800df08>

1000dfc8 <__ratio>:
1000dfc8:	defff904 	addi	sp,sp,-28
1000dfcc:	dc400315 	stw	r17,12(sp)
1000dfd0:	2823883a 	mov	r17,r5
1000dfd4:	d9400104 	addi	r5,sp,4
1000dfd8:	dfc00615 	stw	ra,24(sp)
1000dfdc:	dcc00515 	stw	r19,20(sp)
1000dfe0:	dc800415 	stw	r18,16(sp)
1000dfe4:	2027883a 	mov	r19,r4
1000dfe8:	dc000215 	stw	r16,8(sp)
1000dfec:	000dd700 	call	1000dd70 <__b2d>
1000dff0:	8809883a 	mov	r4,r17
1000dff4:	d80b883a 	mov	r5,sp
1000dff8:	1025883a 	mov	r18,r2
1000dffc:	1821883a 	mov	r16,r3
1000e000:	000dd700 	call	1000dd70 <__b2d>
1000e004:	8a400417 	ldw	r9,16(r17)
1000e008:	9a000417 	ldw	r8,16(r19)
1000e00c:	100d883a 	mov	r6,r2
1000e010:	d8800017 	ldw	r2,0(sp)
1000e014:	4251c83a 	sub	r8,r8,r9
1000e018:	4012917a 	slli	r9,r8,5
1000e01c:	da000117 	ldw	r8,4(sp)
1000e020:	4091c83a 	sub	r8,r8,r2
1000e024:	4251883a 	add	r8,r8,r9
1000e028:	02000d0e 	bge	zero,r8,1000e060 <__ratio+0x98>
1000e02c:	4010953a 	slli	r8,r8,20
1000e030:	4421883a 	add	r16,r8,r16
1000e034:	9009883a 	mov	r4,r18
1000e038:	800b883a 	mov	r5,r16
1000e03c:	180f883a 	mov	r7,r3
1000e040:	0005d100 	call	10005d10 <__divdf3>
1000e044:	dfc00617 	ldw	ra,24(sp)
1000e048:	dcc00517 	ldw	r19,20(sp)
1000e04c:	dc800417 	ldw	r18,16(sp)
1000e050:	dc400317 	ldw	r17,12(sp)
1000e054:	dc000217 	ldw	r16,8(sp)
1000e058:	dec00704 	addi	sp,sp,28
1000e05c:	f800283a 	ret
1000e060:	4010953a 	slli	r8,r8,20
1000e064:	1a07c83a 	sub	r3,r3,r8
1000e068:	003ff206 	br	1000e034 <__alt_data_end+0xf800e034>

1000e06c <_mprec_log10>:
1000e06c:	defffe04 	addi	sp,sp,-8
1000e070:	dc000015 	stw	r16,0(sp)
1000e074:	dfc00115 	stw	ra,4(sp)
1000e078:	008005c4 	movi	r2,23
1000e07c:	2021883a 	mov	r16,r4
1000e080:	11000d0e 	bge	r2,r4,1000e0b8 <_mprec_log10+0x4c>
1000e084:	0005883a 	mov	r2,zero
1000e088:	00cffc34 	movhi	r3,16368
1000e08c:	843fffc4 	addi	r16,r16,-1
1000e090:	1009883a 	mov	r4,r2
1000e094:	180b883a 	mov	r5,r3
1000e098:	000d883a 	mov	r6,zero
1000e09c:	01d00934 	movhi	r7,16420
1000e0a0:	00068d40 	call	100068d4 <__muldf3>
1000e0a4:	803ff91e 	bne	r16,zero,1000e08c <__alt_data_end+0xf800e08c>
1000e0a8:	dfc00117 	ldw	ra,4(sp)
1000e0ac:	dc000017 	ldw	r16,0(sp)
1000e0b0:	dec00204 	addi	sp,sp,8
1000e0b4:	f800283a 	ret
1000e0b8:	202090fa 	slli	r16,r4,3
1000e0bc:	00840074 	movhi	r2,4097
1000e0c0:	1091f704 	addi	r2,r2,18396
1000e0c4:	1421883a 	add	r16,r2,r16
1000e0c8:	80800017 	ldw	r2,0(r16)
1000e0cc:	80c00117 	ldw	r3,4(r16)
1000e0d0:	dfc00117 	ldw	ra,4(sp)
1000e0d4:	dc000017 	ldw	r16,0(sp)
1000e0d8:	dec00204 	addi	sp,sp,8
1000e0dc:	f800283a 	ret

1000e0e0 <__copybits>:
1000e0e0:	297fffc4 	addi	r5,r5,-1
1000e0e4:	280fd17a 	srai	r7,r5,5
1000e0e8:	30c00417 	ldw	r3,16(r6)
1000e0ec:	30800504 	addi	r2,r6,20
1000e0f0:	39c00044 	addi	r7,r7,1
1000e0f4:	18c7883a 	add	r3,r3,r3
1000e0f8:	39cf883a 	add	r7,r7,r7
1000e0fc:	18c7883a 	add	r3,r3,r3
1000e100:	39cf883a 	add	r7,r7,r7
1000e104:	10c7883a 	add	r3,r2,r3
1000e108:	21cf883a 	add	r7,r4,r7
1000e10c:	10c00d2e 	bgeu	r2,r3,1000e144 <__copybits+0x64>
1000e110:	200b883a 	mov	r5,r4
1000e114:	12000017 	ldw	r8,0(r2)
1000e118:	29400104 	addi	r5,r5,4
1000e11c:	10800104 	addi	r2,r2,4
1000e120:	2a3fff15 	stw	r8,-4(r5)
1000e124:	10fffb36 	bltu	r2,r3,1000e114 <__alt_data_end+0xf800e114>
1000e128:	1985c83a 	sub	r2,r3,r6
1000e12c:	10bffac4 	addi	r2,r2,-21
1000e130:	1004d0ba 	srli	r2,r2,2
1000e134:	10800044 	addi	r2,r2,1
1000e138:	1085883a 	add	r2,r2,r2
1000e13c:	1085883a 	add	r2,r2,r2
1000e140:	2089883a 	add	r4,r4,r2
1000e144:	21c0032e 	bgeu	r4,r7,1000e154 <__copybits+0x74>
1000e148:	20000015 	stw	zero,0(r4)
1000e14c:	21000104 	addi	r4,r4,4
1000e150:	21fffd36 	bltu	r4,r7,1000e148 <__alt_data_end+0xf800e148>
1000e154:	f800283a 	ret

1000e158 <__any_on>:
1000e158:	20c00417 	ldw	r3,16(r4)
1000e15c:	2805d17a 	srai	r2,r5,5
1000e160:	21000504 	addi	r4,r4,20
1000e164:	18800d0e 	bge	r3,r2,1000e19c <__any_on+0x44>
1000e168:	18c7883a 	add	r3,r3,r3
1000e16c:	18c7883a 	add	r3,r3,r3
1000e170:	20c7883a 	add	r3,r4,r3
1000e174:	20c0192e 	bgeu	r4,r3,1000e1dc <__any_on+0x84>
1000e178:	18bfff17 	ldw	r2,-4(r3)
1000e17c:	18ffff04 	addi	r3,r3,-4
1000e180:	1000041e 	bne	r2,zero,1000e194 <__any_on+0x3c>
1000e184:	20c0142e 	bgeu	r4,r3,1000e1d8 <__any_on+0x80>
1000e188:	18ffff04 	addi	r3,r3,-4
1000e18c:	19400017 	ldw	r5,0(r3)
1000e190:	283ffc26 	beq	r5,zero,1000e184 <__alt_data_end+0xf800e184>
1000e194:	00800044 	movi	r2,1
1000e198:	f800283a 	ret
1000e19c:	10c00a0e 	bge	r2,r3,1000e1c8 <__any_on+0x70>
1000e1a0:	1085883a 	add	r2,r2,r2
1000e1a4:	1085883a 	add	r2,r2,r2
1000e1a8:	294007cc 	andi	r5,r5,31
1000e1ac:	2087883a 	add	r3,r4,r2
1000e1b0:	283ff026 	beq	r5,zero,1000e174 <__alt_data_end+0xf800e174>
1000e1b4:	19800017 	ldw	r6,0(r3)
1000e1b8:	3144d83a 	srl	r2,r6,r5
1000e1bc:	114a983a 	sll	r5,r2,r5
1000e1c0:	29bff41e 	bne	r5,r6,1000e194 <__alt_data_end+0xf800e194>
1000e1c4:	003feb06 	br	1000e174 <__alt_data_end+0xf800e174>
1000e1c8:	1085883a 	add	r2,r2,r2
1000e1cc:	1085883a 	add	r2,r2,r2
1000e1d0:	2087883a 	add	r3,r4,r2
1000e1d4:	003fe706 	br	1000e174 <__alt_data_end+0xf800e174>
1000e1d8:	f800283a 	ret
1000e1dc:	0005883a 	mov	r2,zero
1000e1e0:	f800283a 	ret

1000e1e4 <_sbrk_r>:
1000e1e4:	defffd04 	addi	sp,sp,-12
1000e1e8:	dc000015 	stw	r16,0(sp)
1000e1ec:	040400f4 	movhi	r16,4099
1000e1f0:	dc400115 	stw	r17,4(sp)
1000e1f4:	8432c004 	addi	r16,r16,-13568
1000e1f8:	2023883a 	mov	r17,r4
1000e1fc:	2809883a 	mov	r4,r5
1000e200:	dfc00215 	stw	ra,8(sp)
1000e204:	80000015 	stw	zero,0(r16)
1000e208:	00124f80 	call	100124f8 <sbrk>
1000e20c:	00ffffc4 	movi	r3,-1
1000e210:	10c00526 	beq	r2,r3,1000e228 <_sbrk_r+0x44>
1000e214:	dfc00217 	ldw	ra,8(sp)
1000e218:	dc400117 	ldw	r17,4(sp)
1000e21c:	dc000017 	ldw	r16,0(sp)
1000e220:	dec00304 	addi	sp,sp,12
1000e224:	f800283a 	ret
1000e228:	80c00017 	ldw	r3,0(r16)
1000e22c:	183ff926 	beq	r3,zero,1000e214 <__alt_data_end+0xf800e214>
1000e230:	88c00015 	stw	r3,0(r17)
1000e234:	003ff706 	br	1000e214 <__alt_data_end+0xf800e214>

1000e238 <__sread>:
1000e238:	defffe04 	addi	sp,sp,-8
1000e23c:	dc000015 	stw	r16,0(sp)
1000e240:	2821883a 	mov	r16,r5
1000e244:	2940038f 	ldh	r5,14(r5)
1000e248:	dfc00115 	stw	ra,4(sp)
1000e24c:	001058c0 	call	1001058c <_read_r>
1000e250:	10000716 	blt	r2,zero,1000e270 <__sread+0x38>
1000e254:	80c01417 	ldw	r3,80(r16)
1000e258:	1887883a 	add	r3,r3,r2
1000e25c:	80c01415 	stw	r3,80(r16)
1000e260:	dfc00117 	ldw	ra,4(sp)
1000e264:	dc000017 	ldw	r16,0(sp)
1000e268:	dec00204 	addi	sp,sp,8
1000e26c:	f800283a 	ret
1000e270:	80c0030b 	ldhu	r3,12(r16)
1000e274:	18fbffcc 	andi	r3,r3,61439
1000e278:	80c0030d 	sth	r3,12(r16)
1000e27c:	dfc00117 	ldw	ra,4(sp)
1000e280:	dc000017 	ldw	r16,0(sp)
1000e284:	dec00204 	addi	sp,sp,8
1000e288:	f800283a 	ret

1000e28c <__seofread>:
1000e28c:	0005883a 	mov	r2,zero
1000e290:	f800283a 	ret

1000e294 <__swrite>:
1000e294:	2880030b 	ldhu	r2,12(r5)
1000e298:	defffb04 	addi	sp,sp,-20
1000e29c:	dcc00315 	stw	r19,12(sp)
1000e2a0:	dc800215 	stw	r18,8(sp)
1000e2a4:	dc400115 	stw	r17,4(sp)
1000e2a8:	dc000015 	stw	r16,0(sp)
1000e2ac:	dfc00415 	stw	ra,16(sp)
1000e2b0:	10c0400c 	andi	r3,r2,256
1000e2b4:	2821883a 	mov	r16,r5
1000e2b8:	2027883a 	mov	r19,r4
1000e2bc:	3025883a 	mov	r18,r6
1000e2c0:	3823883a 	mov	r17,r7
1000e2c4:	18000526 	beq	r3,zero,1000e2dc <__swrite+0x48>
1000e2c8:	2940038f 	ldh	r5,14(r5)
1000e2cc:	000d883a 	mov	r6,zero
1000e2d0:	01c00084 	movi	r7,2
1000e2d4:	00103d40 	call	100103d4 <_lseek_r>
1000e2d8:	8080030b 	ldhu	r2,12(r16)
1000e2dc:	8140038f 	ldh	r5,14(r16)
1000e2e0:	10bbffcc 	andi	r2,r2,61439
1000e2e4:	9809883a 	mov	r4,r19
1000e2e8:	900d883a 	mov	r6,r18
1000e2ec:	880f883a 	mov	r7,r17
1000e2f0:	8080030d 	sth	r2,12(r16)
1000e2f4:	dfc00417 	ldw	ra,16(sp)
1000e2f8:	dcc00317 	ldw	r19,12(sp)
1000e2fc:	dc800217 	ldw	r18,8(sp)
1000e300:	dc400117 	ldw	r17,4(sp)
1000e304:	dc000017 	ldw	r16,0(sp)
1000e308:	dec00504 	addi	sp,sp,20
1000e30c:	000fa0c1 	jmpi	1000fa0c <_write_r>

1000e310 <__sseek>:
1000e310:	defffe04 	addi	sp,sp,-8
1000e314:	dc000015 	stw	r16,0(sp)
1000e318:	2821883a 	mov	r16,r5
1000e31c:	2940038f 	ldh	r5,14(r5)
1000e320:	dfc00115 	stw	ra,4(sp)
1000e324:	00103d40 	call	100103d4 <_lseek_r>
1000e328:	00ffffc4 	movi	r3,-1
1000e32c:	10c00826 	beq	r2,r3,1000e350 <__sseek+0x40>
1000e330:	80c0030b 	ldhu	r3,12(r16)
1000e334:	80801415 	stw	r2,80(r16)
1000e338:	18c40014 	ori	r3,r3,4096
1000e33c:	80c0030d 	sth	r3,12(r16)
1000e340:	dfc00117 	ldw	ra,4(sp)
1000e344:	dc000017 	ldw	r16,0(sp)
1000e348:	dec00204 	addi	sp,sp,8
1000e34c:	f800283a 	ret
1000e350:	80c0030b 	ldhu	r3,12(r16)
1000e354:	18fbffcc 	andi	r3,r3,61439
1000e358:	80c0030d 	sth	r3,12(r16)
1000e35c:	dfc00117 	ldw	ra,4(sp)
1000e360:	dc000017 	ldw	r16,0(sp)
1000e364:	dec00204 	addi	sp,sp,8
1000e368:	f800283a 	ret

1000e36c <__sclose>:
1000e36c:	2940038f 	ldh	r5,14(r5)
1000e370:	000fa681 	jmpi	1000fa68 <_close_r>

1000e374 <strcmp>:
1000e374:	2144b03a 	or	r2,r4,r5
1000e378:	108000cc 	andi	r2,r2,3
1000e37c:	1000171e 	bne	r2,zero,1000e3dc <strcmp+0x68>
1000e380:	20800017 	ldw	r2,0(r4)
1000e384:	28c00017 	ldw	r3,0(r5)
1000e388:	10c0141e 	bne	r2,r3,1000e3dc <strcmp+0x68>
1000e38c:	027fbff4 	movhi	r9,65279
1000e390:	4a7fbfc4 	addi	r9,r9,-257
1000e394:	0086303a 	nor	r3,zero,r2
1000e398:	02202074 	movhi	r8,32897
1000e39c:	1245883a 	add	r2,r2,r9
1000e3a0:	42202004 	addi	r8,r8,-32640
1000e3a4:	10c4703a 	and	r2,r2,r3
1000e3a8:	1204703a 	and	r2,r2,r8
1000e3ac:	10000226 	beq	r2,zero,1000e3b8 <strcmp+0x44>
1000e3b0:	00001706 	br	1000e410 <strcmp+0x9c>
1000e3b4:	1000161e 	bne	r2,zero,1000e410 <strcmp+0x9c>
1000e3b8:	21000104 	addi	r4,r4,4
1000e3bc:	20c00017 	ldw	r3,0(r4)
1000e3c0:	29400104 	addi	r5,r5,4
1000e3c4:	29800017 	ldw	r6,0(r5)
1000e3c8:	1a4f883a 	add	r7,r3,r9
1000e3cc:	00c4303a 	nor	r2,zero,r3
1000e3d0:	3884703a 	and	r2,r7,r2
1000e3d4:	1204703a 	and	r2,r2,r8
1000e3d8:	19bff626 	beq	r3,r6,1000e3b4 <__alt_data_end+0xf800e3b4>
1000e3dc:	20800007 	ldb	r2,0(r4)
1000e3e0:	1000051e 	bne	r2,zero,1000e3f8 <strcmp+0x84>
1000e3e4:	00000606 	br	1000e400 <strcmp+0x8c>
1000e3e8:	21000044 	addi	r4,r4,1
1000e3ec:	20800007 	ldb	r2,0(r4)
1000e3f0:	29400044 	addi	r5,r5,1
1000e3f4:	10000226 	beq	r2,zero,1000e400 <strcmp+0x8c>
1000e3f8:	28c00007 	ldb	r3,0(r5)
1000e3fc:	10fffa26 	beq	r2,r3,1000e3e8 <__alt_data_end+0xf800e3e8>
1000e400:	20800003 	ldbu	r2,0(r4)
1000e404:	28c00003 	ldbu	r3,0(r5)
1000e408:	10c5c83a 	sub	r2,r2,r3
1000e40c:	f800283a 	ret
1000e410:	0005883a 	mov	r2,zero
1000e414:	f800283a 	ret

1000e418 <strlen>:
1000e418:	208000cc 	andi	r2,r4,3
1000e41c:	10002026 	beq	r2,zero,1000e4a0 <strlen+0x88>
1000e420:	20800007 	ldb	r2,0(r4)
1000e424:	10002026 	beq	r2,zero,1000e4a8 <strlen+0x90>
1000e428:	2005883a 	mov	r2,r4
1000e42c:	00000206 	br	1000e438 <strlen+0x20>
1000e430:	10c00007 	ldb	r3,0(r2)
1000e434:	18001826 	beq	r3,zero,1000e498 <strlen+0x80>
1000e438:	10800044 	addi	r2,r2,1
1000e43c:	10c000cc 	andi	r3,r2,3
1000e440:	183ffb1e 	bne	r3,zero,1000e430 <__alt_data_end+0xf800e430>
1000e444:	10c00017 	ldw	r3,0(r2)
1000e448:	01ffbff4 	movhi	r7,65279
1000e44c:	39ffbfc4 	addi	r7,r7,-257
1000e450:	00ca303a 	nor	r5,zero,r3
1000e454:	01a02074 	movhi	r6,32897
1000e458:	19c7883a 	add	r3,r3,r7
1000e45c:	31a02004 	addi	r6,r6,-32640
1000e460:	1946703a 	and	r3,r3,r5
1000e464:	1986703a 	and	r3,r3,r6
1000e468:	1800091e 	bne	r3,zero,1000e490 <strlen+0x78>
1000e46c:	10800104 	addi	r2,r2,4
1000e470:	10c00017 	ldw	r3,0(r2)
1000e474:	19cb883a 	add	r5,r3,r7
1000e478:	00c6303a 	nor	r3,zero,r3
1000e47c:	28c6703a 	and	r3,r5,r3
1000e480:	1986703a 	and	r3,r3,r6
1000e484:	183ff926 	beq	r3,zero,1000e46c <__alt_data_end+0xf800e46c>
1000e488:	00000106 	br	1000e490 <strlen+0x78>
1000e48c:	10800044 	addi	r2,r2,1
1000e490:	10c00007 	ldb	r3,0(r2)
1000e494:	183ffd1e 	bne	r3,zero,1000e48c <__alt_data_end+0xf800e48c>
1000e498:	1105c83a 	sub	r2,r2,r4
1000e49c:	f800283a 	ret
1000e4a0:	2005883a 	mov	r2,r4
1000e4a4:	003fe706 	br	1000e444 <__alt_data_end+0xf800e444>
1000e4a8:	0005883a 	mov	r2,zero
1000e4ac:	f800283a 	ret

1000e4b0 <__sprint_r.part.0>:
1000e4b0:	28801917 	ldw	r2,100(r5)
1000e4b4:	defff604 	addi	sp,sp,-40
1000e4b8:	dd400515 	stw	r21,20(sp)
1000e4bc:	dcc00315 	stw	r19,12(sp)
1000e4c0:	dfc00915 	stw	ra,36(sp)
1000e4c4:	df000815 	stw	fp,32(sp)
1000e4c8:	ddc00715 	stw	r23,28(sp)
1000e4cc:	dd800615 	stw	r22,24(sp)
1000e4d0:	dd000415 	stw	r20,16(sp)
1000e4d4:	dc800215 	stw	r18,8(sp)
1000e4d8:	dc400115 	stw	r17,4(sp)
1000e4dc:	dc000015 	stw	r16,0(sp)
1000e4e0:	1088000c 	andi	r2,r2,8192
1000e4e4:	2827883a 	mov	r19,r5
1000e4e8:	302b883a 	mov	r21,r6
1000e4ec:	10002d26 	beq	r2,zero,1000e5a4 <__sprint_r.part.0+0xf4>
1000e4f0:	30800217 	ldw	r2,8(r6)
1000e4f4:	35800017 	ldw	r22,0(r6)
1000e4f8:	10002826 	beq	r2,zero,1000e59c <__sprint_r.part.0+0xec>
1000e4fc:	2029883a 	mov	r20,r4
1000e500:	b5c00104 	addi	r23,r22,4
1000e504:	04bfffc4 	movi	r18,-1
1000e508:	bc400017 	ldw	r17,0(r23)
1000e50c:	b4000017 	ldw	r16,0(r22)
1000e510:	0039883a 	mov	fp,zero
1000e514:	8822d0ba 	srli	r17,r17,2
1000e518:	04400316 	blt	zero,r17,1000e528 <__sprint_r.part.0+0x78>
1000e51c:	00001706 	br	1000e57c <__sprint_r.part.0+0xcc>
1000e520:	84000104 	addi	r16,r16,4
1000e524:	8f001526 	beq	r17,fp,1000e57c <__sprint_r.part.0+0xcc>
1000e528:	81400017 	ldw	r5,0(r16)
1000e52c:	a009883a 	mov	r4,r20
1000e530:	980d883a 	mov	r6,r19
1000e534:	000fca80 	call	1000fca8 <_fputwc_r>
1000e538:	e7000044 	addi	fp,fp,1
1000e53c:	14bff81e 	bne	r2,r18,1000e520 <__alt_data_end+0xf800e520>
1000e540:	9005883a 	mov	r2,r18
1000e544:	a8000215 	stw	zero,8(r21)
1000e548:	a8000115 	stw	zero,4(r21)
1000e54c:	dfc00917 	ldw	ra,36(sp)
1000e550:	df000817 	ldw	fp,32(sp)
1000e554:	ddc00717 	ldw	r23,28(sp)
1000e558:	dd800617 	ldw	r22,24(sp)
1000e55c:	dd400517 	ldw	r21,20(sp)
1000e560:	dd000417 	ldw	r20,16(sp)
1000e564:	dcc00317 	ldw	r19,12(sp)
1000e568:	dc800217 	ldw	r18,8(sp)
1000e56c:	dc400117 	ldw	r17,4(sp)
1000e570:	dc000017 	ldw	r16,0(sp)
1000e574:	dec00a04 	addi	sp,sp,40
1000e578:	f800283a 	ret
1000e57c:	a8c00217 	ldw	r3,8(r21)
1000e580:	8c63883a 	add	r17,r17,r17
1000e584:	8c63883a 	add	r17,r17,r17
1000e588:	1c45c83a 	sub	r2,r3,r17
1000e58c:	a8800215 	stw	r2,8(r21)
1000e590:	b5800204 	addi	r22,r22,8
1000e594:	bdc00204 	addi	r23,r23,8
1000e598:	103fdb1e 	bne	r2,zero,1000e508 <__alt_data_end+0xf800e508>
1000e59c:	0005883a 	mov	r2,zero
1000e5a0:	003fe806 	br	1000e544 <__alt_data_end+0xf800e544>
1000e5a4:	000fedc0 	call	1000fedc <__sfvwrite_r>
1000e5a8:	003fe606 	br	1000e544 <__alt_data_end+0xf800e544>

1000e5ac <__sprint_r>:
1000e5ac:	30c00217 	ldw	r3,8(r6)
1000e5b0:	18000126 	beq	r3,zero,1000e5b8 <__sprint_r+0xc>
1000e5b4:	000e4b01 	jmpi	1000e4b0 <__sprint_r.part.0>
1000e5b8:	30000115 	stw	zero,4(r6)
1000e5bc:	0005883a 	mov	r2,zero
1000e5c0:	f800283a 	ret

1000e5c4 <___vfiprintf_internal_r>:
1000e5c4:	defeca04 	addi	sp,sp,-1240
1000e5c8:	dcc12f15 	stw	r19,1212(sp)
1000e5cc:	dfc13515 	stw	ra,1236(sp)
1000e5d0:	df013415 	stw	fp,1232(sp)
1000e5d4:	ddc13315 	stw	r23,1228(sp)
1000e5d8:	dd813215 	stw	r22,1224(sp)
1000e5dc:	dd413115 	stw	r21,1220(sp)
1000e5e0:	dd013015 	stw	r20,1216(sp)
1000e5e4:	dc812e15 	stw	r18,1208(sp)
1000e5e8:	dc412d15 	stw	r17,1204(sp)
1000e5ec:	dc012c15 	stw	r16,1200(sp)
1000e5f0:	d9012115 	stw	r4,1156(sp)
1000e5f4:	d9412015 	stw	r5,1152(sp)
1000e5f8:	d9c12315 	stw	r7,1164(sp)
1000e5fc:	3027883a 	mov	r19,r6
1000e600:	20000226 	beq	r4,zero,1000e60c <___vfiprintf_internal_r+0x48>
1000e604:	20800e17 	ldw	r2,56(r4)
1000e608:	1000f726 	beq	r2,zero,1000e9e8 <___vfiprintf_internal_r+0x424>
1000e60c:	d8812017 	ldw	r2,1152(sp)
1000e610:	10c0030b 	ldhu	r3,12(r2)
1000e614:	1908000c 	andi	r4,r3,8192
1000e618:	1805883a 	mov	r2,r3
1000e61c:	2000081e 	bne	r4,zero,1000e640 <___vfiprintf_internal_r+0x7c>
1000e620:	d9412017 	ldw	r5,1152(sp)
1000e624:	18880014 	ori	r2,r3,8192
1000e628:	00f7ffc4 	movi	r3,-8193
1000e62c:	29001917 	ldw	r4,100(r5)
1000e630:	2880030d 	sth	r2,12(r5)
1000e634:	20c8703a 	and	r4,r4,r3
1000e638:	29001915 	stw	r4,100(r5)
1000e63c:	1007883a 	mov	r3,r2
1000e640:	1100020c 	andi	r4,r2,8
1000e644:	2000a726 	beq	r4,zero,1000e8e4 <___vfiprintf_internal_r+0x320>
1000e648:	d9412017 	ldw	r5,1152(sp)
1000e64c:	29000417 	ldw	r4,16(r5)
1000e650:	2000a426 	beq	r4,zero,1000e8e4 <___vfiprintf_internal_r+0x320>
1000e654:	1080068c 	andi	r2,r2,26
1000e658:	01000284 	movi	r4,10
1000e65c:	1100ab26 	beq	r2,r4,1000e90c <___vfiprintf_internal_r+0x348>
1000e660:	d9010a04 	addi	r4,sp,1064
1000e664:	d94109c4 	addi	r5,sp,1063
1000e668:	07040074 	movhi	fp,4097
1000e66c:	04440074 	movhi	r17,4097
1000e670:	2145c83a 	sub	r2,r4,r5
1000e674:	e7122d04 	addi	fp,fp,18612
1000e678:	8c522904 	addi	r17,r17,18596
1000e67c:	d9011e15 	stw	r4,1144(sp)
1000e680:	d9411f15 	stw	r5,1148(sp)
1000e684:	dec11a15 	stw	sp,1128(sp)
1000e688:	d8011c15 	stw	zero,1136(sp)
1000e68c:	d8011b15 	stw	zero,1132(sp)
1000e690:	d8012715 	stw	zero,1180(sp)
1000e694:	d8012515 	stw	zero,1172(sp)
1000e698:	d811883a 	mov	r8,sp
1000e69c:	d8812815 	stw	r2,1184(sp)
1000e6a0:	982f883a 	mov	r23,r19
1000e6a4:	b8800007 	ldb	r2,0(r23)
1000e6a8:	1003b026 	beq	r2,zero,1000f56c <___vfiprintf_internal_r+0xfa8>
1000e6ac:	01000944 	movi	r4,37
1000e6b0:	1103ae26 	beq	r2,r4,1000f56c <___vfiprintf_internal_r+0xfa8>
1000e6b4:	b805883a 	mov	r2,r23
1000e6b8:	00000106 	br	1000e6c0 <___vfiprintf_internal_r+0xfc>
1000e6bc:	19000326 	beq	r3,r4,1000e6cc <___vfiprintf_internal_r+0x108>
1000e6c0:	10800044 	addi	r2,r2,1
1000e6c4:	10c00007 	ldb	r3,0(r2)
1000e6c8:	183ffc1e 	bne	r3,zero,1000e6bc <__alt_data_end+0xf800e6bc>
1000e6cc:	15e1c83a 	sub	r16,r2,r23
1000e6d0:	1029883a 	mov	r20,r2
1000e6d4:	80001026 	beq	r16,zero,1000e718 <___vfiprintf_internal_r+0x154>
1000e6d8:	d8c11c17 	ldw	r3,1136(sp)
1000e6dc:	d8811b17 	ldw	r2,1132(sp)
1000e6e0:	45c00015 	stw	r23,0(r8)
1000e6e4:	80c7883a 	add	r3,r16,r3
1000e6e8:	10800044 	addi	r2,r2,1
1000e6ec:	44000115 	stw	r16,4(r8)
1000e6f0:	d8c11c15 	stw	r3,1136(sp)
1000e6f4:	d8811b15 	stw	r2,1132(sp)
1000e6f8:	010001c4 	movi	r4,7
1000e6fc:	2080740e 	bge	r4,r2,1000e8d0 <___vfiprintf_internal_r+0x30c>
1000e700:	1803a71e 	bne	r3,zero,1000f5a0 <___vfiprintf_internal_r+0xfdc>
1000e704:	d8c12517 	ldw	r3,1172(sp)
1000e708:	d8011b15 	stw	zero,1132(sp)
1000e70c:	d811883a 	mov	r8,sp
1000e710:	1c07883a 	add	r3,r3,r16
1000e714:	d8c12515 	stw	r3,1172(sp)
1000e718:	a0800007 	ldb	r2,0(r20)
1000e71c:	1002bf26 	beq	r2,zero,1000f21c <___vfiprintf_internal_r+0xc58>
1000e720:	a5c00044 	addi	r23,r20,1
1000e724:	a1800047 	ldb	r6,1(r20)
1000e728:	d8011d85 	stb	zero,1142(sp)
1000e72c:	d8012205 	stb	zero,1160(sp)
1000e730:	043fffc4 	movi	r16,-1
1000e734:	d8012415 	stw	zero,1168(sp)
1000e738:	0025883a 	mov	r18,zero
1000e73c:	05001604 	movi	r20,88
1000e740:	05400244 	movi	r21,9
1000e744:	4027883a 	mov	r19,r8
1000e748:	bdc00044 	addi	r23,r23,1
1000e74c:	30bff804 	addi	r2,r6,-32
1000e750:	a0825636 	bltu	r20,r2,1000f0ac <___vfiprintf_internal_r+0xae8>
1000e754:	100490ba 	slli	r2,r2,2
1000e758:	01040074 	movhi	r4,4097
1000e75c:	2139db04 	addi	r4,r4,-6292
1000e760:	1105883a 	add	r2,r2,r4
1000e764:	10800017 	ldw	r2,0(r2)
1000e768:	1000683a 	jmp	r2
1000e76c:	1000f03c 	xorhi	zero,r2,960
1000e770:	1000f0ac 	andhi	zero,r2,962
1000e774:	1000f0ac 	andhi	zero,r2,962
1000e778:	1000f0a0 	cmpeqi	zero,r2,962
1000e77c:	1000f0ac 	andhi	zero,r2,962
1000e780:	1000f0ac 	andhi	zero,r2,962
1000e784:	1000f0ac 	andhi	zero,r2,962
1000e788:	1000f0ac 	andhi	zero,r2,962
1000e78c:	1000f0ac 	andhi	zero,r2,962
1000e790:	1000f0ac 	andhi	zero,r2,962
1000e794:	1000ee2c 	andhi	zero,r2,952
1000e798:	1000f054 	ori	zero,r2,961
1000e79c:	1000f0ac 	andhi	zero,r2,962
1000e7a0:	1000ea00 	call	11000ea0 <__alt_heap_start+0xfd425c>
1000e7a4:	1000ee50 	cmplti	zero,r2,953
1000e7a8:	1000f0ac 	andhi	zero,r2,962
1000e7ac:	1000ea0c 	andi	zero,r2,936
1000e7b0:	1000ea18 	cmpnei	zero,r2,936
1000e7b4:	1000ea18 	cmpnei	zero,r2,936
1000e7b8:	1000ea18 	cmpnei	zero,r2,936
1000e7bc:	1000ea18 	cmpnei	zero,r2,936
1000e7c0:	1000ea18 	cmpnei	zero,r2,936
1000e7c4:	1000ea18 	cmpnei	zero,r2,936
1000e7c8:	1000ea18 	cmpnei	zero,r2,936
1000e7cc:	1000ea18 	cmpnei	zero,r2,936
1000e7d0:	1000ea18 	cmpnei	zero,r2,936
1000e7d4:	1000f0ac 	andhi	zero,r2,962
1000e7d8:	1000f0ac 	andhi	zero,r2,962
1000e7dc:	1000f0ac 	andhi	zero,r2,962
1000e7e0:	1000f0ac 	andhi	zero,r2,962
1000e7e4:	1000f0ac 	andhi	zero,r2,962
1000e7e8:	1000f0ac 	andhi	zero,r2,962
1000e7ec:	1000f0ac 	andhi	zero,r2,962
1000e7f0:	1000f0ac 	andhi	zero,r2,962
1000e7f4:	1000f0ac 	andhi	zero,r2,962
1000e7f8:	1000f0ac 	andhi	zero,r2,962
1000e7fc:	1000ea58 	cmpnei	zero,r2,937
1000e800:	1000f0ac 	andhi	zero,r2,962
1000e804:	1000f0ac 	andhi	zero,r2,962
1000e808:	1000f0ac 	andhi	zero,r2,962
1000e80c:	1000f0ac 	andhi	zero,r2,962
1000e810:	1000f0ac 	andhi	zero,r2,962
1000e814:	1000f0ac 	andhi	zero,r2,962
1000e818:	1000f0ac 	andhi	zero,r2,962
1000e81c:	1000f0ac 	andhi	zero,r2,962
1000e820:	1000f0ac 	andhi	zero,r2,962
1000e824:	1000f0ac 	andhi	zero,r2,962
1000e828:	1000ed48 	cmpgei	zero,r2,949
1000e82c:	1000f0ac 	andhi	zero,r2,962
1000e830:	1000f0ac 	andhi	zero,r2,962
1000e834:	1000f0ac 	andhi	zero,r2,962
1000e838:	1000f0ac 	andhi	zero,r2,962
1000e83c:	1000f0ac 	andhi	zero,r2,962
1000e840:	1000ed88 	cmpgei	zero,r2,950
1000e844:	1000f0ac 	andhi	zero,r2,962
1000e848:	1000f0ac 	andhi	zero,r2,962
1000e84c:	1000edcc 	andi	zero,r2,951
1000e850:	1000f0ac 	andhi	zero,r2,962
1000e854:	1000f0ac 	andhi	zero,r2,962
1000e858:	1000f0ac 	andhi	zero,r2,962
1000e85c:	1000f0ac 	andhi	zero,r2,962
1000e860:	1000f0ac 	andhi	zero,r2,962
1000e864:	1000f0ac 	andhi	zero,r2,962
1000e868:	1000f0ac 	andhi	zero,r2,962
1000e86c:	1000f0ac 	andhi	zero,r2,962
1000e870:	1000f0ac 	andhi	zero,r2,962
1000e874:	1000f0ac 	andhi	zero,r2,962
1000e878:	1000ed14 	ori	zero,r2,948
1000e87c:	1000f064 	muli	zero,r2,961
1000e880:	1000f0ac 	andhi	zero,r2,962
1000e884:	1000f0ac 	andhi	zero,r2,962
1000e888:	1000f0ac 	andhi	zero,r2,962
1000e88c:	1000eea0 	cmpeqi	zero,r2,954
1000e890:	1000f064 	muli	zero,r2,961
1000e894:	1000f0ac 	andhi	zero,r2,962
1000e898:	1000f0ac 	andhi	zero,r2,962
1000e89c:	1000edb8 	rdprs	zero,r2,950
1000e8a0:	1000f0ac 	andhi	zero,r2,962
1000e8a4:	1000f004 	addi	zero,r2,960
1000e8a8:	1000ef8c 	andi	zero,r2,958
1000e8ac:	1000efc0 	call	11000efc <__alt_heap_start+0xfd42b8>
1000e8b0:	1000eeac 	andhi	zero,r2,954
1000e8b4:	1000f0ac 	andhi	zero,r2,962
1000e8b8:	1000eeb8 	rdprs	zero,r2,954
1000e8bc:	1000f0ac 	andhi	zero,r2,962
1000e8c0:	1000ef14 	ori	zero,r2,956
1000e8c4:	1000f0ac 	andhi	zero,r2,962
1000e8c8:	1000f0ac 	andhi	zero,r2,962
1000e8cc:	1000ef48 	cmpgei	zero,r2,957
1000e8d0:	42000204 	addi	r8,r8,8
1000e8d4:	d8c12517 	ldw	r3,1172(sp)
1000e8d8:	1c07883a 	add	r3,r3,r16
1000e8dc:	d8c12515 	stw	r3,1172(sp)
1000e8e0:	003f8d06 	br	1000e718 <__alt_data_end+0xf800e718>
1000e8e4:	d9012117 	ldw	r4,1156(sp)
1000e8e8:	d9412017 	ldw	r5,1152(sp)
1000e8ec:	0009e080 	call	10009e08 <__swsetup_r>
1000e8f0:	1000301e 	bne	r2,zero,1000e9b4 <___vfiprintf_internal_r+0x3f0>
1000e8f4:	d8812017 	ldw	r2,1152(sp)
1000e8f8:	01000284 	movi	r4,10
1000e8fc:	10c0030b 	ldhu	r3,12(r2)
1000e900:	1805883a 	mov	r2,r3
1000e904:	1080068c 	andi	r2,r2,26
1000e908:	113f551e 	bne	r2,r4,1000e660 <__alt_data_end+0xf800e660>
1000e90c:	d9012017 	ldw	r4,1152(sp)
1000e910:	2080038b 	ldhu	r2,14(r4)
1000e914:	113fffcc 	andi	r4,r2,65535
1000e918:	2120001c 	xori	r4,r4,32768
1000e91c:	21200004 	addi	r4,r4,-32768
1000e920:	203f4f16 	blt	r4,zero,1000e660 <__alt_data_end+0xf800e660>
1000e924:	d9412017 	ldw	r5,1152(sp)
1000e928:	d9012117 	ldw	r4,1156(sp)
1000e92c:	d9c12317 	ldw	r7,1164(sp)
1000e930:	2b001917 	ldw	r12,100(r5)
1000e934:	2ac00717 	ldw	r11,28(r5)
1000e938:	2a800917 	ldw	r10,36(r5)
1000e93c:	02010004 	movi	r8,1024
1000e940:	18ffff4c 	andi	r3,r3,65533
1000e944:	da0b883a 	add	r5,sp,r8
1000e948:	980d883a 	mov	r6,r19
1000e94c:	d8c1030d 	sth	r3,1036(sp)
1000e950:	db011915 	stw	r12,1124(sp)
1000e954:	d881038d 	sth	r2,1038(sp)
1000e958:	dac10715 	stw	r11,1052(sp)
1000e95c:	da810915 	stw	r10,1060(sp)
1000e960:	dec10015 	stw	sp,1024(sp)
1000e964:	dec10415 	stw	sp,1040(sp)
1000e968:	da010215 	stw	r8,1032(sp)
1000e96c:	da010515 	stw	r8,1044(sp)
1000e970:	d8010615 	stw	zero,1048(sp)
1000e974:	000e5c40 	call	1000e5c4 <___vfiprintf_internal_r>
1000e978:	1021883a 	mov	r16,r2
1000e97c:	10000416 	blt	r2,zero,1000e990 <___vfiprintf_internal_r+0x3cc>
1000e980:	d9012117 	ldw	r4,1156(sp)
1000e984:	d9410004 	addi	r5,sp,1024
1000e988:	000b8880 	call	1000b888 <_fflush_r>
1000e98c:	10040f1e 	bne	r2,zero,1000f9cc <___vfiprintf_internal_r+0x1408>
1000e990:	d881030b 	ldhu	r2,1036(sp)
1000e994:	1080100c 	andi	r2,r2,64
1000e998:	10000426 	beq	r2,zero,1000e9ac <___vfiprintf_internal_r+0x3e8>
1000e99c:	d8c12017 	ldw	r3,1152(sp)
1000e9a0:	1880030b 	ldhu	r2,12(r3)
1000e9a4:	10801014 	ori	r2,r2,64
1000e9a8:	1880030d 	sth	r2,12(r3)
1000e9ac:	8005883a 	mov	r2,r16
1000e9b0:	00000106 	br	1000e9b8 <___vfiprintf_internal_r+0x3f4>
1000e9b4:	00bfffc4 	movi	r2,-1
1000e9b8:	dfc13517 	ldw	ra,1236(sp)
1000e9bc:	df013417 	ldw	fp,1232(sp)
1000e9c0:	ddc13317 	ldw	r23,1228(sp)
1000e9c4:	dd813217 	ldw	r22,1224(sp)
1000e9c8:	dd413117 	ldw	r21,1220(sp)
1000e9cc:	dd013017 	ldw	r20,1216(sp)
1000e9d0:	dcc12f17 	ldw	r19,1212(sp)
1000e9d4:	dc812e17 	ldw	r18,1208(sp)
1000e9d8:	dc412d17 	ldw	r17,1204(sp)
1000e9dc:	dc012c17 	ldw	r16,1200(sp)
1000e9e0:	dec13604 	addi	sp,sp,1240
1000e9e4:	f800283a 	ret
1000e9e8:	000be440 	call	1000be44 <__sinit>
1000e9ec:	003f0706 	br	1000e60c <__alt_data_end+0xf800e60c>
1000e9f0:	d8c12417 	ldw	r3,1168(sp)
1000e9f4:	d8812315 	stw	r2,1164(sp)
1000e9f8:	00c7c83a 	sub	r3,zero,r3
1000e9fc:	d8c12415 	stw	r3,1168(sp)
1000ea00:	94800114 	ori	r18,r18,4
1000ea04:	b9800007 	ldb	r6,0(r23)
1000ea08:	003f4f06 	br	1000e748 <__alt_data_end+0xf800e748>
1000ea0c:	94802014 	ori	r18,r18,128
1000ea10:	b9800007 	ldb	r6,0(r23)
1000ea14:	003f4c06 	br	1000e748 <__alt_data_end+0xf800e748>
1000ea18:	dc012615 	stw	r16,1176(sp)
1000ea1c:	d8012415 	stw	zero,1168(sp)
1000ea20:	35bff404 	addi	r22,r6,-48
1000ea24:	0009883a 	mov	r4,zero
1000ea28:	b821883a 	mov	r16,r23
1000ea2c:	01400284 	movi	r5,10
1000ea30:	0007bcc0 	call	10007bcc <__mulsi3>
1000ea34:	81800007 	ldb	r6,0(r16)
1000ea38:	1589883a 	add	r4,r2,r22
1000ea3c:	bdc00044 	addi	r23,r23,1
1000ea40:	35bff404 	addi	r22,r6,-48
1000ea44:	b821883a 	mov	r16,r23
1000ea48:	adbff82e 	bgeu	r21,r22,1000ea2c <__alt_data_end+0xf800ea2c>
1000ea4c:	d9012415 	stw	r4,1168(sp)
1000ea50:	dc012617 	ldw	r16,1176(sp)
1000ea54:	003f3d06 	br	1000e74c <__alt_data_end+0xf800e74c>
1000ea58:	d8c12203 	ldbu	r3,1160(sp)
1000ea5c:	94800414 	ori	r18,r18,16
1000ea60:	9080080c 	andi	r2,r18,32
1000ea64:	d8c11d85 	stb	r3,1142(sp)
1000ea68:	9811883a 	mov	r8,r19
1000ea6c:	d8c12317 	ldw	r3,1164(sp)
1000ea70:	10018226 	beq	r2,zero,1000f07c <___vfiprintf_internal_r+0xab8>
1000ea74:	d9012317 	ldw	r4,1164(sp)
1000ea78:	18800117 	ldw	r2,4(r3)
1000ea7c:	1cc00017 	ldw	r19,0(r3)
1000ea80:	21000204 	addi	r4,r4,8
1000ea84:	d9012315 	stw	r4,1164(sp)
1000ea88:	102b883a 	mov	r21,r2
1000ea8c:	10030016 	blt	r2,zero,1000f690 <___vfiprintf_internal_r+0x10cc>
1000ea90:	dd811d83 	ldbu	r22,1142(sp)
1000ea94:	8029883a 	mov	r20,r16
1000ea98:	00800044 	movi	r2,1
1000ea9c:	9d46b03a 	or	r3,r19,r21
1000eaa0:	80000216 	blt	r16,zero,1000eaac <___vfiprintf_internal_r+0x4e8>
1000eaa4:	013fdfc4 	movi	r4,-129
1000eaa8:	9124703a 	and	r18,r18,r4
1000eaac:	1801b41e 	bne	r3,zero,1000f180 <___vfiprintf_internal_r+0xbbc>
1000eab0:	80028126 	beq	r16,zero,1000f4b8 <___vfiprintf_internal_r+0xef4>
1000eab4:	10803fcc 	andi	r2,r2,255
1000eab8:	00c00044 	movi	r3,1
1000eabc:	10c1d126 	beq	r2,r3,1000f204 <___vfiprintf_internal_r+0xc40>
1000eac0:	00c00084 	movi	r3,2
1000eac4:	10c28626 	beq	r2,r3,1000f4e0 <___vfiprintf_internal_r+0xf1c>
1000eac8:	d8c10a04 	addi	r3,sp,1064
1000eacc:	9808d0fa 	srli	r4,r19,3
1000ead0:	a80a977a 	slli	r5,r21,29
1000ead4:	a82ad0fa 	srli	r21,r21,3
1000ead8:	9cc001cc 	andi	r19,r19,7
1000eadc:	98800c04 	addi	r2,r19,48
1000eae0:	18ffffc4 	addi	r3,r3,-1
1000eae4:	2926b03a 	or	r19,r5,r4
1000eae8:	18800005 	stb	r2,0(r3)
1000eaec:	9d48b03a 	or	r4,r19,r21
1000eaf0:	203ff61e 	bne	r4,zero,1000eacc <__alt_data_end+0xf800eacc>
1000eaf4:	9100004c 	andi	r4,r18,1
1000eaf8:	d8c12215 	stw	r3,1160(sp)
1000eafc:	2002b31e 	bne	r4,zero,1000f5cc <___vfiprintf_internal_r+0x1008>
1000eb00:	d9411e17 	ldw	r5,1144(sp)
1000eb04:	28e9c83a 	sub	r20,r5,r3
1000eb08:	a02b883a 	mov	r21,r20
1000eb0c:	a400010e 	bge	r20,r16,1000eb14 <___vfiprintf_internal_r+0x550>
1000eb10:	802b883a 	mov	r21,r16
1000eb14:	b5803fcc 	andi	r22,r22,255
1000eb18:	b580201c 	xori	r22,r22,128
1000eb1c:	b5bfe004 	addi	r22,r22,-128
1000eb20:	b0000126 	beq	r22,zero,1000eb28 <___vfiprintf_internal_r+0x564>
1000eb24:	ad400044 	addi	r21,r21,1
1000eb28:	9280008c 	andi	r10,r18,2
1000eb2c:	50000126 	beq	r10,zero,1000eb34 <___vfiprintf_internal_r+0x570>
1000eb30:	ad400084 	addi	r21,r21,2
1000eb34:	9580210c 	andi	r22,r18,132
1000eb38:	b001751e 	bne	r22,zero,1000f110 <___vfiprintf_internal_r+0xb4c>
1000eb3c:	d9012417 	ldw	r4,1168(sp)
1000eb40:	2567c83a 	sub	r19,r4,r21
1000eb44:	04c1720e 	bge	zero,r19,1000f110 <___vfiprintf_internal_r+0xb4c>
1000eb48:	01c00404 	movi	r7,16
1000eb4c:	d8c11c17 	ldw	r3,1136(sp)
1000eb50:	3cc36b0e 	bge	r7,r19,1000f900 <___vfiprintf_internal_r+0x133c>
1000eb54:	00840074 	movhi	r2,4097
1000eb58:	10922d04 	addi	r2,r2,18612
1000eb5c:	dc012915 	stw	r16,1188(sp)
1000eb60:	d9011b17 	ldw	r4,1132(sp)
1000eb64:	9821883a 	mov	r16,r19
1000eb68:	d8812615 	stw	r2,1176(sp)
1000eb6c:	030001c4 	movi	r12,7
1000eb70:	5027883a 	mov	r19,r10
1000eb74:	00000506 	br	1000eb8c <___vfiprintf_internal_r+0x5c8>
1000eb78:	21400084 	addi	r5,r4,2
1000eb7c:	42000204 	addi	r8,r8,8
1000eb80:	1009883a 	mov	r4,r2
1000eb84:	843ffc04 	addi	r16,r16,-16
1000eb88:	3c000d0e 	bge	r7,r16,1000ebc0 <___vfiprintf_internal_r+0x5fc>
1000eb8c:	18c00404 	addi	r3,r3,16
1000eb90:	20800044 	addi	r2,r4,1
1000eb94:	47000015 	stw	fp,0(r8)
1000eb98:	41c00115 	stw	r7,4(r8)
1000eb9c:	d8c11c15 	stw	r3,1136(sp)
1000eba0:	d8811b15 	stw	r2,1132(sp)
1000eba4:	60bff40e 	bge	r12,r2,1000eb78 <__alt_data_end+0xf800eb78>
1000eba8:	18014b1e 	bne	r3,zero,1000f0d8 <___vfiprintf_internal_r+0xb14>
1000ebac:	843ffc04 	addi	r16,r16,-16
1000ebb0:	0009883a 	mov	r4,zero
1000ebb4:	01400044 	movi	r5,1
1000ebb8:	d811883a 	mov	r8,sp
1000ebbc:	3c3ff316 	blt	r7,r16,1000eb8c <__alt_data_end+0xf800eb8c>
1000ebc0:	9815883a 	mov	r10,r19
1000ebc4:	8027883a 	mov	r19,r16
1000ebc8:	dc012917 	ldw	r16,1188(sp)
1000ebcc:	d9012617 	ldw	r4,1176(sp)
1000ebd0:	98c7883a 	add	r3,r19,r3
1000ebd4:	44c00115 	stw	r19,4(r8)
1000ebd8:	41000015 	stw	r4,0(r8)
1000ebdc:	d8c11c15 	stw	r3,1136(sp)
1000ebe0:	d9411b15 	stw	r5,1132(sp)
1000ebe4:	008001c4 	movi	r2,7
1000ebe8:	11425116 	blt	r2,r5,1000f530 <___vfiprintf_internal_r+0xf6c>
1000ebec:	d9011d87 	ldb	r4,1142(sp)
1000ebf0:	42000204 	addi	r8,r8,8
1000ebf4:	28800044 	addi	r2,r5,1
1000ebf8:	20014a1e 	bne	r4,zero,1000f124 <___vfiprintf_internal_r+0xb60>
1000ebfc:	50000c26 	beq	r10,zero,1000ec30 <___vfiprintf_internal_r+0x66c>
1000ec00:	d9011d04 	addi	r4,sp,1140
1000ec04:	18c00084 	addi	r3,r3,2
1000ec08:	41000015 	stw	r4,0(r8)
1000ec0c:	01000084 	movi	r4,2
1000ec10:	41000115 	stw	r4,4(r8)
1000ec14:	d8c11c15 	stw	r3,1136(sp)
1000ec18:	d8811b15 	stw	r2,1132(sp)
1000ec1c:	010001c4 	movi	r4,7
1000ec20:	20822016 	blt	r4,r2,1000f4a4 <___vfiprintf_internal_r+0xee0>
1000ec24:	100b883a 	mov	r5,r2
1000ec28:	42000204 	addi	r8,r8,8
1000ec2c:	10800044 	addi	r2,r2,1
1000ec30:	01002004 	movi	r4,128
1000ec34:	b101de26 	beq	r22,r4,1000f3b0 <___vfiprintf_internal_r+0xdec>
1000ec38:	8521c83a 	sub	r16,r16,r20
1000ec3c:	0400230e 	bge	zero,r16,1000eccc <___vfiprintf_internal_r+0x708>
1000ec40:	04c00404 	movi	r19,16
1000ec44:	9c030d0e 	bge	r19,r16,1000f87c <___vfiprintf_internal_r+0x12b8>
1000ec48:	00840074 	movhi	r2,4097
1000ec4c:	10922904 	addi	r2,r2,18596
1000ec50:	d8812615 	stw	r2,1176(sp)
1000ec54:	058001c4 	movi	r22,7
1000ec58:	00000506 	br	1000ec70 <___vfiprintf_internal_r+0x6ac>
1000ec5c:	28800084 	addi	r2,r5,2
1000ec60:	42000204 	addi	r8,r8,8
1000ec64:	200b883a 	mov	r5,r4
1000ec68:	843ffc04 	addi	r16,r16,-16
1000ec6c:	9c000d0e 	bge	r19,r16,1000eca4 <___vfiprintf_internal_r+0x6e0>
1000ec70:	18c00404 	addi	r3,r3,16
1000ec74:	29000044 	addi	r4,r5,1
1000ec78:	44400015 	stw	r17,0(r8)
1000ec7c:	44c00115 	stw	r19,4(r8)
1000ec80:	d8c11c15 	stw	r3,1136(sp)
1000ec84:	d9011b15 	stw	r4,1132(sp)
1000ec88:	b13ff40e 	bge	r22,r4,1000ec5c <__alt_data_end+0xf800ec5c>
1000ec8c:	1801321e 	bne	r3,zero,1000f158 <___vfiprintf_internal_r+0xb94>
1000ec90:	843ffc04 	addi	r16,r16,-16
1000ec94:	000b883a 	mov	r5,zero
1000ec98:	00800044 	movi	r2,1
1000ec9c:	d811883a 	mov	r8,sp
1000eca0:	9c3ff316 	blt	r19,r16,1000ec70 <__alt_data_end+0xf800ec70>
1000eca4:	d9012617 	ldw	r4,1176(sp)
1000eca8:	1c07883a 	add	r3,r3,r16
1000ecac:	44000115 	stw	r16,4(r8)
1000ecb0:	41000015 	stw	r4,0(r8)
1000ecb4:	d8c11c15 	stw	r3,1136(sp)
1000ecb8:	d8811b15 	stw	r2,1132(sp)
1000ecbc:	010001c4 	movi	r4,7
1000ecc0:	20816216 	blt	r4,r2,1000f24c <___vfiprintf_internal_r+0xc88>
1000ecc4:	42000204 	addi	r8,r8,8
1000ecc8:	10800044 	addi	r2,r2,1
1000eccc:	d9012217 	ldw	r4,1160(sp)
1000ecd0:	1d07883a 	add	r3,r3,r20
1000ecd4:	45000115 	stw	r20,4(r8)
1000ecd8:	41000015 	stw	r4,0(r8)
1000ecdc:	d8c11c15 	stw	r3,1136(sp)
1000ece0:	d8811b15 	stw	r2,1132(sp)
1000ece4:	010001c4 	movi	r4,7
1000ece8:	2081610e 	bge	r4,r2,1000f270 <___vfiprintf_internal_r+0xcac>
1000ecec:	1802211e 	bne	r3,zero,1000f574 <___vfiprintf_internal_r+0xfb0>
1000ecf0:	d8011b15 	stw	zero,1132(sp)
1000ecf4:	9480010c 	andi	r18,r18,4
1000ecf8:	9002171e 	bne	r18,zero,1000f558 <___vfiprintf_internal_r+0xf94>
1000ecfc:	d9412417 	ldw	r5,1168(sp)
1000ed00:	a9433716 	blt	r21,r5,1000f9e0 <___vfiprintf_internal_r+0x141c>
1000ed04:	d8812517 	ldw	r2,1172(sp)
1000ed08:	1545883a 	add	r2,r2,r21
1000ed0c:	d8812515 	stw	r2,1172(sp)
1000ed10:	00019a06 	br	1000f37c <___vfiprintf_internal_r+0xdb8>
1000ed14:	d8c12317 	ldw	r3,1164(sp)
1000ed18:	05400044 	movi	r21,1
1000ed1c:	9811883a 	mov	r8,r19
1000ed20:	18800017 	ldw	r2,0(r3)
1000ed24:	18c00104 	addi	r3,r3,4
1000ed28:	d8c12315 	stw	r3,1164(sp)
1000ed2c:	d8c10004 	addi	r3,sp,1024
1000ed30:	d8011d85 	stb	zero,1142(sp)
1000ed34:	d8810005 	stb	r2,1024(sp)
1000ed38:	a829883a 	mov	r20,r21
1000ed3c:	d8c12215 	stw	r3,1160(sp)
1000ed40:	0021883a 	mov	r16,zero
1000ed44:	003f7806 	br	1000eb28 <__alt_data_end+0xf800eb28>
1000ed48:	94800414 	ori	r18,r18,16
1000ed4c:	9080080c 	andi	r2,r18,32
1000ed50:	9811883a 	mov	r8,r19
1000ed54:	10009026 	beq	r2,zero,1000ef98 <___vfiprintf_internal_r+0x9d4>
1000ed58:	d8812317 	ldw	r2,1164(sp)
1000ed5c:	d8c12317 	ldw	r3,1164(sp)
1000ed60:	14c00017 	ldw	r19,0(r2)
1000ed64:	15400117 	ldw	r21,4(r2)
1000ed68:	18c00204 	addi	r3,r3,8
1000ed6c:	d8c12315 	stw	r3,1164(sp)
1000ed70:	0005883a 	mov	r2,zero
1000ed74:	9d46b03a 	or	r3,r19,r21
1000ed78:	d8011d85 	stb	zero,1142(sp)
1000ed7c:	8029883a 	mov	r20,r16
1000ed80:	002d883a 	mov	r22,zero
1000ed84:	003f4606 	br	1000eaa0 <__alt_data_end+0xf800eaa0>
1000ed88:	94800414 	ori	r18,r18,16
1000ed8c:	9080080c 	andi	r2,r18,32
1000ed90:	9811883a 	mov	r8,r19
1000ed94:	10006226 	beq	r2,zero,1000ef20 <___vfiprintf_internal_r+0x95c>
1000ed98:	d9012317 	ldw	r4,1164(sp)
1000ed9c:	00800044 	movi	r2,1
1000eda0:	24c00017 	ldw	r19,0(r4)
1000eda4:	25400117 	ldw	r21,4(r4)
1000eda8:	21000204 	addi	r4,r4,8
1000edac:	d9012315 	stw	r4,1164(sp)
1000edb0:	9d46b03a 	or	r3,r19,r21
1000edb4:	003ff006 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000edb8:	b9800007 	ldb	r6,0(r23)
1000edbc:	00801b04 	movi	r2,108
1000edc0:	3082b226 	beq	r6,r2,1000f88c <___vfiprintf_internal_r+0x12c8>
1000edc4:	94800414 	ori	r18,r18,16
1000edc8:	003e5f06 	br	1000e748 <__alt_data_end+0xf800e748>
1000edcc:	d8c12203 	ldbu	r3,1160(sp)
1000edd0:	01040074 	movhi	r4,4097
1000edd4:	2111c404 	addi	r4,r4,18192
1000edd8:	d8c11d85 	stb	r3,1142(sp)
1000eddc:	d9012715 	stw	r4,1180(sp)
1000ede0:	90c0080c 	andi	r3,r18,32
1000ede4:	9811883a 	mov	r8,r19
1000ede8:	d8812317 	ldw	r2,1164(sp)
1000edec:	18005f26 	beq	r3,zero,1000ef6c <___vfiprintf_internal_r+0x9a8>
1000edf0:	d9012317 	ldw	r4,1164(sp)
1000edf4:	14c00017 	ldw	r19,0(r2)
1000edf8:	15400117 	ldw	r21,4(r2)
1000edfc:	21000204 	addi	r4,r4,8
1000ee00:	d9012315 	stw	r4,1164(sp)
1000ee04:	9080004c 	andi	r2,r18,1
1000ee08:	1001e226 	beq	r2,zero,1000f594 <___vfiprintf_internal_r+0xfd0>
1000ee0c:	9d46b03a 	or	r3,r19,r21
1000ee10:	18024e26 	beq	r3,zero,1000f74c <___vfiprintf_internal_r+0x1188>
1000ee14:	00800c04 	movi	r2,48
1000ee18:	d8811d05 	stb	r2,1140(sp)
1000ee1c:	d9811d45 	stb	r6,1141(sp)
1000ee20:	94800094 	ori	r18,r18,2
1000ee24:	00800084 	movi	r2,2
1000ee28:	003fd306 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000ee2c:	d9012317 	ldw	r4,1164(sp)
1000ee30:	d9412317 	ldw	r5,1164(sp)
1000ee34:	21000017 	ldw	r4,0(r4)
1000ee38:	28800104 	addi	r2,r5,4
1000ee3c:	d9012415 	stw	r4,1168(sp)
1000ee40:	203eeb16 	blt	r4,zero,1000e9f0 <__alt_data_end+0xf800e9f0>
1000ee44:	d8812315 	stw	r2,1164(sp)
1000ee48:	b9800007 	ldb	r6,0(r23)
1000ee4c:	003e3e06 	br	1000e748 <__alt_data_end+0xf800e748>
1000ee50:	b9800007 	ldb	r6,0(r23)
1000ee54:	01000a84 	movi	r4,42
1000ee58:	b8800044 	addi	r2,r23,1
1000ee5c:	3102d226 	beq	r6,r4,1000f9a8 <___vfiprintf_internal_r+0x13e4>
1000ee60:	35bff404 	addi	r22,r6,-48
1000ee64:	102f883a 	mov	r23,r2
1000ee68:	0021883a 	mov	r16,zero
1000ee6c:	adbe3736 	bltu	r21,r22,1000e74c <__alt_data_end+0xf800e74c>
1000ee70:	0009883a 	mov	r4,zero
1000ee74:	01400284 	movi	r5,10
1000ee78:	0007bcc0 	call	10007bcc <__mulsi3>
1000ee7c:	b9800007 	ldb	r6,0(r23)
1000ee80:	b089883a 	add	r4,r22,r2
1000ee84:	bdc00044 	addi	r23,r23,1
1000ee88:	35bff404 	addi	r22,r6,-48
1000ee8c:	adbff92e 	bgeu	r21,r22,1000ee74 <__alt_data_end+0xf800ee74>
1000ee90:	2021883a 	mov	r16,r4
1000ee94:	203e2d0e 	bge	r4,zero,1000e74c <__alt_data_end+0xf800e74c>
1000ee98:	043fffc4 	movi	r16,-1
1000ee9c:	003e2b06 	br	1000e74c <__alt_data_end+0xf800e74c>
1000eea0:	94801014 	ori	r18,r18,64
1000eea4:	b9800007 	ldb	r6,0(r23)
1000eea8:	003e2706 	br	1000e748 <__alt_data_end+0xf800e748>
1000eeac:	94800814 	ori	r18,r18,32
1000eeb0:	b9800007 	ldb	r6,0(r23)
1000eeb4:	003e2406 	br	1000e748 <__alt_data_end+0xf800e748>
1000eeb8:	d9412317 	ldw	r5,1164(sp)
1000eebc:	d8812317 	ldw	r2,1164(sp)
1000eec0:	d8011d85 	stb	zero,1142(sp)
1000eec4:	29400017 	ldw	r5,0(r5)
1000eec8:	9811883a 	mov	r8,r19
1000eecc:	14c00104 	addi	r19,r2,4
1000eed0:	d9412215 	stw	r5,1160(sp)
1000eed4:	28029026 	beq	r5,zero,1000f918 <___vfiprintf_internal_r+0x1354>
1000eed8:	d9012217 	ldw	r4,1160(sp)
1000eedc:	80027616 	blt	r16,zero,1000f8b8 <___vfiprintf_internal_r+0x12f4>
1000eee0:	000b883a 	mov	r5,zero
1000eee4:	800d883a 	mov	r6,r16
1000eee8:	da012a15 	stw	r8,1192(sp)
1000eeec:	000ce580 	call	1000ce58 <memchr>
1000eef0:	da012a17 	ldw	r8,1192(sp)
1000eef4:	1002a026 	beq	r2,zero,1000f978 <___vfiprintf_internal_r+0x13b4>
1000eef8:	d8c12217 	ldw	r3,1160(sp)
1000eefc:	10e9c83a 	sub	r20,r2,r3
1000ef00:	85023816 	blt	r16,r20,1000f7e4 <___vfiprintf_internal_r+0x1220>
1000ef04:	dd811d83 	ldbu	r22,1142(sp)
1000ef08:	dcc12315 	stw	r19,1164(sp)
1000ef0c:	0021883a 	mov	r16,zero
1000ef10:	003efd06 	br	1000eb08 <__alt_data_end+0xf800eb08>
1000ef14:	9080080c 	andi	r2,r18,32
1000ef18:	9811883a 	mov	r8,r19
1000ef1c:	103f9e1e 	bne	r2,zero,1000ed98 <__alt_data_end+0xf800ed98>
1000ef20:	9080040c 	andi	r2,r18,16
1000ef24:	10021726 	beq	r2,zero,1000f784 <___vfiprintf_internal_r+0x11c0>
1000ef28:	d9412317 	ldw	r5,1164(sp)
1000ef2c:	002b883a 	mov	r21,zero
1000ef30:	00800044 	movi	r2,1
1000ef34:	2cc00017 	ldw	r19,0(r5)
1000ef38:	29400104 	addi	r5,r5,4
1000ef3c:	d9412315 	stw	r5,1164(sp)
1000ef40:	9807883a 	mov	r3,r19
1000ef44:	003f8c06 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000ef48:	d8c12203 	ldbu	r3,1160(sp)
1000ef4c:	01040074 	movhi	r4,4097
1000ef50:	2111c904 	addi	r4,r4,18212
1000ef54:	d8c11d85 	stb	r3,1142(sp)
1000ef58:	d9012715 	stw	r4,1180(sp)
1000ef5c:	90c0080c 	andi	r3,r18,32
1000ef60:	9811883a 	mov	r8,r19
1000ef64:	d8812317 	ldw	r2,1164(sp)
1000ef68:	183fa11e 	bne	r3,zero,1000edf0 <__alt_data_end+0xf800edf0>
1000ef6c:	90c0040c 	andi	r3,r18,16
1000ef70:	1801e526 	beq	r3,zero,1000f708 <___vfiprintf_internal_r+0x1144>
1000ef74:	d9412317 	ldw	r5,1164(sp)
1000ef78:	14c00017 	ldw	r19,0(r2)
1000ef7c:	002b883a 	mov	r21,zero
1000ef80:	29400104 	addi	r5,r5,4
1000ef84:	d9412315 	stw	r5,1164(sp)
1000ef88:	003f9e06 	br	1000ee04 <__alt_data_end+0xf800ee04>
1000ef8c:	9080080c 	andi	r2,r18,32
1000ef90:	9811883a 	mov	r8,r19
1000ef94:	103f701e 	bne	r2,zero,1000ed58 <__alt_data_end+0xf800ed58>
1000ef98:	9080040c 	andi	r2,r18,16
1000ef9c:	1001ef26 	beq	r2,zero,1000f75c <___vfiprintf_internal_r+0x1198>
1000efa0:	d9012317 	ldw	r4,1164(sp)
1000efa4:	002b883a 	mov	r21,zero
1000efa8:	0005883a 	mov	r2,zero
1000efac:	24c00017 	ldw	r19,0(r4)
1000efb0:	21000104 	addi	r4,r4,4
1000efb4:	d9012315 	stw	r4,1164(sp)
1000efb8:	9807883a 	mov	r3,r19
1000efbc:	003f6e06 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000efc0:	d8c12317 	ldw	r3,1164(sp)
1000efc4:	9811883a 	mov	r8,r19
1000efc8:	00800c04 	movi	r2,48
1000efcc:	1cc00017 	ldw	r19,0(r3)
1000efd0:	01040074 	movhi	r4,4097
1000efd4:	18c00104 	addi	r3,r3,4
1000efd8:	d8811d05 	stb	r2,1140(sp)
1000efdc:	2111c904 	addi	r4,r4,18212
1000efe0:	00801e04 	movi	r2,120
1000efe4:	d8811d45 	stb	r2,1141(sp)
1000efe8:	d8c12315 	stw	r3,1164(sp)
1000efec:	002b883a 	mov	r21,zero
1000eff0:	94800094 	ori	r18,r18,2
1000eff4:	d9012715 	stw	r4,1180(sp)
1000eff8:	00800084 	movi	r2,2
1000effc:	9807883a 	mov	r3,r19
1000f000:	003f5d06 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f004:	d8c12203 	ldbu	r3,1160(sp)
1000f008:	9080080c 	andi	r2,r18,32
1000f00c:	9811883a 	mov	r8,r19
1000f010:	d8c11d85 	stb	r3,1142(sp)
1000f014:	1001b126 	beq	r2,zero,1000f6dc <___vfiprintf_internal_r+0x1118>
1000f018:	d9012317 	ldw	r4,1164(sp)
1000f01c:	d9412517 	ldw	r5,1172(sp)
1000f020:	20800017 	ldw	r2,0(r4)
1000f024:	2807d7fa 	srai	r3,r5,31
1000f028:	21000104 	addi	r4,r4,4
1000f02c:	d9012315 	stw	r4,1164(sp)
1000f030:	11400015 	stw	r5,0(r2)
1000f034:	10c00115 	stw	r3,4(r2)
1000f038:	003d9a06 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000f03c:	d8812207 	ldb	r2,1160(sp)
1000f040:	1001c41e 	bne	r2,zero,1000f754 <___vfiprintf_internal_r+0x1190>
1000f044:	00c00804 	movi	r3,32
1000f048:	d8c12205 	stb	r3,1160(sp)
1000f04c:	b9800007 	ldb	r6,0(r23)
1000f050:	003dbd06 	br	1000e748 <__alt_data_end+0xf800e748>
1000f054:	00c00ac4 	movi	r3,43
1000f058:	d8c12205 	stb	r3,1160(sp)
1000f05c:	b9800007 	ldb	r6,0(r23)
1000f060:	003db906 	br	1000e748 <__alt_data_end+0xf800e748>
1000f064:	d8c12203 	ldbu	r3,1160(sp)
1000f068:	9080080c 	andi	r2,r18,32
1000f06c:	9811883a 	mov	r8,r19
1000f070:	d8c11d85 	stb	r3,1142(sp)
1000f074:	d8c12317 	ldw	r3,1164(sp)
1000f078:	103e7e1e 	bne	r2,zero,1000ea74 <__alt_data_end+0xf800ea74>
1000f07c:	9080040c 	andi	r2,r18,16
1000f080:	1001a926 	beq	r2,zero,1000f728 <___vfiprintf_internal_r+0x1164>
1000f084:	1cc00017 	ldw	r19,0(r3)
1000f088:	d9412317 	ldw	r5,1164(sp)
1000f08c:	982bd7fa 	srai	r21,r19,31
1000f090:	29400104 	addi	r5,r5,4
1000f094:	d9412315 	stw	r5,1164(sp)
1000f098:	a805883a 	mov	r2,r21
1000f09c:	003e7b06 	br	1000ea8c <__alt_data_end+0xf800ea8c>
1000f0a0:	94800054 	ori	r18,r18,1
1000f0a4:	b9800007 	ldb	r6,0(r23)
1000f0a8:	003da706 	br	1000e748 <__alt_data_end+0xf800e748>
1000f0ac:	d8c12203 	ldbu	r3,1160(sp)
1000f0b0:	9811883a 	mov	r8,r19
1000f0b4:	d8c11d85 	stb	r3,1142(sp)
1000f0b8:	30005826 	beq	r6,zero,1000f21c <___vfiprintf_internal_r+0xc58>
1000f0bc:	05400044 	movi	r21,1
1000f0c0:	d8c10004 	addi	r3,sp,1024
1000f0c4:	d9810005 	stb	r6,1024(sp)
1000f0c8:	d8011d85 	stb	zero,1142(sp)
1000f0cc:	a829883a 	mov	r20,r21
1000f0d0:	d8c12215 	stw	r3,1160(sp)
1000f0d4:	003f1a06 	br	1000ed40 <__alt_data_end+0xf800ed40>
1000f0d8:	d9012117 	ldw	r4,1156(sp)
1000f0dc:	d9412017 	ldw	r5,1152(sp)
1000f0e0:	d9811a04 	addi	r6,sp,1128
1000f0e4:	d9c12a15 	stw	r7,1192(sp)
1000f0e8:	db012b15 	stw	r12,1196(sp)
1000f0ec:	000e4b00 	call	1000e4b0 <__sprint_r.part.0>
1000f0f0:	d9c12a17 	ldw	r7,1192(sp)
1000f0f4:	db012b17 	ldw	r12,1196(sp)
1000f0f8:	10004e1e 	bne	r2,zero,1000f234 <___vfiprintf_internal_r+0xc70>
1000f0fc:	d9011b17 	ldw	r4,1132(sp)
1000f100:	d8c11c17 	ldw	r3,1136(sp)
1000f104:	d811883a 	mov	r8,sp
1000f108:	21400044 	addi	r5,r4,1
1000f10c:	003e9d06 	br	1000eb84 <__alt_data_end+0xf800eb84>
1000f110:	d9411b17 	ldw	r5,1132(sp)
1000f114:	d8c11c17 	ldw	r3,1136(sp)
1000f118:	28800044 	addi	r2,r5,1
1000f11c:	d9011d87 	ldb	r4,1142(sp)
1000f120:	203eb626 	beq	r4,zero,1000ebfc <__alt_data_end+0xf800ebfc>
1000f124:	01000044 	movi	r4,1
1000f128:	d9411d84 	addi	r5,sp,1142
1000f12c:	1907883a 	add	r3,r3,r4
1000f130:	41400015 	stw	r5,0(r8)
1000f134:	41000115 	stw	r4,4(r8)
1000f138:	d8c11c15 	stw	r3,1136(sp)
1000f13c:	d8811b15 	stw	r2,1132(sp)
1000f140:	014001c4 	movi	r5,7
1000f144:	2880ce16 	blt	r5,r2,1000f480 <___vfiprintf_internal_r+0xebc>
1000f148:	100b883a 	mov	r5,r2
1000f14c:	42000204 	addi	r8,r8,8
1000f150:	10800044 	addi	r2,r2,1
1000f154:	003ea906 	br	1000ebfc <__alt_data_end+0xf800ebfc>
1000f158:	d9012117 	ldw	r4,1156(sp)
1000f15c:	d9412017 	ldw	r5,1152(sp)
1000f160:	d9811a04 	addi	r6,sp,1128
1000f164:	000e4b00 	call	1000e4b0 <__sprint_r.part.0>
1000f168:	1000321e 	bne	r2,zero,1000f234 <___vfiprintf_internal_r+0xc70>
1000f16c:	d9411b17 	ldw	r5,1132(sp)
1000f170:	d8c11c17 	ldw	r3,1136(sp)
1000f174:	d811883a 	mov	r8,sp
1000f178:	28800044 	addi	r2,r5,1
1000f17c:	003eba06 	br	1000ec68 <__alt_data_end+0xf800ec68>
1000f180:	10803fcc 	andi	r2,r2,255
1000f184:	00c00044 	movi	r3,1
1000f188:	10fe4d1e 	bne	r2,r3,1000eac0 <__alt_data_end+0xf800eac0>
1000f18c:	a800021e 	bne	r21,zero,1000f198 <___vfiprintf_internal_r+0xbd4>
1000f190:	00800244 	movi	r2,9
1000f194:	14c01b2e 	bgeu	r2,r19,1000f204 <___vfiprintf_internal_r+0xc40>
1000f198:	dc012215 	stw	r16,1160(sp)
1000f19c:	dd010a04 	addi	r20,sp,1064
1000f1a0:	a821883a 	mov	r16,r21
1000f1a4:	402b883a 	mov	r21,r8
1000f1a8:	9809883a 	mov	r4,r19
1000f1ac:	800b883a 	mov	r5,r16
1000f1b0:	01800284 	movi	r6,10
1000f1b4:	000f883a 	mov	r7,zero
1000f1b8:	00116440 	call	10011644 <__umoddi3>
1000f1bc:	10800c04 	addi	r2,r2,48
1000f1c0:	a53fffc4 	addi	r20,r20,-1
1000f1c4:	9809883a 	mov	r4,r19
1000f1c8:	800b883a 	mov	r5,r16
1000f1cc:	01800284 	movi	r6,10
1000f1d0:	000f883a 	mov	r7,zero
1000f1d4:	a0800005 	stb	r2,0(r20)
1000f1d8:	00110040 	call	10011004 <__udivdi3>
1000f1dc:	1027883a 	mov	r19,r2
1000f1e0:	10c4b03a 	or	r2,r2,r3
1000f1e4:	1821883a 	mov	r16,r3
1000f1e8:	103fef1e 	bne	r2,zero,1000f1a8 <__alt_data_end+0xf800f1a8>
1000f1ec:	d9011e17 	ldw	r4,1144(sp)
1000f1f0:	dc012217 	ldw	r16,1160(sp)
1000f1f4:	a811883a 	mov	r8,r21
1000f1f8:	dd012215 	stw	r20,1160(sp)
1000f1fc:	2529c83a 	sub	r20,r4,r20
1000f200:	003e4106 	br	1000eb08 <__alt_data_end+0xf800eb08>
1000f204:	9cc00c04 	addi	r19,r19,48
1000f208:	d8c109c4 	addi	r3,sp,1063
1000f20c:	dcc109c5 	stb	r19,1063(sp)
1000f210:	dd012817 	ldw	r20,1184(sp)
1000f214:	d8c12215 	stw	r3,1160(sp)
1000f218:	003e3b06 	br	1000eb08 <__alt_data_end+0xf800eb08>
1000f21c:	d8811c17 	ldw	r2,1136(sp)
1000f220:	10000426 	beq	r2,zero,1000f234 <___vfiprintf_internal_r+0xc70>
1000f224:	d9012117 	ldw	r4,1156(sp)
1000f228:	d9412017 	ldw	r5,1152(sp)
1000f22c:	d9811a04 	addi	r6,sp,1128
1000f230:	000e4b00 	call	1000e4b0 <__sprint_r.part.0>
1000f234:	d9412017 	ldw	r5,1152(sp)
1000f238:	2880030b 	ldhu	r2,12(r5)
1000f23c:	1080100c 	andi	r2,r2,64
1000f240:	103ddc1e 	bne	r2,zero,1000e9b4 <__alt_data_end+0xf800e9b4>
1000f244:	d8812517 	ldw	r2,1172(sp)
1000f248:	003ddb06 	br	1000e9b8 <__alt_data_end+0xf800e9b8>
1000f24c:	1801061e 	bne	r3,zero,1000f668 <___vfiprintf_internal_r+0x10a4>
1000f250:	d8c12217 	ldw	r3,1160(sp)
1000f254:	00800044 	movi	r2,1
1000f258:	dd000115 	stw	r20,4(sp)
1000f25c:	d8c00015 	stw	r3,0(sp)
1000f260:	dd011c15 	stw	r20,1136(sp)
1000f264:	d8811b15 	stw	r2,1132(sp)
1000f268:	a007883a 	mov	r3,r20
1000f26c:	d811883a 	mov	r8,sp
1000f270:	42000204 	addi	r8,r8,8
1000f274:	9480010c 	andi	r18,r18,4
1000f278:	90003426 	beq	r18,zero,1000f34c <___vfiprintf_internal_r+0xd88>
1000f27c:	d9412417 	ldw	r5,1168(sp)
1000f280:	2d65c83a 	sub	r18,r5,r21
1000f284:	0480310e 	bge	zero,r18,1000f34c <___vfiprintf_internal_r+0xd88>
1000f288:	04000404 	movi	r16,16
1000f28c:	8481ad0e 	bge	r16,r18,1000f944 <___vfiprintf_internal_r+0x1380>
1000f290:	01440074 	movhi	r5,4097
1000f294:	29522d04 	addi	r5,r5,18612
1000f298:	d9011b17 	ldw	r4,1132(sp)
1000f29c:	d9412615 	stw	r5,1176(sp)
1000f2a0:	04c001c4 	movi	r19,7
1000f2a4:	dd012117 	ldw	r20,1156(sp)
1000f2a8:	dd812017 	ldw	r22,1152(sp)
1000f2ac:	00000506 	br	1000f2c4 <___vfiprintf_internal_r+0xd00>
1000f2b0:	21400084 	addi	r5,r4,2
1000f2b4:	42000204 	addi	r8,r8,8
1000f2b8:	1009883a 	mov	r4,r2
1000f2bc:	94bffc04 	addi	r18,r18,-16
1000f2c0:	84800d0e 	bge	r16,r18,1000f2f8 <___vfiprintf_internal_r+0xd34>
1000f2c4:	18c00404 	addi	r3,r3,16
1000f2c8:	20800044 	addi	r2,r4,1
1000f2cc:	47000015 	stw	fp,0(r8)
1000f2d0:	44000115 	stw	r16,4(r8)
1000f2d4:	d8c11c15 	stw	r3,1136(sp)
1000f2d8:	d8811b15 	stw	r2,1132(sp)
1000f2dc:	98bff40e 	bge	r19,r2,1000f2b0 <__alt_data_end+0xf800f2b0>
1000f2e0:	1800291e 	bne	r3,zero,1000f388 <___vfiprintf_internal_r+0xdc4>
1000f2e4:	94bffc04 	addi	r18,r18,-16
1000f2e8:	0009883a 	mov	r4,zero
1000f2ec:	01400044 	movi	r5,1
1000f2f0:	d811883a 	mov	r8,sp
1000f2f4:	84bff316 	blt	r16,r18,1000f2c4 <__alt_data_end+0xf800f2c4>
1000f2f8:	d8812617 	ldw	r2,1176(sp)
1000f2fc:	1c87883a 	add	r3,r3,r18
1000f300:	44800115 	stw	r18,4(r8)
1000f304:	40800015 	stw	r2,0(r8)
1000f308:	d8c11c15 	stw	r3,1136(sp)
1000f30c:	d9411b15 	stw	r5,1132(sp)
1000f310:	008001c4 	movi	r2,7
1000f314:	11400d0e 	bge	r2,r5,1000f34c <___vfiprintf_internal_r+0xd88>
1000f318:	1800061e 	bne	r3,zero,1000f334 <___vfiprintf_internal_r+0xd70>
1000f31c:	d8c12417 	ldw	r3,1168(sp)
1000f320:	a8c12e16 	blt	r21,r3,1000f7dc <___vfiprintf_internal_r+0x1218>
1000f324:	d9012517 	ldw	r4,1172(sp)
1000f328:	2549883a 	add	r4,r4,r21
1000f32c:	d9012515 	stw	r4,1172(sp)
1000f330:	00001206 	br	1000f37c <___vfiprintf_internal_r+0xdb8>
1000f334:	d9012117 	ldw	r4,1156(sp)
1000f338:	d9412017 	ldw	r5,1152(sp)
1000f33c:	d9811a04 	addi	r6,sp,1128
1000f340:	000e4b00 	call	1000e4b0 <__sprint_r.part.0>
1000f344:	103fbb1e 	bne	r2,zero,1000f234 <__alt_data_end+0xf800f234>
1000f348:	d8c11c17 	ldw	r3,1136(sp)
1000f34c:	d8812417 	ldw	r2,1168(sp)
1000f350:	a880010e 	bge	r21,r2,1000f358 <___vfiprintf_internal_r+0xd94>
1000f354:	102b883a 	mov	r21,r2
1000f358:	d9012517 	ldw	r4,1172(sp)
1000f35c:	2549883a 	add	r4,r4,r21
1000f360:	d9012515 	stw	r4,1172(sp)
1000f364:	18000526 	beq	r3,zero,1000f37c <___vfiprintf_internal_r+0xdb8>
1000f368:	d9012117 	ldw	r4,1156(sp)
1000f36c:	d9412017 	ldw	r5,1152(sp)
1000f370:	d9811a04 	addi	r6,sp,1128
1000f374:	000e4b00 	call	1000e4b0 <__sprint_r.part.0>
1000f378:	103fae1e 	bne	r2,zero,1000f234 <__alt_data_end+0xf800f234>
1000f37c:	d8011b15 	stw	zero,1132(sp)
1000f380:	d811883a 	mov	r8,sp
1000f384:	003cc706 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000f388:	a009883a 	mov	r4,r20
1000f38c:	b00b883a 	mov	r5,r22
1000f390:	d9811a04 	addi	r6,sp,1128
1000f394:	000e4b00 	call	1000e4b0 <__sprint_r.part.0>
1000f398:	103fa61e 	bne	r2,zero,1000f234 <__alt_data_end+0xf800f234>
1000f39c:	d9011b17 	ldw	r4,1132(sp)
1000f3a0:	d8c11c17 	ldw	r3,1136(sp)
1000f3a4:	d811883a 	mov	r8,sp
1000f3a8:	21400044 	addi	r5,r4,1
1000f3ac:	003fc306 	br	1000f2bc <__alt_data_end+0xf800f2bc>
1000f3b0:	d9012417 	ldw	r4,1168(sp)
1000f3b4:	256dc83a 	sub	r22,r4,r21
1000f3b8:	05be1f0e 	bge	zero,r22,1000ec38 <__alt_data_end+0xf800ec38>
1000f3bc:	04c00404 	movi	r19,16
1000f3c0:	9d81720e 	bge	r19,r22,1000f98c <___vfiprintf_internal_r+0x13c8>
1000f3c4:	00840074 	movhi	r2,4097
1000f3c8:	10922904 	addi	r2,r2,18596
1000f3cc:	d8812615 	stw	r2,1176(sp)
1000f3d0:	028001c4 	movi	r10,7
1000f3d4:	00000506 	br	1000f3ec <___vfiprintf_internal_r+0xe28>
1000f3d8:	29000084 	addi	r4,r5,2
1000f3dc:	42000204 	addi	r8,r8,8
1000f3e0:	100b883a 	mov	r5,r2
1000f3e4:	b5bffc04 	addi	r22,r22,-16
1000f3e8:	9d800d0e 	bge	r19,r22,1000f420 <___vfiprintf_internal_r+0xe5c>
1000f3ec:	18c00404 	addi	r3,r3,16
1000f3f0:	28800044 	addi	r2,r5,1
1000f3f4:	44400015 	stw	r17,0(r8)
1000f3f8:	44c00115 	stw	r19,4(r8)
1000f3fc:	d8c11c15 	stw	r3,1136(sp)
1000f400:	d8811b15 	stw	r2,1132(sp)
1000f404:	50bff40e 	bge	r10,r2,1000f3d8 <__alt_data_end+0xf800f3d8>
1000f408:	1800111e 	bne	r3,zero,1000f450 <___vfiprintf_internal_r+0xe8c>
1000f40c:	b5bffc04 	addi	r22,r22,-16
1000f410:	000b883a 	mov	r5,zero
1000f414:	01000044 	movi	r4,1
1000f418:	d811883a 	mov	r8,sp
1000f41c:	9dbff316 	blt	r19,r22,1000f3ec <__alt_data_end+0xf800f3ec>
1000f420:	d9412617 	ldw	r5,1176(sp)
1000f424:	1d87883a 	add	r3,r3,r22
1000f428:	45800115 	stw	r22,4(r8)
1000f42c:	41400015 	stw	r5,0(r8)
1000f430:	d8c11c15 	stw	r3,1136(sp)
1000f434:	d9011b15 	stw	r4,1132(sp)
1000f438:	008001c4 	movi	r2,7
1000f43c:	11008516 	blt	r2,r4,1000f654 <___vfiprintf_internal_r+0x1090>
1000f440:	42000204 	addi	r8,r8,8
1000f444:	20800044 	addi	r2,r4,1
1000f448:	200b883a 	mov	r5,r4
1000f44c:	003dfa06 	br	1000ec38 <__alt_data_end+0xf800ec38>
1000f450:	d9012117 	ldw	r4,1156(sp)
1000f454:	d9412017 	ldw	r5,1152(sp)
1000f458:	d9811a04 	addi	r6,sp,1128
1000f45c:	da812a15 	stw	r10,1192(sp)
1000f460:	000e4b00 	call	1000e4b0 <__sprint_r.part.0>
1000f464:	da812a17 	ldw	r10,1192(sp)
1000f468:	103f721e 	bne	r2,zero,1000f234 <__alt_data_end+0xf800f234>
1000f46c:	d9411b17 	ldw	r5,1132(sp)
1000f470:	d8c11c17 	ldw	r3,1136(sp)
1000f474:	d811883a 	mov	r8,sp
1000f478:	29000044 	addi	r4,r5,1
1000f47c:	003fd906 	br	1000f3e4 <__alt_data_end+0xf800f3e4>
1000f480:	1800681e 	bne	r3,zero,1000f624 <___vfiprintf_internal_r+0x1060>
1000f484:	50004d26 	beq	r10,zero,1000f5bc <___vfiprintf_internal_r+0xff8>
1000f488:	d8811d04 	addi	r2,sp,1140
1000f48c:	00c00084 	movi	r3,2
1000f490:	d8800015 	stw	r2,0(sp)
1000f494:	d8c00115 	stw	r3,4(sp)
1000f498:	2005883a 	mov	r2,r4
1000f49c:	d811883a 	mov	r8,sp
1000f4a0:	003de006 	br	1000ec24 <__alt_data_end+0xf800ec24>
1000f4a4:	1800551e 	bne	r3,zero,1000f5fc <___vfiprintf_internal_r+0x1038>
1000f4a8:	000b883a 	mov	r5,zero
1000f4ac:	00800044 	movi	r2,1
1000f4b0:	d811883a 	mov	r8,sp
1000f4b4:	003dde06 	br	1000ec30 <__alt_data_end+0xf800ec30>
1000f4b8:	10803fcc 	andi	r2,r2,255
1000f4bc:	1000191e 	bne	r2,zero,1000f524 <___vfiprintf_internal_r+0xf60>
1000f4c0:	9080004c 	andi	r2,r18,1
1000f4c4:	10001726 	beq	r2,zero,1000f524 <___vfiprintf_internal_r+0xf60>
1000f4c8:	00800c04 	movi	r2,48
1000f4cc:	d8c109c4 	addi	r3,sp,1063
1000f4d0:	d88109c5 	stb	r2,1063(sp)
1000f4d4:	dd012817 	ldw	r20,1184(sp)
1000f4d8:	d8c12215 	stw	r3,1160(sp)
1000f4dc:	003d8a06 	br	1000eb08 <__alt_data_end+0xf800eb08>
1000f4e0:	d9012717 	ldw	r4,1180(sp)
1000f4e4:	dd010a04 	addi	r20,sp,1064
1000f4e8:	988003cc 	andi	r2,r19,15
1000f4ec:	a806973a 	slli	r3,r21,28
1000f4f0:	2085883a 	add	r2,r4,r2
1000f4f4:	9826d13a 	srli	r19,r19,4
1000f4f8:	10800003 	ldbu	r2,0(r2)
1000f4fc:	a82ad13a 	srli	r21,r21,4
1000f500:	a53fffc4 	addi	r20,r20,-1
1000f504:	1ce6b03a 	or	r19,r3,r19
1000f508:	a0800005 	stb	r2,0(r20)
1000f50c:	9d44b03a 	or	r2,r19,r21
1000f510:	103ff51e 	bne	r2,zero,1000f4e8 <__alt_data_end+0xf800f4e8>
1000f514:	d9411e17 	ldw	r5,1144(sp)
1000f518:	dd012215 	stw	r20,1160(sp)
1000f51c:	2d29c83a 	sub	r20,r5,r20
1000f520:	003d7906 	br	1000eb08 <__alt_data_end+0xf800eb08>
1000f524:	d8c10a04 	addi	r3,sp,1064
1000f528:	d8c12215 	stw	r3,1160(sp)
1000f52c:	003d7606 	br	1000eb08 <__alt_data_end+0xf800eb08>
1000f530:	18009e1e 	bne	r3,zero,1000f7ac <___vfiprintf_internal_r+0x11e8>
1000f534:	d8811d87 	ldb	r2,1142(sp)
1000f538:	10005f26 	beq	r2,zero,1000f6b8 <___vfiprintf_internal_r+0x10f4>
1000f53c:	00c00044 	movi	r3,1
1000f540:	d9011d84 	addi	r4,sp,1142
1000f544:	1805883a 	mov	r2,r3
1000f548:	d9000015 	stw	r4,0(sp)
1000f54c:	d8c00115 	stw	r3,4(sp)
1000f550:	d811883a 	mov	r8,sp
1000f554:	003efc06 	br	1000f148 <__alt_data_end+0xf800f148>
1000f558:	d9412417 	ldw	r5,1168(sp)
1000f55c:	d811883a 	mov	r8,sp
1000f560:	2d65c83a 	sub	r18,r5,r21
1000f564:	04bf4816 	blt	zero,r18,1000f288 <__alt_data_end+0xf800f288>
1000f568:	003f6c06 	br	1000f31c <__alt_data_end+0xf800f31c>
1000f56c:	b829883a 	mov	r20,r23
1000f570:	003c6906 	br	1000e718 <__alt_data_end+0xf800e718>
1000f574:	d9012117 	ldw	r4,1156(sp)
1000f578:	d9412017 	ldw	r5,1152(sp)
1000f57c:	d9811a04 	addi	r6,sp,1128
1000f580:	000e4b00 	call	1000e4b0 <__sprint_r.part.0>
1000f584:	103f2b1e 	bne	r2,zero,1000f234 <__alt_data_end+0xf800f234>
1000f588:	d8c11c17 	ldw	r3,1136(sp)
1000f58c:	d811883a 	mov	r8,sp
1000f590:	003f3806 	br	1000f274 <__alt_data_end+0xf800f274>
1000f594:	00800084 	movi	r2,2
1000f598:	9d46b03a 	or	r3,r19,r21
1000f59c:	003df606 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f5a0:	d9012117 	ldw	r4,1156(sp)
1000f5a4:	d9412017 	ldw	r5,1152(sp)
1000f5a8:	d9811a04 	addi	r6,sp,1128
1000f5ac:	000e4b00 	call	1000e4b0 <__sprint_r.part.0>
1000f5b0:	103f201e 	bne	r2,zero,1000f234 <__alt_data_end+0xf800f234>
1000f5b4:	d811883a 	mov	r8,sp
1000f5b8:	003cc606 	br	1000e8d4 <__alt_data_end+0xf800e8d4>
1000f5bc:	000b883a 	mov	r5,zero
1000f5c0:	2005883a 	mov	r2,r4
1000f5c4:	d811883a 	mov	r8,sp
1000f5c8:	003d9906 	br	1000ec30 <__alt_data_end+0xf800ec30>
1000f5cc:	10803fcc 	andi	r2,r2,255
1000f5d0:	1080201c 	xori	r2,r2,128
1000f5d4:	10bfe004 	addi	r2,r2,-128
1000f5d8:	01000c04 	movi	r4,48
1000f5dc:	1100b226 	beq	r2,r4,1000f8a8 <___vfiprintf_internal_r+0x12e4>
1000f5e0:	d9412217 	ldw	r5,1160(sp)
1000f5e4:	d8811e17 	ldw	r2,1144(sp)
1000f5e8:	193fffc5 	stb	r4,-1(r3)
1000f5ec:	297fffc4 	addi	r5,r5,-1
1000f5f0:	d9412215 	stw	r5,1160(sp)
1000f5f4:	1169c83a 	sub	r20,r2,r5
1000f5f8:	003d4306 	br	1000eb08 <__alt_data_end+0xf800eb08>
1000f5fc:	d9012117 	ldw	r4,1156(sp)
1000f600:	d9412017 	ldw	r5,1152(sp)
1000f604:	d9811a04 	addi	r6,sp,1128
1000f608:	000e4b00 	call	1000e4b0 <__sprint_r.part.0>
1000f60c:	103f091e 	bne	r2,zero,1000f234 <__alt_data_end+0xf800f234>
1000f610:	d9411b17 	ldw	r5,1132(sp)
1000f614:	d8c11c17 	ldw	r3,1136(sp)
1000f618:	d811883a 	mov	r8,sp
1000f61c:	28800044 	addi	r2,r5,1
1000f620:	003d8306 	br	1000ec30 <__alt_data_end+0xf800ec30>
1000f624:	d9012117 	ldw	r4,1156(sp)
1000f628:	d9412017 	ldw	r5,1152(sp)
1000f62c:	d9811a04 	addi	r6,sp,1128
1000f630:	da812a15 	stw	r10,1192(sp)
1000f634:	000e4b00 	call	1000e4b0 <__sprint_r.part.0>
1000f638:	da812a17 	ldw	r10,1192(sp)
1000f63c:	103efd1e 	bne	r2,zero,1000f234 <__alt_data_end+0xf800f234>
1000f640:	d9411b17 	ldw	r5,1132(sp)
1000f644:	d8c11c17 	ldw	r3,1136(sp)
1000f648:	d811883a 	mov	r8,sp
1000f64c:	28800044 	addi	r2,r5,1
1000f650:	003d6a06 	br	1000ebfc <__alt_data_end+0xf800ebfc>
1000f654:	1800a01e 	bne	r3,zero,1000f8d8 <___vfiprintf_internal_r+0x1314>
1000f658:	000b883a 	mov	r5,zero
1000f65c:	00800044 	movi	r2,1
1000f660:	d811883a 	mov	r8,sp
1000f664:	003d7406 	br	1000ec38 <__alt_data_end+0xf800ec38>
1000f668:	d9012117 	ldw	r4,1156(sp)
1000f66c:	d9412017 	ldw	r5,1152(sp)
1000f670:	d9811a04 	addi	r6,sp,1128
1000f674:	000e4b00 	call	1000e4b0 <__sprint_r.part.0>
1000f678:	103eee1e 	bne	r2,zero,1000f234 <__alt_data_end+0xf800f234>
1000f67c:	d8811b17 	ldw	r2,1132(sp)
1000f680:	d8c11c17 	ldw	r3,1136(sp)
1000f684:	d811883a 	mov	r8,sp
1000f688:	10800044 	addi	r2,r2,1
1000f68c:	003d8f06 	br	1000eccc <__alt_data_end+0xf800eccc>
1000f690:	04e7c83a 	sub	r19,zero,r19
1000f694:	9804c03a 	cmpne	r2,r19,zero
1000f698:	056bc83a 	sub	r21,zero,r21
1000f69c:	a8abc83a 	sub	r21,r21,r2
1000f6a0:	05800b44 	movi	r22,45
1000f6a4:	dd811d85 	stb	r22,1142(sp)
1000f6a8:	8029883a 	mov	r20,r16
1000f6ac:	00800044 	movi	r2,1
1000f6b0:	9d46b03a 	or	r3,r19,r21
1000f6b4:	003cfa06 	br	1000eaa0 <__alt_data_end+0xf800eaa0>
1000f6b8:	000b883a 	mov	r5,zero
1000f6bc:	00800044 	movi	r2,1
1000f6c0:	d811883a 	mov	r8,sp
1000f6c4:	503d5a26 	beq	r10,zero,1000ec30 <__alt_data_end+0xf800ec30>
1000f6c8:	00c00084 	movi	r3,2
1000f6cc:	d9011d04 	addi	r4,sp,1140
1000f6d0:	d9000015 	stw	r4,0(sp)
1000f6d4:	d8c00115 	stw	r3,4(sp)
1000f6d8:	003d5206 	br	1000ec24 <__alt_data_end+0xf800ec24>
1000f6dc:	9080040c 	andi	r2,r18,16
1000f6e0:	1000421e 	bne	r2,zero,1000f7ec <___vfiprintf_internal_r+0x1228>
1000f6e4:	9480100c 	andi	r18,r18,64
1000f6e8:	90009c26 	beq	r18,zero,1000f95c <___vfiprintf_internal_r+0x1398>
1000f6ec:	d9412317 	ldw	r5,1164(sp)
1000f6f0:	d8c12517 	ldw	r3,1172(sp)
1000f6f4:	28800017 	ldw	r2,0(r5)
1000f6f8:	29400104 	addi	r5,r5,4
1000f6fc:	d9412315 	stw	r5,1164(sp)
1000f700:	10c0000d 	sth	r3,0(r2)
1000f704:	003be706 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000f708:	90c0100c 	andi	r3,r18,64
1000f70c:	18003e26 	beq	r3,zero,1000f808 <___vfiprintf_internal_r+0x1244>
1000f710:	d8c12317 	ldw	r3,1164(sp)
1000f714:	14c0000b 	ldhu	r19,0(r2)
1000f718:	002b883a 	mov	r21,zero
1000f71c:	18c00104 	addi	r3,r3,4
1000f720:	d8c12315 	stw	r3,1164(sp)
1000f724:	003db706 	br	1000ee04 <__alt_data_end+0xf800ee04>
1000f728:	9080100c 	andi	r2,r18,64
1000f72c:	10004c26 	beq	r2,zero,1000f860 <___vfiprintf_internal_r+0x129c>
1000f730:	1cc0000f 	ldh	r19,0(r3)
1000f734:	d8812317 	ldw	r2,1164(sp)
1000f738:	982bd7fa 	srai	r21,r19,31
1000f73c:	10800104 	addi	r2,r2,4
1000f740:	d8812315 	stw	r2,1164(sp)
1000f744:	a805883a 	mov	r2,r21
1000f748:	003cd006 	br	1000ea8c <__alt_data_end+0xf800ea8c>
1000f74c:	00800084 	movi	r2,2
1000f750:	003d8906 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f754:	b9800007 	ldb	r6,0(r23)
1000f758:	003bfb06 	br	1000e748 <__alt_data_end+0xf800e748>
1000f75c:	9080100c 	andi	r2,r18,64
1000f760:	10003726 	beq	r2,zero,1000f840 <___vfiprintf_internal_r+0x127c>
1000f764:	d9412317 	ldw	r5,1164(sp)
1000f768:	002b883a 	mov	r21,zero
1000f76c:	0005883a 	mov	r2,zero
1000f770:	2cc0000b 	ldhu	r19,0(r5)
1000f774:	29400104 	addi	r5,r5,4
1000f778:	d9412315 	stw	r5,1164(sp)
1000f77c:	9807883a 	mov	r3,r19
1000f780:	003d7d06 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f784:	9080100c 	andi	r2,r18,64
1000f788:	10002526 	beq	r2,zero,1000f820 <___vfiprintf_internal_r+0x125c>
1000f78c:	d8812317 	ldw	r2,1164(sp)
1000f790:	002b883a 	mov	r21,zero
1000f794:	14c0000b 	ldhu	r19,0(r2)
1000f798:	10800104 	addi	r2,r2,4
1000f79c:	d8812315 	stw	r2,1164(sp)
1000f7a0:	9807883a 	mov	r3,r19
1000f7a4:	00800044 	movi	r2,1
1000f7a8:	003d7306 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f7ac:	d9012117 	ldw	r4,1156(sp)
1000f7b0:	d9412017 	ldw	r5,1152(sp)
1000f7b4:	d9811a04 	addi	r6,sp,1128
1000f7b8:	da812a15 	stw	r10,1192(sp)
1000f7bc:	000e4b00 	call	1000e4b0 <__sprint_r.part.0>
1000f7c0:	da812a17 	ldw	r10,1192(sp)
1000f7c4:	103e9b1e 	bne	r2,zero,1000f234 <__alt_data_end+0xf800f234>
1000f7c8:	d9411b17 	ldw	r5,1132(sp)
1000f7cc:	d8c11c17 	ldw	r3,1136(sp)
1000f7d0:	d811883a 	mov	r8,sp
1000f7d4:	28800044 	addi	r2,r5,1
1000f7d8:	003e5006 	br	1000f11c <__alt_data_end+0xf800f11c>
1000f7dc:	182b883a 	mov	r21,r3
1000f7e0:	003ed006 	br	1000f324 <__alt_data_end+0xf800f324>
1000f7e4:	8029883a 	mov	r20,r16
1000f7e8:	003dc606 	br	1000ef04 <__alt_data_end+0xf800ef04>
1000f7ec:	d8c12317 	ldw	r3,1164(sp)
1000f7f0:	d9012517 	ldw	r4,1172(sp)
1000f7f4:	18800017 	ldw	r2,0(r3)
1000f7f8:	18c00104 	addi	r3,r3,4
1000f7fc:	d8c12315 	stw	r3,1164(sp)
1000f800:	11000015 	stw	r4,0(r2)
1000f804:	003ba706 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000f808:	d9012317 	ldw	r4,1164(sp)
1000f80c:	14c00017 	ldw	r19,0(r2)
1000f810:	002b883a 	mov	r21,zero
1000f814:	21000104 	addi	r4,r4,4
1000f818:	d9012315 	stw	r4,1164(sp)
1000f81c:	003d7906 	br	1000ee04 <__alt_data_end+0xf800ee04>
1000f820:	d8c12317 	ldw	r3,1164(sp)
1000f824:	002b883a 	mov	r21,zero
1000f828:	00800044 	movi	r2,1
1000f82c:	1cc00017 	ldw	r19,0(r3)
1000f830:	18c00104 	addi	r3,r3,4
1000f834:	d8c12315 	stw	r3,1164(sp)
1000f838:	9807883a 	mov	r3,r19
1000f83c:	003d4e06 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f840:	d8812317 	ldw	r2,1164(sp)
1000f844:	002b883a 	mov	r21,zero
1000f848:	14c00017 	ldw	r19,0(r2)
1000f84c:	10800104 	addi	r2,r2,4
1000f850:	d8812315 	stw	r2,1164(sp)
1000f854:	9807883a 	mov	r3,r19
1000f858:	0005883a 	mov	r2,zero
1000f85c:	003d4606 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f860:	1cc00017 	ldw	r19,0(r3)
1000f864:	d8c12317 	ldw	r3,1164(sp)
1000f868:	982bd7fa 	srai	r21,r19,31
1000f86c:	18c00104 	addi	r3,r3,4
1000f870:	d8c12315 	stw	r3,1164(sp)
1000f874:	a805883a 	mov	r2,r21
1000f878:	003c8406 	br	1000ea8c <__alt_data_end+0xf800ea8c>
1000f87c:	01040074 	movhi	r4,4097
1000f880:	21122904 	addi	r4,r4,18596
1000f884:	d9012615 	stw	r4,1176(sp)
1000f888:	003d0606 	br	1000eca4 <__alt_data_end+0xf800eca4>
1000f88c:	b9800043 	ldbu	r6,1(r23)
1000f890:	94800814 	ori	r18,r18,32
1000f894:	bdc00044 	addi	r23,r23,1
1000f898:	31803fcc 	andi	r6,r6,255
1000f89c:	3180201c 	xori	r6,r6,128
1000f8a0:	31bfe004 	addi	r6,r6,-128
1000f8a4:	003ba806 	br	1000e748 <__alt_data_end+0xf800e748>
1000f8a8:	d8811e17 	ldw	r2,1144(sp)
1000f8ac:	d8c12217 	ldw	r3,1160(sp)
1000f8b0:	10e9c83a 	sub	r20,r2,r3
1000f8b4:	003c9406 	br	1000eb08 <__alt_data_end+0xf800eb08>
1000f8b8:	da012a15 	stw	r8,1192(sp)
1000f8bc:	000e4180 	call	1000e418 <strlen>
1000f8c0:	1029883a 	mov	r20,r2
1000f8c4:	dd811d83 	ldbu	r22,1142(sp)
1000f8c8:	dcc12315 	stw	r19,1164(sp)
1000f8cc:	0021883a 	mov	r16,zero
1000f8d0:	da012a17 	ldw	r8,1192(sp)
1000f8d4:	003c8c06 	br	1000eb08 <__alt_data_end+0xf800eb08>
1000f8d8:	d9012117 	ldw	r4,1156(sp)
1000f8dc:	d9412017 	ldw	r5,1152(sp)
1000f8e0:	d9811a04 	addi	r6,sp,1128
1000f8e4:	000e4b00 	call	1000e4b0 <__sprint_r.part.0>
1000f8e8:	103e521e 	bne	r2,zero,1000f234 <__alt_data_end+0xf800f234>
1000f8ec:	d9411b17 	ldw	r5,1132(sp)
1000f8f0:	d8c11c17 	ldw	r3,1136(sp)
1000f8f4:	d811883a 	mov	r8,sp
1000f8f8:	28800044 	addi	r2,r5,1
1000f8fc:	003cce06 	br	1000ec38 <__alt_data_end+0xf800ec38>
1000f900:	01440074 	movhi	r5,4097
1000f904:	29522d04 	addi	r5,r5,18612
1000f908:	d9412615 	stw	r5,1176(sp)
1000f90c:	d9411b17 	ldw	r5,1132(sp)
1000f910:	29400044 	addi	r5,r5,1
1000f914:	003cad06 	br	1000ebcc <__alt_data_end+0xf800ebcc>
1000f918:	00800184 	movi	r2,6
1000f91c:	1400012e 	bgeu	r2,r16,1000f924 <___vfiprintf_internal_r+0x1360>
1000f920:	1021883a 	mov	r16,r2
1000f924:	8029883a 	mov	r20,r16
1000f928:	802b883a 	mov	r21,r16
1000f92c:	80001c16 	blt	r16,zero,1000f9a0 <___vfiprintf_internal_r+0x13dc>
1000f930:	00c40074 	movhi	r3,4097
1000f934:	18d1ce04 	addi	r3,r3,18232
1000f938:	dcc12315 	stw	r19,1164(sp)
1000f93c:	d8c12215 	stw	r3,1160(sp)
1000f940:	003cff06 	br	1000ed40 <__alt_data_end+0xf800ed40>
1000f944:	d9411b17 	ldw	r5,1132(sp)
1000f948:	00840074 	movhi	r2,4097
1000f94c:	10922d04 	addi	r2,r2,18612
1000f950:	d8812615 	stw	r2,1176(sp)
1000f954:	29400044 	addi	r5,r5,1
1000f958:	003e6706 	br	1000f2f8 <__alt_data_end+0xf800f2f8>
1000f95c:	d9012317 	ldw	r4,1164(sp)
1000f960:	d9412517 	ldw	r5,1172(sp)
1000f964:	20800017 	ldw	r2,0(r4)
1000f968:	21000104 	addi	r4,r4,4
1000f96c:	d9012315 	stw	r4,1164(sp)
1000f970:	11400015 	stw	r5,0(r2)
1000f974:	003b4b06 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000f978:	8029883a 	mov	r20,r16
1000f97c:	dd811d83 	ldbu	r22,1142(sp)
1000f980:	dcc12315 	stw	r19,1164(sp)
1000f984:	0021883a 	mov	r16,zero
1000f988:	003c5f06 	br	1000eb08 <__alt_data_end+0xf800eb08>
1000f98c:	01040074 	movhi	r4,4097
1000f990:	21122904 	addi	r4,r4,18596
1000f994:	d9012615 	stw	r4,1176(sp)
1000f998:	1009883a 	mov	r4,r2
1000f99c:	003ea006 	br	1000f420 <__alt_data_end+0xf800f420>
1000f9a0:	002b883a 	mov	r21,zero
1000f9a4:	003fe206 	br	1000f930 <__alt_data_end+0xf800f930>
1000f9a8:	d9412317 	ldw	r5,1164(sp)
1000f9ac:	b807883a 	mov	r3,r23
1000f9b0:	102f883a 	mov	r23,r2
1000f9b4:	2c000017 	ldw	r16,0(r5)
1000f9b8:	29000104 	addi	r4,r5,4
1000f9bc:	d9012315 	stw	r4,1164(sp)
1000f9c0:	80000416 	blt	r16,zero,1000f9d4 <___vfiprintf_internal_r+0x1410>
1000f9c4:	19800047 	ldb	r6,1(r3)
1000f9c8:	003b5f06 	br	1000e748 <__alt_data_end+0xf800e748>
1000f9cc:	043fffc4 	movi	r16,-1
1000f9d0:	003bef06 	br	1000e990 <__alt_data_end+0xf800e990>
1000f9d4:	043fffc4 	movi	r16,-1
1000f9d8:	19800047 	ldb	r6,1(r3)
1000f9dc:	003b5a06 	br	1000e748 <__alt_data_end+0xf800e748>
1000f9e0:	282b883a 	mov	r21,r5
1000f9e4:	003cc706 	br	1000ed04 <__alt_data_end+0xf800ed04>

1000f9e8 <__vfiprintf_internal>:
1000f9e8:	2007883a 	mov	r3,r4
1000f9ec:	010400b4 	movhi	r4,4098
1000f9f0:	21026d04 	addi	r4,r4,2484
1000f9f4:	21000017 	ldw	r4,0(r4)
1000f9f8:	2805883a 	mov	r2,r5
1000f9fc:	300f883a 	mov	r7,r6
1000fa00:	180b883a 	mov	r5,r3
1000fa04:	100d883a 	mov	r6,r2
1000fa08:	000e5c41 	jmpi	1000e5c4 <___vfiprintf_internal_r>

1000fa0c <_write_r>:
1000fa0c:	defffd04 	addi	sp,sp,-12
1000fa10:	dc000015 	stw	r16,0(sp)
1000fa14:	040400f4 	movhi	r16,4099
1000fa18:	dc400115 	stw	r17,4(sp)
1000fa1c:	8432c004 	addi	r16,r16,-13568
1000fa20:	2023883a 	mov	r17,r4
1000fa24:	2809883a 	mov	r4,r5
1000fa28:	300b883a 	mov	r5,r6
1000fa2c:	380d883a 	mov	r6,r7
1000fa30:	dfc00215 	stw	ra,8(sp)
1000fa34:	80000015 	stw	zero,0(r16)
1000fa38:	00126280 	call	10012628 <write>
1000fa3c:	00ffffc4 	movi	r3,-1
1000fa40:	10c00526 	beq	r2,r3,1000fa58 <_write_r+0x4c>
1000fa44:	dfc00217 	ldw	ra,8(sp)
1000fa48:	dc400117 	ldw	r17,4(sp)
1000fa4c:	dc000017 	ldw	r16,0(sp)
1000fa50:	dec00304 	addi	sp,sp,12
1000fa54:	f800283a 	ret
1000fa58:	80c00017 	ldw	r3,0(r16)
1000fa5c:	183ff926 	beq	r3,zero,1000fa44 <__alt_data_end+0xf800fa44>
1000fa60:	88c00015 	stw	r3,0(r17)
1000fa64:	003ff706 	br	1000fa44 <__alt_data_end+0xf800fa44>

1000fa68 <_close_r>:
1000fa68:	defffd04 	addi	sp,sp,-12
1000fa6c:	dc000015 	stw	r16,0(sp)
1000fa70:	040400f4 	movhi	r16,4099
1000fa74:	dc400115 	stw	r17,4(sp)
1000fa78:	8432c004 	addi	r16,r16,-13568
1000fa7c:	2023883a 	mov	r17,r4
1000fa80:	2809883a 	mov	r4,r5
1000fa84:	dfc00215 	stw	ra,8(sp)
1000fa88:	80000015 	stw	zero,0(r16)
1000fa8c:	0011d540 	call	10011d54 <close>
1000fa90:	00ffffc4 	movi	r3,-1
1000fa94:	10c00526 	beq	r2,r3,1000faac <_close_r+0x44>
1000fa98:	dfc00217 	ldw	ra,8(sp)
1000fa9c:	dc400117 	ldw	r17,4(sp)
1000faa0:	dc000017 	ldw	r16,0(sp)
1000faa4:	dec00304 	addi	sp,sp,12
1000faa8:	f800283a 	ret
1000faac:	80c00017 	ldw	r3,0(r16)
1000fab0:	183ff926 	beq	r3,zero,1000fa98 <__alt_data_end+0xf800fa98>
1000fab4:	88c00015 	stw	r3,0(r17)
1000fab8:	003ff706 	br	1000fa98 <__alt_data_end+0xf800fa98>

1000fabc <_calloc_r>:
1000fabc:	defffe04 	addi	sp,sp,-8
1000fac0:	dc000015 	stw	r16,0(sp)
1000fac4:	2021883a 	mov	r16,r4
1000fac8:	2809883a 	mov	r4,r5
1000facc:	300b883a 	mov	r5,r6
1000fad0:	dfc00115 	stw	ra,4(sp)
1000fad4:	0007bcc0 	call	10007bcc <__mulsi3>
1000fad8:	8009883a 	mov	r4,r16
1000fadc:	100b883a 	mov	r5,r2
1000fae0:	000c6b00 	call	1000c6b0 <_malloc_r>
1000fae4:	1021883a 	mov	r16,r2
1000fae8:	10002826 	beq	r2,zero,1000fb8c <_calloc_r+0xd0>
1000faec:	11bfff17 	ldw	r6,-4(r2)
1000faf0:	00bfff04 	movi	r2,-4
1000faf4:	00c00904 	movi	r3,36
1000faf8:	308c703a 	and	r6,r6,r2
1000fafc:	308d883a 	add	r6,r6,r2
1000fb00:	19801436 	bltu	r3,r6,1000fb54 <_calloc_r+0x98>
1000fb04:	008004c4 	movi	r2,19
1000fb08:	11800936 	bltu	r2,r6,1000fb30 <_calloc_r+0x74>
1000fb0c:	8005883a 	mov	r2,r16
1000fb10:	10000015 	stw	zero,0(r2)
1000fb14:	10000115 	stw	zero,4(r2)
1000fb18:	10000215 	stw	zero,8(r2)
1000fb1c:	8005883a 	mov	r2,r16
1000fb20:	dfc00117 	ldw	ra,4(sp)
1000fb24:	dc000017 	ldw	r16,0(sp)
1000fb28:	dec00204 	addi	sp,sp,8
1000fb2c:	f800283a 	ret
1000fb30:	80000015 	stw	zero,0(r16)
1000fb34:	80000115 	stw	zero,4(r16)
1000fb38:	008006c4 	movi	r2,27
1000fb3c:	11800d2e 	bgeu	r2,r6,1000fb74 <_calloc_r+0xb8>
1000fb40:	80000215 	stw	zero,8(r16)
1000fb44:	80000315 	stw	zero,12(r16)
1000fb48:	30c00c26 	beq	r6,r3,1000fb7c <_calloc_r+0xc0>
1000fb4c:	80800404 	addi	r2,r16,16
1000fb50:	003fef06 	br	1000fb10 <__alt_data_end+0xf800fb10>
1000fb54:	8009883a 	mov	r4,r16
1000fb58:	000b883a 	mov	r5,zero
1000fb5c:	000d0780 	call	1000d078 <memset>
1000fb60:	8005883a 	mov	r2,r16
1000fb64:	dfc00117 	ldw	ra,4(sp)
1000fb68:	dc000017 	ldw	r16,0(sp)
1000fb6c:	dec00204 	addi	sp,sp,8
1000fb70:	f800283a 	ret
1000fb74:	80800204 	addi	r2,r16,8
1000fb78:	003fe506 	br	1000fb10 <__alt_data_end+0xf800fb10>
1000fb7c:	80000415 	stw	zero,16(r16)
1000fb80:	80800604 	addi	r2,r16,24
1000fb84:	80000515 	stw	zero,20(r16)
1000fb88:	003fe106 	br	1000fb10 <__alt_data_end+0xf800fb10>
1000fb8c:	0005883a 	mov	r2,zero
1000fb90:	003fe306 	br	1000fb20 <__alt_data_end+0xf800fb20>

1000fb94 <_fclose_r>:
1000fb94:	28003226 	beq	r5,zero,1000fc60 <_fclose_r+0xcc>
1000fb98:	defffc04 	addi	sp,sp,-16
1000fb9c:	dc400115 	stw	r17,4(sp)
1000fba0:	2023883a 	mov	r17,r4
1000fba4:	dc000015 	stw	r16,0(sp)
1000fba8:	dfc00315 	stw	ra,12(sp)
1000fbac:	dc800215 	stw	r18,8(sp)
1000fbb0:	2821883a 	mov	r16,r5
1000fbb4:	000be540 	call	1000be54 <__sfp_lock_acquire>
1000fbb8:	88000226 	beq	r17,zero,1000fbc4 <_fclose_r+0x30>
1000fbbc:	88800e17 	ldw	r2,56(r17)
1000fbc0:	10002926 	beq	r2,zero,1000fc68 <_fclose_r+0xd4>
1000fbc4:	8080030f 	ldh	r2,12(r16)
1000fbc8:	10002226 	beq	r2,zero,1000fc54 <_fclose_r+0xc0>
1000fbcc:	8809883a 	mov	r4,r17
1000fbd0:	800b883a 	mov	r5,r16
1000fbd4:	000b8880 	call	1000b888 <_fflush_r>
1000fbd8:	1025883a 	mov	r18,r2
1000fbdc:	80800b17 	ldw	r2,44(r16)
1000fbe0:	10000426 	beq	r2,zero,1000fbf4 <_fclose_r+0x60>
1000fbe4:	81400717 	ldw	r5,28(r16)
1000fbe8:	8809883a 	mov	r4,r17
1000fbec:	103ee83a 	callr	r2
1000fbf0:	10002616 	blt	r2,zero,1000fc8c <_fclose_r+0xf8>
1000fbf4:	8080030b 	ldhu	r2,12(r16)
1000fbf8:	1080200c 	andi	r2,r2,128
1000fbfc:	10001f1e 	bne	r2,zero,1000fc7c <_fclose_r+0xe8>
1000fc00:	81400c17 	ldw	r5,48(r16)
1000fc04:	28000526 	beq	r5,zero,1000fc1c <_fclose_r+0x88>
1000fc08:	80801004 	addi	r2,r16,64
1000fc0c:	28800226 	beq	r5,r2,1000fc18 <_fclose_r+0x84>
1000fc10:	8809883a 	mov	r4,r17
1000fc14:	000bfb80 	call	1000bfb8 <_free_r>
1000fc18:	80000c15 	stw	zero,48(r16)
1000fc1c:	81401117 	ldw	r5,68(r16)
1000fc20:	28000326 	beq	r5,zero,1000fc30 <_fclose_r+0x9c>
1000fc24:	8809883a 	mov	r4,r17
1000fc28:	000bfb80 	call	1000bfb8 <_free_r>
1000fc2c:	80001115 	stw	zero,68(r16)
1000fc30:	8000030d 	sth	zero,12(r16)
1000fc34:	000be580 	call	1000be58 <__sfp_lock_release>
1000fc38:	9005883a 	mov	r2,r18
1000fc3c:	dfc00317 	ldw	ra,12(sp)
1000fc40:	dc800217 	ldw	r18,8(sp)
1000fc44:	dc400117 	ldw	r17,4(sp)
1000fc48:	dc000017 	ldw	r16,0(sp)
1000fc4c:	dec00404 	addi	sp,sp,16
1000fc50:	f800283a 	ret
1000fc54:	000be580 	call	1000be58 <__sfp_lock_release>
1000fc58:	0005883a 	mov	r2,zero
1000fc5c:	003ff706 	br	1000fc3c <__alt_data_end+0xf800fc3c>
1000fc60:	0005883a 	mov	r2,zero
1000fc64:	f800283a 	ret
1000fc68:	8809883a 	mov	r4,r17
1000fc6c:	000be440 	call	1000be44 <__sinit>
1000fc70:	8080030f 	ldh	r2,12(r16)
1000fc74:	103fd51e 	bne	r2,zero,1000fbcc <__alt_data_end+0xf800fbcc>
1000fc78:	003ff606 	br	1000fc54 <__alt_data_end+0xf800fc54>
1000fc7c:	81400417 	ldw	r5,16(r16)
1000fc80:	8809883a 	mov	r4,r17
1000fc84:	000bfb80 	call	1000bfb8 <_free_r>
1000fc88:	003fdd06 	br	1000fc00 <__alt_data_end+0xf800fc00>
1000fc8c:	04bfffc4 	movi	r18,-1
1000fc90:	003fd806 	br	1000fbf4 <__alt_data_end+0xf800fbf4>

1000fc94 <fclose>:
1000fc94:	008400b4 	movhi	r2,4098
1000fc98:	10826d04 	addi	r2,r2,2484
1000fc9c:	200b883a 	mov	r5,r4
1000fca0:	11000017 	ldw	r4,0(r2)
1000fca4:	000fb941 	jmpi	1000fb94 <_fclose_r>

1000fca8 <_fputwc_r>:
1000fca8:	3080030b 	ldhu	r2,12(r6)
1000fcac:	defff804 	addi	sp,sp,-32
1000fcb0:	dcc00415 	stw	r19,16(sp)
1000fcb4:	dc800315 	stw	r18,12(sp)
1000fcb8:	dc000115 	stw	r16,4(sp)
1000fcbc:	dfc00715 	stw	ra,28(sp)
1000fcc0:	dd400615 	stw	r21,24(sp)
1000fcc4:	dd000515 	stw	r20,20(sp)
1000fcc8:	dc400215 	stw	r17,8(sp)
1000fccc:	10c8000c 	andi	r3,r2,8192
1000fcd0:	3021883a 	mov	r16,r6
1000fcd4:	2027883a 	mov	r19,r4
1000fcd8:	2825883a 	mov	r18,r5
1000fcdc:	1800051e 	bne	r3,zero,1000fcf4 <_fputwc_r+0x4c>
1000fce0:	30c01917 	ldw	r3,100(r6)
1000fce4:	10880014 	ori	r2,r2,8192
1000fce8:	3080030d 	sth	r2,12(r6)
1000fcec:	18880014 	ori	r2,r3,8192
1000fcf0:	30801915 	stw	r2,100(r6)
1000fcf4:	000c4a00 	call	1000c4a0 <__locale_mb_cur_max>
1000fcf8:	00c00044 	movi	r3,1
1000fcfc:	10c03e26 	beq	r2,r3,1000fdf8 <_fputwc_r+0x150>
1000fd00:	9809883a 	mov	r4,r19
1000fd04:	d80b883a 	mov	r5,sp
1000fd08:	900d883a 	mov	r6,r18
1000fd0c:	81c01704 	addi	r7,r16,92
1000fd10:	0010cf80 	call	10010cf8 <_wcrtomb_r>
1000fd14:	1029883a 	mov	r20,r2
1000fd18:	00bfffc4 	movi	r2,-1
1000fd1c:	a0802026 	beq	r20,r2,1000fda0 <_fputwc_r+0xf8>
1000fd20:	d9400003 	ldbu	r5,0(sp)
1000fd24:	a0001c26 	beq	r20,zero,1000fd98 <_fputwc_r+0xf0>
1000fd28:	0023883a 	mov	r17,zero
1000fd2c:	05400284 	movi	r21,10
1000fd30:	00000906 	br	1000fd58 <_fputwc_r+0xb0>
1000fd34:	80800017 	ldw	r2,0(r16)
1000fd38:	11400005 	stb	r5,0(r2)
1000fd3c:	80c00017 	ldw	r3,0(r16)
1000fd40:	18c00044 	addi	r3,r3,1
1000fd44:	80c00015 	stw	r3,0(r16)
1000fd48:	8c400044 	addi	r17,r17,1
1000fd4c:	dc45883a 	add	r2,sp,r17
1000fd50:	8d00112e 	bgeu	r17,r20,1000fd98 <_fputwc_r+0xf0>
1000fd54:	11400003 	ldbu	r5,0(r2)
1000fd58:	80c00217 	ldw	r3,8(r16)
1000fd5c:	18ffffc4 	addi	r3,r3,-1
1000fd60:	80c00215 	stw	r3,8(r16)
1000fd64:	183ff30e 	bge	r3,zero,1000fd34 <__alt_data_end+0xf800fd34>
1000fd68:	80800617 	ldw	r2,24(r16)
1000fd6c:	18801916 	blt	r3,r2,1000fdd4 <_fputwc_r+0x12c>
1000fd70:	80800017 	ldw	r2,0(r16)
1000fd74:	11400005 	stb	r5,0(r2)
1000fd78:	80800017 	ldw	r2,0(r16)
1000fd7c:	10c00003 	ldbu	r3,0(r2)
1000fd80:	10800044 	addi	r2,r2,1
1000fd84:	1d402326 	beq	r3,r21,1000fe14 <_fputwc_r+0x16c>
1000fd88:	80800015 	stw	r2,0(r16)
1000fd8c:	8c400044 	addi	r17,r17,1
1000fd90:	dc45883a 	add	r2,sp,r17
1000fd94:	8d3fef36 	bltu	r17,r20,1000fd54 <__alt_data_end+0xf800fd54>
1000fd98:	9005883a 	mov	r2,r18
1000fd9c:	00000406 	br	1000fdb0 <_fputwc_r+0x108>
1000fda0:	80c0030b 	ldhu	r3,12(r16)
1000fda4:	a005883a 	mov	r2,r20
1000fda8:	18c01014 	ori	r3,r3,64
1000fdac:	80c0030d 	sth	r3,12(r16)
1000fdb0:	dfc00717 	ldw	ra,28(sp)
1000fdb4:	dd400617 	ldw	r21,24(sp)
1000fdb8:	dd000517 	ldw	r20,20(sp)
1000fdbc:	dcc00417 	ldw	r19,16(sp)
1000fdc0:	dc800317 	ldw	r18,12(sp)
1000fdc4:	dc400217 	ldw	r17,8(sp)
1000fdc8:	dc000117 	ldw	r16,4(sp)
1000fdcc:	dec00804 	addi	sp,sp,32
1000fdd0:	f800283a 	ret
1000fdd4:	9809883a 	mov	r4,r19
1000fdd8:	29403fcc 	andi	r5,r5,255
1000fddc:	800d883a 	mov	r6,r16
1000fde0:	0010b880 	call	10010b88 <__swbuf_r>
1000fde4:	10bfffe0 	cmpeqi	r2,r2,-1
1000fde8:	10803fcc 	andi	r2,r2,255
1000fdec:	103fd626 	beq	r2,zero,1000fd48 <__alt_data_end+0xf800fd48>
1000fdf0:	00bfffc4 	movi	r2,-1
1000fdf4:	003fee06 	br	1000fdb0 <__alt_data_end+0xf800fdb0>
1000fdf8:	90ffffc4 	addi	r3,r18,-1
1000fdfc:	01003f84 	movi	r4,254
1000fe00:	20ffbf36 	bltu	r4,r3,1000fd00 <__alt_data_end+0xf800fd00>
1000fe04:	900b883a 	mov	r5,r18
1000fe08:	dc800005 	stb	r18,0(sp)
1000fe0c:	1029883a 	mov	r20,r2
1000fe10:	003fc506 	br	1000fd28 <__alt_data_end+0xf800fd28>
1000fe14:	9809883a 	mov	r4,r19
1000fe18:	a80b883a 	mov	r5,r21
1000fe1c:	800d883a 	mov	r6,r16
1000fe20:	0010b880 	call	10010b88 <__swbuf_r>
1000fe24:	10bfffe0 	cmpeqi	r2,r2,-1
1000fe28:	003fef06 	br	1000fde8 <__alt_data_end+0xf800fde8>

1000fe2c <fputwc>:
1000fe2c:	defffc04 	addi	sp,sp,-16
1000fe30:	dc000115 	stw	r16,4(sp)
1000fe34:	040400b4 	movhi	r16,4098
1000fe38:	84026d04 	addi	r16,r16,2484
1000fe3c:	dc400215 	stw	r17,8(sp)
1000fe40:	2023883a 	mov	r17,r4
1000fe44:	81000017 	ldw	r4,0(r16)
1000fe48:	dfc00315 	stw	ra,12(sp)
1000fe4c:	280d883a 	mov	r6,r5
1000fe50:	20000626 	beq	r4,zero,1000fe6c <fputwc+0x40>
1000fe54:	20800e17 	ldw	r2,56(r4)
1000fe58:	1000041e 	bne	r2,zero,1000fe6c <fputwc+0x40>
1000fe5c:	d9400015 	stw	r5,0(sp)
1000fe60:	000be440 	call	1000be44 <__sinit>
1000fe64:	81000017 	ldw	r4,0(r16)
1000fe68:	d9800017 	ldw	r6,0(sp)
1000fe6c:	880b883a 	mov	r5,r17
1000fe70:	dfc00317 	ldw	ra,12(sp)
1000fe74:	dc400217 	ldw	r17,8(sp)
1000fe78:	dc000117 	ldw	r16,4(sp)
1000fe7c:	dec00404 	addi	sp,sp,16
1000fe80:	000fca81 	jmpi	1000fca8 <_fputwc_r>

1000fe84 <_fstat_r>:
1000fe84:	defffd04 	addi	sp,sp,-12
1000fe88:	dc000015 	stw	r16,0(sp)
1000fe8c:	040400f4 	movhi	r16,4099
1000fe90:	dc400115 	stw	r17,4(sp)
1000fe94:	8432c004 	addi	r16,r16,-13568
1000fe98:	2023883a 	mov	r17,r4
1000fe9c:	2809883a 	mov	r4,r5
1000fea0:	300b883a 	mov	r5,r6
1000fea4:	dfc00215 	stw	ra,8(sp)
1000fea8:	80000015 	stw	zero,0(r16)
1000feac:	0011ea80 	call	10011ea8 <fstat>
1000feb0:	00ffffc4 	movi	r3,-1
1000feb4:	10c00526 	beq	r2,r3,1000fecc <_fstat_r+0x48>
1000feb8:	dfc00217 	ldw	ra,8(sp)
1000febc:	dc400117 	ldw	r17,4(sp)
1000fec0:	dc000017 	ldw	r16,0(sp)
1000fec4:	dec00304 	addi	sp,sp,12
1000fec8:	f800283a 	ret
1000fecc:	80c00017 	ldw	r3,0(r16)
1000fed0:	183ff926 	beq	r3,zero,1000feb8 <__alt_data_end+0xf800feb8>
1000fed4:	88c00015 	stw	r3,0(r17)
1000fed8:	003ff706 	br	1000feb8 <__alt_data_end+0xf800feb8>

1000fedc <__sfvwrite_r>:
1000fedc:	30800217 	ldw	r2,8(r6)
1000fee0:	10004526 	beq	r2,zero,1000fff8 <__sfvwrite_r+0x11c>
1000fee4:	28c0030b 	ldhu	r3,12(r5)
1000fee8:	defff404 	addi	sp,sp,-48
1000feec:	dd400715 	stw	r21,28(sp)
1000fef0:	dcc00515 	stw	r19,20(sp)
1000fef4:	dc000215 	stw	r16,8(sp)
1000fef8:	dfc00b15 	stw	ra,44(sp)
1000fefc:	df000a15 	stw	fp,40(sp)
1000ff00:	ddc00915 	stw	r23,36(sp)
1000ff04:	dd800815 	stw	r22,32(sp)
1000ff08:	dd000615 	stw	r20,24(sp)
1000ff0c:	dc800415 	stw	r18,16(sp)
1000ff10:	dc400315 	stw	r17,12(sp)
1000ff14:	1880020c 	andi	r2,r3,8
1000ff18:	2821883a 	mov	r16,r5
1000ff1c:	202b883a 	mov	r21,r4
1000ff20:	3027883a 	mov	r19,r6
1000ff24:	10002526 	beq	r2,zero,1000ffbc <__sfvwrite_r+0xe0>
1000ff28:	28800417 	ldw	r2,16(r5)
1000ff2c:	10002326 	beq	r2,zero,1000ffbc <__sfvwrite_r+0xe0>
1000ff30:	1880008c 	andi	r2,r3,2
1000ff34:	9c400017 	ldw	r17,0(r19)
1000ff38:	10003126 	beq	r2,zero,10010000 <__sfvwrite_r+0x124>
1000ff3c:	0029883a 	mov	r20,zero
1000ff40:	0025883a 	mov	r18,zero
1000ff44:	05810004 	movi	r22,1024
1000ff48:	a00d883a 	mov	r6,r20
1000ff4c:	a809883a 	mov	r4,r21
1000ff50:	90002526 	beq	r18,zero,1000ffe8 <__sfvwrite_r+0x10c>
1000ff54:	900f883a 	mov	r7,r18
1000ff58:	81400717 	ldw	r5,28(r16)
1000ff5c:	b480012e 	bgeu	r22,r18,1000ff64 <__sfvwrite_r+0x88>
1000ff60:	01c10004 	movi	r7,1024
1000ff64:	80800917 	ldw	r2,36(r16)
1000ff68:	103ee83a 	callr	r2
1000ff6c:	0080510e 	bge	zero,r2,100100b4 <__sfvwrite_r+0x1d8>
1000ff70:	98c00217 	ldw	r3,8(r19)
1000ff74:	a0a9883a 	add	r20,r20,r2
1000ff78:	90a5c83a 	sub	r18,r18,r2
1000ff7c:	1885c83a 	sub	r2,r3,r2
1000ff80:	98800215 	stw	r2,8(r19)
1000ff84:	103ff01e 	bne	r2,zero,1000ff48 <__alt_data_end+0xf800ff48>
1000ff88:	0005883a 	mov	r2,zero
1000ff8c:	dfc00b17 	ldw	ra,44(sp)
1000ff90:	df000a17 	ldw	fp,40(sp)
1000ff94:	ddc00917 	ldw	r23,36(sp)
1000ff98:	dd800817 	ldw	r22,32(sp)
1000ff9c:	dd400717 	ldw	r21,28(sp)
1000ffa0:	dd000617 	ldw	r20,24(sp)
1000ffa4:	dcc00517 	ldw	r19,20(sp)
1000ffa8:	dc800417 	ldw	r18,16(sp)
1000ffac:	dc400317 	ldw	r17,12(sp)
1000ffb0:	dc000217 	ldw	r16,8(sp)
1000ffb4:	dec00c04 	addi	sp,sp,48
1000ffb8:	f800283a 	ret
1000ffbc:	a809883a 	mov	r4,r21
1000ffc0:	800b883a 	mov	r5,r16
1000ffc4:	0009e080 	call	10009e08 <__swsetup_r>
1000ffc8:	80c0030b 	ldhu	r3,12(r16)
1000ffcc:	103fd826 	beq	r2,zero,1000ff30 <__alt_data_end+0xf800ff30>
1000ffd0:	18c01014 	ori	r3,r3,64
1000ffd4:	80c0030d 	sth	r3,12(r16)
1000ffd8:	00c00244 	movi	r3,9
1000ffdc:	00bfffc4 	movi	r2,-1
1000ffe0:	a8c00015 	stw	r3,0(r21)
1000ffe4:	003fe906 	br	1000ff8c <__alt_data_end+0xf800ff8c>
1000ffe8:	8d000017 	ldw	r20,0(r17)
1000ffec:	8c800117 	ldw	r18,4(r17)
1000fff0:	8c400204 	addi	r17,r17,8
1000fff4:	003fd406 	br	1000ff48 <__alt_data_end+0xf800ff48>
1000fff8:	0005883a 	mov	r2,zero
1000fffc:	f800283a 	ret
10010000:	1880004c 	andi	r2,r3,1
10010004:	1000301e 	bne	r2,zero,100100c8 <__sfvwrite_r+0x1ec>
10010008:	002f883a 	mov	r23,zero
1001000c:	0025883a 	mov	r18,zero
10010010:	90001c26 	beq	r18,zero,10010084 <__sfvwrite_r+0x1a8>
10010014:	1880800c 	andi	r2,r3,512
10010018:	85000217 	ldw	r20,8(r16)
1001001c:	10006c26 	beq	r2,zero,100101d0 <__sfvwrite_r+0x2f4>
10010020:	a02d883a 	mov	r22,r20
10010024:	95008536 	bltu	r18,r20,1001023c <__sfvwrite_r+0x360>
10010028:	1881200c 	andi	r2,r3,1152
1001002c:	10009d1e 	bne	r2,zero,100102a4 <__sfvwrite_r+0x3c8>
10010030:	81000017 	ldw	r4,0(r16)
10010034:	a039883a 	mov	fp,r20
10010038:	9029883a 	mov	r20,r18
1001003c:	b80b883a 	mov	r5,r23
10010040:	b00d883a 	mov	r6,r22
10010044:	00104300 	call	10010430 <memmove>
10010048:	80c00217 	ldw	r3,8(r16)
1001004c:	81000017 	ldw	r4,0(r16)
10010050:	9005883a 	mov	r2,r18
10010054:	1f39c83a 	sub	fp,r3,fp
10010058:	258f883a 	add	r7,r4,r22
1001005c:	87000215 	stw	fp,8(r16)
10010060:	81c00015 	stw	r7,0(r16)
10010064:	98c00217 	ldw	r3,8(r19)
10010068:	b8af883a 	add	r23,r23,r2
1001006c:	90a5c83a 	sub	r18,r18,r2
10010070:	1d05c83a 	sub	r2,r3,r20
10010074:	98800215 	stw	r2,8(r19)
10010078:	103fc326 	beq	r2,zero,1000ff88 <__alt_data_end+0xf800ff88>
1001007c:	80c0030b 	ldhu	r3,12(r16)
10010080:	903fe41e 	bne	r18,zero,10010014 <__alt_data_end+0xf8010014>
10010084:	8dc00017 	ldw	r23,0(r17)
10010088:	8c800117 	ldw	r18,4(r17)
1001008c:	8c400204 	addi	r17,r17,8
10010090:	003fdf06 	br	10010010 <__alt_data_end+0xf8010010>
10010094:	00105e80 	call	100105e8 <_realloc_r>
10010098:	102d883a 	mov	r22,r2
1001009c:	1000a01e 	bne	r2,zero,10010320 <__sfvwrite_r+0x444>
100100a0:	81400417 	ldw	r5,16(r16)
100100a4:	a809883a 	mov	r4,r21
100100a8:	000bfb80 	call	1000bfb8 <_free_r>
100100ac:	00800304 	movi	r2,12
100100b0:	a8800015 	stw	r2,0(r21)
100100b4:	80c0030b 	ldhu	r3,12(r16)
100100b8:	00bfffc4 	movi	r2,-1
100100bc:	18c01014 	ori	r3,r3,64
100100c0:	80c0030d 	sth	r3,12(r16)
100100c4:	003fb106 	br	1000ff8c <__alt_data_end+0xf800ff8c>
100100c8:	0029883a 	mov	r20,zero
100100cc:	0011883a 	mov	r8,zero
100100d0:	0039883a 	mov	fp,zero
100100d4:	0025883a 	mov	r18,zero
100100d8:	90001f26 	beq	r18,zero,10010158 <__sfvwrite_r+0x27c>
100100dc:	40006826 	beq	r8,zero,10010280 <__sfvwrite_r+0x3a4>
100100e0:	a02f883a 	mov	r23,r20
100100e4:	9500012e 	bgeu	r18,r20,100100ec <__sfvwrite_r+0x210>
100100e8:	902f883a 	mov	r23,r18
100100ec:	81000017 	ldw	r4,0(r16)
100100f0:	80800417 	ldw	r2,16(r16)
100100f4:	b82d883a 	mov	r22,r23
100100f8:	81800217 	ldw	r6,8(r16)
100100fc:	81c00517 	ldw	r7,20(r16)
10010100:	1100022e 	bgeu	r2,r4,1001010c <__sfvwrite_r+0x230>
10010104:	31c7883a 	add	r3,r6,r7
10010108:	1dc01816 	blt	r3,r23,1001016c <__sfvwrite_r+0x290>
1001010c:	b9c03f16 	blt	r23,r7,1001020c <__sfvwrite_r+0x330>
10010110:	80800917 	ldw	r2,36(r16)
10010114:	81400717 	ldw	r5,28(r16)
10010118:	a809883a 	mov	r4,r21
1001011c:	da000115 	stw	r8,4(sp)
10010120:	e00d883a 	mov	r6,fp
10010124:	103ee83a 	callr	r2
10010128:	102d883a 	mov	r22,r2
1001012c:	da000117 	ldw	r8,4(sp)
10010130:	00bfe00e 	bge	zero,r2,100100b4 <__alt_data_end+0xf80100b4>
10010134:	a5a9c83a 	sub	r20,r20,r22
10010138:	a0001f26 	beq	r20,zero,100101b8 <__sfvwrite_r+0x2dc>
1001013c:	98800217 	ldw	r2,8(r19)
10010140:	e5b9883a 	add	fp,fp,r22
10010144:	95a5c83a 	sub	r18,r18,r22
10010148:	15adc83a 	sub	r22,r2,r22
1001014c:	9d800215 	stw	r22,8(r19)
10010150:	b03f8d26 	beq	r22,zero,1000ff88 <__alt_data_end+0xf800ff88>
10010154:	903fe11e 	bne	r18,zero,100100dc <__alt_data_end+0xf80100dc>
10010158:	8f000017 	ldw	fp,0(r17)
1001015c:	8c800117 	ldw	r18,4(r17)
10010160:	0011883a 	mov	r8,zero
10010164:	8c400204 	addi	r17,r17,8
10010168:	003fdb06 	br	100100d8 <__alt_data_end+0xf80100d8>
1001016c:	180d883a 	mov	r6,r3
10010170:	e00b883a 	mov	r5,fp
10010174:	da000115 	stw	r8,4(sp)
10010178:	d8c00015 	stw	r3,0(sp)
1001017c:	00104300 	call	10010430 <memmove>
10010180:	d8c00017 	ldw	r3,0(sp)
10010184:	80800017 	ldw	r2,0(r16)
10010188:	a809883a 	mov	r4,r21
1001018c:	800b883a 	mov	r5,r16
10010190:	10c5883a 	add	r2,r2,r3
10010194:	80800015 	stw	r2,0(r16)
10010198:	d8c00015 	stw	r3,0(sp)
1001019c:	000b8880 	call	1000b888 <_fflush_r>
100101a0:	d8c00017 	ldw	r3,0(sp)
100101a4:	da000117 	ldw	r8,4(sp)
100101a8:	103fc21e 	bne	r2,zero,100100b4 <__alt_data_end+0xf80100b4>
100101ac:	182d883a 	mov	r22,r3
100101b0:	a5a9c83a 	sub	r20,r20,r22
100101b4:	a03fe11e 	bne	r20,zero,1001013c <__alt_data_end+0xf801013c>
100101b8:	a809883a 	mov	r4,r21
100101bc:	800b883a 	mov	r5,r16
100101c0:	000b8880 	call	1000b888 <_fflush_r>
100101c4:	103fbb1e 	bne	r2,zero,100100b4 <__alt_data_end+0xf80100b4>
100101c8:	0011883a 	mov	r8,zero
100101cc:	003fdb06 	br	1001013c <__alt_data_end+0xf801013c>
100101d0:	81000017 	ldw	r4,0(r16)
100101d4:	80800417 	ldw	r2,16(r16)
100101d8:	1100012e 	bgeu	r2,r4,100101e0 <__sfvwrite_r+0x304>
100101dc:	a4805a36 	bltu	r20,r18,10010348 <__sfvwrite_r+0x46c>
100101e0:	81c00517 	ldw	r7,20(r16)
100101e4:	91c01a36 	bltu	r18,r7,10010250 <__sfvwrite_r+0x374>
100101e8:	80800917 	ldw	r2,36(r16)
100101ec:	81400717 	ldw	r5,28(r16)
100101f0:	a809883a 	mov	r4,r21
100101f4:	b80d883a 	mov	r6,r23
100101f8:	103ee83a 	callr	r2
100101fc:	1029883a 	mov	r20,r2
10010200:	00bfac0e 	bge	zero,r2,100100b4 <__alt_data_end+0xf80100b4>
10010204:	a005883a 	mov	r2,r20
10010208:	003f9606 	br	10010064 <__alt_data_end+0xf8010064>
1001020c:	b80d883a 	mov	r6,r23
10010210:	e00b883a 	mov	r5,fp
10010214:	da000115 	stw	r8,4(sp)
10010218:	00104300 	call	10010430 <memmove>
1001021c:	80800217 	ldw	r2,8(r16)
10010220:	80c00017 	ldw	r3,0(r16)
10010224:	da000117 	ldw	r8,4(sp)
10010228:	15c5c83a 	sub	r2,r2,r23
1001022c:	1def883a 	add	r23,r3,r23
10010230:	80800215 	stw	r2,8(r16)
10010234:	85c00015 	stw	r23,0(r16)
10010238:	003fbe06 	br	10010134 <__alt_data_end+0xf8010134>
1001023c:	81000017 	ldw	r4,0(r16)
10010240:	9039883a 	mov	fp,r18
10010244:	9029883a 	mov	r20,r18
10010248:	902d883a 	mov	r22,r18
1001024c:	003f7b06 	br	1001003c <__alt_data_end+0xf801003c>
10010250:	b80b883a 	mov	r5,r23
10010254:	900d883a 	mov	r6,r18
10010258:	00104300 	call	10010430 <memmove>
1001025c:	80c00217 	ldw	r3,8(r16)
10010260:	80800017 	ldw	r2,0(r16)
10010264:	9029883a 	mov	r20,r18
10010268:	1c87c83a 	sub	r3,r3,r18
1001026c:	1485883a 	add	r2,r2,r18
10010270:	80800015 	stw	r2,0(r16)
10010274:	80c00215 	stw	r3,8(r16)
10010278:	9005883a 	mov	r2,r18
1001027c:	003f7906 	br	10010064 <__alt_data_end+0xf8010064>
10010280:	e009883a 	mov	r4,fp
10010284:	01400284 	movi	r5,10
10010288:	900d883a 	mov	r6,r18
1001028c:	000ce580 	call	1000ce58 <memchr>
10010290:	10003826 	beq	r2,zero,10010374 <__sfvwrite_r+0x498>
10010294:	10800044 	addi	r2,r2,1
10010298:	1729c83a 	sub	r20,r2,fp
1001029c:	02000044 	movi	r8,1
100102a0:	003f8f06 	br	100100e0 <__alt_data_end+0xf80100e0>
100102a4:	80800517 	ldw	r2,20(r16)
100102a8:	81400417 	ldw	r5,16(r16)
100102ac:	87000017 	ldw	fp,0(r16)
100102b0:	10a9883a 	add	r20,r2,r2
100102b4:	a085883a 	add	r2,r20,r2
100102b8:	1028d7fa 	srli	r20,r2,31
100102bc:	e179c83a 	sub	fp,fp,r5
100102c0:	e1000044 	addi	r4,fp,1
100102c4:	a085883a 	add	r2,r20,r2
100102c8:	1029d07a 	srai	r20,r2,1
100102cc:	2485883a 	add	r2,r4,r18
100102d0:	a00d883a 	mov	r6,r20
100102d4:	a080022e 	bgeu	r20,r2,100102e0 <__sfvwrite_r+0x404>
100102d8:	1029883a 	mov	r20,r2
100102dc:	100d883a 	mov	r6,r2
100102e0:	18c1000c 	andi	r3,r3,1024
100102e4:	a809883a 	mov	r4,r21
100102e8:	183f6a26 	beq	r3,zero,10010094 <__alt_data_end+0xf8010094>
100102ec:	300b883a 	mov	r5,r6
100102f0:	000c6b00 	call	1000c6b0 <_malloc_r>
100102f4:	102d883a 	mov	r22,r2
100102f8:	103f6c26 	beq	r2,zero,100100ac <__alt_data_end+0xf80100ac>
100102fc:	81400417 	ldw	r5,16(r16)
10010300:	1009883a 	mov	r4,r2
10010304:	e00d883a 	mov	r6,fp
10010308:	000cf400 	call	1000cf40 <memcpy>
1001030c:	8080030b 	ldhu	r2,12(r16)
10010310:	00fedfc4 	movi	r3,-1153
10010314:	10c4703a 	and	r2,r2,r3
10010318:	10802014 	ori	r2,r2,128
1001031c:	8080030d 	sth	r2,12(r16)
10010320:	b709883a 	add	r4,r22,fp
10010324:	a707c83a 	sub	r3,r20,fp
10010328:	85800415 	stw	r22,16(r16)
1001032c:	85000515 	stw	r20,20(r16)
10010330:	81000015 	stw	r4,0(r16)
10010334:	9039883a 	mov	fp,r18
10010338:	80c00215 	stw	r3,8(r16)
1001033c:	9029883a 	mov	r20,r18
10010340:	902d883a 	mov	r22,r18
10010344:	003f3d06 	br	1001003c <__alt_data_end+0xf801003c>
10010348:	b80b883a 	mov	r5,r23
1001034c:	a00d883a 	mov	r6,r20
10010350:	00104300 	call	10010430 <memmove>
10010354:	80800017 	ldw	r2,0(r16)
10010358:	a809883a 	mov	r4,r21
1001035c:	800b883a 	mov	r5,r16
10010360:	1505883a 	add	r2,r2,r20
10010364:	80800015 	stw	r2,0(r16)
10010368:	000b8880 	call	1000b888 <_fflush_r>
1001036c:	103fa526 	beq	r2,zero,10010204 <__alt_data_end+0xf8010204>
10010370:	003f5006 	br	100100b4 <__alt_data_end+0xf80100b4>
10010374:	95000044 	addi	r20,r18,1
10010378:	02000044 	movi	r8,1
1001037c:	003f5806 	br	100100e0 <__alt_data_end+0xf80100e0>

10010380 <_isatty_r>:
10010380:	defffd04 	addi	sp,sp,-12
10010384:	dc000015 	stw	r16,0(sp)
10010388:	040400f4 	movhi	r16,4099
1001038c:	dc400115 	stw	r17,4(sp)
10010390:	8432c004 	addi	r16,r16,-13568
10010394:	2023883a 	mov	r17,r4
10010398:	2809883a 	mov	r4,r5
1001039c:	dfc00215 	stw	ra,8(sp)
100103a0:	80000015 	stw	zero,0(r16)
100103a4:	0011fb00 	call	10011fb0 <isatty>
100103a8:	00ffffc4 	movi	r3,-1
100103ac:	10c00526 	beq	r2,r3,100103c4 <_isatty_r+0x44>
100103b0:	dfc00217 	ldw	ra,8(sp)
100103b4:	dc400117 	ldw	r17,4(sp)
100103b8:	dc000017 	ldw	r16,0(sp)
100103bc:	dec00304 	addi	sp,sp,12
100103c0:	f800283a 	ret
100103c4:	80c00017 	ldw	r3,0(r16)
100103c8:	183ff926 	beq	r3,zero,100103b0 <__alt_data_end+0xf80103b0>
100103cc:	88c00015 	stw	r3,0(r17)
100103d0:	003ff706 	br	100103b0 <__alt_data_end+0xf80103b0>

100103d4 <_lseek_r>:
100103d4:	defffd04 	addi	sp,sp,-12
100103d8:	dc000015 	stw	r16,0(sp)
100103dc:	040400f4 	movhi	r16,4099
100103e0:	dc400115 	stw	r17,4(sp)
100103e4:	8432c004 	addi	r16,r16,-13568
100103e8:	2023883a 	mov	r17,r4
100103ec:	2809883a 	mov	r4,r5
100103f0:	300b883a 	mov	r5,r6
100103f4:	380d883a 	mov	r6,r7
100103f8:	dfc00215 	stw	ra,8(sp)
100103fc:	80000015 	stw	zero,0(r16)
10010400:	00121900 	call	10012190 <lseek>
10010404:	00ffffc4 	movi	r3,-1
10010408:	10c00526 	beq	r2,r3,10010420 <_lseek_r+0x4c>
1001040c:	dfc00217 	ldw	ra,8(sp)
10010410:	dc400117 	ldw	r17,4(sp)
10010414:	dc000017 	ldw	r16,0(sp)
10010418:	dec00304 	addi	sp,sp,12
1001041c:	f800283a 	ret
10010420:	80c00017 	ldw	r3,0(r16)
10010424:	183ff926 	beq	r3,zero,1001040c <__alt_data_end+0xf801040c>
10010428:	88c00015 	stw	r3,0(r17)
1001042c:	003ff706 	br	1001040c <__alt_data_end+0xf801040c>

10010430 <memmove>:
10010430:	2005883a 	mov	r2,r4
10010434:	29000b2e 	bgeu	r5,r4,10010464 <memmove+0x34>
10010438:	298f883a 	add	r7,r5,r6
1001043c:	21c0092e 	bgeu	r4,r7,10010464 <memmove+0x34>
10010440:	2187883a 	add	r3,r4,r6
10010444:	198bc83a 	sub	r5,r3,r6
10010448:	30004b26 	beq	r6,zero,10010578 <memmove+0x148>
1001044c:	39ffffc4 	addi	r7,r7,-1
10010450:	39000003 	ldbu	r4,0(r7)
10010454:	18ffffc4 	addi	r3,r3,-1
10010458:	19000005 	stb	r4,0(r3)
1001045c:	197ffb1e 	bne	r3,r5,1001044c <__alt_data_end+0xf801044c>
10010460:	f800283a 	ret
10010464:	00c003c4 	movi	r3,15
10010468:	1980412e 	bgeu	r3,r6,10010570 <memmove+0x140>
1001046c:	1146b03a 	or	r3,r2,r5
10010470:	18c000cc 	andi	r3,r3,3
10010474:	1800411e 	bne	r3,zero,1001057c <memmove+0x14c>
10010478:	33fffc04 	addi	r15,r6,-16
1001047c:	781ed13a 	srli	r15,r15,4
10010480:	28c00104 	addi	r3,r5,4
10010484:	13400104 	addi	r13,r2,4
10010488:	781c913a 	slli	r14,r15,4
1001048c:	2b000204 	addi	r12,r5,8
10010490:	12c00204 	addi	r11,r2,8
10010494:	73800504 	addi	r14,r14,20
10010498:	2a800304 	addi	r10,r5,12
1001049c:	12400304 	addi	r9,r2,12
100104a0:	2b9d883a 	add	r14,r5,r14
100104a4:	2811883a 	mov	r8,r5
100104a8:	100f883a 	mov	r7,r2
100104ac:	41000017 	ldw	r4,0(r8)
100104b0:	39c00404 	addi	r7,r7,16
100104b4:	18c00404 	addi	r3,r3,16
100104b8:	393ffc15 	stw	r4,-16(r7)
100104bc:	193ffc17 	ldw	r4,-16(r3)
100104c0:	6b400404 	addi	r13,r13,16
100104c4:	5ac00404 	addi	r11,r11,16
100104c8:	693ffc15 	stw	r4,-16(r13)
100104cc:	61000017 	ldw	r4,0(r12)
100104d0:	4a400404 	addi	r9,r9,16
100104d4:	42000404 	addi	r8,r8,16
100104d8:	593ffc15 	stw	r4,-16(r11)
100104dc:	51000017 	ldw	r4,0(r10)
100104e0:	63000404 	addi	r12,r12,16
100104e4:	52800404 	addi	r10,r10,16
100104e8:	493ffc15 	stw	r4,-16(r9)
100104ec:	1bbfef1e 	bne	r3,r14,100104ac <__alt_data_end+0xf80104ac>
100104f0:	79000044 	addi	r4,r15,1
100104f4:	2008913a 	slli	r4,r4,4
100104f8:	328003cc 	andi	r10,r6,15
100104fc:	02c000c4 	movi	r11,3
10010500:	1107883a 	add	r3,r2,r4
10010504:	290b883a 	add	r5,r5,r4
10010508:	5a801e2e 	bgeu	r11,r10,10010584 <memmove+0x154>
1001050c:	1813883a 	mov	r9,r3
10010510:	2811883a 	mov	r8,r5
10010514:	500f883a 	mov	r7,r10
10010518:	41000017 	ldw	r4,0(r8)
1001051c:	4a400104 	addi	r9,r9,4
10010520:	39ffff04 	addi	r7,r7,-4
10010524:	493fff15 	stw	r4,-4(r9)
10010528:	42000104 	addi	r8,r8,4
1001052c:	59fffa36 	bltu	r11,r7,10010518 <__alt_data_end+0xf8010518>
10010530:	513fff04 	addi	r4,r10,-4
10010534:	2008d0ba 	srli	r4,r4,2
10010538:	318000cc 	andi	r6,r6,3
1001053c:	21000044 	addi	r4,r4,1
10010540:	2109883a 	add	r4,r4,r4
10010544:	2109883a 	add	r4,r4,r4
10010548:	1907883a 	add	r3,r3,r4
1001054c:	290b883a 	add	r5,r5,r4
10010550:	30000926 	beq	r6,zero,10010578 <memmove+0x148>
10010554:	198d883a 	add	r6,r3,r6
10010558:	29c00003 	ldbu	r7,0(r5)
1001055c:	18c00044 	addi	r3,r3,1
10010560:	29400044 	addi	r5,r5,1
10010564:	19ffffc5 	stb	r7,-1(r3)
10010568:	19bffb1e 	bne	r3,r6,10010558 <__alt_data_end+0xf8010558>
1001056c:	f800283a 	ret
10010570:	1007883a 	mov	r3,r2
10010574:	003ff606 	br	10010550 <__alt_data_end+0xf8010550>
10010578:	f800283a 	ret
1001057c:	1007883a 	mov	r3,r2
10010580:	003ff406 	br	10010554 <__alt_data_end+0xf8010554>
10010584:	500d883a 	mov	r6,r10
10010588:	003ff106 	br	10010550 <__alt_data_end+0xf8010550>

1001058c <_read_r>:
1001058c:	defffd04 	addi	sp,sp,-12
10010590:	dc000015 	stw	r16,0(sp)
10010594:	040400f4 	movhi	r16,4099
10010598:	dc400115 	stw	r17,4(sp)
1001059c:	8432c004 	addi	r16,r16,-13568
100105a0:	2023883a 	mov	r17,r4
100105a4:	2809883a 	mov	r4,r5
100105a8:	300b883a 	mov	r5,r6
100105ac:	380d883a 	mov	r6,r7
100105b0:	dfc00215 	stw	ra,8(sp)
100105b4:	80000015 	stw	zero,0(r16)
100105b8:	00123740 	call	10012374 <read>
100105bc:	00ffffc4 	movi	r3,-1
100105c0:	10c00526 	beq	r2,r3,100105d8 <_read_r+0x4c>
100105c4:	dfc00217 	ldw	ra,8(sp)
100105c8:	dc400117 	ldw	r17,4(sp)
100105cc:	dc000017 	ldw	r16,0(sp)
100105d0:	dec00304 	addi	sp,sp,12
100105d4:	f800283a 	ret
100105d8:	80c00017 	ldw	r3,0(r16)
100105dc:	183ff926 	beq	r3,zero,100105c4 <__alt_data_end+0xf80105c4>
100105e0:	88c00015 	stw	r3,0(r17)
100105e4:	003ff706 	br	100105c4 <__alt_data_end+0xf80105c4>

100105e8 <_realloc_r>:
100105e8:	defff604 	addi	sp,sp,-40
100105ec:	dcc00315 	stw	r19,12(sp)
100105f0:	dc400115 	stw	r17,4(sp)
100105f4:	dfc00915 	stw	ra,36(sp)
100105f8:	df000815 	stw	fp,32(sp)
100105fc:	ddc00715 	stw	r23,28(sp)
10010600:	dd800615 	stw	r22,24(sp)
10010604:	dd400515 	stw	r21,20(sp)
10010608:	dd000415 	stw	r20,16(sp)
1001060c:	dc800215 	stw	r18,8(sp)
10010610:	dc000015 	stw	r16,0(sp)
10010614:	2827883a 	mov	r19,r5
10010618:	3023883a 	mov	r17,r6
1001061c:	2800bf26 	beq	r5,zero,1001091c <_realloc_r+0x334>
10010620:	2025883a 	mov	r18,r4
10010624:	00122e40 	call	100122e4 <__malloc_lock>
10010628:	98ffff17 	ldw	r3,-4(r19)
1001062c:	01bfff04 	movi	r6,-4
10010630:	890002c4 	addi	r4,r17,11
10010634:	01c00584 	movi	r7,22
10010638:	9d7ffe04 	addi	r21,r19,-8
1001063c:	19a0703a 	and	r16,r3,r6
10010640:	39003f2e 	bgeu	r7,r4,10010740 <_realloc_r+0x158>
10010644:	053ffe04 	movi	r20,-8
10010648:	2528703a 	and	r20,r4,r20
1001064c:	a00f883a 	mov	r7,r20
10010650:	a0008216 	blt	r20,zero,1001085c <_realloc_r+0x274>
10010654:	a4408136 	bltu	r20,r17,1001085c <_realloc_r+0x274>
10010658:	81c03c0e 	bge	r16,r7,1001074c <_realloc_r+0x164>
1001065c:	070400b4 	movhi	fp,4098
10010660:	e73ce704 	addi	fp,fp,-3172
10010664:	e1000217 	ldw	r4,8(fp)
10010668:	ac05883a 	add	r2,r21,r16
1001066c:	2080bf26 	beq	r4,r2,1001096c <_realloc_r+0x384>
10010670:	11000117 	ldw	r4,4(r2)
10010674:	023fff84 	movi	r8,-2
10010678:	2210703a 	and	r8,r4,r8
1001067c:	1211883a 	add	r8,r2,r8
10010680:	41400117 	ldw	r5,4(r8)
10010684:	2940004c 	andi	r5,r5,1
10010688:	28004a1e 	bne	r5,zero,100107b4 <_realloc_r+0x1cc>
1001068c:	017fff04 	movi	r5,-4
10010690:	2148703a 	and	r4,r4,r5
10010694:	2409883a 	add	r4,r4,r16
10010698:	21c0ad0e 	bge	r4,r7,10010950 <_realloc_r+0x368>
1001069c:	18c0004c 	andi	r3,r3,1
100106a0:	18007f1e 	bne	r3,zero,100108a0 <_realloc_r+0x2b8>
100106a4:	9dfffe17 	ldw	r23,-8(r19)
100106a8:	adefc83a 	sub	r23,r21,r23
100106ac:	bd800117 	ldw	r22,4(r23)
100106b0:	b14a703a 	and	r5,r22,r5
100106b4:	216d883a 	add	r22,r4,r5
100106b8:	b1c04516 	blt	r22,r7,100107d0 <_realloc_r+0x1e8>
100106bc:	10c00317 	ldw	r3,12(r2)
100106c0:	10800217 	ldw	r2,8(r2)
100106c4:	81bfff04 	addi	r6,r16,-4
100106c8:	bc400204 	addi	r17,r23,8
100106cc:	10c00315 	stw	r3,12(r2)
100106d0:	18800215 	stw	r2,8(r3)
100106d4:	b9400217 	ldw	r5,8(r23)
100106d8:	b8c00317 	ldw	r3,12(r23)
100106dc:	00800904 	movi	r2,36
100106e0:	28c00315 	stw	r3,12(r5)
100106e4:	19400215 	stw	r5,8(r3)
100106e8:	1180ef36 	bltu	r2,r6,10010aa8 <_realloc_r+0x4c0>
100106ec:	008004c4 	movi	r2,19
100106f0:	1180da2e 	bgeu	r2,r6,10010a5c <_realloc_r+0x474>
100106f4:	98800017 	ldw	r2,0(r19)
100106f8:	b8800215 	stw	r2,8(r23)
100106fc:	98800117 	ldw	r2,4(r19)
10010700:	b8800315 	stw	r2,12(r23)
10010704:	008006c4 	movi	r2,27
10010708:	1180fc2e 	bgeu	r2,r6,10010afc <_realloc_r+0x514>
1001070c:	98800217 	ldw	r2,8(r19)
10010710:	b8800415 	stw	r2,16(r23)
10010714:	98800317 	ldw	r2,12(r19)
10010718:	b8800515 	stw	r2,20(r23)
1001071c:	00800904 	movi	r2,36
10010720:	3080421e 	bne	r6,r2,1001082c <_realloc_r+0x244>
10010724:	98800417 	ldw	r2,16(r19)
10010728:	9cc00604 	addi	r19,r19,24
1001072c:	b8c00804 	addi	r3,r23,32
10010730:	b8800615 	stw	r2,24(r23)
10010734:	98bfff17 	ldw	r2,-4(r19)
10010738:	b8800715 	stw	r2,28(r23)
1001073c:	00003d06 	br	10010834 <_realloc_r+0x24c>
10010740:	01c00404 	movi	r7,16
10010744:	3829883a 	mov	r20,r7
10010748:	003fc206 	br	10010654 <__alt_data_end+0xf8010654>
1001074c:	9823883a 	mov	r17,r19
10010750:	850fc83a 	sub	r7,r16,r20
10010754:	008003c4 	movi	r2,15
10010758:	18c0004c 	andi	r3,r3,1
1001075c:	11c04336 	bltu	r2,r7,1001086c <_realloc_r+0x284>
10010760:	1c06b03a 	or	r3,r3,r16
10010764:	a8c00115 	stw	r3,4(r21)
10010768:	ac21883a 	add	r16,r21,r16
1001076c:	80c00117 	ldw	r3,4(r16)
10010770:	18c00054 	ori	r3,r3,1
10010774:	80c00115 	stw	r3,4(r16)
10010778:	9009883a 	mov	r4,r18
1001077c:	00123040 	call	10012304 <__malloc_unlock>
10010780:	8805883a 	mov	r2,r17
10010784:	dfc00917 	ldw	ra,36(sp)
10010788:	df000817 	ldw	fp,32(sp)
1001078c:	ddc00717 	ldw	r23,28(sp)
10010790:	dd800617 	ldw	r22,24(sp)
10010794:	dd400517 	ldw	r21,20(sp)
10010798:	dd000417 	ldw	r20,16(sp)
1001079c:	dcc00317 	ldw	r19,12(sp)
100107a0:	dc800217 	ldw	r18,8(sp)
100107a4:	dc400117 	ldw	r17,4(sp)
100107a8:	dc000017 	ldw	r16,0(sp)
100107ac:	dec00a04 	addi	sp,sp,40
100107b0:	f800283a 	ret
100107b4:	18c0004c 	andi	r3,r3,1
100107b8:	1800391e 	bne	r3,zero,100108a0 <_realloc_r+0x2b8>
100107bc:	9dfffe17 	ldw	r23,-8(r19)
100107c0:	00bfff04 	movi	r2,-4
100107c4:	adefc83a 	sub	r23,r21,r23
100107c8:	b9400117 	ldw	r5,4(r23)
100107cc:	288a703a 	and	r5,r5,r2
100107d0:	2c2d883a 	add	r22,r5,r16
100107d4:	b1c03216 	blt	r22,r7,100108a0 <_realloc_r+0x2b8>
100107d8:	b8800317 	ldw	r2,12(r23)
100107dc:	b8c00217 	ldw	r3,8(r23)
100107e0:	81bfff04 	addi	r6,r16,-4
100107e4:	01000904 	movi	r4,36
100107e8:	18800315 	stw	r2,12(r3)
100107ec:	10c00215 	stw	r3,8(r2)
100107f0:	bc400204 	addi	r17,r23,8
100107f4:	2180ac36 	bltu	r4,r6,10010aa8 <_realloc_r+0x4c0>
100107f8:	008004c4 	movi	r2,19
100107fc:	1180972e 	bgeu	r2,r6,10010a5c <_realloc_r+0x474>
10010800:	98800017 	ldw	r2,0(r19)
10010804:	b8800215 	stw	r2,8(r23)
10010808:	98800117 	ldw	r2,4(r19)
1001080c:	b8800315 	stw	r2,12(r23)
10010810:	008006c4 	movi	r2,27
10010814:	1180b92e 	bgeu	r2,r6,10010afc <_realloc_r+0x514>
10010818:	98800217 	ldw	r2,8(r19)
1001081c:	b8800415 	stw	r2,16(r23)
10010820:	98800317 	ldw	r2,12(r19)
10010824:	b8800515 	stw	r2,20(r23)
10010828:	313fbe26 	beq	r6,r4,10010724 <__alt_data_end+0xf8010724>
1001082c:	b8c00604 	addi	r3,r23,24
10010830:	9cc00404 	addi	r19,r19,16
10010834:	98800017 	ldw	r2,0(r19)
10010838:	b021883a 	mov	r16,r22
1001083c:	b82b883a 	mov	r21,r23
10010840:	18800015 	stw	r2,0(r3)
10010844:	98800117 	ldw	r2,4(r19)
10010848:	18800115 	stw	r2,4(r3)
1001084c:	98800217 	ldw	r2,8(r19)
10010850:	18800215 	stw	r2,8(r3)
10010854:	b8c00117 	ldw	r3,4(r23)
10010858:	003fbd06 	br	10010750 <__alt_data_end+0xf8010750>
1001085c:	00800304 	movi	r2,12
10010860:	90800015 	stw	r2,0(r18)
10010864:	0005883a 	mov	r2,zero
10010868:	003fc606 	br	10010784 <__alt_data_end+0xf8010784>
1001086c:	1d06b03a 	or	r3,r3,r20
10010870:	ad0b883a 	add	r5,r21,r20
10010874:	a8c00115 	stw	r3,4(r21)
10010878:	38800054 	ori	r2,r7,1
1001087c:	28800115 	stw	r2,4(r5)
10010880:	29cf883a 	add	r7,r5,r7
10010884:	38800117 	ldw	r2,4(r7)
10010888:	9009883a 	mov	r4,r18
1001088c:	29400204 	addi	r5,r5,8
10010890:	10800054 	ori	r2,r2,1
10010894:	38800115 	stw	r2,4(r7)
10010898:	000bfb80 	call	1000bfb8 <_free_r>
1001089c:	003fb606 	br	10010778 <__alt_data_end+0xf8010778>
100108a0:	880b883a 	mov	r5,r17
100108a4:	9009883a 	mov	r4,r18
100108a8:	000c6b00 	call	1000c6b0 <_malloc_r>
100108ac:	1023883a 	mov	r17,r2
100108b0:	1000aa26 	beq	r2,zero,10010b5c <_realloc_r+0x574>
100108b4:	98ffff17 	ldw	r3,-4(r19)
100108b8:	113ffe04 	addi	r4,r2,-8
100108bc:	00bfff84 	movi	r2,-2
100108c0:	1884703a 	and	r2,r3,r2
100108c4:	a885883a 	add	r2,r21,r2
100108c8:	20808626 	beq	r4,r2,10010ae4 <_realloc_r+0x4fc>
100108cc:	81bfff04 	addi	r6,r16,-4
100108d0:	00800904 	movi	r2,36
100108d4:	11807036 	bltu	r2,r6,10010a98 <_realloc_r+0x4b0>
100108d8:	00c004c4 	movi	r3,19
100108dc:	19805636 	bltu	r3,r6,10010a38 <_realloc_r+0x450>
100108e0:	8805883a 	mov	r2,r17
100108e4:	9807883a 	mov	r3,r19
100108e8:	19000017 	ldw	r4,0(r3)
100108ec:	11000015 	stw	r4,0(r2)
100108f0:	19000117 	ldw	r4,4(r3)
100108f4:	11000115 	stw	r4,4(r2)
100108f8:	18c00217 	ldw	r3,8(r3)
100108fc:	10c00215 	stw	r3,8(r2)
10010900:	980b883a 	mov	r5,r19
10010904:	9009883a 	mov	r4,r18
10010908:	000bfb80 	call	1000bfb8 <_free_r>
1001090c:	9009883a 	mov	r4,r18
10010910:	00123040 	call	10012304 <__malloc_unlock>
10010914:	8805883a 	mov	r2,r17
10010918:	003f9a06 	br	10010784 <__alt_data_end+0xf8010784>
1001091c:	300b883a 	mov	r5,r6
10010920:	dfc00917 	ldw	ra,36(sp)
10010924:	df000817 	ldw	fp,32(sp)
10010928:	ddc00717 	ldw	r23,28(sp)
1001092c:	dd800617 	ldw	r22,24(sp)
10010930:	dd400517 	ldw	r21,20(sp)
10010934:	dd000417 	ldw	r20,16(sp)
10010938:	dcc00317 	ldw	r19,12(sp)
1001093c:	dc800217 	ldw	r18,8(sp)
10010940:	dc400117 	ldw	r17,4(sp)
10010944:	dc000017 	ldw	r16,0(sp)
10010948:	dec00a04 	addi	sp,sp,40
1001094c:	000c6b01 	jmpi	1000c6b0 <_malloc_r>
10010950:	11400317 	ldw	r5,12(r2)
10010954:	10800217 	ldw	r2,8(r2)
10010958:	9823883a 	mov	r17,r19
1001095c:	2021883a 	mov	r16,r4
10010960:	11400315 	stw	r5,12(r2)
10010964:	28800215 	stw	r2,8(r5)
10010968:	003f7906 	br	10010750 <__alt_data_end+0xf8010750>
1001096c:	21000117 	ldw	r4,4(r4)
10010970:	00bfff04 	movi	r2,-4
10010974:	a1800404 	addi	r6,r20,16
10010978:	2088703a 	and	r4,r4,r2
1001097c:	2409883a 	add	r4,r4,r16
10010980:	2180380e 	bge	r4,r6,10010a64 <_realloc_r+0x47c>
10010984:	18c0004c 	andi	r3,r3,1
10010988:	183fc51e 	bne	r3,zero,100108a0 <__alt_data_end+0xf80108a0>
1001098c:	9dfffe17 	ldw	r23,-8(r19)
10010990:	adefc83a 	sub	r23,r21,r23
10010994:	b9400117 	ldw	r5,4(r23)
10010998:	288a703a 	and	r5,r5,r2
1001099c:	216d883a 	add	r22,r4,r5
100109a0:	b1bf8b16 	blt	r22,r6,100107d0 <__alt_data_end+0xf80107d0>
100109a4:	b8800317 	ldw	r2,12(r23)
100109a8:	b8c00217 	ldw	r3,8(r23)
100109ac:	81bfff04 	addi	r6,r16,-4
100109b0:	01000904 	movi	r4,36
100109b4:	18800315 	stw	r2,12(r3)
100109b8:	10c00215 	stw	r3,8(r2)
100109bc:	bc400204 	addi	r17,r23,8
100109c0:	21805a36 	bltu	r4,r6,10010b2c <_realloc_r+0x544>
100109c4:	008004c4 	movi	r2,19
100109c8:	1180562e 	bgeu	r2,r6,10010b24 <_realloc_r+0x53c>
100109cc:	98800017 	ldw	r2,0(r19)
100109d0:	b8800215 	stw	r2,8(r23)
100109d4:	98800117 	ldw	r2,4(r19)
100109d8:	b8800315 	stw	r2,12(r23)
100109dc:	008006c4 	movi	r2,27
100109e0:	11805636 	bltu	r2,r6,10010b3c <_realloc_r+0x554>
100109e4:	b8800404 	addi	r2,r23,16
100109e8:	9cc00204 	addi	r19,r19,8
100109ec:	98c00017 	ldw	r3,0(r19)
100109f0:	10c00015 	stw	r3,0(r2)
100109f4:	98c00117 	ldw	r3,4(r19)
100109f8:	10c00115 	stw	r3,4(r2)
100109fc:	98c00217 	ldw	r3,8(r19)
10010a00:	10c00215 	stw	r3,8(r2)
10010a04:	bd07883a 	add	r3,r23,r20
10010a08:	b505c83a 	sub	r2,r22,r20
10010a0c:	e0c00215 	stw	r3,8(fp)
10010a10:	10800054 	ori	r2,r2,1
10010a14:	18800115 	stw	r2,4(r3)
10010a18:	b8800117 	ldw	r2,4(r23)
10010a1c:	9009883a 	mov	r4,r18
10010a20:	1080004c 	andi	r2,r2,1
10010a24:	a0a8b03a 	or	r20,r20,r2
10010a28:	bd000115 	stw	r20,4(r23)
10010a2c:	00123040 	call	10012304 <__malloc_unlock>
10010a30:	8805883a 	mov	r2,r17
10010a34:	003f5306 	br	10010784 <__alt_data_end+0xf8010784>
10010a38:	98c00017 	ldw	r3,0(r19)
10010a3c:	88c00015 	stw	r3,0(r17)
10010a40:	98c00117 	ldw	r3,4(r19)
10010a44:	88c00115 	stw	r3,4(r17)
10010a48:	00c006c4 	movi	r3,27
10010a4c:	19801d36 	bltu	r3,r6,10010ac4 <_realloc_r+0x4dc>
10010a50:	88800204 	addi	r2,r17,8
10010a54:	98c00204 	addi	r3,r19,8
10010a58:	003fa306 	br	100108e8 <__alt_data_end+0xf80108e8>
10010a5c:	8807883a 	mov	r3,r17
10010a60:	003f7406 	br	10010834 <__alt_data_end+0xf8010834>
10010a64:	ad2b883a 	add	r21,r21,r20
10010a68:	2505c83a 	sub	r2,r4,r20
10010a6c:	e5400215 	stw	r21,8(fp)
10010a70:	10800054 	ori	r2,r2,1
10010a74:	a8800115 	stw	r2,4(r21)
10010a78:	98bfff17 	ldw	r2,-4(r19)
10010a7c:	9009883a 	mov	r4,r18
10010a80:	1080004c 	andi	r2,r2,1
10010a84:	a0a8b03a 	or	r20,r20,r2
10010a88:	9d3fff15 	stw	r20,-4(r19)
10010a8c:	00123040 	call	10012304 <__malloc_unlock>
10010a90:	9805883a 	mov	r2,r19
10010a94:	003f3b06 	br	10010784 <__alt_data_end+0xf8010784>
10010a98:	8809883a 	mov	r4,r17
10010a9c:	980b883a 	mov	r5,r19
10010aa0:	00104300 	call	10010430 <memmove>
10010aa4:	003f9606 	br	10010900 <__alt_data_end+0xf8010900>
10010aa8:	8809883a 	mov	r4,r17
10010aac:	980b883a 	mov	r5,r19
10010ab0:	00104300 	call	10010430 <memmove>
10010ab4:	b8c00117 	ldw	r3,4(r23)
10010ab8:	b021883a 	mov	r16,r22
10010abc:	b82b883a 	mov	r21,r23
10010ac0:	003f2306 	br	10010750 <__alt_data_end+0xf8010750>
10010ac4:	98c00217 	ldw	r3,8(r19)
10010ac8:	88c00215 	stw	r3,8(r17)
10010acc:	98c00317 	ldw	r3,12(r19)
10010ad0:	88c00315 	stw	r3,12(r17)
10010ad4:	30800c26 	beq	r6,r2,10010b08 <_realloc_r+0x520>
10010ad8:	88800404 	addi	r2,r17,16
10010adc:	98c00404 	addi	r3,r19,16
10010ae0:	003f8106 	br	100108e8 <__alt_data_end+0xf80108e8>
10010ae4:	893fff17 	ldw	r4,-4(r17)
10010ae8:	00bfff04 	movi	r2,-4
10010aec:	9823883a 	mov	r17,r19
10010af0:	2084703a 	and	r2,r4,r2
10010af4:	80a1883a 	add	r16,r16,r2
10010af8:	003f1506 	br	10010750 <__alt_data_end+0xf8010750>
10010afc:	b8c00404 	addi	r3,r23,16
10010b00:	9cc00204 	addi	r19,r19,8
10010b04:	003f4b06 	br	10010834 <__alt_data_end+0xf8010834>
10010b08:	99000417 	ldw	r4,16(r19)
10010b0c:	88800604 	addi	r2,r17,24
10010b10:	98c00604 	addi	r3,r19,24
10010b14:	89000415 	stw	r4,16(r17)
10010b18:	99000517 	ldw	r4,20(r19)
10010b1c:	89000515 	stw	r4,20(r17)
10010b20:	003f7106 	br	100108e8 <__alt_data_end+0xf80108e8>
10010b24:	8805883a 	mov	r2,r17
10010b28:	003fb006 	br	100109ec <__alt_data_end+0xf80109ec>
10010b2c:	8809883a 	mov	r4,r17
10010b30:	980b883a 	mov	r5,r19
10010b34:	00104300 	call	10010430 <memmove>
10010b38:	003fb206 	br	10010a04 <__alt_data_end+0xf8010a04>
10010b3c:	98800217 	ldw	r2,8(r19)
10010b40:	b8800415 	stw	r2,16(r23)
10010b44:	98800317 	ldw	r2,12(r19)
10010b48:	b8800515 	stw	r2,20(r23)
10010b4c:	31000726 	beq	r6,r4,10010b6c <_realloc_r+0x584>
10010b50:	b8800604 	addi	r2,r23,24
10010b54:	9cc00404 	addi	r19,r19,16
10010b58:	003fa406 	br	100109ec <__alt_data_end+0xf80109ec>
10010b5c:	9009883a 	mov	r4,r18
10010b60:	00123040 	call	10012304 <__malloc_unlock>
10010b64:	0005883a 	mov	r2,zero
10010b68:	003f0606 	br	10010784 <__alt_data_end+0xf8010784>
10010b6c:	98c00417 	ldw	r3,16(r19)
10010b70:	9cc00604 	addi	r19,r19,24
10010b74:	b8800804 	addi	r2,r23,32
10010b78:	b8c00615 	stw	r3,24(r23)
10010b7c:	98ffff17 	ldw	r3,-4(r19)
10010b80:	b8c00715 	stw	r3,28(r23)
10010b84:	003f9906 	br	100109ec <__alt_data_end+0xf80109ec>

10010b88 <__swbuf_r>:
10010b88:	defffc04 	addi	sp,sp,-16
10010b8c:	dc800215 	stw	r18,8(sp)
10010b90:	dc400115 	stw	r17,4(sp)
10010b94:	dc000015 	stw	r16,0(sp)
10010b98:	dfc00315 	stw	ra,12(sp)
10010b9c:	2025883a 	mov	r18,r4
10010ba0:	2823883a 	mov	r17,r5
10010ba4:	3021883a 	mov	r16,r6
10010ba8:	20000226 	beq	r4,zero,10010bb4 <__swbuf_r+0x2c>
10010bac:	20800e17 	ldw	r2,56(r4)
10010bb0:	10004126 	beq	r2,zero,10010cb8 <__swbuf_r+0x130>
10010bb4:	80c00617 	ldw	r3,24(r16)
10010bb8:	8180030b 	ldhu	r6,12(r16)
10010bbc:	80c00215 	stw	r3,8(r16)
10010bc0:	30c0020c 	andi	r3,r6,8
10010bc4:	18003526 	beq	r3,zero,10010c9c <__swbuf_r+0x114>
10010bc8:	80c00417 	ldw	r3,16(r16)
10010bcc:	18003326 	beq	r3,zero,10010c9c <__swbuf_r+0x114>
10010bd0:	3088000c 	andi	r2,r6,8192
10010bd4:	8c403fcc 	andi	r17,r17,255
10010bd8:	10001726 	beq	r2,zero,10010c38 <__swbuf_r+0xb0>
10010bdc:	80800017 	ldw	r2,0(r16)
10010be0:	81000517 	ldw	r4,20(r16)
10010be4:	10c7c83a 	sub	r3,r2,r3
10010be8:	19001d0e 	bge	r3,r4,10010c60 <__swbuf_r+0xd8>
10010bec:	18c00044 	addi	r3,r3,1
10010bf0:	81400217 	ldw	r5,8(r16)
10010bf4:	11000044 	addi	r4,r2,1
10010bf8:	81000015 	stw	r4,0(r16)
10010bfc:	297fffc4 	addi	r5,r5,-1
10010c00:	81400215 	stw	r5,8(r16)
10010c04:	14400005 	stb	r17,0(r2)
10010c08:	80800517 	ldw	r2,20(r16)
10010c0c:	10c01d26 	beq	r2,r3,10010c84 <__swbuf_r+0xfc>
10010c10:	8080030b 	ldhu	r2,12(r16)
10010c14:	1080004c 	andi	r2,r2,1
10010c18:	1000181e 	bne	r2,zero,10010c7c <__swbuf_r+0xf4>
10010c1c:	8805883a 	mov	r2,r17
10010c20:	dfc00317 	ldw	ra,12(sp)
10010c24:	dc800217 	ldw	r18,8(sp)
10010c28:	dc400117 	ldw	r17,4(sp)
10010c2c:	dc000017 	ldw	r16,0(sp)
10010c30:	dec00404 	addi	sp,sp,16
10010c34:	f800283a 	ret
10010c38:	81001917 	ldw	r4,100(r16)
10010c3c:	00b7ffc4 	movi	r2,-8193
10010c40:	31880014 	ori	r6,r6,8192
10010c44:	2084703a 	and	r2,r4,r2
10010c48:	80801915 	stw	r2,100(r16)
10010c4c:	80800017 	ldw	r2,0(r16)
10010c50:	81000517 	ldw	r4,20(r16)
10010c54:	8180030d 	sth	r6,12(r16)
10010c58:	10c7c83a 	sub	r3,r2,r3
10010c5c:	193fe316 	blt	r3,r4,10010bec <__alt_data_end+0xf8010bec>
10010c60:	9009883a 	mov	r4,r18
10010c64:	800b883a 	mov	r5,r16
10010c68:	000b8880 	call	1000b888 <_fflush_r>
10010c6c:	1000091e 	bne	r2,zero,10010c94 <__swbuf_r+0x10c>
10010c70:	80800017 	ldw	r2,0(r16)
10010c74:	00c00044 	movi	r3,1
10010c78:	003fdd06 	br	10010bf0 <__alt_data_end+0xf8010bf0>
10010c7c:	00800284 	movi	r2,10
10010c80:	88bfe61e 	bne	r17,r2,10010c1c <__alt_data_end+0xf8010c1c>
10010c84:	9009883a 	mov	r4,r18
10010c88:	800b883a 	mov	r5,r16
10010c8c:	000b8880 	call	1000b888 <_fflush_r>
10010c90:	103fe226 	beq	r2,zero,10010c1c <__alt_data_end+0xf8010c1c>
10010c94:	00bfffc4 	movi	r2,-1
10010c98:	003fe106 	br	10010c20 <__alt_data_end+0xf8010c20>
10010c9c:	9009883a 	mov	r4,r18
10010ca0:	800b883a 	mov	r5,r16
10010ca4:	0009e080 	call	10009e08 <__swsetup_r>
10010ca8:	1000051e 	bne	r2,zero,10010cc0 <__swbuf_r+0x138>
10010cac:	8180030b 	ldhu	r6,12(r16)
10010cb0:	80c00417 	ldw	r3,16(r16)
10010cb4:	003fc606 	br	10010bd0 <__alt_data_end+0xf8010bd0>
10010cb8:	000be440 	call	1000be44 <__sinit>
10010cbc:	003fbd06 	br	10010bb4 <__alt_data_end+0xf8010bb4>
10010cc0:	80c0030b 	ldhu	r3,12(r16)
10010cc4:	00bfffc4 	movi	r2,-1
10010cc8:	18c01014 	ori	r3,r3,64
10010ccc:	80c0030d 	sth	r3,12(r16)
10010cd0:	00c00244 	movi	r3,9
10010cd4:	90c00015 	stw	r3,0(r18)
10010cd8:	003fd106 	br	10010c20 <__alt_data_end+0xf8010c20>

10010cdc <__swbuf>:
10010cdc:	00c400b4 	movhi	r3,4098
10010ce0:	18c26d04 	addi	r3,r3,2484
10010ce4:	2005883a 	mov	r2,r4
10010ce8:	19000017 	ldw	r4,0(r3)
10010cec:	280d883a 	mov	r6,r5
10010cf0:	100b883a 	mov	r5,r2
10010cf4:	0010b881 	jmpi	10010b88 <__swbuf_r>

10010cf8 <_wcrtomb_r>:
10010cf8:	defff604 	addi	sp,sp,-40
10010cfc:	008400b4 	movhi	r2,4098
10010d00:	dc800815 	stw	r18,32(sp)
10010d04:	dc400715 	stw	r17,28(sp)
10010d08:	dc000615 	stw	r16,24(sp)
10010d0c:	10827104 	addi	r2,r2,2500
10010d10:	dfc00915 	stw	ra,36(sp)
10010d14:	2021883a 	mov	r16,r4
10010d18:	3823883a 	mov	r17,r7
10010d1c:	14800017 	ldw	r18,0(r2)
10010d20:	28001426 	beq	r5,zero,10010d74 <_wcrtomb_r+0x7c>
10010d24:	d9400415 	stw	r5,16(sp)
10010d28:	d9800515 	stw	r6,20(sp)
10010d2c:	000c4940 	call	1000c494 <__locale_charset>
10010d30:	d9400417 	ldw	r5,16(sp)
10010d34:	d9800517 	ldw	r6,20(sp)
10010d38:	8009883a 	mov	r4,r16
10010d3c:	dc400015 	stw	r17,0(sp)
10010d40:	100f883a 	mov	r7,r2
10010d44:	903ee83a 	callr	r18
10010d48:	00ffffc4 	movi	r3,-1
10010d4c:	10c0031e 	bne	r2,r3,10010d5c <_wcrtomb_r+0x64>
10010d50:	88000015 	stw	zero,0(r17)
10010d54:	00c02284 	movi	r3,138
10010d58:	80c00015 	stw	r3,0(r16)
10010d5c:	dfc00917 	ldw	ra,36(sp)
10010d60:	dc800817 	ldw	r18,32(sp)
10010d64:	dc400717 	ldw	r17,28(sp)
10010d68:	dc000617 	ldw	r16,24(sp)
10010d6c:	dec00a04 	addi	sp,sp,40
10010d70:	f800283a 	ret
10010d74:	000c4940 	call	1000c494 <__locale_charset>
10010d78:	8009883a 	mov	r4,r16
10010d7c:	dc400015 	stw	r17,0(sp)
10010d80:	d9400104 	addi	r5,sp,4
10010d84:	000d883a 	mov	r6,zero
10010d88:	100f883a 	mov	r7,r2
10010d8c:	903ee83a 	callr	r18
10010d90:	003fed06 	br	10010d48 <__alt_data_end+0xf8010d48>

10010d94 <wcrtomb>:
10010d94:	defff504 	addi	sp,sp,-44
10010d98:	dc400515 	stw	r17,20(sp)
10010d9c:	dc000415 	stw	r16,16(sp)
10010da0:	dfc00a15 	stw	ra,40(sp)
10010da4:	dd400915 	stw	r21,36(sp)
10010da8:	dd000815 	stw	r20,32(sp)
10010dac:	dcc00715 	stw	r19,28(sp)
10010db0:	dc800615 	stw	r18,24(sp)
10010db4:	2021883a 	mov	r16,r4
10010db8:	3023883a 	mov	r17,r6
10010dbc:	20001d26 	beq	r4,zero,10010e34 <wcrtomb+0xa0>
10010dc0:	048400b4 	movhi	r18,4098
10010dc4:	94826d04 	addi	r18,r18,2484
10010dc8:	008400b4 	movhi	r2,4098
10010dcc:	95400017 	ldw	r21,0(r18)
10010dd0:	10827104 	addi	r2,r2,2500
10010dd4:	15000017 	ldw	r20,0(r2)
10010dd8:	2827883a 	mov	r19,r5
10010ddc:	000c4940 	call	1000c494 <__locale_charset>
10010de0:	a809883a 	mov	r4,r21
10010de4:	dc400015 	stw	r17,0(sp)
10010de8:	800b883a 	mov	r5,r16
10010dec:	980d883a 	mov	r6,r19
10010df0:	100f883a 	mov	r7,r2
10010df4:	a03ee83a 	callr	r20
10010df8:	00ffffc4 	movi	r3,-1
10010dfc:	10c0041e 	bne	r2,r3,10010e10 <wcrtomb+0x7c>
10010e00:	90c00017 	ldw	r3,0(r18)
10010e04:	01002284 	movi	r4,138
10010e08:	88000015 	stw	zero,0(r17)
10010e0c:	19000015 	stw	r4,0(r3)
10010e10:	dfc00a17 	ldw	ra,40(sp)
10010e14:	dd400917 	ldw	r21,36(sp)
10010e18:	dd000817 	ldw	r20,32(sp)
10010e1c:	dcc00717 	ldw	r19,28(sp)
10010e20:	dc800617 	ldw	r18,24(sp)
10010e24:	dc400517 	ldw	r17,20(sp)
10010e28:	dc000417 	ldw	r16,16(sp)
10010e2c:	dec00b04 	addi	sp,sp,44
10010e30:	f800283a 	ret
10010e34:	048400b4 	movhi	r18,4098
10010e38:	94826d04 	addi	r18,r18,2484
10010e3c:	008400b4 	movhi	r2,4098
10010e40:	94c00017 	ldw	r19,0(r18)
10010e44:	10827104 	addi	r2,r2,2500
10010e48:	14000017 	ldw	r16,0(r2)
10010e4c:	000c4940 	call	1000c494 <__locale_charset>
10010e50:	9809883a 	mov	r4,r19
10010e54:	dc400015 	stw	r17,0(sp)
10010e58:	d9400104 	addi	r5,sp,4
10010e5c:	000d883a 	mov	r6,zero
10010e60:	100f883a 	mov	r7,r2
10010e64:	803ee83a 	callr	r16
10010e68:	003fe306 	br	10010df8 <__alt_data_end+0xf8010df8>

10010e6c <__ascii_wctomb>:
10010e6c:	28000526 	beq	r5,zero,10010e84 <__ascii_wctomb+0x18>
10010e70:	00803fc4 	movi	r2,255
10010e74:	11800536 	bltu	r2,r6,10010e8c <__ascii_wctomb+0x20>
10010e78:	29800005 	stb	r6,0(r5)
10010e7c:	00800044 	movi	r2,1
10010e80:	f800283a 	ret
10010e84:	0005883a 	mov	r2,zero
10010e88:	f800283a 	ret
10010e8c:	00802284 	movi	r2,138
10010e90:	20800015 	stw	r2,0(r4)
10010e94:	00bfffc4 	movi	r2,-1
10010e98:	f800283a 	ret

10010e9c <_wctomb_r>:
10010e9c:	008400b4 	movhi	r2,4098
10010ea0:	defff904 	addi	sp,sp,-28
10010ea4:	10827104 	addi	r2,r2,2500
10010ea8:	dfc00615 	stw	ra,24(sp)
10010eac:	dc400515 	stw	r17,20(sp)
10010eb0:	dc000415 	stw	r16,16(sp)
10010eb4:	3823883a 	mov	r17,r7
10010eb8:	14000017 	ldw	r16,0(r2)
10010ebc:	d9000115 	stw	r4,4(sp)
10010ec0:	d9400215 	stw	r5,8(sp)
10010ec4:	d9800315 	stw	r6,12(sp)
10010ec8:	000c4940 	call	1000c494 <__locale_charset>
10010ecc:	d9000117 	ldw	r4,4(sp)
10010ed0:	d9400217 	ldw	r5,8(sp)
10010ed4:	d9800317 	ldw	r6,12(sp)
10010ed8:	dc400015 	stw	r17,0(sp)
10010edc:	100f883a 	mov	r7,r2
10010ee0:	803ee83a 	callr	r16
10010ee4:	dfc00617 	ldw	ra,24(sp)
10010ee8:	dc400517 	ldw	r17,20(sp)
10010eec:	dc000417 	ldw	r16,16(sp)
10010ef0:	dec00704 	addi	sp,sp,28
10010ef4:	f800283a 	ret

10010ef8 <__muldi3>:
10010ef8:	defff604 	addi	sp,sp,-40
10010efc:	dd800615 	stw	r22,24(sp)
10010f00:	dd400515 	stw	r21,20(sp)
10010f04:	25bfffcc 	andi	r22,r4,65535
10010f08:	357fffcc 	andi	r21,r6,65535
10010f0c:	dc400115 	stw	r17,4(sp)
10010f10:	2022d43a 	srli	r17,r4,16
10010f14:	dcc00315 	stw	r19,12(sp)
10010f18:	dc800215 	stw	r18,8(sp)
10010f1c:	2027883a 	mov	r19,r4
10010f20:	2825883a 	mov	r18,r5
10010f24:	a809883a 	mov	r4,r21
10010f28:	b00b883a 	mov	r5,r22
10010f2c:	dfc00915 	stw	ra,36(sp)
10010f30:	df000815 	stw	fp,32(sp)
10010f34:	ddc00715 	stw	r23,28(sp)
10010f38:	3839883a 	mov	fp,r7
10010f3c:	302ed43a 	srli	r23,r6,16
10010f40:	dd000415 	stw	r20,16(sp)
10010f44:	dc000015 	stw	r16,0(sp)
10010f48:	3029883a 	mov	r20,r6
10010f4c:	0007bcc0 	call	10007bcc <__mulsi3>
10010f50:	a809883a 	mov	r4,r21
10010f54:	880b883a 	mov	r5,r17
10010f58:	1021883a 	mov	r16,r2
10010f5c:	0007bcc0 	call	10007bcc <__mulsi3>
10010f60:	880b883a 	mov	r5,r17
10010f64:	b809883a 	mov	r4,r23
10010f68:	102b883a 	mov	r21,r2
10010f6c:	0007bcc0 	call	10007bcc <__mulsi3>
10010f70:	b809883a 	mov	r4,r23
10010f74:	b00b883a 	mov	r5,r22
10010f78:	1023883a 	mov	r17,r2
10010f7c:	0007bcc0 	call	10007bcc <__mulsi3>
10010f80:	8012d43a 	srli	r9,r16,16
10010f84:	a885883a 	add	r2,r21,r2
10010f88:	1251883a 	add	r8,r2,r9
10010f8c:	4540022e 	bgeu	r8,r21,10010f98 <__muldi3+0xa0>
10010f90:	00800074 	movhi	r2,1
10010f94:	88a3883a 	add	r17,r17,r2
10010f98:	4006d43a 	srli	r3,r8,16
10010f9c:	4010943a 	slli	r8,r8,16
10010fa0:	9809883a 	mov	r4,r19
10010fa4:	e00b883a 	mov	r5,fp
10010fa8:	843fffcc 	andi	r16,r16,65535
10010fac:	88e3883a 	add	r17,r17,r3
10010fb0:	4421883a 	add	r16,r8,r16
10010fb4:	0007bcc0 	call	10007bcc <__mulsi3>
10010fb8:	a009883a 	mov	r4,r20
10010fbc:	900b883a 	mov	r5,r18
10010fc0:	1027883a 	mov	r19,r2
10010fc4:	0007bcc0 	call	10007bcc <__mulsi3>
10010fc8:	9885883a 	add	r2,r19,r2
10010fcc:	1447883a 	add	r3,r2,r17
10010fd0:	8005883a 	mov	r2,r16
10010fd4:	dfc00917 	ldw	ra,36(sp)
10010fd8:	df000817 	ldw	fp,32(sp)
10010fdc:	ddc00717 	ldw	r23,28(sp)
10010fe0:	dd800617 	ldw	r22,24(sp)
10010fe4:	dd400517 	ldw	r21,20(sp)
10010fe8:	dd000417 	ldw	r20,16(sp)
10010fec:	dcc00317 	ldw	r19,12(sp)
10010ff0:	dc800217 	ldw	r18,8(sp)
10010ff4:	dc400117 	ldw	r17,4(sp)
10010ff8:	dc000017 	ldw	r16,0(sp)
10010ffc:	dec00a04 	addi	sp,sp,40
10011000:	f800283a 	ret

10011004 <__udivdi3>:
10011004:	defff504 	addi	sp,sp,-44
10011008:	dcc00415 	stw	r19,16(sp)
1001100c:	dc000115 	stw	r16,4(sp)
10011010:	dfc00a15 	stw	ra,40(sp)
10011014:	df000915 	stw	fp,36(sp)
10011018:	ddc00815 	stw	r23,32(sp)
1001101c:	dd800715 	stw	r22,28(sp)
10011020:	dd400615 	stw	r21,24(sp)
10011024:	dd000515 	stw	r20,20(sp)
10011028:	dc800315 	stw	r18,12(sp)
1001102c:	dc400215 	stw	r17,8(sp)
10011030:	2027883a 	mov	r19,r4
10011034:	2821883a 	mov	r16,r5
10011038:	3800471e 	bne	r7,zero,10011158 <__udivdi3+0x154>
1001103c:	3025883a 	mov	r18,r6
10011040:	2023883a 	mov	r17,r4
10011044:	2980592e 	bgeu	r5,r6,100111ac <__udivdi3+0x1a8>
10011048:	00bfffd4 	movui	r2,65535
1001104c:	2829883a 	mov	r20,r5
10011050:	1180b236 	bltu	r2,r6,1001131c <__udivdi3+0x318>
10011054:	00803fc4 	movi	r2,255
10011058:	1181622e 	bgeu	r2,r6,100115e4 <__udivdi3+0x5e0>
1001105c:	00800204 	movi	r2,8
10011060:	1007883a 	mov	r3,r2
10011064:	3084d83a 	srl	r2,r6,r2
10011068:	01040074 	movhi	r4,4097
1001106c:	21117f04 	addi	r4,r4,17916
10011070:	2085883a 	add	r2,r4,r2
10011074:	11000003 	ldbu	r4,0(r2)
10011078:	20c9883a 	add	r4,r4,r3
1001107c:	00c00804 	movi	r3,32
10011080:	1907c83a 	sub	r3,r3,r4
10011084:	18000526 	beq	r3,zero,1001109c <__udivdi3+0x98>
10011088:	80e0983a 	sll	r16,r16,r3
1001108c:	9908d83a 	srl	r4,r19,r4
10011090:	30e4983a 	sll	r18,r6,r3
10011094:	98e2983a 	sll	r17,r19,r3
10011098:	8128b03a 	or	r20,r16,r4
1001109c:	902ad43a 	srli	r21,r18,16
100110a0:	a009883a 	mov	r4,r20
100110a4:	95bfffcc 	andi	r22,r18,65535
100110a8:	a80b883a 	mov	r5,r21
100110ac:	000546c0 	call	1000546c <__umodsi3>
100110b0:	a009883a 	mov	r4,r20
100110b4:	a80b883a 	mov	r5,r21
100110b8:	102f883a 	mov	r23,r2
100110bc:	00054640 	call	10005464 <__udivsi3>
100110c0:	1009883a 	mov	r4,r2
100110c4:	b00b883a 	mov	r5,r22
100110c8:	1021883a 	mov	r16,r2
100110cc:	0007bcc0 	call	10007bcc <__mulsi3>
100110d0:	b82e943a 	slli	r23,r23,16
100110d4:	8808d43a 	srli	r4,r17,16
100110d8:	b906b03a 	or	r3,r23,r4
100110dc:	1880052e 	bgeu	r3,r2,100110f4 <__udivdi3+0xf0>
100110e0:	1c87883a 	add	r3,r3,r18
100110e4:	813fffc4 	addi	r4,r16,-1
100110e8:	1c800136 	bltu	r3,r18,100110f0 <__udivdi3+0xec>
100110ec:	18815236 	bltu	r3,r2,10011638 <__udivdi3+0x634>
100110f0:	2021883a 	mov	r16,r4
100110f4:	18a7c83a 	sub	r19,r3,r2
100110f8:	9809883a 	mov	r4,r19
100110fc:	a80b883a 	mov	r5,r21
10011100:	000546c0 	call	1000546c <__umodsi3>
10011104:	1029883a 	mov	r20,r2
10011108:	9809883a 	mov	r4,r19
1001110c:	a80b883a 	mov	r5,r21
10011110:	a028943a 	slli	r20,r20,16
10011114:	00054640 	call	10005464 <__udivsi3>
10011118:	1009883a 	mov	r4,r2
1001111c:	b00b883a 	mov	r5,r22
10011120:	8c7fffcc 	andi	r17,r17,65535
10011124:	1027883a 	mov	r19,r2
10011128:	a462b03a 	or	r17,r20,r17
1001112c:	0007bcc0 	call	10007bcc <__mulsi3>
10011130:	8880052e 	bgeu	r17,r2,10011148 <__udivdi3+0x144>
10011134:	8ca3883a 	add	r17,r17,r18
10011138:	98ffffc4 	addi	r3,r19,-1
1001113c:	8c811036 	bltu	r17,r18,10011580 <__udivdi3+0x57c>
10011140:	88810f2e 	bgeu	r17,r2,10011580 <__udivdi3+0x57c>
10011144:	9cffff84 	addi	r19,r19,-2
10011148:	8020943a 	slli	r16,r16,16
1001114c:	0007883a 	mov	r3,zero
10011150:	9c04b03a 	or	r2,r19,r16
10011154:	00006006 	br	100112d8 <__udivdi3+0x2d4>
10011158:	29c05d36 	bltu	r5,r7,100112d0 <__udivdi3+0x2cc>
1001115c:	00bfffd4 	movui	r2,65535
10011160:	11c0692e 	bgeu	r2,r7,10011308 <__udivdi3+0x304>
10011164:	00804034 	movhi	r2,256
10011168:	10bfffc4 	addi	r2,r2,-1
1001116c:	11c10e2e 	bgeu	r2,r7,100115a8 <__udivdi3+0x5a4>
10011170:	01400604 	movi	r5,24
10011174:	2811883a 	mov	r8,r5
10011178:	394ad83a 	srl	r5,r7,r5
1001117c:	00840074 	movhi	r2,4097
10011180:	10917f04 	addi	r2,r2,17916
10011184:	114b883a 	add	r5,r2,r5
10011188:	29400003 	ldbu	r5,0(r5)
1001118c:	00c00804 	movi	r3,32
10011190:	2a0b883a 	add	r5,r5,r8
10011194:	196fc83a 	sub	r23,r3,r5
10011198:	b8006b1e 	bne	r23,zero,10011348 <__udivdi3+0x344>
1001119c:	3c011436 	bltu	r7,r16,100115f0 <__udivdi3+0x5ec>
100111a0:	9985403a 	cmpgeu	r2,r19,r6
100111a4:	0007883a 	mov	r3,zero
100111a8:	00004b06 	br	100112d8 <__udivdi3+0x2d4>
100111ac:	3000041e 	bne	r6,zero,100111c0 <__udivdi3+0x1bc>
100111b0:	01000044 	movi	r4,1
100111b4:	000b883a 	mov	r5,zero
100111b8:	00054640 	call	10005464 <__udivsi3>
100111bc:	1025883a 	mov	r18,r2
100111c0:	00bfffd4 	movui	r2,65535
100111c4:	14805b2e 	bgeu	r2,r18,10011334 <__udivdi3+0x330>
100111c8:	00804034 	movhi	r2,256
100111cc:	10bfffc4 	addi	r2,r2,-1
100111d0:	1480fe2e 	bgeu	r2,r18,100115cc <__udivdi3+0x5c8>
100111d4:	00800604 	movi	r2,24
100111d8:	1007883a 	mov	r3,r2
100111dc:	9084d83a 	srl	r2,r18,r2
100111e0:	01040074 	movhi	r4,4097
100111e4:	21117f04 	addi	r4,r4,17916
100111e8:	2085883a 	add	r2,r4,r2
100111ec:	11800003 	ldbu	r6,0(r2)
100111f0:	01c00804 	movi	r7,32
100111f4:	30c7883a 	add	r3,r6,r3
100111f8:	38cfc83a 	sub	r7,r7,r3
100111fc:	3800a71e 	bne	r7,zero,1001149c <__udivdi3+0x498>
10011200:	9028d43a 	srli	r20,r18,16
10011204:	84a1c83a 	sub	r16,r16,r18
10011208:	957fffcc 	andi	r21,r18,65535
1001120c:	00c00044 	movi	r3,1
10011210:	8009883a 	mov	r4,r16
10011214:	a00b883a 	mov	r5,r20
10011218:	d8c00015 	stw	r3,0(sp)
1001121c:	000546c0 	call	1000546c <__umodsi3>
10011220:	8009883a 	mov	r4,r16
10011224:	a00b883a 	mov	r5,r20
10011228:	102d883a 	mov	r22,r2
1001122c:	00054640 	call	10005464 <__udivsi3>
10011230:	1009883a 	mov	r4,r2
10011234:	a80b883a 	mov	r5,r21
10011238:	1021883a 	mov	r16,r2
1001123c:	0007bcc0 	call	10007bcc <__mulsi3>
10011240:	b02c943a 	slli	r22,r22,16
10011244:	880ed43a 	srli	r7,r17,16
10011248:	d8c00017 	ldw	r3,0(sp)
1001124c:	b1ccb03a 	or	r6,r22,r7
10011250:	3080052e 	bgeu	r6,r2,10011268 <__udivdi3+0x264>
10011254:	348d883a 	add	r6,r6,r18
10011258:	813fffc4 	addi	r4,r16,-1
1001125c:	34800136 	bltu	r6,r18,10011264 <__udivdi3+0x260>
10011260:	3080f236 	bltu	r6,r2,1001162c <__udivdi3+0x628>
10011264:	2021883a 	mov	r16,r4
10011268:	30a7c83a 	sub	r19,r6,r2
1001126c:	9809883a 	mov	r4,r19
10011270:	a00b883a 	mov	r5,r20
10011274:	d8c00015 	stw	r3,0(sp)
10011278:	000546c0 	call	1000546c <__umodsi3>
1001127c:	102d883a 	mov	r22,r2
10011280:	9809883a 	mov	r4,r19
10011284:	a00b883a 	mov	r5,r20
10011288:	b02c943a 	slli	r22,r22,16
1001128c:	00054640 	call	10005464 <__udivsi3>
10011290:	1009883a 	mov	r4,r2
10011294:	a80b883a 	mov	r5,r21
10011298:	8c7fffcc 	andi	r17,r17,65535
1001129c:	1027883a 	mov	r19,r2
100112a0:	b462b03a 	or	r17,r22,r17
100112a4:	0007bcc0 	call	10007bcc <__mulsi3>
100112a8:	d8c00017 	ldw	r3,0(sp)
100112ac:	8880052e 	bgeu	r17,r2,100112c4 <__udivdi3+0x2c0>
100112b0:	8ca3883a 	add	r17,r17,r18
100112b4:	993fffc4 	addi	r4,r19,-1
100112b8:	8c80af36 	bltu	r17,r18,10011578 <__udivdi3+0x574>
100112bc:	8880ae2e 	bgeu	r17,r2,10011578 <__udivdi3+0x574>
100112c0:	9cffff84 	addi	r19,r19,-2
100112c4:	8020943a 	slli	r16,r16,16
100112c8:	9c04b03a 	or	r2,r19,r16
100112cc:	00000206 	br	100112d8 <__udivdi3+0x2d4>
100112d0:	0007883a 	mov	r3,zero
100112d4:	0005883a 	mov	r2,zero
100112d8:	dfc00a17 	ldw	ra,40(sp)
100112dc:	df000917 	ldw	fp,36(sp)
100112e0:	ddc00817 	ldw	r23,32(sp)
100112e4:	dd800717 	ldw	r22,28(sp)
100112e8:	dd400617 	ldw	r21,24(sp)
100112ec:	dd000517 	ldw	r20,20(sp)
100112f0:	dcc00417 	ldw	r19,16(sp)
100112f4:	dc800317 	ldw	r18,12(sp)
100112f8:	dc400217 	ldw	r17,8(sp)
100112fc:	dc000117 	ldw	r16,4(sp)
10011300:	dec00b04 	addi	sp,sp,44
10011304:	f800283a 	ret
10011308:	00803fc4 	movi	r2,255
1001130c:	11c0a92e 	bgeu	r2,r7,100115b4 <__udivdi3+0x5b0>
10011310:	01400204 	movi	r5,8
10011314:	2811883a 	mov	r8,r5
10011318:	003f9706 	br	10011178 <__alt_data_end+0xf8011178>
1001131c:	00804034 	movhi	r2,256
10011320:	10bfffc4 	addi	r2,r2,-1
10011324:	1180a62e 	bgeu	r2,r6,100115c0 <__udivdi3+0x5bc>
10011328:	00800604 	movi	r2,24
1001132c:	1007883a 	mov	r3,r2
10011330:	003f4c06 	br	10011064 <__alt_data_end+0xf8011064>
10011334:	00803fc4 	movi	r2,255
10011338:	1480a72e 	bgeu	r2,r18,100115d8 <__udivdi3+0x5d4>
1001133c:	00800204 	movi	r2,8
10011340:	1007883a 	mov	r3,r2
10011344:	003fa506 	br	100111dc <__alt_data_end+0xf80111dc>
10011348:	3178d83a 	srl	fp,r6,r5
1001134c:	3dce983a 	sll	r7,r7,r23
10011350:	8168d83a 	srl	r20,r16,r5
10011354:	9950d83a 	srl	r8,r19,r5
10011358:	3f38b03a 	or	fp,r7,fp
1001135c:	e024d43a 	srli	r18,fp,16
10011360:	85e0983a 	sll	r16,r16,r23
10011364:	a009883a 	mov	r4,r20
10011368:	900b883a 	mov	r5,r18
1001136c:	8220b03a 	or	r16,r16,r8
10011370:	35ea983a 	sll	r21,r6,r23
10011374:	000546c0 	call	1000546c <__umodsi3>
10011378:	a009883a 	mov	r4,r20
1001137c:	900b883a 	mov	r5,r18
10011380:	1023883a 	mov	r17,r2
10011384:	e5bfffcc 	andi	r22,fp,65535
10011388:	00054640 	call	10005464 <__udivsi3>
1001138c:	1009883a 	mov	r4,r2
10011390:	b00b883a 	mov	r5,r22
10011394:	1029883a 	mov	r20,r2
10011398:	0007bcc0 	call	10007bcc <__mulsi3>
1001139c:	8806943a 	slli	r3,r17,16
100113a0:	8014d43a 	srli	r10,r16,16
100113a4:	1a92b03a 	or	r9,r3,r10
100113a8:	4880042e 	bgeu	r9,r2,100113bc <__udivdi3+0x3b8>
100113ac:	4f13883a 	add	r9,r9,fp
100113b0:	a0ffffc4 	addi	r3,r20,-1
100113b4:	4f00952e 	bgeu	r9,fp,1001160c <__udivdi3+0x608>
100113b8:	1829883a 	mov	r20,r3
100113bc:	48a3c83a 	sub	r17,r9,r2
100113c0:	8809883a 	mov	r4,r17
100113c4:	900b883a 	mov	r5,r18
100113c8:	000546c0 	call	1000546c <__umodsi3>
100113cc:	8809883a 	mov	r4,r17
100113d0:	900b883a 	mov	r5,r18
100113d4:	d8800015 	stw	r2,0(sp)
100113d8:	00054640 	call	10005464 <__udivsi3>
100113dc:	1009883a 	mov	r4,r2
100113e0:	b00b883a 	mov	r5,r22
100113e4:	1023883a 	mov	r17,r2
100113e8:	0007bcc0 	call	10007bcc <__mulsi3>
100113ec:	d8c00017 	ldw	r3,0(sp)
100113f0:	823fffcc 	andi	r8,r16,65535
100113f4:	1806943a 	slli	r3,r3,16
100113f8:	1a20b03a 	or	r16,r3,r8
100113fc:	8080042e 	bgeu	r16,r2,10011410 <__udivdi3+0x40c>
10011400:	8721883a 	add	r16,r16,fp
10011404:	88ffffc4 	addi	r3,r17,-1
10011408:	87007c2e 	bgeu	r16,fp,100115fc <__udivdi3+0x5f8>
1001140c:	1823883a 	mov	r17,r3
10011410:	a028943a 	slli	r20,r20,16
10011414:	acbfffcc 	andi	r18,r21,65535
10011418:	900b883a 	mov	r5,r18
1001141c:	8d28b03a 	or	r20,r17,r20
10011420:	a022d43a 	srli	r17,r20,16
10011424:	a5bfffcc 	andi	r22,r20,65535
10011428:	b009883a 	mov	r4,r22
1001142c:	a82ad43a 	srli	r21,r21,16
10011430:	80a1c83a 	sub	r16,r16,r2
10011434:	0007bcc0 	call	10007bcc <__mulsi3>
10011438:	8809883a 	mov	r4,r17
1001143c:	900b883a 	mov	r5,r18
10011440:	1039883a 	mov	fp,r2
10011444:	0007bcc0 	call	10007bcc <__mulsi3>
10011448:	8809883a 	mov	r4,r17
1001144c:	a80b883a 	mov	r5,r21
10011450:	1025883a 	mov	r18,r2
10011454:	0007bcc0 	call	10007bcc <__mulsi3>
10011458:	b009883a 	mov	r4,r22
1001145c:	a80b883a 	mov	r5,r21
10011460:	1023883a 	mov	r17,r2
10011464:	0007bcc0 	call	10007bcc <__mulsi3>
10011468:	e006d43a 	srli	r3,fp,16
1001146c:	9085883a 	add	r2,r18,r2
10011470:	10c7883a 	add	r3,r2,r3
10011474:	1c80022e 	bgeu	r3,r18,10011480 <__udivdi3+0x47c>
10011478:	00800074 	movhi	r2,1
1001147c:	88a3883a 	add	r17,r17,r2
10011480:	1808d43a 	srli	r4,r3,16
10011484:	8909883a 	add	r4,r17,r4
10011488:	81004436 	bltu	r16,r4,1001159c <__udivdi3+0x598>
1001148c:	81003e26 	beq	r16,r4,10011588 <__udivdi3+0x584>
10011490:	a005883a 	mov	r2,r20
10011494:	0007883a 	mov	r3,zero
10011498:	003f8f06 	br	100112d8 <__alt_data_end+0xf80112d8>
1001149c:	91e4983a 	sll	r18,r18,r7
100114a0:	80eed83a 	srl	r23,r16,r3
100114a4:	81cc983a 	sll	r6,r16,r7
100114a8:	9028d43a 	srli	r20,r18,16
100114ac:	98c6d83a 	srl	r3,r19,r3
100114b0:	b809883a 	mov	r4,r23
100114b4:	a00b883a 	mov	r5,r20
100114b8:	30ecb03a 	or	r22,r6,r3
100114bc:	99e2983a 	sll	r17,r19,r7
100114c0:	000546c0 	call	1000546c <__umodsi3>
100114c4:	b809883a 	mov	r4,r23
100114c8:	a00b883a 	mov	r5,r20
100114cc:	1021883a 	mov	r16,r2
100114d0:	957fffcc 	andi	r21,r18,65535
100114d4:	00054640 	call	10005464 <__udivsi3>
100114d8:	a80b883a 	mov	r5,r21
100114dc:	1009883a 	mov	r4,r2
100114e0:	102f883a 	mov	r23,r2
100114e4:	0007bcc0 	call	10007bcc <__mulsi3>
100114e8:	8020943a 	slli	r16,r16,16
100114ec:	b00ad43a 	srli	r5,r22,16
100114f0:	814cb03a 	or	r6,r16,r5
100114f4:	3080062e 	bgeu	r6,r2,10011510 <__udivdi3+0x50c>
100114f8:	348d883a 	add	r6,r6,r18
100114fc:	b8ffffc4 	addi	r3,r23,-1
10011500:	34804836 	bltu	r6,r18,10011624 <__udivdi3+0x620>
10011504:	3080472e 	bgeu	r6,r2,10011624 <__udivdi3+0x620>
10011508:	bdffff84 	addi	r23,r23,-2
1001150c:	348d883a 	add	r6,r6,r18
10011510:	30a7c83a 	sub	r19,r6,r2
10011514:	9809883a 	mov	r4,r19
10011518:	a00b883a 	mov	r5,r20
1001151c:	000546c0 	call	1000546c <__umodsi3>
10011520:	9809883a 	mov	r4,r19
10011524:	a00b883a 	mov	r5,r20
10011528:	1039883a 	mov	fp,r2
1001152c:	00054640 	call	10005464 <__udivsi3>
10011530:	1009883a 	mov	r4,r2
10011534:	a80b883a 	mov	r5,r21
10011538:	e038943a 	slli	fp,fp,16
1001153c:	1027883a 	mov	r19,r2
10011540:	0007bcc0 	call	10007bcc <__mulsi3>
10011544:	b1bfffcc 	andi	r6,r22,65535
10011548:	e18cb03a 	or	r6,fp,r6
1001154c:	3080062e 	bgeu	r6,r2,10011568 <__udivdi3+0x564>
10011550:	348d883a 	add	r6,r6,r18
10011554:	98ffffc4 	addi	r3,r19,-1
10011558:	34803036 	bltu	r6,r18,1001161c <__udivdi3+0x618>
1001155c:	30802f2e 	bgeu	r6,r2,1001161c <__udivdi3+0x618>
10011560:	9cffff84 	addi	r19,r19,-2
10011564:	348d883a 	add	r6,r6,r18
10011568:	b82e943a 	slli	r23,r23,16
1001156c:	30a1c83a 	sub	r16,r6,r2
10011570:	9dc6b03a 	or	r3,r19,r23
10011574:	003f2606 	br	10011210 <__alt_data_end+0xf8011210>
10011578:	2027883a 	mov	r19,r4
1001157c:	003f5106 	br	100112c4 <__alt_data_end+0xf80112c4>
10011580:	1827883a 	mov	r19,r3
10011584:	003ef006 	br	10011148 <__alt_data_end+0xf8011148>
10011588:	1808943a 	slli	r4,r3,16
1001158c:	9dc6983a 	sll	r3,r19,r23
10011590:	e73fffcc 	andi	fp,fp,65535
10011594:	2709883a 	add	r4,r4,fp
10011598:	193fbd2e 	bgeu	r3,r4,10011490 <__alt_data_end+0xf8011490>
1001159c:	a0bfffc4 	addi	r2,r20,-1
100115a0:	0007883a 	mov	r3,zero
100115a4:	003f4c06 	br	100112d8 <__alt_data_end+0xf80112d8>
100115a8:	01400404 	movi	r5,16
100115ac:	2811883a 	mov	r8,r5
100115b0:	003ef106 	br	10011178 <__alt_data_end+0xf8011178>
100115b4:	000b883a 	mov	r5,zero
100115b8:	0011883a 	mov	r8,zero
100115bc:	003eee06 	br	10011178 <__alt_data_end+0xf8011178>
100115c0:	00800404 	movi	r2,16
100115c4:	1007883a 	mov	r3,r2
100115c8:	003ea606 	br	10011064 <__alt_data_end+0xf8011064>
100115cc:	00800404 	movi	r2,16
100115d0:	1007883a 	mov	r3,r2
100115d4:	003f0106 	br	100111dc <__alt_data_end+0xf80111dc>
100115d8:	0005883a 	mov	r2,zero
100115dc:	0007883a 	mov	r3,zero
100115e0:	003efe06 	br	100111dc <__alt_data_end+0xf80111dc>
100115e4:	0005883a 	mov	r2,zero
100115e8:	0007883a 	mov	r3,zero
100115ec:	003e9d06 	br	10011064 <__alt_data_end+0xf8011064>
100115f0:	0007883a 	mov	r3,zero
100115f4:	00800044 	movi	r2,1
100115f8:	003f3706 	br	100112d8 <__alt_data_end+0xf80112d8>
100115fc:	80bf832e 	bgeu	r16,r2,1001140c <__alt_data_end+0xf801140c>
10011600:	8c7fff84 	addi	r17,r17,-2
10011604:	8721883a 	add	r16,r16,fp
10011608:	003f8106 	br	10011410 <__alt_data_end+0xf8011410>
1001160c:	48bf6a2e 	bgeu	r9,r2,100113b8 <__alt_data_end+0xf80113b8>
10011610:	a53fff84 	addi	r20,r20,-2
10011614:	4f13883a 	add	r9,r9,fp
10011618:	003f6806 	br	100113bc <__alt_data_end+0xf80113bc>
1001161c:	1827883a 	mov	r19,r3
10011620:	003fd106 	br	10011568 <__alt_data_end+0xf8011568>
10011624:	182f883a 	mov	r23,r3
10011628:	003fb906 	br	10011510 <__alt_data_end+0xf8011510>
1001162c:	843fff84 	addi	r16,r16,-2
10011630:	348d883a 	add	r6,r6,r18
10011634:	003f0c06 	br	10011268 <__alt_data_end+0xf8011268>
10011638:	843fff84 	addi	r16,r16,-2
1001163c:	1c87883a 	add	r3,r3,r18
10011640:	003eac06 	br	100110f4 <__alt_data_end+0xf80110f4>

10011644 <__umoddi3>:
10011644:	defff404 	addi	sp,sp,-48
10011648:	dd800815 	stw	r22,32(sp)
1001164c:	dc400315 	stw	r17,12(sp)
10011650:	dc000215 	stw	r16,8(sp)
10011654:	dfc00b15 	stw	ra,44(sp)
10011658:	df000a15 	stw	fp,40(sp)
1001165c:	ddc00915 	stw	r23,36(sp)
10011660:	dd400715 	stw	r21,28(sp)
10011664:	dd000615 	stw	r20,24(sp)
10011668:	dcc00515 	stw	r19,20(sp)
1001166c:	dc800415 	stw	r18,16(sp)
10011670:	2021883a 	mov	r16,r4
10011674:	2823883a 	mov	r17,r5
10011678:	282d883a 	mov	r22,r5
1001167c:	38003c1e 	bne	r7,zero,10011770 <__umoddi3+0x12c>
10011680:	3027883a 	mov	r19,r6
10011684:	2029883a 	mov	r20,r4
10011688:	2980522e 	bgeu	r5,r6,100117d4 <__umoddi3+0x190>
1001168c:	00bfffd4 	movui	r2,65535
10011690:	1180a436 	bltu	r2,r6,10011924 <__umoddi3+0x2e0>
10011694:	00803fc4 	movi	r2,255
10011698:	11815e2e 	bgeu	r2,r6,10011c14 <__umoddi3+0x5d0>
1001169c:	01400204 	movi	r5,8
100116a0:	2805883a 	mov	r2,r5
100116a4:	314ad83a 	srl	r5,r6,r5
100116a8:	00c40074 	movhi	r3,4097
100116ac:	18d17f04 	addi	r3,r3,17916
100116b0:	194b883a 	add	r5,r3,r5
100116b4:	29000003 	ldbu	r4,0(r5)
100116b8:	2089883a 	add	r4,r4,r2
100116bc:	00800804 	movi	r2,32
100116c0:	1105c83a 	sub	r2,r2,r4
100116c4:	10010c26 	beq	r2,zero,10011af8 <__umoddi3+0x4b4>
100116c8:	88a2983a 	sll	r17,r17,r2
100116cc:	8108d83a 	srl	r4,r16,r4
100116d0:	30a6983a 	sll	r19,r6,r2
100116d4:	80a8983a 	sll	r20,r16,r2
100116d8:	1025883a 	mov	r18,r2
100116dc:	892cb03a 	or	r22,r17,r4
100116e0:	9822d43a 	srli	r17,r19,16
100116e4:	b009883a 	mov	r4,r22
100116e8:	9d7fffcc 	andi	r21,r19,65535
100116ec:	880b883a 	mov	r5,r17
100116f0:	000546c0 	call	1000546c <__umodsi3>
100116f4:	b009883a 	mov	r4,r22
100116f8:	880b883a 	mov	r5,r17
100116fc:	102f883a 	mov	r23,r2
10011700:	00054640 	call	10005464 <__udivsi3>
10011704:	1009883a 	mov	r4,r2
10011708:	a80b883a 	mov	r5,r21
1001170c:	0007bcc0 	call	10007bcc <__mulsi3>
10011710:	b82e943a 	slli	r23,r23,16
10011714:	a008d43a 	srli	r4,r20,16
10011718:	b906b03a 	or	r3,r23,r4
1001171c:	1880042e 	bgeu	r3,r2,10011730 <__umoddi3+0xec>
10011720:	1cc7883a 	add	r3,r3,r19
10011724:	1cc00236 	bltu	r3,r19,10011730 <__umoddi3+0xec>
10011728:	1880012e 	bgeu	r3,r2,10011730 <__umoddi3+0xec>
1001172c:	1cc7883a 	add	r3,r3,r19
10011730:	18a1c83a 	sub	r16,r3,r2
10011734:	8009883a 	mov	r4,r16
10011738:	880b883a 	mov	r5,r17
1001173c:	000546c0 	call	1000546c <__umodsi3>
10011740:	8009883a 	mov	r4,r16
10011744:	880b883a 	mov	r5,r17
10011748:	102d883a 	mov	r22,r2
1001174c:	00054640 	call	10005464 <__udivsi3>
10011750:	1009883a 	mov	r4,r2
10011754:	a80b883a 	mov	r5,r21
10011758:	b02c943a 	slli	r22,r22,16
1001175c:	0007bcc0 	call	10007bcc <__mulsi3>
10011760:	a13fffcc 	andi	r4,r20,65535
10011764:	b106b03a 	or	r3,r22,r4
10011768:	1880572e 	bgeu	r3,r2,100118c8 <__umoddi3+0x284>
1001176c:	00005206 	br	100118b8 <__umoddi3+0x274>
10011770:	29c05936 	bltu	r5,r7,100118d8 <__umoddi3+0x294>
10011774:	00bfffd4 	movui	r2,65535
10011778:	11c0652e 	bgeu	r2,r7,10011910 <__umoddi3+0x2cc>
1001177c:	00804034 	movhi	r2,256
10011780:	10bfffc4 	addi	r2,r2,-1
10011784:	11c1172e 	bgeu	r2,r7,10011be4 <__umoddi3+0x5a0>
10011788:	01400604 	movi	r5,24
1001178c:	282b883a 	mov	r21,r5
10011790:	394ad83a 	srl	r5,r7,r5
10011794:	00c40074 	movhi	r3,4097
10011798:	18d17f04 	addi	r3,r3,17916
1001179c:	194b883a 	add	r5,r3,r5
100117a0:	28800003 	ldbu	r2,0(r5)
100117a4:	00c00804 	movi	r3,32
100117a8:	156b883a 	add	r21,r2,r21
100117ac:	1d69c83a 	sub	r20,r3,r21
100117b0:	a000671e 	bne	r20,zero,10011950 <__umoddi3+0x30c>
100117b4:	3c400136 	bltu	r7,r17,100117bc <__umoddi3+0x178>
100117b8:	81812336 	bltu	r16,r6,10011c48 <__umoddi3+0x604>
100117bc:	8185c83a 	sub	r2,r16,r6
100117c0:	89e3c83a 	sub	r17,r17,r7
100117c4:	8087803a 	cmpltu	r3,r16,r2
100117c8:	88edc83a 	sub	r22,r17,r3
100117cc:	b007883a 	mov	r3,r22
100117d0:	00004306 	br	100118e0 <__umoddi3+0x29c>
100117d4:	3000041e 	bne	r6,zero,100117e8 <__umoddi3+0x1a4>
100117d8:	01000044 	movi	r4,1
100117dc:	000b883a 	mov	r5,zero
100117e0:	00054640 	call	10005464 <__udivsi3>
100117e4:	1027883a 	mov	r19,r2
100117e8:	00bfffd4 	movui	r2,65535
100117ec:	14c0532e 	bgeu	r2,r19,1001193c <__umoddi3+0x2f8>
100117f0:	00804034 	movhi	r2,256
100117f4:	10bfffc4 	addi	r2,r2,-1
100117f8:	14c1032e 	bgeu	r2,r19,10011c08 <__umoddi3+0x5c4>
100117fc:	00800604 	movi	r2,24
10011800:	1007883a 	mov	r3,r2
10011804:	9884d83a 	srl	r2,r19,r2
10011808:	01040074 	movhi	r4,4097
1001180c:	21117f04 	addi	r4,r4,17916
10011810:	2085883a 	add	r2,r4,r2
10011814:	11000003 	ldbu	r4,0(r2)
10011818:	00800804 	movi	r2,32
1001181c:	20c7883a 	add	r3,r4,r3
10011820:	10c5c83a 	sub	r2,r2,r3
10011824:	1000b61e 	bne	r2,zero,10011b00 <__umoddi3+0x4bc>
10011828:	982ad43a 	srli	r21,r19,16
1001182c:	8ce3c83a 	sub	r17,r17,r19
10011830:	9dbfffcc 	andi	r22,r19,65535
10011834:	0025883a 	mov	r18,zero
10011838:	8809883a 	mov	r4,r17
1001183c:	a80b883a 	mov	r5,r21
10011840:	000546c0 	call	1000546c <__umodsi3>
10011844:	8809883a 	mov	r4,r17
10011848:	a80b883a 	mov	r5,r21
1001184c:	102f883a 	mov	r23,r2
10011850:	00054640 	call	10005464 <__udivsi3>
10011854:	1009883a 	mov	r4,r2
10011858:	b00b883a 	mov	r5,r22
1001185c:	0007bcc0 	call	10007bcc <__mulsi3>
10011860:	b82e943a 	slli	r23,r23,16
10011864:	a008d43a 	srli	r4,r20,16
10011868:	b906b03a 	or	r3,r23,r4
1001186c:	1880032e 	bgeu	r3,r2,1001187c <__umoddi3+0x238>
10011870:	1cc7883a 	add	r3,r3,r19
10011874:	1cc00136 	bltu	r3,r19,1001187c <__umoddi3+0x238>
10011878:	1880f136 	bltu	r3,r2,10011c40 <__umoddi3+0x5fc>
1001187c:	18a1c83a 	sub	r16,r3,r2
10011880:	8009883a 	mov	r4,r16
10011884:	a80b883a 	mov	r5,r21
10011888:	000546c0 	call	1000546c <__umodsi3>
1001188c:	8009883a 	mov	r4,r16
10011890:	a80b883a 	mov	r5,r21
10011894:	1023883a 	mov	r17,r2
10011898:	00054640 	call	10005464 <__udivsi3>
1001189c:	1009883a 	mov	r4,r2
100118a0:	b00b883a 	mov	r5,r22
100118a4:	8822943a 	slli	r17,r17,16
100118a8:	0007bcc0 	call	10007bcc <__mulsi3>
100118ac:	a13fffcc 	andi	r4,r20,65535
100118b0:	8906b03a 	or	r3,r17,r4
100118b4:	1880042e 	bgeu	r3,r2,100118c8 <__umoddi3+0x284>
100118b8:	1cc7883a 	add	r3,r3,r19
100118bc:	1cc00236 	bltu	r3,r19,100118c8 <__umoddi3+0x284>
100118c0:	1880012e 	bgeu	r3,r2,100118c8 <__umoddi3+0x284>
100118c4:	1cc7883a 	add	r3,r3,r19
100118c8:	1887c83a 	sub	r3,r3,r2
100118cc:	1c84d83a 	srl	r2,r3,r18
100118d0:	0007883a 	mov	r3,zero
100118d4:	00000206 	br	100118e0 <__umoddi3+0x29c>
100118d8:	2005883a 	mov	r2,r4
100118dc:	2807883a 	mov	r3,r5
100118e0:	dfc00b17 	ldw	ra,44(sp)
100118e4:	df000a17 	ldw	fp,40(sp)
100118e8:	ddc00917 	ldw	r23,36(sp)
100118ec:	dd800817 	ldw	r22,32(sp)
100118f0:	dd400717 	ldw	r21,28(sp)
100118f4:	dd000617 	ldw	r20,24(sp)
100118f8:	dcc00517 	ldw	r19,20(sp)
100118fc:	dc800417 	ldw	r18,16(sp)
10011900:	dc400317 	ldw	r17,12(sp)
10011904:	dc000217 	ldw	r16,8(sp)
10011908:	dec00c04 	addi	sp,sp,48
1001190c:	f800283a 	ret
10011910:	00803fc4 	movi	r2,255
10011914:	11c0b02e 	bgeu	r2,r7,10011bd8 <__umoddi3+0x594>
10011918:	01400204 	movi	r5,8
1001191c:	282b883a 	mov	r21,r5
10011920:	003f9b06 	br	10011790 <__alt_data_end+0xf8011790>
10011924:	00804034 	movhi	r2,256
10011928:	10bfffc4 	addi	r2,r2,-1
1001192c:	1180b02e 	bgeu	r2,r6,10011bf0 <__umoddi3+0x5ac>
10011930:	01400604 	movi	r5,24
10011934:	2805883a 	mov	r2,r5
10011938:	003f5a06 	br	100116a4 <__alt_data_end+0xf80116a4>
1001193c:	00803fc4 	movi	r2,255
10011940:	14c0ae2e 	bgeu	r2,r19,10011bfc <__umoddi3+0x5b8>
10011944:	00800204 	movi	r2,8
10011948:	1007883a 	mov	r3,r2
1001194c:	003fad06 	br	10011804 <__alt_data_end+0xf8011804>
10011950:	3d0a983a 	sll	r5,r7,r20
10011954:	356cd83a 	srl	r22,r6,r21
10011958:	8d78d83a 	srl	fp,r17,r21
1001195c:	8d10983a 	sll	r8,r17,r20
10011960:	2dacb03a 	or	r22,r5,r22
10011964:	b02ed43a 	srli	r23,r22,16
10011968:	8564d83a 	srl	r18,r16,r21
1001196c:	e009883a 	mov	r4,fp
10011970:	b80b883a 	mov	r5,r23
10011974:	44a4b03a 	or	r18,r8,r18
10011978:	3526983a 	sll	r19,r6,r20
1001197c:	000546c0 	call	1000546c <__umodsi3>
10011980:	e009883a 	mov	r4,fp
10011984:	b80b883a 	mov	r5,r23
10011988:	b47fffcc 	andi	r17,r22,65535
1001198c:	d8800015 	stw	r2,0(sp)
10011990:	00054640 	call	10005464 <__udivsi3>
10011994:	1009883a 	mov	r4,r2
10011998:	880b883a 	mov	r5,r17
1001199c:	1039883a 	mov	fp,r2
100119a0:	0007bcc0 	call	10007bcc <__mulsi3>
100119a4:	d9800017 	ldw	r6,0(sp)
100119a8:	9008d43a 	srli	r4,r18,16
100119ac:	8520983a 	sll	r16,r16,r20
100119b0:	300c943a 	slli	r6,r6,16
100119b4:	3106b03a 	or	r3,r6,r4
100119b8:	1880042e 	bgeu	r3,r2,100119cc <__umoddi3+0x388>
100119bc:	1d87883a 	add	r3,r3,r22
100119c0:	e13fffc4 	addi	r4,fp,-1
100119c4:	1d809a2e 	bgeu	r3,r22,10011c30 <__umoddi3+0x5ec>
100119c8:	2039883a 	mov	fp,r4
100119cc:	1887c83a 	sub	r3,r3,r2
100119d0:	1809883a 	mov	r4,r3
100119d4:	b80b883a 	mov	r5,r23
100119d8:	d8c00115 	stw	r3,4(sp)
100119dc:	000546c0 	call	1000546c <__umodsi3>
100119e0:	d8c00117 	ldw	r3,4(sp)
100119e4:	b80b883a 	mov	r5,r23
100119e8:	d8800015 	stw	r2,0(sp)
100119ec:	1809883a 	mov	r4,r3
100119f0:	00054640 	call	10005464 <__udivsi3>
100119f4:	880b883a 	mov	r5,r17
100119f8:	1009883a 	mov	r4,r2
100119fc:	102f883a 	mov	r23,r2
10011a00:	0007bcc0 	call	10007bcc <__mulsi3>
10011a04:	d9800017 	ldw	r6,0(sp)
10011a08:	947fffcc 	andi	r17,r18,65535
10011a0c:	300c943a 	slli	r6,r6,16
10011a10:	3464b03a 	or	r18,r6,r17
10011a14:	9080042e 	bgeu	r18,r2,10011a28 <__umoddi3+0x3e4>
10011a18:	95a5883a 	add	r18,r18,r22
10011a1c:	b8ffffc4 	addi	r3,r23,-1
10011a20:	95807f2e 	bgeu	r18,r22,10011c20 <__umoddi3+0x5dc>
10011a24:	182f883a 	mov	r23,r3
10011a28:	e038943a 	slli	fp,fp,16
10011a2c:	980cd43a 	srli	r6,r19,16
10011a30:	98ffffcc 	andi	r3,r19,65535
10011a34:	bf38b03a 	or	fp,r23,fp
10011a38:	e02ed43a 	srli	r23,fp,16
10011a3c:	e73fffcc 	andi	fp,fp,65535
10011a40:	180b883a 	mov	r5,r3
10011a44:	e009883a 	mov	r4,fp
10011a48:	d9800015 	stw	r6,0(sp)
10011a4c:	d8c00115 	stw	r3,4(sp)
10011a50:	90a5c83a 	sub	r18,r18,r2
10011a54:	0007bcc0 	call	10007bcc <__mulsi3>
10011a58:	d8c00117 	ldw	r3,4(sp)
10011a5c:	b809883a 	mov	r4,r23
10011a60:	1023883a 	mov	r17,r2
10011a64:	180b883a 	mov	r5,r3
10011a68:	0007bcc0 	call	10007bcc <__mulsi3>
10011a6c:	d9800017 	ldw	r6,0(sp)
10011a70:	b809883a 	mov	r4,r23
10011a74:	d8800115 	stw	r2,4(sp)
10011a78:	300b883a 	mov	r5,r6
10011a7c:	302f883a 	mov	r23,r6
10011a80:	0007bcc0 	call	10007bcc <__mulsi3>
10011a84:	e009883a 	mov	r4,fp
10011a88:	b80b883a 	mov	r5,r23
10011a8c:	d8800015 	stw	r2,0(sp)
10011a90:	0007bcc0 	call	10007bcc <__mulsi3>
10011a94:	d8c00117 	ldw	r3,4(sp)
10011a98:	880cd43a 	srli	r6,r17,16
10011a9c:	d9c00017 	ldw	r7,0(sp)
10011aa0:	1885883a 	add	r2,r3,r2
10011aa4:	118d883a 	add	r6,r2,r6
10011aa8:	30c0022e 	bgeu	r6,r3,10011ab4 <__umoddi3+0x470>
10011aac:	00800074 	movhi	r2,1
10011ab0:	388f883a 	add	r7,r7,r2
10011ab4:	3006d43a 	srli	r3,r6,16
10011ab8:	300c943a 	slli	r6,r6,16
10011abc:	8c7fffcc 	andi	r17,r17,65535
10011ac0:	38c7883a 	add	r3,r7,r3
10011ac4:	3463883a 	add	r17,r6,r17
10011ac8:	90c03d36 	bltu	r18,r3,10011bc0 <__umoddi3+0x57c>
10011acc:	90c06026 	beq	r18,r3,10011c50 <__umoddi3+0x60c>
10011ad0:	90c9c83a 	sub	r4,r18,r3
10011ad4:	880f883a 	mov	r7,r17
10011ad8:	81cfc83a 	sub	r7,r16,r7
10011adc:	81c7803a 	cmpltu	r3,r16,r7
10011ae0:	20c7c83a 	sub	r3,r4,r3
10011ae4:	1d44983a 	sll	r2,r3,r21
10011ae8:	3d0ed83a 	srl	r7,r7,r20
10011aec:	1d06d83a 	srl	r3,r3,r20
10011af0:	11c4b03a 	or	r2,r2,r7
10011af4:	003f7a06 	br	100118e0 <__alt_data_end+0xf80118e0>
10011af8:	0025883a 	mov	r18,zero
10011afc:	003ef806 	br	100116e0 <__alt_data_end+0xf80116e0>
10011b00:	98a6983a 	sll	r19,r19,r2
10011b04:	88e8d83a 	srl	r20,r17,r3
10011b08:	80c6d83a 	srl	r3,r16,r3
10011b0c:	982ad43a 	srli	r21,r19,16
10011b10:	88a2983a 	sll	r17,r17,r2
10011b14:	a009883a 	mov	r4,r20
10011b18:	a80b883a 	mov	r5,r21
10011b1c:	88eeb03a 	or	r23,r17,r3
10011b20:	1025883a 	mov	r18,r2
10011b24:	000546c0 	call	1000546c <__umodsi3>
10011b28:	a009883a 	mov	r4,r20
10011b2c:	a80b883a 	mov	r5,r21
10011b30:	1023883a 	mov	r17,r2
10011b34:	9dbfffcc 	andi	r22,r19,65535
10011b38:	00054640 	call	10005464 <__udivsi3>
10011b3c:	1009883a 	mov	r4,r2
10011b40:	b00b883a 	mov	r5,r22
10011b44:	0007bcc0 	call	10007bcc <__mulsi3>
10011b48:	8822943a 	slli	r17,r17,16
10011b4c:	b808d43a 	srli	r4,r23,16
10011b50:	84a8983a 	sll	r20,r16,r18
10011b54:	8906b03a 	or	r3,r17,r4
10011b58:	1880042e 	bgeu	r3,r2,10011b6c <__umoddi3+0x528>
10011b5c:	1cc7883a 	add	r3,r3,r19
10011b60:	1cc00236 	bltu	r3,r19,10011b6c <__umoddi3+0x528>
10011b64:	1880012e 	bgeu	r3,r2,10011b6c <__umoddi3+0x528>
10011b68:	1cc7883a 	add	r3,r3,r19
10011b6c:	18a1c83a 	sub	r16,r3,r2
10011b70:	8009883a 	mov	r4,r16
10011b74:	a80b883a 	mov	r5,r21
10011b78:	000546c0 	call	1000546c <__umodsi3>
10011b7c:	8009883a 	mov	r4,r16
10011b80:	a80b883a 	mov	r5,r21
10011b84:	1039883a 	mov	fp,r2
10011b88:	00054640 	call	10005464 <__udivsi3>
10011b8c:	1009883a 	mov	r4,r2
10011b90:	b00b883a 	mov	r5,r22
10011b94:	0007bcc0 	call	10007bcc <__mulsi3>
10011b98:	e006943a 	slli	r3,fp,16
10011b9c:	b93fffcc 	andi	r4,r23,65535
10011ba0:	1906b03a 	or	r3,r3,r4
10011ba4:	1880042e 	bgeu	r3,r2,10011bb8 <__umoddi3+0x574>
10011ba8:	1cc7883a 	add	r3,r3,r19
10011bac:	1cc00236 	bltu	r3,r19,10011bb8 <__umoddi3+0x574>
10011bb0:	1880012e 	bgeu	r3,r2,10011bb8 <__umoddi3+0x574>
10011bb4:	1cc7883a 	add	r3,r3,r19
10011bb8:	18a3c83a 	sub	r17,r3,r2
10011bbc:	003f1e06 	br	10011838 <__alt_data_end+0xf8011838>
10011bc0:	8ccfc83a 	sub	r7,r17,r19
10011bc4:	1d89c83a 	sub	r4,r3,r22
10011bc8:	89e3803a 	cmpltu	r17,r17,r7
10011bcc:	2463c83a 	sub	r17,r4,r17
10011bd0:	9449c83a 	sub	r4,r18,r17
10011bd4:	003fc006 	br	10011ad8 <__alt_data_end+0xf8011ad8>
10011bd8:	000b883a 	mov	r5,zero
10011bdc:	002b883a 	mov	r21,zero
10011be0:	003eeb06 	br	10011790 <__alt_data_end+0xf8011790>
10011be4:	01400404 	movi	r5,16
10011be8:	282b883a 	mov	r21,r5
10011bec:	003ee806 	br	10011790 <__alt_data_end+0xf8011790>
10011bf0:	01400404 	movi	r5,16
10011bf4:	2805883a 	mov	r2,r5
10011bf8:	003eaa06 	br	100116a4 <__alt_data_end+0xf80116a4>
10011bfc:	0005883a 	mov	r2,zero
10011c00:	0007883a 	mov	r3,zero
10011c04:	003eff06 	br	10011804 <__alt_data_end+0xf8011804>
10011c08:	00800404 	movi	r2,16
10011c0c:	1007883a 	mov	r3,r2
10011c10:	003efc06 	br	10011804 <__alt_data_end+0xf8011804>
10011c14:	000b883a 	mov	r5,zero
10011c18:	0005883a 	mov	r2,zero
10011c1c:	003ea106 	br	100116a4 <__alt_data_end+0xf80116a4>
10011c20:	90bf802e 	bgeu	r18,r2,10011a24 <__alt_data_end+0xf8011a24>
10011c24:	bdffff84 	addi	r23,r23,-2
10011c28:	95a5883a 	add	r18,r18,r22
10011c2c:	003f7e06 	br	10011a28 <__alt_data_end+0xf8011a28>
10011c30:	18bf652e 	bgeu	r3,r2,100119c8 <__alt_data_end+0xf80119c8>
10011c34:	e73fff84 	addi	fp,fp,-2
10011c38:	1d87883a 	add	r3,r3,r22
10011c3c:	003f6306 	br	100119cc <__alt_data_end+0xf80119cc>
10011c40:	1cc7883a 	add	r3,r3,r19
10011c44:	003f0d06 	br	1001187c <__alt_data_end+0xf801187c>
10011c48:	8005883a 	mov	r2,r16
10011c4c:	003edf06 	br	100117cc <__alt_data_end+0xf80117cc>
10011c50:	847fdb36 	bltu	r16,r17,10011bc0 <__alt_data_end+0xf8011bc0>
10011c54:	880f883a 	mov	r7,r17
10011c58:	0009883a 	mov	r4,zero
10011c5c:	003f9e06 	br	10011ad8 <__alt_data_end+0xf8011ad8>

10011c60 <__floatunsidf>:
10011c60:	defffe04 	addi	sp,sp,-8
10011c64:	dc000015 	stw	r16,0(sp)
10011c68:	dfc00115 	stw	ra,4(sp)
10011c6c:	2021883a 	mov	r16,r4
10011c70:	20001026 	beq	r4,zero,10011cb4 <__floatunsidf+0x54>
10011c74:	0007b680 	call	10007b68 <__clzsi2>
10011c78:	01410784 	movi	r5,1054
10011c7c:	100d883a 	mov	r6,r2
10011c80:	288bc83a 	sub	r5,r5,r2
10011c84:	00800284 	movi	r2,10
10011c88:	11801616 	blt	r2,r6,10011ce4 <__floatunsidf+0x84>
10011c8c:	008002c4 	movi	r2,11
10011c90:	1185c83a 	sub	r2,r2,r6
10011c94:	8084d83a 	srl	r2,r16,r2
10011c98:	00c00434 	movhi	r3,16
10011c9c:	31c00544 	addi	r7,r6,21
10011ca0:	18ffffc4 	addi	r3,r3,-1
10011ca4:	81e0983a 	sll	r16,r16,r7
10011ca8:	10cc703a 	and	r6,r2,r3
10011cac:	2941ffcc 	andi	r5,r5,2047
10011cb0:	00000206 	br	10011cbc <__floatunsidf+0x5c>
10011cb4:	000b883a 	mov	r5,zero
10011cb8:	000d883a 	mov	r6,zero
10011cbc:	280a953a 	slli	r5,r5,20
10011cc0:	00c00434 	movhi	r3,16
10011cc4:	18ffffc4 	addi	r3,r3,-1
10011cc8:	30c6703a 	and	r3,r6,r3
10011ccc:	8005883a 	mov	r2,r16
10011cd0:	1946b03a 	or	r3,r3,r5
10011cd4:	dfc00117 	ldw	ra,4(sp)
10011cd8:	dc000017 	ldw	r16,0(sp)
10011cdc:	dec00204 	addi	sp,sp,8
10011ce0:	f800283a 	ret
10011ce4:	31bffd44 	addi	r6,r6,-11
10011ce8:	818c983a 	sll	r6,r16,r6
10011cec:	00800434 	movhi	r2,16
10011cf0:	10bfffc4 	addi	r2,r2,-1
10011cf4:	2941ffcc 	andi	r5,r5,2047
10011cf8:	0021883a 	mov	r16,zero
10011cfc:	308c703a 	and	r6,r6,r2
10011d00:	003fee06 	br	10011cbc <__alt_data_end+0xf8011cbc>

10011d04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011d04:	defffe04 	addi	sp,sp,-8
10011d08:	dfc00115 	stw	ra,4(sp)
10011d0c:	df000015 	stw	fp,0(sp)
10011d10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011d14:	008400b4 	movhi	r2,4098
10011d18:	10827704 	addi	r2,r2,2524
10011d1c:	10800017 	ldw	r2,0(r2)
10011d20:	10000526 	beq	r2,zero,10011d38 <alt_get_errno+0x34>
10011d24:	008400b4 	movhi	r2,4098
10011d28:	10827704 	addi	r2,r2,2524
10011d2c:	10800017 	ldw	r2,0(r2)
10011d30:	103ee83a 	callr	r2
10011d34:	00000206 	br	10011d40 <alt_get_errno+0x3c>
10011d38:	008400f4 	movhi	r2,4099
10011d3c:	10b2c004 	addi	r2,r2,-13568
}
10011d40:	e037883a 	mov	sp,fp
10011d44:	dfc00117 	ldw	ra,4(sp)
10011d48:	df000017 	ldw	fp,0(sp)
10011d4c:	dec00204 	addi	sp,sp,8
10011d50:	f800283a 	ret

10011d54 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10011d54:	defffb04 	addi	sp,sp,-20
10011d58:	dfc00415 	stw	ra,16(sp)
10011d5c:	df000315 	stw	fp,12(sp)
10011d60:	df000304 	addi	fp,sp,12
10011d64:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10011d68:	e0bfff17 	ldw	r2,-4(fp)
10011d6c:	10000816 	blt	r2,zero,10011d90 <close+0x3c>
10011d70:	e13fff17 	ldw	r4,-4(fp)
10011d74:	01400304 	movi	r5,12
10011d78:	0007bcc0 	call	10007bcc <__mulsi3>
10011d7c:	1007883a 	mov	r3,r2
10011d80:	008400b4 	movhi	r2,4098
10011d84:	10bdf304 	addi	r2,r2,-2100
10011d88:	1885883a 	add	r2,r3,r2
10011d8c:	00000106 	br	10011d94 <close+0x40>
10011d90:	0005883a 	mov	r2,zero
10011d94:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10011d98:	e0bffd17 	ldw	r2,-12(fp)
10011d9c:	10001926 	beq	r2,zero,10011e04 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10011da0:	e0bffd17 	ldw	r2,-12(fp)
10011da4:	10800017 	ldw	r2,0(r2)
10011da8:	10800417 	ldw	r2,16(r2)
10011dac:	10000626 	beq	r2,zero,10011dc8 <close+0x74>
10011db0:	e0bffd17 	ldw	r2,-12(fp)
10011db4:	10800017 	ldw	r2,0(r2)
10011db8:	10800417 	ldw	r2,16(r2)
10011dbc:	e13ffd17 	ldw	r4,-12(fp)
10011dc0:	103ee83a 	callr	r2
10011dc4:	00000106 	br	10011dcc <close+0x78>
10011dc8:	0005883a 	mov	r2,zero
10011dcc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10011dd0:	e13fff17 	ldw	r4,-4(fp)
10011dd4:	00124780 	call	10012478 <alt_release_fd>
    if (rval < 0)
10011dd8:	e0bffe17 	ldw	r2,-8(fp)
10011ddc:	1000070e 	bge	r2,zero,10011dfc <close+0xa8>
    {
      ALT_ERRNO = -rval;
10011de0:	0011d040 	call	10011d04 <alt_get_errno>
10011de4:	1007883a 	mov	r3,r2
10011de8:	e0bffe17 	ldw	r2,-8(fp)
10011dec:	0085c83a 	sub	r2,zero,r2
10011df0:	18800015 	stw	r2,0(r3)
      return -1;
10011df4:	00bfffc4 	movi	r2,-1
10011df8:	00000706 	br	10011e18 <close+0xc4>
    }
    return 0;
10011dfc:	0005883a 	mov	r2,zero
10011e00:	00000506 	br	10011e18 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011e04:	0011d040 	call	10011d04 <alt_get_errno>
10011e08:	1007883a 	mov	r3,r2
10011e0c:	00801444 	movi	r2,81
10011e10:	18800015 	stw	r2,0(r3)
    return -1;
10011e14:	00bfffc4 	movi	r2,-1
  }
}
10011e18:	e037883a 	mov	sp,fp
10011e1c:	dfc00117 	ldw	ra,4(sp)
10011e20:	df000017 	ldw	fp,0(sp)
10011e24:	dec00204 	addi	sp,sp,8
10011e28:	f800283a 	ret

10011e2c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10011e2c:	defffc04 	addi	sp,sp,-16
10011e30:	df000315 	stw	fp,12(sp)
10011e34:	df000304 	addi	fp,sp,12
10011e38:	e13ffd15 	stw	r4,-12(fp)
10011e3c:	e17ffe15 	stw	r5,-8(fp)
10011e40:	e1bfff15 	stw	r6,-4(fp)
  return len;
10011e44:	e0bfff17 	ldw	r2,-4(fp)
}
10011e48:	e037883a 	mov	sp,fp
10011e4c:	df000017 	ldw	fp,0(sp)
10011e50:	dec00104 	addi	sp,sp,4
10011e54:	f800283a 	ret

10011e58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011e58:	defffe04 	addi	sp,sp,-8
10011e5c:	dfc00115 	stw	ra,4(sp)
10011e60:	df000015 	stw	fp,0(sp)
10011e64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011e68:	008400b4 	movhi	r2,4098
10011e6c:	10827704 	addi	r2,r2,2524
10011e70:	10800017 	ldw	r2,0(r2)
10011e74:	10000526 	beq	r2,zero,10011e8c <alt_get_errno+0x34>
10011e78:	008400b4 	movhi	r2,4098
10011e7c:	10827704 	addi	r2,r2,2524
10011e80:	10800017 	ldw	r2,0(r2)
10011e84:	103ee83a 	callr	r2
10011e88:	00000206 	br	10011e94 <alt_get_errno+0x3c>
10011e8c:	008400f4 	movhi	r2,4099
10011e90:	10b2c004 	addi	r2,r2,-13568
}
10011e94:	e037883a 	mov	sp,fp
10011e98:	dfc00117 	ldw	ra,4(sp)
10011e9c:	df000017 	ldw	fp,0(sp)
10011ea0:	dec00204 	addi	sp,sp,8
10011ea4:	f800283a 	ret

10011ea8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10011ea8:	defffb04 	addi	sp,sp,-20
10011eac:	dfc00415 	stw	ra,16(sp)
10011eb0:	df000315 	stw	fp,12(sp)
10011eb4:	df000304 	addi	fp,sp,12
10011eb8:	e13ffe15 	stw	r4,-8(fp)
10011ebc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011ec0:	e0bffe17 	ldw	r2,-8(fp)
10011ec4:	10000816 	blt	r2,zero,10011ee8 <fstat+0x40>
10011ec8:	e13ffe17 	ldw	r4,-8(fp)
10011ecc:	01400304 	movi	r5,12
10011ed0:	0007bcc0 	call	10007bcc <__mulsi3>
10011ed4:	1007883a 	mov	r3,r2
10011ed8:	008400b4 	movhi	r2,4098
10011edc:	10bdf304 	addi	r2,r2,-2100
10011ee0:	1885883a 	add	r2,r3,r2
10011ee4:	00000106 	br	10011eec <fstat+0x44>
10011ee8:	0005883a 	mov	r2,zero
10011eec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10011ef0:	e0bffd17 	ldw	r2,-12(fp)
10011ef4:	10001026 	beq	r2,zero,10011f38 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10011ef8:	e0bffd17 	ldw	r2,-12(fp)
10011efc:	10800017 	ldw	r2,0(r2)
10011f00:	10800817 	ldw	r2,32(r2)
10011f04:	10000726 	beq	r2,zero,10011f24 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10011f08:	e0bffd17 	ldw	r2,-12(fp)
10011f0c:	10800017 	ldw	r2,0(r2)
10011f10:	10800817 	ldw	r2,32(r2)
10011f14:	e13ffd17 	ldw	r4,-12(fp)
10011f18:	e17fff17 	ldw	r5,-4(fp)
10011f1c:	103ee83a 	callr	r2
10011f20:	00000a06 	br	10011f4c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10011f24:	e0bfff17 	ldw	r2,-4(fp)
10011f28:	00c80004 	movi	r3,8192
10011f2c:	10c00115 	stw	r3,4(r2)
      return 0;
10011f30:	0005883a 	mov	r2,zero
10011f34:	00000506 	br	10011f4c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011f38:	0011e580 	call	10011e58 <alt_get_errno>
10011f3c:	1007883a 	mov	r3,r2
10011f40:	00801444 	movi	r2,81
10011f44:	18800015 	stw	r2,0(r3)
    return -1;
10011f48:	00bfffc4 	movi	r2,-1
  }
}
10011f4c:	e037883a 	mov	sp,fp
10011f50:	dfc00117 	ldw	ra,4(sp)
10011f54:	df000017 	ldw	fp,0(sp)
10011f58:	dec00204 	addi	sp,sp,8
10011f5c:	f800283a 	ret

10011f60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011f60:	defffe04 	addi	sp,sp,-8
10011f64:	dfc00115 	stw	ra,4(sp)
10011f68:	df000015 	stw	fp,0(sp)
10011f6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011f70:	008400b4 	movhi	r2,4098
10011f74:	10827704 	addi	r2,r2,2524
10011f78:	10800017 	ldw	r2,0(r2)
10011f7c:	10000526 	beq	r2,zero,10011f94 <alt_get_errno+0x34>
10011f80:	008400b4 	movhi	r2,4098
10011f84:	10827704 	addi	r2,r2,2524
10011f88:	10800017 	ldw	r2,0(r2)
10011f8c:	103ee83a 	callr	r2
10011f90:	00000206 	br	10011f9c <alt_get_errno+0x3c>
10011f94:	008400f4 	movhi	r2,4099
10011f98:	10b2c004 	addi	r2,r2,-13568
}
10011f9c:	e037883a 	mov	sp,fp
10011fa0:	dfc00117 	ldw	ra,4(sp)
10011fa4:	df000017 	ldw	fp,0(sp)
10011fa8:	dec00204 	addi	sp,sp,8
10011fac:	f800283a 	ret

10011fb0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10011fb0:	deffed04 	addi	sp,sp,-76
10011fb4:	dfc01215 	stw	ra,72(sp)
10011fb8:	df001115 	stw	fp,68(sp)
10011fbc:	df001104 	addi	fp,sp,68
10011fc0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011fc4:	e0bfff17 	ldw	r2,-4(fp)
10011fc8:	10000816 	blt	r2,zero,10011fec <isatty+0x3c>
10011fcc:	e13fff17 	ldw	r4,-4(fp)
10011fd0:	01400304 	movi	r5,12
10011fd4:	0007bcc0 	call	10007bcc <__mulsi3>
10011fd8:	1007883a 	mov	r3,r2
10011fdc:	008400b4 	movhi	r2,4098
10011fe0:	10bdf304 	addi	r2,r2,-2100
10011fe4:	1885883a 	add	r2,r3,r2
10011fe8:	00000106 	br	10011ff0 <isatty+0x40>
10011fec:	0005883a 	mov	r2,zero
10011ff0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10011ff4:	e0bfef17 	ldw	r2,-68(fp)
10011ff8:	10000e26 	beq	r2,zero,10012034 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10011ffc:	e0bfef17 	ldw	r2,-68(fp)
10012000:	10800017 	ldw	r2,0(r2)
10012004:	10800817 	ldw	r2,32(r2)
10012008:	1000021e 	bne	r2,zero,10012014 <isatty+0x64>
    {
      return 1;
1001200c:	00800044 	movi	r2,1
10012010:	00000d06 	br	10012048 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10012014:	e0bff004 	addi	r2,fp,-64
10012018:	e13fff17 	ldw	r4,-4(fp)
1001201c:	100b883a 	mov	r5,r2
10012020:	0011ea80 	call	10011ea8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10012024:	e0bff117 	ldw	r2,-60(fp)
10012028:	10880020 	cmpeqi	r2,r2,8192
1001202c:	10803fcc 	andi	r2,r2,255
10012030:	00000506 	br	10012048 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10012034:	0011f600 	call	10011f60 <alt_get_errno>
10012038:	1007883a 	mov	r3,r2
1001203c:	00801444 	movi	r2,81
10012040:	18800015 	stw	r2,0(r3)
    return 0;
10012044:	0005883a 	mov	r2,zero
  }
}
10012048:	e037883a 	mov	sp,fp
1001204c:	dfc00117 	ldw	ra,4(sp)
10012050:	df000017 	ldw	fp,0(sp)
10012054:	dec00204 	addi	sp,sp,8
10012058:	f800283a 	ret

1001205c <alt_load_section>:
1001205c:	defffc04 	addi	sp,sp,-16
10012060:	df000315 	stw	fp,12(sp)
10012064:	df000304 	addi	fp,sp,12
10012068:	e13ffd15 	stw	r4,-12(fp)
1001206c:	e17ffe15 	stw	r5,-8(fp)
10012070:	e1bfff15 	stw	r6,-4(fp)
10012074:	e0fffe17 	ldw	r3,-8(fp)
10012078:	e0bffd17 	ldw	r2,-12(fp)
1001207c:	18800c26 	beq	r3,r2,100120b0 <alt_load_section+0x54>
10012080:	00000806 	br	100120a4 <alt_load_section+0x48>
10012084:	e0bffe17 	ldw	r2,-8(fp)
10012088:	10c00104 	addi	r3,r2,4
1001208c:	e0fffe15 	stw	r3,-8(fp)
10012090:	e0fffd17 	ldw	r3,-12(fp)
10012094:	19000104 	addi	r4,r3,4
10012098:	e13ffd15 	stw	r4,-12(fp)
1001209c:	18c00017 	ldw	r3,0(r3)
100120a0:	10c00015 	stw	r3,0(r2)
100120a4:	e0fffe17 	ldw	r3,-8(fp)
100120a8:	e0bfff17 	ldw	r2,-4(fp)
100120ac:	18bff51e 	bne	r3,r2,10012084 <__alt_data_end+0xf8012084>
100120b0:	e037883a 	mov	sp,fp
100120b4:	df000017 	ldw	fp,0(sp)
100120b8:	dec00104 	addi	sp,sp,4
100120bc:	f800283a 	ret

100120c0 <alt_load>:
100120c0:	defffe04 	addi	sp,sp,-8
100120c4:	dfc00115 	stw	ra,4(sp)
100120c8:	df000015 	stw	fp,0(sp)
100120cc:	d839883a 	mov	fp,sp
100120d0:	010400b4 	movhi	r4,4098
100120d4:	21027c04 	addi	r4,r4,2544
100120d8:	01440074 	movhi	r5,4097
100120dc:	29523e04 	addi	r5,r5,18680
100120e0:	018400b4 	movhi	r6,4098
100120e4:	31827c04 	addi	r6,r6,2544
100120e8:	001205c0 	call	1001205c <alt_load_section>
100120ec:	01040034 	movhi	r4,4096
100120f0:	21000804 	addi	r4,r4,32
100120f4:	01440034 	movhi	r5,4096
100120f8:	29400804 	addi	r5,r5,32
100120fc:	01840034 	movhi	r6,4096
10012100:	31806f04 	addi	r6,r6,444
10012104:	001205c0 	call	1001205c <alt_load_section>
10012108:	01040074 	movhi	r4,4097
1001210c:	21115204 	addi	r4,r4,17736
10012110:	01440074 	movhi	r5,4097
10012114:	29515204 	addi	r5,r5,17736
10012118:	01840074 	movhi	r6,4097
1001211c:	31923e04 	addi	r6,r6,18680
10012120:	001205c0 	call	1001205c <alt_load_section>
10012124:	00134c00 	call	100134c0 <alt_dcache_flush_all>
10012128:	00136880 	call	10013688 <alt_icache_flush_all>
1001212c:	e037883a 	mov	sp,fp
10012130:	dfc00117 	ldw	ra,4(sp)
10012134:	df000017 	ldw	fp,0(sp)
10012138:	dec00204 	addi	sp,sp,8
1001213c:	f800283a 	ret

10012140 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012140:	defffe04 	addi	sp,sp,-8
10012144:	dfc00115 	stw	ra,4(sp)
10012148:	df000015 	stw	fp,0(sp)
1001214c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012150:	008400b4 	movhi	r2,4098
10012154:	10827704 	addi	r2,r2,2524
10012158:	10800017 	ldw	r2,0(r2)
1001215c:	10000526 	beq	r2,zero,10012174 <alt_get_errno+0x34>
10012160:	008400b4 	movhi	r2,4098
10012164:	10827704 	addi	r2,r2,2524
10012168:	10800017 	ldw	r2,0(r2)
1001216c:	103ee83a 	callr	r2
10012170:	00000206 	br	1001217c <alt_get_errno+0x3c>
10012174:	008400f4 	movhi	r2,4099
10012178:	10b2c004 	addi	r2,r2,-13568
}
1001217c:	e037883a 	mov	sp,fp
10012180:	dfc00117 	ldw	ra,4(sp)
10012184:	df000017 	ldw	fp,0(sp)
10012188:	dec00204 	addi	sp,sp,8
1001218c:	f800283a 	ret

10012190 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10012190:	defff904 	addi	sp,sp,-28
10012194:	dfc00615 	stw	ra,24(sp)
10012198:	df000515 	stw	fp,20(sp)
1001219c:	df000504 	addi	fp,sp,20
100121a0:	e13ffd15 	stw	r4,-12(fp)
100121a4:	e17ffe15 	stw	r5,-8(fp)
100121a8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
100121ac:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100121b0:	e0bffd17 	ldw	r2,-12(fp)
100121b4:	10000816 	blt	r2,zero,100121d8 <lseek+0x48>
100121b8:	e13ffd17 	ldw	r4,-12(fp)
100121bc:	01400304 	movi	r5,12
100121c0:	0007bcc0 	call	10007bcc <__mulsi3>
100121c4:	1007883a 	mov	r3,r2
100121c8:	008400b4 	movhi	r2,4098
100121cc:	10bdf304 	addi	r2,r2,-2100
100121d0:	1885883a 	add	r2,r3,r2
100121d4:	00000106 	br	100121dc <lseek+0x4c>
100121d8:	0005883a 	mov	r2,zero
100121dc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
100121e0:	e0bffc17 	ldw	r2,-16(fp)
100121e4:	10001026 	beq	r2,zero,10012228 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
100121e8:	e0bffc17 	ldw	r2,-16(fp)
100121ec:	10800017 	ldw	r2,0(r2)
100121f0:	10800717 	ldw	r2,28(r2)
100121f4:	10000926 	beq	r2,zero,1001221c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
100121f8:	e0bffc17 	ldw	r2,-16(fp)
100121fc:	10800017 	ldw	r2,0(r2)
10012200:	10800717 	ldw	r2,28(r2)
10012204:	e13ffc17 	ldw	r4,-16(fp)
10012208:	e17ffe17 	ldw	r5,-8(fp)
1001220c:	e1bfff17 	ldw	r6,-4(fp)
10012210:	103ee83a 	callr	r2
10012214:	e0bffb15 	stw	r2,-20(fp)
10012218:	00000506 	br	10012230 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1001221c:	00bfde84 	movi	r2,-134
10012220:	e0bffb15 	stw	r2,-20(fp)
10012224:	00000206 	br	10012230 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10012228:	00bfebc4 	movi	r2,-81
1001222c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10012230:	e0bffb17 	ldw	r2,-20(fp)
10012234:	1000070e 	bge	r2,zero,10012254 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10012238:	00121400 	call	10012140 <alt_get_errno>
1001223c:	1007883a 	mov	r3,r2
10012240:	e0bffb17 	ldw	r2,-20(fp)
10012244:	0085c83a 	sub	r2,zero,r2
10012248:	18800015 	stw	r2,0(r3)
    rc = -1;
1001224c:	00bfffc4 	movi	r2,-1
10012250:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10012254:	e0bffb17 	ldw	r2,-20(fp)
}
10012258:	e037883a 	mov	sp,fp
1001225c:	dfc00117 	ldw	ra,4(sp)
10012260:	df000017 	ldw	fp,0(sp)
10012264:	dec00204 	addi	sp,sp,8
10012268:	f800283a 	ret

1001226c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1001226c:	defffd04 	addi	sp,sp,-12
10012270:	dfc00215 	stw	ra,8(sp)
10012274:	df000115 	stw	fp,4(sp)
10012278:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1001227c:	0009883a 	mov	r4,zero
10012280:	00127600 	call	10012760 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10012284:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10012288:	00127940 	call	10012794 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1001228c:	01040074 	movhi	r4,4097
10012290:	21123404 	addi	r4,r4,18640
10012294:	01440074 	movhi	r5,4097
10012298:	29523404 	addi	r5,r5,18640
1001229c:	01840074 	movhi	r6,4097
100122a0:	31923404 	addi	r6,r6,18640
100122a4:	0013a540 	call	10013a54 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
100122a8:	00135d00 	call	100135d0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
100122ac:	01040074 	movhi	r4,4097
100122b0:	210d8b04 	addi	r4,r4,13868
100122b4:	00141a40 	call	100141a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
100122b8:	d1105617 	ldw	r4,16728(gp)
100122bc:	d0d05717 	ldw	r3,16732(gp)
100122c0:	d0905817 	ldw	r2,16736(gp)
100122c4:	180b883a 	mov	r5,r3
100122c8:	100d883a 	mov	r6,r2
100122cc:	00011440 	call	10001144 <main>
100122d0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
100122d4:	01000044 	movi	r4,1
100122d8:	0011d540 	call	10011d54 <close>
  exit (result);
100122dc:	e13fff17 	ldw	r4,-4(fp)
100122e0:	00141b80 	call	100141b8 <exit>

100122e4 <__malloc_lock>:
100122e4:	defffe04 	addi	sp,sp,-8
100122e8:	df000115 	stw	fp,4(sp)
100122ec:	df000104 	addi	fp,sp,4
100122f0:	e13fff15 	stw	r4,-4(fp)
100122f4:	e037883a 	mov	sp,fp
100122f8:	df000017 	ldw	fp,0(sp)
100122fc:	dec00104 	addi	sp,sp,4
10012300:	f800283a 	ret

10012304 <__malloc_unlock>:
10012304:	defffe04 	addi	sp,sp,-8
10012308:	df000115 	stw	fp,4(sp)
1001230c:	df000104 	addi	fp,sp,4
10012310:	e13fff15 	stw	r4,-4(fp)
10012314:	e037883a 	mov	sp,fp
10012318:	df000017 	ldw	fp,0(sp)
1001231c:	dec00104 	addi	sp,sp,4
10012320:	f800283a 	ret

10012324 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012324:	defffe04 	addi	sp,sp,-8
10012328:	dfc00115 	stw	ra,4(sp)
1001232c:	df000015 	stw	fp,0(sp)
10012330:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012334:	008400b4 	movhi	r2,4098
10012338:	10827704 	addi	r2,r2,2524
1001233c:	10800017 	ldw	r2,0(r2)
10012340:	10000526 	beq	r2,zero,10012358 <alt_get_errno+0x34>
10012344:	008400b4 	movhi	r2,4098
10012348:	10827704 	addi	r2,r2,2524
1001234c:	10800017 	ldw	r2,0(r2)
10012350:	103ee83a 	callr	r2
10012354:	00000206 	br	10012360 <alt_get_errno+0x3c>
10012358:	008400f4 	movhi	r2,4099
1001235c:	10b2c004 	addi	r2,r2,-13568
}
10012360:	e037883a 	mov	sp,fp
10012364:	dfc00117 	ldw	ra,4(sp)
10012368:	df000017 	ldw	fp,0(sp)
1001236c:	dec00204 	addi	sp,sp,8
10012370:	f800283a 	ret

10012374 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10012374:	defff904 	addi	sp,sp,-28
10012378:	dfc00615 	stw	ra,24(sp)
1001237c:	df000515 	stw	fp,20(sp)
10012380:	df000504 	addi	fp,sp,20
10012384:	e13ffd15 	stw	r4,-12(fp)
10012388:	e17ffe15 	stw	r5,-8(fp)
1001238c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10012390:	e0bffd17 	ldw	r2,-12(fp)
10012394:	10000816 	blt	r2,zero,100123b8 <read+0x44>
10012398:	e13ffd17 	ldw	r4,-12(fp)
1001239c:	01400304 	movi	r5,12
100123a0:	0007bcc0 	call	10007bcc <__mulsi3>
100123a4:	1007883a 	mov	r3,r2
100123a8:	008400b4 	movhi	r2,4098
100123ac:	10bdf304 	addi	r2,r2,-2100
100123b0:	1885883a 	add	r2,r3,r2
100123b4:	00000106 	br	100123bc <read+0x48>
100123b8:	0005883a 	mov	r2,zero
100123bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100123c0:	e0bffb17 	ldw	r2,-20(fp)
100123c4:	10002226 	beq	r2,zero,10012450 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100123c8:	e0bffb17 	ldw	r2,-20(fp)
100123cc:	10800217 	ldw	r2,8(r2)
100123d0:	108000cc 	andi	r2,r2,3
100123d4:	10800060 	cmpeqi	r2,r2,1
100123d8:	1000181e 	bne	r2,zero,1001243c <read+0xc8>
        (fd->dev->read))
100123dc:	e0bffb17 	ldw	r2,-20(fp)
100123e0:	10800017 	ldw	r2,0(r2)
100123e4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100123e8:	10001426 	beq	r2,zero,1001243c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
100123ec:	e0bffb17 	ldw	r2,-20(fp)
100123f0:	10800017 	ldw	r2,0(r2)
100123f4:	10800517 	ldw	r2,20(r2)
100123f8:	e0ffff17 	ldw	r3,-4(fp)
100123fc:	e13ffb17 	ldw	r4,-20(fp)
10012400:	e17ffe17 	ldw	r5,-8(fp)
10012404:	180d883a 	mov	r6,r3
10012408:	103ee83a 	callr	r2
1001240c:	e0bffc15 	stw	r2,-16(fp)
10012410:	e0bffc17 	ldw	r2,-16(fp)
10012414:	1000070e 	bge	r2,zero,10012434 <read+0xc0>
        {
          ALT_ERRNO = -rval;
10012418:	00123240 	call	10012324 <alt_get_errno>
1001241c:	1007883a 	mov	r3,r2
10012420:	e0bffc17 	ldw	r2,-16(fp)
10012424:	0085c83a 	sub	r2,zero,r2
10012428:	18800015 	stw	r2,0(r3)
          return -1;
1001242c:	00bfffc4 	movi	r2,-1
10012430:	00000c06 	br	10012464 <read+0xf0>
        }
        return rval;
10012434:	e0bffc17 	ldw	r2,-16(fp)
10012438:	00000a06 	br	10012464 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1001243c:	00123240 	call	10012324 <alt_get_errno>
10012440:	1007883a 	mov	r3,r2
10012444:	00800344 	movi	r2,13
10012448:	18800015 	stw	r2,0(r3)
1001244c:	00000406 	br	10012460 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10012450:	00123240 	call	10012324 <alt_get_errno>
10012454:	1007883a 	mov	r3,r2
10012458:	00801444 	movi	r2,81
1001245c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10012460:	00bfffc4 	movi	r2,-1
}
10012464:	e037883a 	mov	sp,fp
10012468:	dfc00117 	ldw	ra,4(sp)
1001246c:	df000017 	ldw	fp,0(sp)
10012470:	dec00204 	addi	sp,sp,8
10012474:	f800283a 	ret

10012478 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10012478:	defffc04 	addi	sp,sp,-16
1001247c:	dfc00315 	stw	ra,12(sp)
10012480:	df000215 	stw	fp,8(sp)
10012484:	dc000115 	stw	r16,4(sp)
10012488:	df000204 	addi	fp,sp,8
1001248c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10012490:	e0bffe17 	ldw	r2,-8(fp)
10012494:	108000d0 	cmplti	r2,r2,3
10012498:	1000111e 	bne	r2,zero,100124e0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1001249c:	040400b4 	movhi	r16,4098
100124a0:	843df304 	addi	r16,r16,-2100
100124a4:	e0bffe17 	ldw	r2,-8(fp)
100124a8:	1009883a 	mov	r4,r2
100124ac:	01400304 	movi	r5,12
100124b0:	0007bcc0 	call	10007bcc <__mulsi3>
100124b4:	8085883a 	add	r2,r16,r2
100124b8:	10800204 	addi	r2,r2,8
100124bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
100124c0:	040400b4 	movhi	r16,4098
100124c4:	843df304 	addi	r16,r16,-2100
100124c8:	e0bffe17 	ldw	r2,-8(fp)
100124cc:	1009883a 	mov	r4,r2
100124d0:	01400304 	movi	r5,12
100124d4:	0007bcc0 	call	10007bcc <__mulsi3>
100124d8:	8085883a 	add	r2,r16,r2
100124dc:	10000015 	stw	zero,0(r2)
  }
}
100124e0:	e6ffff04 	addi	sp,fp,-4
100124e4:	dfc00217 	ldw	ra,8(sp)
100124e8:	df000117 	ldw	fp,4(sp)
100124ec:	dc000017 	ldw	r16,0(sp)
100124f0:	dec00304 	addi	sp,sp,12
100124f4:	f800283a 	ret

100124f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
100124f8:	defff904 	addi	sp,sp,-28
100124fc:	df000615 	stw	fp,24(sp)
10012500:	df000604 	addi	fp,sp,24
10012504:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012508:	0005303a 	rdctl	r2,status
1001250c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012510:	e0fffc17 	ldw	r3,-16(fp)
10012514:	00bfff84 	movi	r2,-2
10012518:	1884703a 	and	r2,r3,r2
1001251c:	1001703a 	wrctl	status,r2
  
  return context;
10012520:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10012524:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10012528:	d0a00d17 	ldw	r2,-32716(gp)
1001252c:	10c000c4 	addi	r3,r2,3
10012530:	00bfff04 	movi	r2,-4
10012534:	1884703a 	and	r2,r3,r2
10012538:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1001253c:	d0e00d17 	ldw	r3,-32716(gp)
10012540:	e0bfff17 	ldw	r2,-4(fp)
10012544:	1887883a 	add	r3,r3,r2
10012548:	00860034 	movhi	r2,6144
1001254c:	10800004 	addi	r2,r2,0
10012550:	10c0062e 	bgeu	r2,r3,1001256c <sbrk+0x74>
10012554:	e0bffa17 	ldw	r2,-24(fp)
10012558:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001255c:	e0bffd17 	ldw	r2,-12(fp)
10012560:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10012564:	00bfffc4 	movi	r2,-1
10012568:	00000b06 	br	10012598 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1001256c:	d0a00d17 	ldw	r2,-32716(gp)
10012570:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10012574:	d0e00d17 	ldw	r3,-32716(gp)
10012578:	e0bfff17 	ldw	r2,-4(fp)
1001257c:	1885883a 	add	r2,r3,r2
10012580:	d0a00d15 	stw	r2,-32716(gp)
10012584:	e0bffa17 	ldw	r2,-24(fp)
10012588:	e0bffe15 	stw	r2,-8(fp)
1001258c:	e0bffe17 	ldw	r2,-8(fp)
10012590:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10012594:	e0bffb17 	ldw	r2,-20(fp)
} 
10012598:	e037883a 	mov	sp,fp
1001259c:	df000017 	ldw	fp,0(sp)
100125a0:	dec00104 	addi	sp,sp,4
100125a4:	f800283a 	ret

100125a8 <usleep>:
100125a8:	defffd04 	addi	sp,sp,-12
100125ac:	dfc00215 	stw	ra,8(sp)
100125b0:	df000115 	stw	fp,4(sp)
100125b4:	df000104 	addi	fp,sp,4
100125b8:	e13fff15 	stw	r4,-4(fp)
100125bc:	e13fff17 	ldw	r4,-4(fp)
100125c0:	00133680 	call	10013368 <alt_busy_sleep>
100125c4:	e037883a 	mov	sp,fp
100125c8:	dfc00117 	ldw	ra,4(sp)
100125cc:	df000017 	ldw	fp,0(sp)
100125d0:	dec00204 	addi	sp,sp,8
100125d4:	f800283a 	ret

100125d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100125d8:	defffe04 	addi	sp,sp,-8
100125dc:	dfc00115 	stw	ra,4(sp)
100125e0:	df000015 	stw	fp,0(sp)
100125e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100125e8:	008400b4 	movhi	r2,4098
100125ec:	10827704 	addi	r2,r2,2524
100125f0:	10800017 	ldw	r2,0(r2)
100125f4:	10000526 	beq	r2,zero,1001260c <alt_get_errno+0x34>
100125f8:	008400b4 	movhi	r2,4098
100125fc:	10827704 	addi	r2,r2,2524
10012600:	10800017 	ldw	r2,0(r2)
10012604:	103ee83a 	callr	r2
10012608:	00000206 	br	10012614 <alt_get_errno+0x3c>
1001260c:	008400f4 	movhi	r2,4099
10012610:	10b2c004 	addi	r2,r2,-13568
}
10012614:	e037883a 	mov	sp,fp
10012618:	dfc00117 	ldw	ra,4(sp)
1001261c:	df000017 	ldw	fp,0(sp)
10012620:	dec00204 	addi	sp,sp,8
10012624:	f800283a 	ret

10012628 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10012628:	defff904 	addi	sp,sp,-28
1001262c:	dfc00615 	stw	ra,24(sp)
10012630:	df000515 	stw	fp,20(sp)
10012634:	df000504 	addi	fp,sp,20
10012638:	e13ffd15 	stw	r4,-12(fp)
1001263c:	e17ffe15 	stw	r5,-8(fp)
10012640:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10012644:	e0bffd17 	ldw	r2,-12(fp)
10012648:	10000816 	blt	r2,zero,1001266c <write+0x44>
1001264c:	e13ffd17 	ldw	r4,-12(fp)
10012650:	01400304 	movi	r5,12
10012654:	0007bcc0 	call	10007bcc <__mulsi3>
10012658:	1007883a 	mov	r3,r2
1001265c:	008400b4 	movhi	r2,4098
10012660:	10bdf304 	addi	r2,r2,-2100
10012664:	1885883a 	add	r2,r3,r2
10012668:	00000106 	br	10012670 <write+0x48>
1001266c:	0005883a 	mov	r2,zero
10012670:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10012674:	e0bffb17 	ldw	r2,-20(fp)
10012678:	10002126 	beq	r2,zero,10012700 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1001267c:	e0bffb17 	ldw	r2,-20(fp)
10012680:	10800217 	ldw	r2,8(r2)
10012684:	108000cc 	andi	r2,r2,3
10012688:	10001826 	beq	r2,zero,100126ec <write+0xc4>
1001268c:	e0bffb17 	ldw	r2,-20(fp)
10012690:	10800017 	ldw	r2,0(r2)
10012694:	10800617 	ldw	r2,24(r2)
10012698:	10001426 	beq	r2,zero,100126ec <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1001269c:	e0bffb17 	ldw	r2,-20(fp)
100126a0:	10800017 	ldw	r2,0(r2)
100126a4:	10800617 	ldw	r2,24(r2)
100126a8:	e0ffff17 	ldw	r3,-4(fp)
100126ac:	e13ffb17 	ldw	r4,-20(fp)
100126b0:	e17ffe17 	ldw	r5,-8(fp)
100126b4:	180d883a 	mov	r6,r3
100126b8:	103ee83a 	callr	r2
100126bc:	e0bffc15 	stw	r2,-16(fp)
100126c0:	e0bffc17 	ldw	r2,-16(fp)
100126c4:	1000070e 	bge	r2,zero,100126e4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
100126c8:	00125d80 	call	100125d8 <alt_get_errno>
100126cc:	1007883a 	mov	r3,r2
100126d0:	e0bffc17 	ldw	r2,-16(fp)
100126d4:	0085c83a 	sub	r2,zero,r2
100126d8:	18800015 	stw	r2,0(r3)
        return -1;
100126dc:	00bfffc4 	movi	r2,-1
100126e0:	00000c06 	br	10012714 <write+0xec>
      }
      return rval;
100126e4:	e0bffc17 	ldw	r2,-16(fp)
100126e8:	00000a06 	br	10012714 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
100126ec:	00125d80 	call	100125d8 <alt_get_errno>
100126f0:	1007883a 	mov	r3,r2
100126f4:	00800344 	movi	r2,13
100126f8:	18800015 	stw	r2,0(r3)
100126fc:	00000406 	br	10012710 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10012700:	00125d80 	call	100125d8 <alt_get_errno>
10012704:	1007883a 	mov	r3,r2
10012708:	00801444 	movi	r2,81
1001270c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10012710:	00bfffc4 	movi	r2,-1
}
10012714:	e037883a 	mov	sp,fp
10012718:	dfc00117 	ldw	ra,4(sp)
1001271c:	df000017 	ldw	fp,0(sp)
10012720:	dec00204 	addi	sp,sp,8
10012724:	f800283a 	ret

10012728 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10012728:	defffd04 	addi	sp,sp,-12
1001272c:	dfc00215 	stw	ra,8(sp)
10012730:	df000115 	stw	fp,4(sp)
10012734:	df000104 	addi	fp,sp,4
10012738:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1001273c:	e13fff17 	ldw	r4,-4(fp)
10012740:	014400b4 	movhi	r5,4098
10012744:	29427404 	addi	r5,r5,2512
10012748:	001352c0 	call	1001352c <alt_dev_llist_insert>
}
1001274c:	e037883a 	mov	sp,fp
10012750:	dfc00117 	ldw	ra,4(sp)
10012754:	df000017 	ldw	fp,0(sp)
10012758:	dec00204 	addi	sp,sp,8
1001275c:	f800283a 	ret

10012760 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10012760:	defffd04 	addi	sp,sp,-12
10012764:	dfc00215 	stw	ra,8(sp)
10012768:	df000115 	stw	fp,4(sp)
1001276c:	df000104 	addi	fp,sp,4
10012770:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10012774:	0013f0c0 	call	10013f0c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10012778:	00800044 	movi	r2,1
1001277c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10012780:	e037883a 	mov	sp,fp
10012784:	dfc00117 	ldw	ra,4(sp)
10012788:	df000017 	ldw	fp,0(sp)
1001278c:	dec00204 	addi	sp,sp,8
10012790:	f800283a 	ret

10012794 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10012794:	defffe04 	addi	sp,sp,-8
10012798:	dfc00115 	stw	ra,4(sp)
1001279c:	df000015 	stw	fp,0(sp)
100127a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100127a4:	010400b4 	movhi	r4,4098
100127a8:	213e5d04 	addi	r4,r4,-1676
100127ac:	000b883a 	mov	r5,zero
100127b0:	01800144 	movi	r6,5
100127b4:	00129400 	call	10012940 <altera_avalon_jtag_uart_init>
100127b8:	010400b4 	movhi	r4,4098
100127bc:	213e5304 	addi	r4,r4,-1716
100127c0:	00127280 	call	10012728 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100127c4:	0001883a 	nop
}
100127c8:	e037883a 	mov	sp,fp
100127cc:	dfc00117 	ldw	ra,4(sp)
100127d0:	df000017 	ldw	fp,0(sp)
100127d4:	dec00204 	addi	sp,sp,8
100127d8:	f800283a 	ret

100127dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100127dc:	defffa04 	addi	sp,sp,-24
100127e0:	dfc00515 	stw	ra,20(sp)
100127e4:	df000415 	stw	fp,16(sp)
100127e8:	df000404 	addi	fp,sp,16
100127ec:	e13ffd15 	stw	r4,-12(fp)
100127f0:	e17ffe15 	stw	r5,-8(fp)
100127f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100127f8:	e0bffd17 	ldw	r2,-12(fp)
100127fc:	10800017 	ldw	r2,0(r2)
10012800:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10012804:	e0bffc17 	ldw	r2,-16(fp)
10012808:	10c00a04 	addi	r3,r2,40
1001280c:	e0bffd17 	ldw	r2,-12(fp)
10012810:	10800217 	ldw	r2,8(r2)
10012814:	1809883a 	mov	r4,r3
10012818:	e17ffe17 	ldw	r5,-8(fp)
1001281c:	e1bfff17 	ldw	r6,-4(fp)
10012820:	100f883a 	mov	r7,r2
10012824:	0012e040 	call	10012e04 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10012828:	e037883a 	mov	sp,fp
1001282c:	dfc00117 	ldw	ra,4(sp)
10012830:	df000017 	ldw	fp,0(sp)
10012834:	dec00204 	addi	sp,sp,8
10012838:	f800283a 	ret

1001283c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1001283c:	defffa04 	addi	sp,sp,-24
10012840:	dfc00515 	stw	ra,20(sp)
10012844:	df000415 	stw	fp,16(sp)
10012848:	df000404 	addi	fp,sp,16
1001284c:	e13ffd15 	stw	r4,-12(fp)
10012850:	e17ffe15 	stw	r5,-8(fp)
10012854:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012858:	e0bffd17 	ldw	r2,-12(fp)
1001285c:	10800017 	ldw	r2,0(r2)
10012860:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10012864:	e0bffc17 	ldw	r2,-16(fp)
10012868:	10c00a04 	addi	r3,r2,40
1001286c:	e0bffd17 	ldw	r2,-12(fp)
10012870:	10800217 	ldw	r2,8(r2)
10012874:	1809883a 	mov	r4,r3
10012878:	e17ffe17 	ldw	r5,-8(fp)
1001287c:	e1bfff17 	ldw	r6,-4(fp)
10012880:	100f883a 	mov	r7,r2
10012884:	00130100 	call	10013010 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10012888:	e037883a 	mov	sp,fp
1001288c:	dfc00117 	ldw	ra,4(sp)
10012890:	df000017 	ldw	fp,0(sp)
10012894:	dec00204 	addi	sp,sp,8
10012898:	f800283a 	ret

1001289c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1001289c:	defffc04 	addi	sp,sp,-16
100128a0:	dfc00315 	stw	ra,12(sp)
100128a4:	df000215 	stw	fp,8(sp)
100128a8:	df000204 	addi	fp,sp,8
100128ac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100128b0:	e0bfff17 	ldw	r2,-4(fp)
100128b4:	10800017 	ldw	r2,0(r2)
100128b8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100128bc:	e0bffe17 	ldw	r2,-8(fp)
100128c0:	10c00a04 	addi	r3,r2,40
100128c4:	e0bfff17 	ldw	r2,-4(fp)
100128c8:	10800217 	ldw	r2,8(r2)
100128cc:	1809883a 	mov	r4,r3
100128d0:	100b883a 	mov	r5,r2
100128d4:	0012cb00 	call	10012cb0 <altera_avalon_jtag_uart_close>
}
100128d8:	e037883a 	mov	sp,fp
100128dc:	dfc00117 	ldw	ra,4(sp)
100128e0:	df000017 	ldw	fp,0(sp)
100128e4:	dec00204 	addi	sp,sp,8
100128e8:	f800283a 	ret

100128ec <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
100128ec:	defffa04 	addi	sp,sp,-24
100128f0:	dfc00515 	stw	ra,20(sp)
100128f4:	df000415 	stw	fp,16(sp)
100128f8:	df000404 	addi	fp,sp,16
100128fc:	e13ffd15 	stw	r4,-12(fp)
10012900:	e17ffe15 	stw	r5,-8(fp)
10012904:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10012908:	e0bffd17 	ldw	r2,-12(fp)
1001290c:	10800017 	ldw	r2,0(r2)
10012910:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10012914:	e0bffc17 	ldw	r2,-16(fp)
10012918:	10800a04 	addi	r2,r2,40
1001291c:	1009883a 	mov	r4,r2
10012920:	e17ffe17 	ldw	r5,-8(fp)
10012924:	e1bfff17 	ldw	r6,-4(fp)
10012928:	0012d180 	call	10012d18 <altera_avalon_jtag_uart_ioctl>
}
1001292c:	e037883a 	mov	sp,fp
10012930:	dfc00117 	ldw	ra,4(sp)
10012934:	df000017 	ldw	fp,0(sp)
10012938:	dec00204 	addi	sp,sp,8
1001293c:	f800283a 	ret

10012940 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10012940:	defffa04 	addi	sp,sp,-24
10012944:	dfc00515 	stw	ra,20(sp)
10012948:	df000415 	stw	fp,16(sp)
1001294c:	df000404 	addi	fp,sp,16
10012950:	e13ffd15 	stw	r4,-12(fp)
10012954:	e17ffe15 	stw	r5,-8(fp)
10012958:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001295c:	e0bffd17 	ldw	r2,-12(fp)
10012960:	00c00044 	movi	r3,1
10012964:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10012968:	e0bffd17 	ldw	r2,-12(fp)
1001296c:	10800017 	ldw	r2,0(r2)
10012970:	10800104 	addi	r2,r2,4
10012974:	1007883a 	mov	r3,r2
10012978:	e0bffd17 	ldw	r2,-12(fp)
1001297c:	10800817 	ldw	r2,32(r2)
10012980:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10012984:	e0fffe17 	ldw	r3,-8(fp)
10012988:	e0bfff17 	ldw	r2,-4(fp)
1001298c:	d8000015 	stw	zero,0(sp)
10012990:	1809883a 	mov	r4,r3
10012994:	100b883a 	mov	r5,r2
10012998:	01840074 	movhi	r6,4097
1001299c:	318a8104 	addi	r6,r6,10756
100129a0:	e1fffd17 	ldw	r7,-12(fp)
100129a4:	00136a40 	call	100136a4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100129a8:	e0bffd17 	ldw	r2,-12(fp)
100129ac:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100129b0:	e0bffd17 	ldw	r2,-12(fp)
100129b4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100129b8:	008400f4 	movhi	r2,4099
100129bc:	10b2c504 	addi	r2,r2,-13548
100129c0:	10800017 	ldw	r2,0(r2)
100129c4:	1809883a 	mov	r4,r3
100129c8:	100b883a 	mov	r5,r2
100129cc:	01840074 	movhi	r6,4097
100129d0:	318b0204 	addi	r6,r6,11272
100129d4:	e1fffd17 	ldw	r7,-12(fp)
100129d8:	00132280 	call	10013228 <alt_alarm_start>
100129dc:	1000040e 	bge	r2,zero,100129f0 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100129e0:	e0fffd17 	ldw	r3,-12(fp)
100129e4:	00a00034 	movhi	r2,32768
100129e8:	10bfffc4 	addi	r2,r2,-1
100129ec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100129f0:	e037883a 	mov	sp,fp
100129f4:	dfc00117 	ldw	ra,4(sp)
100129f8:	df000017 	ldw	fp,0(sp)
100129fc:	dec00204 	addi	sp,sp,8
10012a00:	f800283a 	ret

10012a04 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10012a04:	defff804 	addi	sp,sp,-32
10012a08:	df000715 	stw	fp,28(sp)
10012a0c:	df000704 	addi	fp,sp,28
10012a10:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10012a14:	e0bfff17 	ldw	r2,-4(fp)
10012a18:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10012a1c:	e0bffb17 	ldw	r2,-20(fp)
10012a20:	10800017 	ldw	r2,0(r2)
10012a24:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012a28:	e0bffc17 	ldw	r2,-16(fp)
10012a2c:	10800104 	addi	r2,r2,4
10012a30:	10800037 	ldwio	r2,0(r2)
10012a34:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10012a38:	e0bffd17 	ldw	r2,-12(fp)
10012a3c:	1080c00c 	andi	r2,r2,768
10012a40:	1000011e 	bne	r2,zero,10012a48 <altera_avalon_jtag_uart_irq+0x44>
      break;
10012a44:	00006c06 	br	10012bf8 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10012a48:	e0bffd17 	ldw	r2,-12(fp)
10012a4c:	1080400c 	andi	r2,r2,256
10012a50:	10003426 	beq	r2,zero,10012b24 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10012a54:	00800074 	movhi	r2,1
10012a58:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012a5c:	e0bffb17 	ldw	r2,-20(fp)
10012a60:	10800a17 	ldw	r2,40(r2)
10012a64:	10800044 	addi	r2,r2,1
10012a68:	1081ffcc 	andi	r2,r2,2047
10012a6c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10012a70:	e0bffb17 	ldw	r2,-20(fp)
10012a74:	10c00b17 	ldw	r3,44(r2)
10012a78:	e0bffe17 	ldw	r2,-8(fp)
10012a7c:	1880011e 	bne	r3,r2,10012a84 <altera_avalon_jtag_uart_irq+0x80>
          break;
10012a80:	00001606 	br	10012adc <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10012a84:	e0bffc17 	ldw	r2,-16(fp)
10012a88:	10800037 	ldwio	r2,0(r2)
10012a8c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10012a90:	e0bff917 	ldw	r2,-28(fp)
10012a94:	10a0000c 	andi	r2,r2,32768
10012a98:	1000011e 	bne	r2,zero,10012aa0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
10012a9c:	00000f06 	br	10012adc <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10012aa0:	e0bffb17 	ldw	r2,-20(fp)
10012aa4:	10800a17 	ldw	r2,40(r2)
10012aa8:	e0fff917 	ldw	r3,-28(fp)
10012aac:	1809883a 	mov	r4,r3
10012ab0:	e0fffb17 	ldw	r3,-20(fp)
10012ab4:	1885883a 	add	r2,r3,r2
10012ab8:	10800e04 	addi	r2,r2,56
10012abc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012ac0:	e0bffb17 	ldw	r2,-20(fp)
10012ac4:	10800a17 	ldw	r2,40(r2)
10012ac8:	10800044 	addi	r2,r2,1
10012acc:	10c1ffcc 	andi	r3,r2,2047
10012ad0:	e0bffb17 	ldw	r2,-20(fp)
10012ad4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10012ad8:	003fe006 	br	10012a5c <__alt_data_end+0xf8012a5c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10012adc:	e0bff917 	ldw	r2,-28(fp)
10012ae0:	10bfffec 	andhi	r2,r2,65535
10012ae4:	10000f26 	beq	r2,zero,10012b24 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012ae8:	e0bffb17 	ldw	r2,-20(fp)
10012aec:	10c00817 	ldw	r3,32(r2)
10012af0:	00bfff84 	movi	r2,-2
10012af4:	1886703a 	and	r3,r3,r2
10012af8:	e0bffb17 	ldw	r2,-20(fp)
10012afc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10012b00:	e0bffc17 	ldw	r2,-16(fp)
10012b04:	10800104 	addi	r2,r2,4
10012b08:	1007883a 	mov	r3,r2
10012b0c:	e0bffb17 	ldw	r2,-20(fp)
10012b10:	10800817 	ldw	r2,32(r2)
10012b14:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012b18:	e0bffc17 	ldw	r2,-16(fp)
10012b1c:	10800104 	addi	r2,r2,4
10012b20:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10012b24:	e0bffd17 	ldw	r2,-12(fp)
10012b28:	1080800c 	andi	r2,r2,512
10012b2c:	10003126 	beq	r2,zero,10012bf4 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10012b30:	e0bffd17 	ldw	r2,-12(fp)
10012b34:	1004d43a 	srli	r2,r2,16
10012b38:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10012b3c:	00001406 	br	10012b90 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10012b40:	e0bffc17 	ldw	r2,-16(fp)
10012b44:	e0fffb17 	ldw	r3,-20(fp)
10012b48:	18c00d17 	ldw	r3,52(r3)
10012b4c:	e13ffb17 	ldw	r4,-20(fp)
10012b50:	20c7883a 	add	r3,r4,r3
10012b54:	18c20e04 	addi	r3,r3,2104
10012b58:	18c00003 	ldbu	r3,0(r3)
10012b5c:	18c03fcc 	andi	r3,r3,255
10012b60:	18c0201c 	xori	r3,r3,128
10012b64:	18ffe004 	addi	r3,r3,-128
10012b68:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012b6c:	e0bffb17 	ldw	r2,-20(fp)
10012b70:	10800d17 	ldw	r2,52(r2)
10012b74:	10800044 	addi	r2,r2,1
10012b78:	10c1ffcc 	andi	r3,r2,2047
10012b7c:	e0bffb17 	ldw	r2,-20(fp)
10012b80:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10012b84:	e0bffa17 	ldw	r2,-24(fp)
10012b88:	10bfffc4 	addi	r2,r2,-1
10012b8c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10012b90:	e0bffa17 	ldw	r2,-24(fp)
10012b94:	10000526 	beq	r2,zero,10012bac <altera_avalon_jtag_uart_irq+0x1a8>
10012b98:	e0bffb17 	ldw	r2,-20(fp)
10012b9c:	10c00d17 	ldw	r3,52(r2)
10012ba0:	e0bffb17 	ldw	r2,-20(fp)
10012ba4:	10800c17 	ldw	r2,48(r2)
10012ba8:	18bfe51e 	bne	r3,r2,10012b40 <__alt_data_end+0xf8012b40>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10012bac:	e0bffa17 	ldw	r2,-24(fp)
10012bb0:	10001026 	beq	r2,zero,10012bf4 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10012bb4:	e0bffb17 	ldw	r2,-20(fp)
10012bb8:	10c00817 	ldw	r3,32(r2)
10012bbc:	00bfff44 	movi	r2,-3
10012bc0:	1886703a 	and	r3,r3,r2
10012bc4:	e0bffb17 	ldw	r2,-20(fp)
10012bc8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012bcc:	e0bffb17 	ldw	r2,-20(fp)
10012bd0:	10800017 	ldw	r2,0(r2)
10012bd4:	10800104 	addi	r2,r2,4
10012bd8:	1007883a 	mov	r3,r2
10012bdc:	e0bffb17 	ldw	r2,-20(fp)
10012be0:	10800817 	ldw	r2,32(r2)
10012be4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012be8:	e0bffc17 	ldw	r2,-16(fp)
10012bec:	10800104 	addi	r2,r2,4
10012bf0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10012bf4:	003f8c06 	br	10012a28 <__alt_data_end+0xf8012a28>
}
10012bf8:	e037883a 	mov	sp,fp
10012bfc:	df000017 	ldw	fp,0(sp)
10012c00:	dec00104 	addi	sp,sp,4
10012c04:	f800283a 	ret

10012c08 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10012c08:	defff804 	addi	sp,sp,-32
10012c0c:	df000715 	stw	fp,28(sp)
10012c10:	df000704 	addi	fp,sp,28
10012c14:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10012c18:	e0bffb17 	ldw	r2,-20(fp)
10012c1c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10012c20:	e0bff917 	ldw	r2,-28(fp)
10012c24:	10800017 	ldw	r2,0(r2)
10012c28:	10800104 	addi	r2,r2,4
10012c2c:	10800037 	ldwio	r2,0(r2)
10012c30:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10012c34:	e0bffa17 	ldw	r2,-24(fp)
10012c38:	1081000c 	andi	r2,r2,1024
10012c3c:	10000b26 	beq	r2,zero,10012c6c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10012c40:	e0bff917 	ldw	r2,-28(fp)
10012c44:	10800017 	ldw	r2,0(r2)
10012c48:	10800104 	addi	r2,r2,4
10012c4c:	1007883a 	mov	r3,r2
10012c50:	e0bff917 	ldw	r2,-28(fp)
10012c54:	10800817 	ldw	r2,32(r2)
10012c58:	10810014 	ori	r2,r2,1024
10012c5c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10012c60:	e0bff917 	ldw	r2,-28(fp)
10012c64:	10000915 	stw	zero,36(r2)
10012c68:	00000a06 	br	10012c94 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10012c6c:	e0bff917 	ldw	r2,-28(fp)
10012c70:	10c00917 	ldw	r3,36(r2)
10012c74:	00a00034 	movhi	r2,32768
10012c78:	10bfff04 	addi	r2,r2,-4
10012c7c:	10c00536 	bltu	r2,r3,10012c94 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10012c80:	e0bff917 	ldw	r2,-28(fp)
10012c84:	10800917 	ldw	r2,36(r2)
10012c88:	10c00044 	addi	r3,r2,1
10012c8c:	e0bff917 	ldw	r2,-28(fp)
10012c90:	10c00915 	stw	r3,36(r2)
10012c94:	008400f4 	movhi	r2,4099
10012c98:	10b2c504 	addi	r2,r2,-13548
10012c9c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10012ca0:	e037883a 	mov	sp,fp
10012ca4:	df000017 	ldw	fp,0(sp)
10012ca8:	dec00104 	addi	sp,sp,4
10012cac:	f800283a 	ret

10012cb0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10012cb0:	defffd04 	addi	sp,sp,-12
10012cb4:	df000215 	stw	fp,8(sp)
10012cb8:	df000204 	addi	fp,sp,8
10012cbc:	e13ffe15 	stw	r4,-8(fp)
10012cc0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012cc4:	00000506 	br	10012cdc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10012cc8:	e0bfff17 	ldw	r2,-4(fp)
10012ccc:	1090000c 	andi	r2,r2,16384
10012cd0:	10000226 	beq	r2,zero,10012cdc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10012cd4:	00bffd44 	movi	r2,-11
10012cd8:	00000b06 	br	10012d08 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012cdc:	e0bffe17 	ldw	r2,-8(fp)
10012ce0:	10c00d17 	ldw	r3,52(r2)
10012ce4:	e0bffe17 	ldw	r2,-8(fp)
10012ce8:	10800c17 	ldw	r2,48(r2)
10012cec:	18800526 	beq	r3,r2,10012d04 <altera_avalon_jtag_uart_close+0x54>
10012cf0:	e0bffe17 	ldw	r2,-8(fp)
10012cf4:	10c00917 	ldw	r3,36(r2)
10012cf8:	e0bffe17 	ldw	r2,-8(fp)
10012cfc:	10800117 	ldw	r2,4(r2)
10012d00:	18bff136 	bltu	r3,r2,10012cc8 <__alt_data_end+0xf8012cc8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10012d04:	0005883a 	mov	r2,zero
}
10012d08:	e037883a 	mov	sp,fp
10012d0c:	df000017 	ldw	fp,0(sp)
10012d10:	dec00104 	addi	sp,sp,4
10012d14:	f800283a 	ret

10012d18 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10012d18:	defffa04 	addi	sp,sp,-24
10012d1c:	df000515 	stw	fp,20(sp)
10012d20:	df000504 	addi	fp,sp,20
10012d24:	e13ffd15 	stw	r4,-12(fp)
10012d28:	e17ffe15 	stw	r5,-8(fp)
10012d2c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10012d30:	00bff9c4 	movi	r2,-25
10012d34:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10012d38:	e0bffe17 	ldw	r2,-8(fp)
10012d3c:	10da8060 	cmpeqi	r3,r2,27137
10012d40:	1800031e 	bne	r3,zero,10012d50 <altera_avalon_jtag_uart_ioctl+0x38>
10012d44:	109a80a0 	cmpeqi	r2,r2,27138
10012d48:	1000191e 	bne	r2,zero,10012db0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10012d4c:	00002806 	br	10012df0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10012d50:	e0bffd17 	ldw	r2,-12(fp)
10012d54:	10c00117 	ldw	r3,4(r2)
10012d58:	00a00034 	movhi	r2,32768
10012d5c:	10bfffc4 	addi	r2,r2,-1
10012d60:	18801226 	beq	r3,r2,10012dac <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
10012d64:	e0bfff17 	ldw	r2,-4(fp)
10012d68:	10800017 	ldw	r2,0(r2)
10012d6c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10012d70:	e0bffc17 	ldw	r2,-16(fp)
10012d74:	10800090 	cmplti	r2,r2,2
10012d78:	1000061e 	bne	r2,zero,10012d94 <altera_avalon_jtag_uart_ioctl+0x7c>
10012d7c:	e0fffc17 	ldw	r3,-16(fp)
10012d80:	00a00034 	movhi	r2,32768
10012d84:	10bfffc4 	addi	r2,r2,-1
10012d88:	18800226 	beq	r3,r2,10012d94 <altera_avalon_jtag_uart_ioctl+0x7c>
10012d8c:	e0bffc17 	ldw	r2,-16(fp)
10012d90:	00000206 	br	10012d9c <altera_avalon_jtag_uart_ioctl+0x84>
10012d94:	00a00034 	movhi	r2,32768
10012d98:	10bfff84 	addi	r2,r2,-2
10012d9c:	e0fffd17 	ldw	r3,-12(fp)
10012da0:	18800115 	stw	r2,4(r3)
      rc = 0;
10012da4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012da8:	00001106 	br	10012df0 <altera_avalon_jtag_uart_ioctl+0xd8>
10012dac:	00001006 	br	10012df0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10012db0:	e0bffd17 	ldw	r2,-12(fp)
10012db4:	10c00117 	ldw	r3,4(r2)
10012db8:	00a00034 	movhi	r2,32768
10012dbc:	10bfffc4 	addi	r2,r2,-1
10012dc0:	18800a26 	beq	r3,r2,10012dec <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10012dc4:	e0bffd17 	ldw	r2,-12(fp)
10012dc8:	10c00917 	ldw	r3,36(r2)
10012dcc:	e0bffd17 	ldw	r2,-12(fp)
10012dd0:	10800117 	ldw	r2,4(r2)
10012dd4:	1885803a 	cmpltu	r2,r3,r2
10012dd8:	10c03fcc 	andi	r3,r2,255
10012ddc:	e0bfff17 	ldw	r2,-4(fp)
10012de0:	10c00015 	stw	r3,0(r2)
      rc = 0;
10012de4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012de8:	00000006 	br	10012dec <altera_avalon_jtag_uart_ioctl+0xd4>
10012dec:	0001883a 	nop

  default:
    break;
  }

  return rc;
10012df0:	e0bffb17 	ldw	r2,-20(fp)
}
10012df4:	e037883a 	mov	sp,fp
10012df8:	df000017 	ldw	fp,0(sp)
10012dfc:	dec00104 	addi	sp,sp,4
10012e00:	f800283a 	ret

10012e04 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10012e04:	defff304 	addi	sp,sp,-52
10012e08:	dfc00c15 	stw	ra,48(sp)
10012e0c:	df000b15 	stw	fp,44(sp)
10012e10:	df000b04 	addi	fp,sp,44
10012e14:	e13ffc15 	stw	r4,-16(fp)
10012e18:	e17ffd15 	stw	r5,-12(fp)
10012e1c:	e1bffe15 	stw	r6,-8(fp)
10012e20:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10012e24:	e0bffd17 	ldw	r2,-12(fp)
10012e28:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10012e2c:	00004906 	br	10012f54 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10012e30:	e0bffc17 	ldw	r2,-16(fp)
10012e34:	10800a17 	ldw	r2,40(r2)
10012e38:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10012e3c:	e0bffc17 	ldw	r2,-16(fp)
10012e40:	10800b17 	ldw	r2,44(r2)
10012e44:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10012e48:	e0fff717 	ldw	r3,-36(fp)
10012e4c:	e0bff817 	ldw	r2,-32(fp)
10012e50:	18800536 	bltu	r3,r2,10012e68 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10012e54:	e0fff717 	ldw	r3,-36(fp)
10012e58:	e0bff817 	ldw	r2,-32(fp)
10012e5c:	1885c83a 	sub	r2,r3,r2
10012e60:	e0bff615 	stw	r2,-40(fp)
10012e64:	00000406 	br	10012e78 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10012e68:	00c20004 	movi	r3,2048
10012e6c:	e0bff817 	ldw	r2,-32(fp)
10012e70:	1885c83a 	sub	r2,r3,r2
10012e74:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10012e78:	e0bff617 	ldw	r2,-40(fp)
10012e7c:	1000011e 	bne	r2,zero,10012e84 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10012e80:	00001d06 	br	10012ef8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10012e84:	e0fffe17 	ldw	r3,-8(fp)
10012e88:	e0bff617 	ldw	r2,-40(fp)
10012e8c:	1880022e 	bgeu	r3,r2,10012e98 <altera_avalon_jtag_uart_read+0x94>
        n = space;
10012e90:	e0bffe17 	ldw	r2,-8(fp)
10012e94:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10012e98:	e0bff817 	ldw	r2,-32(fp)
10012e9c:	10800e04 	addi	r2,r2,56
10012ea0:	e0fffc17 	ldw	r3,-16(fp)
10012ea4:	1885883a 	add	r2,r3,r2
10012ea8:	e13ff517 	ldw	r4,-44(fp)
10012eac:	100b883a 	mov	r5,r2
10012eb0:	e1bff617 	ldw	r6,-40(fp)
10012eb4:	000cf400 	call	1000cf40 <memcpy>
      ptr   += n;
10012eb8:	e0fff517 	ldw	r3,-44(fp)
10012ebc:	e0bff617 	ldw	r2,-40(fp)
10012ec0:	1885883a 	add	r2,r3,r2
10012ec4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10012ec8:	e0fffe17 	ldw	r3,-8(fp)
10012ecc:	e0bff617 	ldw	r2,-40(fp)
10012ed0:	1885c83a 	sub	r2,r3,r2
10012ed4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012ed8:	e0fff817 	ldw	r3,-32(fp)
10012edc:	e0bff617 	ldw	r2,-40(fp)
10012ee0:	1885883a 	add	r2,r3,r2
10012ee4:	10c1ffcc 	andi	r3,r2,2047
10012ee8:	e0bffc17 	ldw	r2,-16(fp)
10012eec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10012ef0:	e0bffe17 	ldw	r2,-8(fp)
10012ef4:	00bfce16 	blt	zero,r2,10012e30 <__alt_data_end+0xf8012e30>

    /* If we read any data then return it */
    if (ptr != buffer)
10012ef8:	e0fff517 	ldw	r3,-44(fp)
10012efc:	e0bffd17 	ldw	r2,-12(fp)
10012f00:	18800126 	beq	r3,r2,10012f08 <altera_avalon_jtag_uart_read+0x104>
      break;
10012f04:	00001506 	br	10012f5c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10012f08:	e0bfff17 	ldw	r2,-4(fp)
10012f0c:	1090000c 	andi	r2,r2,16384
10012f10:	10000126 	beq	r2,zero,10012f18 <altera_avalon_jtag_uart_read+0x114>
      break;
10012f14:	00001106 	br	10012f5c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10012f18:	0001883a 	nop
10012f1c:	e0bffc17 	ldw	r2,-16(fp)
10012f20:	10c00a17 	ldw	r3,40(r2)
10012f24:	e0bff717 	ldw	r2,-36(fp)
10012f28:	1880051e 	bne	r3,r2,10012f40 <altera_avalon_jtag_uart_read+0x13c>
10012f2c:	e0bffc17 	ldw	r2,-16(fp)
10012f30:	10c00917 	ldw	r3,36(r2)
10012f34:	e0bffc17 	ldw	r2,-16(fp)
10012f38:	10800117 	ldw	r2,4(r2)
10012f3c:	18bff736 	bltu	r3,r2,10012f1c <__alt_data_end+0xf8012f1c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10012f40:	e0bffc17 	ldw	r2,-16(fp)
10012f44:	10c00a17 	ldw	r3,40(r2)
10012f48:	e0bff717 	ldw	r2,-36(fp)
10012f4c:	1880011e 	bne	r3,r2,10012f54 <altera_avalon_jtag_uart_read+0x150>
      break;
10012f50:	00000206 	br	10012f5c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10012f54:	e0bffe17 	ldw	r2,-8(fp)
10012f58:	00bfb516 	blt	zero,r2,10012e30 <__alt_data_end+0xf8012e30>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10012f5c:	e0fff517 	ldw	r3,-44(fp)
10012f60:	e0bffd17 	ldw	r2,-12(fp)
10012f64:	18801826 	beq	r3,r2,10012fc8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012f68:	0005303a 	rdctl	r2,status
10012f6c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012f70:	e0fffa17 	ldw	r3,-24(fp)
10012f74:	00bfff84 	movi	r2,-2
10012f78:	1884703a 	and	r2,r3,r2
10012f7c:	1001703a 	wrctl	status,r2
  
  return context;
10012f80:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10012f84:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012f88:	e0bffc17 	ldw	r2,-16(fp)
10012f8c:	10800817 	ldw	r2,32(r2)
10012f90:	10c00054 	ori	r3,r2,1
10012f94:	e0bffc17 	ldw	r2,-16(fp)
10012f98:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012f9c:	e0bffc17 	ldw	r2,-16(fp)
10012fa0:	10800017 	ldw	r2,0(r2)
10012fa4:	10800104 	addi	r2,r2,4
10012fa8:	1007883a 	mov	r3,r2
10012fac:	e0bffc17 	ldw	r2,-16(fp)
10012fb0:	10800817 	ldw	r2,32(r2)
10012fb4:	18800035 	stwio	r2,0(r3)
10012fb8:	e0bff917 	ldw	r2,-28(fp)
10012fbc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012fc0:	e0bffb17 	ldw	r2,-20(fp)
10012fc4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10012fc8:	e0fff517 	ldw	r3,-44(fp)
10012fcc:	e0bffd17 	ldw	r2,-12(fp)
10012fd0:	18800426 	beq	r3,r2,10012fe4 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
10012fd4:	e0fff517 	ldw	r3,-44(fp)
10012fd8:	e0bffd17 	ldw	r2,-12(fp)
10012fdc:	1885c83a 	sub	r2,r3,r2
10012fe0:	00000606 	br	10012ffc <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10012fe4:	e0bfff17 	ldw	r2,-4(fp)
10012fe8:	1090000c 	andi	r2,r2,16384
10012fec:	10000226 	beq	r2,zero,10012ff8 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10012ff0:	00bffd44 	movi	r2,-11
10012ff4:	00000106 	br	10012ffc <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
10012ff8:	00bffec4 	movi	r2,-5
}
10012ffc:	e037883a 	mov	sp,fp
10013000:	dfc00117 	ldw	ra,4(sp)
10013004:	df000017 	ldw	fp,0(sp)
10013008:	dec00204 	addi	sp,sp,8
1001300c:	f800283a 	ret

10013010 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10013010:	defff304 	addi	sp,sp,-52
10013014:	dfc00c15 	stw	ra,48(sp)
10013018:	df000b15 	stw	fp,44(sp)
1001301c:	df000b04 	addi	fp,sp,44
10013020:	e13ffc15 	stw	r4,-16(fp)
10013024:	e17ffd15 	stw	r5,-12(fp)
10013028:	e1bffe15 	stw	r6,-8(fp)
1001302c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10013030:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10013034:	e0bffd17 	ldw	r2,-12(fp)
10013038:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1001303c:	00003806 	br	10013120 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10013040:	e0bffc17 	ldw	r2,-16(fp)
10013044:	10800c17 	ldw	r2,48(r2)
10013048:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1001304c:	e0bffc17 	ldw	r2,-16(fp)
10013050:	10800d17 	ldw	r2,52(r2)
10013054:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10013058:	e0fff817 	ldw	r3,-32(fp)
1001305c:	e0bff517 	ldw	r2,-44(fp)
10013060:	1880062e 	bgeu	r3,r2,1001307c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10013064:	e0fff517 	ldw	r3,-44(fp)
10013068:	e0bff817 	ldw	r2,-32(fp)
1001306c:	1885c83a 	sub	r2,r3,r2
10013070:	10bfffc4 	addi	r2,r2,-1
10013074:	e0bff615 	stw	r2,-40(fp)
10013078:	00000b06 	br	100130a8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1001307c:	e0bff517 	ldw	r2,-44(fp)
10013080:	10000526 	beq	r2,zero,10013098 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10013084:	00c20004 	movi	r3,2048
10013088:	e0bff817 	ldw	r2,-32(fp)
1001308c:	1885c83a 	sub	r2,r3,r2
10013090:	e0bff615 	stw	r2,-40(fp)
10013094:	00000406 	br	100130a8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10013098:	00c1ffc4 	movi	r3,2047
1001309c:	e0bff817 	ldw	r2,-32(fp)
100130a0:	1885c83a 	sub	r2,r3,r2
100130a4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100130a8:	e0bff617 	ldw	r2,-40(fp)
100130ac:	1000011e 	bne	r2,zero,100130b4 <altera_avalon_jtag_uart_write+0xa4>
        break;
100130b0:	00001d06 	br	10013128 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
100130b4:	e0fffe17 	ldw	r3,-8(fp)
100130b8:	e0bff617 	ldw	r2,-40(fp)
100130bc:	1880022e 	bgeu	r3,r2,100130c8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
100130c0:	e0bffe17 	ldw	r2,-8(fp)
100130c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100130c8:	e0bff817 	ldw	r2,-32(fp)
100130cc:	10820e04 	addi	r2,r2,2104
100130d0:	e0fffc17 	ldw	r3,-16(fp)
100130d4:	1885883a 	add	r2,r3,r2
100130d8:	1009883a 	mov	r4,r2
100130dc:	e17ffd17 	ldw	r5,-12(fp)
100130e0:	e1bff617 	ldw	r6,-40(fp)
100130e4:	000cf400 	call	1000cf40 <memcpy>
      ptr   += n;
100130e8:	e0fffd17 	ldw	r3,-12(fp)
100130ec:	e0bff617 	ldw	r2,-40(fp)
100130f0:	1885883a 	add	r2,r3,r2
100130f4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
100130f8:	e0fffe17 	ldw	r3,-8(fp)
100130fc:	e0bff617 	ldw	r2,-40(fp)
10013100:	1885c83a 	sub	r2,r3,r2
10013104:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10013108:	e0fff817 	ldw	r3,-32(fp)
1001310c:	e0bff617 	ldw	r2,-40(fp)
10013110:	1885883a 	add	r2,r3,r2
10013114:	10c1ffcc 	andi	r3,r2,2047
10013118:	e0bffc17 	ldw	r2,-16(fp)
1001311c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10013120:	e0bffe17 	ldw	r2,-8(fp)
10013124:	00bfc616 	blt	zero,r2,10013040 <__alt_data_end+0xf8013040>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013128:	0005303a 	rdctl	r2,status
1001312c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013130:	e0fffa17 	ldw	r3,-24(fp)
10013134:	00bfff84 	movi	r2,-2
10013138:	1884703a 	and	r2,r3,r2
1001313c:	1001703a 	wrctl	status,r2
  
  return context;
10013140:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10013144:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10013148:	e0bffc17 	ldw	r2,-16(fp)
1001314c:	10800817 	ldw	r2,32(r2)
10013150:	10c00094 	ori	r3,r2,2
10013154:	e0bffc17 	ldw	r2,-16(fp)
10013158:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1001315c:	e0bffc17 	ldw	r2,-16(fp)
10013160:	10800017 	ldw	r2,0(r2)
10013164:	10800104 	addi	r2,r2,4
10013168:	1007883a 	mov	r3,r2
1001316c:	e0bffc17 	ldw	r2,-16(fp)
10013170:	10800817 	ldw	r2,32(r2)
10013174:	18800035 	stwio	r2,0(r3)
10013178:	e0bff917 	ldw	r2,-28(fp)
1001317c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013180:	e0bffb17 	ldw	r2,-20(fp)
10013184:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10013188:	e0bffe17 	ldw	r2,-8(fp)
1001318c:	0080120e 	bge	zero,r2,100131d8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10013190:	e0bfff17 	ldw	r2,-4(fp)
10013194:	1090000c 	andi	r2,r2,16384
10013198:	10000126 	beq	r2,zero,100131a0 <altera_avalon_jtag_uart_write+0x190>
        break;
1001319c:	00001006 	br	100131e0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100131a0:	0001883a 	nop
100131a4:	e0bffc17 	ldw	r2,-16(fp)
100131a8:	10c00d17 	ldw	r3,52(r2)
100131ac:	e0bff517 	ldw	r2,-44(fp)
100131b0:	1880051e 	bne	r3,r2,100131c8 <altera_avalon_jtag_uart_write+0x1b8>
100131b4:	e0bffc17 	ldw	r2,-16(fp)
100131b8:	10c00917 	ldw	r3,36(r2)
100131bc:	e0bffc17 	ldw	r2,-16(fp)
100131c0:	10800117 	ldw	r2,4(r2)
100131c4:	18bff736 	bltu	r3,r2,100131a4 <__alt_data_end+0xf80131a4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100131c8:	e0bffc17 	ldw	r2,-16(fp)
100131cc:	10800917 	ldw	r2,36(r2)
100131d0:	10000126 	beq	r2,zero,100131d8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
100131d4:	00000206 	br	100131e0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
100131d8:	e0bffe17 	ldw	r2,-8(fp)
100131dc:	00bf9716 	blt	zero,r2,1001303c <__alt_data_end+0xf801303c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
100131e0:	e0fffd17 	ldw	r3,-12(fp)
100131e4:	e0bff717 	ldw	r2,-36(fp)
100131e8:	18800426 	beq	r3,r2,100131fc <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
100131ec:	e0fffd17 	ldw	r3,-12(fp)
100131f0:	e0bff717 	ldw	r2,-36(fp)
100131f4:	1885c83a 	sub	r2,r3,r2
100131f8:	00000606 	br	10013214 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
100131fc:	e0bfff17 	ldw	r2,-4(fp)
10013200:	1090000c 	andi	r2,r2,16384
10013204:	10000226 	beq	r2,zero,10013210 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10013208:	00bffd44 	movi	r2,-11
1001320c:	00000106 	br	10013214 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10013210:	00bffec4 	movi	r2,-5
}
10013214:	e037883a 	mov	sp,fp
10013218:	dfc00117 	ldw	ra,4(sp)
1001321c:	df000017 	ldw	fp,0(sp)
10013220:	dec00204 	addi	sp,sp,8
10013224:	f800283a 	ret

10013228 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10013228:	defff504 	addi	sp,sp,-44
1001322c:	df000a15 	stw	fp,40(sp)
10013230:	df000a04 	addi	fp,sp,40
10013234:	e13ffc15 	stw	r4,-16(fp)
10013238:	e17ffd15 	stw	r5,-12(fp)
1001323c:	e1bffe15 	stw	r6,-8(fp)
10013240:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10013244:	e03ff615 	stw	zero,-40(fp)
10013248:	008400f4 	movhi	r2,4099
1001324c:	10b2c504 	addi	r2,r2,-13548
10013250:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10013254:	10003f26 	beq	r2,zero,10013354 <alt_alarm_start+0x12c>
  {
    if (alarm)
10013258:	e0bffc17 	ldw	r2,-16(fp)
1001325c:	10003b26 	beq	r2,zero,1001334c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10013260:	e0bffc17 	ldw	r2,-16(fp)
10013264:	e0fffe17 	ldw	r3,-8(fp)
10013268:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1001326c:	e0bffc17 	ldw	r2,-16(fp)
10013270:	e0ffff17 	ldw	r3,-4(fp)
10013274:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013278:	0005303a 	rdctl	r2,status
1001327c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013280:	e0fff817 	ldw	r3,-32(fp)
10013284:	00bfff84 	movi	r2,-2
10013288:	1884703a 	and	r2,r3,r2
1001328c:	1001703a 	wrctl	status,r2
  
  return context;
10013290:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10013294:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10013298:	008400f4 	movhi	r2,4099
1001329c:	10b2c604 	addi	r2,r2,-13544
100132a0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
100132a4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100132a8:	e0fffd17 	ldw	r3,-12(fp)
100132ac:	e0bff617 	ldw	r2,-40(fp)
100132b0:	1885883a 	add	r2,r3,r2
100132b4:	10c00044 	addi	r3,r2,1
100132b8:	e0bffc17 	ldw	r2,-16(fp)
100132bc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100132c0:	e0bffc17 	ldw	r2,-16(fp)
100132c4:	10c00217 	ldw	r3,8(r2)
100132c8:	e0bff617 	ldw	r2,-40(fp)
100132cc:	1880042e 	bgeu	r3,r2,100132e0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
100132d0:	e0bffc17 	ldw	r2,-16(fp)
100132d4:	00c00044 	movi	r3,1
100132d8:	10c00405 	stb	r3,16(r2)
100132dc:	00000206 	br	100132e8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
100132e0:	e0bffc17 	ldw	r2,-16(fp)
100132e4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100132e8:	e0fffc17 	ldw	r3,-16(fp)
100132ec:	008400b4 	movhi	r2,4098
100132f0:	10827a04 	addi	r2,r2,2536
100132f4:	e0bff915 	stw	r2,-28(fp)
100132f8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100132fc:	e0bffa17 	ldw	r2,-24(fp)
10013300:	e0fff917 	ldw	r3,-28(fp)
10013304:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10013308:	e0bff917 	ldw	r2,-28(fp)
1001330c:	10c00017 	ldw	r3,0(r2)
10013310:	e0bffa17 	ldw	r2,-24(fp)
10013314:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10013318:	e0bff917 	ldw	r2,-28(fp)
1001331c:	10800017 	ldw	r2,0(r2)
10013320:	e0fffa17 	ldw	r3,-24(fp)
10013324:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10013328:	e0bff917 	ldw	r2,-28(fp)
1001332c:	e0fffa17 	ldw	r3,-24(fp)
10013330:	10c00015 	stw	r3,0(r2)
10013334:	e0bff717 	ldw	r2,-36(fp)
10013338:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001333c:	e0bffb17 	ldw	r2,-20(fp)
10013340:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10013344:	0005883a 	mov	r2,zero
10013348:	00000306 	br	10013358 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1001334c:	00bffa84 	movi	r2,-22
10013350:	00000106 	br	10013358 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10013354:	00bfde84 	movi	r2,-134
  }
}
10013358:	e037883a 	mov	sp,fp
1001335c:	df000017 	ldw	fp,0(sp)
10013360:	dec00104 	addi	sp,sp,4
10013364:	f800283a 	ret

10013368 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10013368:	defffa04 	addi	sp,sp,-24
1001336c:	dfc00515 	stw	ra,20(sp)
10013370:	df000415 	stw	fp,16(sp)
10013374:	df000404 	addi	fp,sp,16
10013378:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
1001337c:	00800244 	movi	r2,9
10013380:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10013384:	e13ffd17 	ldw	r4,-12(fp)
10013388:	014003f4 	movhi	r5,15
1001338c:	29509004 	addi	r5,r5,16960
10013390:	0007bcc0 	call	10007bcc <__mulsi3>
10013394:	0100bef4 	movhi	r4,763
10013398:	213c2004 	addi	r4,r4,-3968
1001339c:	100b883a 	mov	r5,r2
100133a0:	00054640 	call	10005464 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
100133a4:	01200034 	movhi	r4,32768
100133a8:	213fffc4 	addi	r4,r4,-1
100133ac:	100b883a 	mov	r5,r2
100133b0:	00054640 	call	10005464 <__udivsi3>
100133b4:	e13fff17 	ldw	r4,-4(fp)
100133b8:	100b883a 	mov	r5,r2
100133bc:	00054640 	call	10005464 <__udivsi3>
100133c0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
100133c4:	e0bffe17 	ldw	r2,-8(fp)
100133c8:	10002a26 	beq	r2,zero,10013474 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
100133cc:	e03ffc15 	stw	zero,-16(fp)
100133d0:	00001706 	br	10013430 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
100133d4:	00a00034 	movhi	r2,32768
100133d8:	10bfffc4 	addi	r2,r2,-1
100133dc:	10bfffc4 	addi	r2,r2,-1
100133e0:	103ffe1e 	bne	r2,zero,100133dc <__alt_data_end+0xf80133dc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
100133e4:	e13ffd17 	ldw	r4,-12(fp)
100133e8:	014003f4 	movhi	r5,15
100133ec:	29509004 	addi	r5,r5,16960
100133f0:	0007bcc0 	call	10007bcc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
100133f4:	0100bef4 	movhi	r4,763
100133f8:	213c2004 	addi	r4,r4,-3968
100133fc:	100b883a 	mov	r5,r2
10013400:	00054640 	call	10005464 <__udivsi3>
10013404:	01200034 	movhi	r4,32768
10013408:	213fffc4 	addi	r4,r4,-1
1001340c:	100b883a 	mov	r5,r2
10013410:	00054640 	call	10005464 <__udivsi3>
10013414:	1007883a 	mov	r3,r2
10013418:	e0bfff17 	ldw	r2,-4(fp)
1001341c:	10c5c83a 	sub	r2,r2,r3
10013420:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10013424:	e0bffc17 	ldw	r2,-16(fp)
10013428:	10800044 	addi	r2,r2,1
1001342c:	e0bffc15 	stw	r2,-16(fp)
10013430:	e0fffc17 	ldw	r3,-16(fp)
10013434:	e0bffe17 	ldw	r2,-8(fp)
10013438:	18bfe616 	blt	r3,r2,100133d4 <__alt_data_end+0xf80133d4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1001343c:	e13ffd17 	ldw	r4,-12(fp)
10013440:	014003f4 	movhi	r5,15
10013444:	29509004 	addi	r5,r5,16960
10013448:	0007bcc0 	call	10007bcc <__mulsi3>
1001344c:	0100bef4 	movhi	r4,763
10013450:	213c2004 	addi	r4,r4,-3968
10013454:	100b883a 	mov	r5,r2
10013458:	00054640 	call	10005464 <__udivsi3>
1001345c:	1009883a 	mov	r4,r2
10013460:	e17fff17 	ldw	r5,-4(fp)
10013464:	0007bcc0 	call	10007bcc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10013468:	10bfffc4 	addi	r2,r2,-1
1001346c:	103ffe1e 	bne	r2,zero,10013468 <__alt_data_end+0xf8013468>
10013470:	00000d06 	br	100134a8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10013474:	e13ffd17 	ldw	r4,-12(fp)
10013478:	014003f4 	movhi	r5,15
1001347c:	29509004 	addi	r5,r5,16960
10013480:	0007bcc0 	call	10007bcc <__mulsi3>
10013484:	0100bef4 	movhi	r4,763
10013488:	213c2004 	addi	r4,r4,-3968
1001348c:	100b883a 	mov	r5,r2
10013490:	00054640 	call	10005464 <__udivsi3>
10013494:	1009883a 	mov	r4,r2
10013498:	e17fff17 	ldw	r5,-4(fp)
1001349c:	0007bcc0 	call	10007bcc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100134a0:	10bfffc4 	addi	r2,r2,-1
100134a4:	00bffe16 	blt	zero,r2,100134a0 <__alt_data_end+0xf80134a0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
100134a8:	0005883a 	mov	r2,zero
}
100134ac:	e037883a 	mov	sp,fp
100134b0:	dfc00117 	ldw	ra,4(sp)
100134b4:	df000017 	ldw	fp,0(sp)
100134b8:	dec00204 	addi	sp,sp,8
100134bc:	f800283a 	ret

100134c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100134c0:	deffff04 	addi	sp,sp,-4
100134c4:	df000015 	stw	fp,0(sp)
100134c8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100134cc:	e037883a 	mov	sp,fp
100134d0:	df000017 	ldw	fp,0(sp)
100134d4:	dec00104 	addi	sp,sp,4
100134d8:	f800283a 	ret

100134dc <alt_get_errno>:
100134dc:	defffe04 	addi	sp,sp,-8
100134e0:	dfc00115 	stw	ra,4(sp)
100134e4:	df000015 	stw	fp,0(sp)
100134e8:	d839883a 	mov	fp,sp
100134ec:	008400b4 	movhi	r2,4098
100134f0:	10827704 	addi	r2,r2,2524
100134f4:	10800017 	ldw	r2,0(r2)
100134f8:	10000526 	beq	r2,zero,10013510 <alt_get_errno+0x34>
100134fc:	008400b4 	movhi	r2,4098
10013500:	10827704 	addi	r2,r2,2524
10013504:	10800017 	ldw	r2,0(r2)
10013508:	103ee83a 	callr	r2
1001350c:	00000206 	br	10013518 <alt_get_errno+0x3c>
10013510:	008400f4 	movhi	r2,4099
10013514:	10b2c004 	addi	r2,r2,-13568
10013518:	e037883a 	mov	sp,fp
1001351c:	dfc00117 	ldw	ra,4(sp)
10013520:	df000017 	ldw	fp,0(sp)
10013524:	dec00204 	addi	sp,sp,8
10013528:	f800283a 	ret

1001352c <alt_dev_llist_insert>:
1001352c:	defffa04 	addi	sp,sp,-24
10013530:	dfc00515 	stw	ra,20(sp)
10013534:	df000415 	stw	fp,16(sp)
10013538:	df000404 	addi	fp,sp,16
1001353c:	e13ffe15 	stw	r4,-8(fp)
10013540:	e17fff15 	stw	r5,-4(fp)
10013544:	e0bffe17 	ldw	r2,-8(fp)
10013548:	10000326 	beq	r2,zero,10013558 <alt_dev_llist_insert+0x2c>
1001354c:	e0bffe17 	ldw	r2,-8(fp)
10013550:	10800217 	ldw	r2,8(r2)
10013554:	1000061e 	bne	r2,zero,10013570 <alt_dev_llist_insert+0x44>
10013558:	00134dc0 	call	100134dc <alt_get_errno>
1001355c:	1007883a 	mov	r3,r2
10013560:	00800584 	movi	r2,22
10013564:	18800015 	stw	r2,0(r3)
10013568:	00bffa84 	movi	r2,-22
1001356c:	00001306 	br	100135bc <alt_dev_llist_insert+0x90>
10013570:	e0bffe17 	ldw	r2,-8(fp)
10013574:	e0ffff17 	ldw	r3,-4(fp)
10013578:	e0fffc15 	stw	r3,-16(fp)
1001357c:	e0bffd15 	stw	r2,-12(fp)
10013580:	e0bffd17 	ldw	r2,-12(fp)
10013584:	e0fffc17 	ldw	r3,-16(fp)
10013588:	10c00115 	stw	r3,4(r2)
1001358c:	e0bffc17 	ldw	r2,-16(fp)
10013590:	10c00017 	ldw	r3,0(r2)
10013594:	e0bffd17 	ldw	r2,-12(fp)
10013598:	10c00015 	stw	r3,0(r2)
1001359c:	e0bffc17 	ldw	r2,-16(fp)
100135a0:	10800017 	ldw	r2,0(r2)
100135a4:	e0fffd17 	ldw	r3,-12(fp)
100135a8:	10c00115 	stw	r3,4(r2)
100135ac:	e0bffc17 	ldw	r2,-16(fp)
100135b0:	e0fffd17 	ldw	r3,-12(fp)
100135b4:	10c00015 	stw	r3,0(r2)
100135b8:	0005883a 	mov	r2,zero
100135bc:	e037883a 	mov	sp,fp
100135c0:	dfc00117 	ldw	ra,4(sp)
100135c4:	df000017 	ldw	fp,0(sp)
100135c8:	dec00204 	addi	sp,sp,8
100135cc:	f800283a 	ret

100135d0 <_do_ctors>:
100135d0:	defffd04 	addi	sp,sp,-12
100135d4:	dfc00215 	stw	ra,8(sp)
100135d8:	df000115 	stw	fp,4(sp)
100135dc:	df000104 	addi	fp,sp,4
100135e0:	00840074 	movhi	r2,4097
100135e4:	10915104 	addi	r2,r2,17732
100135e8:	e0bfff15 	stw	r2,-4(fp)
100135ec:	00000606 	br	10013608 <_do_ctors+0x38>
100135f0:	e0bfff17 	ldw	r2,-4(fp)
100135f4:	10800017 	ldw	r2,0(r2)
100135f8:	103ee83a 	callr	r2
100135fc:	e0bfff17 	ldw	r2,-4(fp)
10013600:	10bfff04 	addi	r2,r2,-4
10013604:	e0bfff15 	stw	r2,-4(fp)
10013608:	e0ffff17 	ldw	r3,-4(fp)
1001360c:	00840074 	movhi	r2,4097
10013610:	10915204 	addi	r2,r2,17736
10013614:	18bff62e 	bgeu	r3,r2,100135f0 <__alt_data_end+0xf80135f0>
10013618:	e037883a 	mov	sp,fp
1001361c:	dfc00117 	ldw	ra,4(sp)
10013620:	df000017 	ldw	fp,0(sp)
10013624:	dec00204 	addi	sp,sp,8
10013628:	f800283a 	ret

1001362c <_do_dtors>:
1001362c:	defffd04 	addi	sp,sp,-12
10013630:	dfc00215 	stw	ra,8(sp)
10013634:	df000115 	stw	fp,4(sp)
10013638:	df000104 	addi	fp,sp,4
1001363c:	00840074 	movhi	r2,4097
10013640:	10915104 	addi	r2,r2,17732
10013644:	e0bfff15 	stw	r2,-4(fp)
10013648:	00000606 	br	10013664 <_do_dtors+0x38>
1001364c:	e0bfff17 	ldw	r2,-4(fp)
10013650:	10800017 	ldw	r2,0(r2)
10013654:	103ee83a 	callr	r2
10013658:	e0bfff17 	ldw	r2,-4(fp)
1001365c:	10bfff04 	addi	r2,r2,-4
10013660:	e0bfff15 	stw	r2,-4(fp)
10013664:	e0ffff17 	ldw	r3,-4(fp)
10013668:	00840074 	movhi	r2,4097
1001366c:	10915204 	addi	r2,r2,17736
10013670:	18bff62e 	bgeu	r3,r2,1001364c <__alt_data_end+0xf801364c>
10013674:	e037883a 	mov	sp,fp
10013678:	dfc00117 	ldw	ra,4(sp)
1001367c:	df000017 	ldw	fp,0(sp)
10013680:	dec00204 	addi	sp,sp,8
10013684:	f800283a 	ret

10013688 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10013688:	deffff04 	addi	sp,sp,-4
1001368c:	df000015 	stw	fp,0(sp)
10013690:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10013694:	e037883a 	mov	sp,fp
10013698:	df000017 	ldw	fp,0(sp)
1001369c:	dec00104 	addi	sp,sp,4
100136a0:	f800283a 	ret

100136a4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100136a4:	defff904 	addi	sp,sp,-28
100136a8:	dfc00615 	stw	ra,24(sp)
100136ac:	df000515 	stw	fp,20(sp)
100136b0:	df000504 	addi	fp,sp,20
100136b4:	e13ffc15 	stw	r4,-16(fp)
100136b8:	e17ffd15 	stw	r5,-12(fp)
100136bc:	e1bffe15 	stw	r6,-8(fp)
100136c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100136c4:	e0800217 	ldw	r2,8(fp)
100136c8:	d8800015 	stw	r2,0(sp)
100136cc:	e13ffc17 	ldw	r4,-16(fp)
100136d0:	e17ffd17 	ldw	r5,-12(fp)
100136d4:	e1bffe17 	ldw	r6,-8(fp)
100136d8:	e1ffff17 	ldw	r7,-4(fp)
100136dc:	00138840 	call	10013884 <alt_iic_isr_register>
}  
100136e0:	e037883a 	mov	sp,fp
100136e4:	dfc00117 	ldw	ra,4(sp)
100136e8:	df000017 	ldw	fp,0(sp)
100136ec:	dec00204 	addi	sp,sp,8
100136f0:	f800283a 	ret

100136f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100136f4:	defff904 	addi	sp,sp,-28
100136f8:	df000615 	stw	fp,24(sp)
100136fc:	df000604 	addi	fp,sp,24
10013700:	e13ffe15 	stw	r4,-8(fp)
10013704:	e17fff15 	stw	r5,-4(fp)
10013708:	e0bfff17 	ldw	r2,-4(fp)
1001370c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013710:	0005303a 	rdctl	r2,status
10013714:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013718:	e0fffb17 	ldw	r3,-20(fp)
1001371c:	00bfff84 	movi	r2,-2
10013720:	1884703a 	and	r2,r3,r2
10013724:	1001703a 	wrctl	status,r2
  
  return context;
10013728:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1001372c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10013730:	e0bffa17 	ldw	r2,-24(fp)
10013734:	00c00044 	movi	r3,1
10013738:	1884983a 	sll	r2,r3,r2
1001373c:	1007883a 	mov	r3,r2
10013740:	008400f4 	movhi	r2,4099
10013744:	10b2c404 	addi	r2,r2,-13552
10013748:	10800017 	ldw	r2,0(r2)
1001374c:	1886b03a 	or	r3,r3,r2
10013750:	008400f4 	movhi	r2,4099
10013754:	10b2c404 	addi	r2,r2,-13552
10013758:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1001375c:	008400f4 	movhi	r2,4099
10013760:	10b2c404 	addi	r2,r2,-13552
10013764:	10800017 	ldw	r2,0(r2)
10013768:	100170fa 	wrctl	ienable,r2
1001376c:	e0bffc17 	ldw	r2,-16(fp)
10013770:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013774:	e0bffd17 	ldw	r2,-12(fp)
10013778:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1001377c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10013780:	0001883a 	nop
}
10013784:	e037883a 	mov	sp,fp
10013788:	df000017 	ldw	fp,0(sp)
1001378c:	dec00104 	addi	sp,sp,4
10013790:	f800283a 	ret

10013794 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10013794:	defff904 	addi	sp,sp,-28
10013798:	df000615 	stw	fp,24(sp)
1001379c:	df000604 	addi	fp,sp,24
100137a0:	e13ffe15 	stw	r4,-8(fp)
100137a4:	e17fff15 	stw	r5,-4(fp)
100137a8:	e0bfff17 	ldw	r2,-4(fp)
100137ac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100137b0:	0005303a 	rdctl	r2,status
100137b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100137b8:	e0fffb17 	ldw	r3,-20(fp)
100137bc:	00bfff84 	movi	r2,-2
100137c0:	1884703a 	and	r2,r3,r2
100137c4:	1001703a 	wrctl	status,r2
  
  return context;
100137c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100137cc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100137d0:	e0bffa17 	ldw	r2,-24(fp)
100137d4:	00c00044 	movi	r3,1
100137d8:	1884983a 	sll	r2,r3,r2
100137dc:	0084303a 	nor	r2,zero,r2
100137e0:	1007883a 	mov	r3,r2
100137e4:	008400f4 	movhi	r2,4099
100137e8:	10b2c404 	addi	r2,r2,-13552
100137ec:	10800017 	ldw	r2,0(r2)
100137f0:	1886703a 	and	r3,r3,r2
100137f4:	008400f4 	movhi	r2,4099
100137f8:	10b2c404 	addi	r2,r2,-13552
100137fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10013800:	008400f4 	movhi	r2,4099
10013804:	10b2c404 	addi	r2,r2,-13552
10013808:	10800017 	ldw	r2,0(r2)
1001380c:	100170fa 	wrctl	ienable,r2
10013810:	e0bffc17 	ldw	r2,-16(fp)
10013814:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013818:	e0bffd17 	ldw	r2,-12(fp)
1001381c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10013820:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10013824:	0001883a 	nop
}
10013828:	e037883a 	mov	sp,fp
1001382c:	df000017 	ldw	fp,0(sp)
10013830:	dec00104 	addi	sp,sp,4
10013834:	f800283a 	ret

10013838 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10013838:	defffc04 	addi	sp,sp,-16
1001383c:	df000315 	stw	fp,12(sp)
10013840:	df000304 	addi	fp,sp,12
10013844:	e13ffe15 	stw	r4,-8(fp)
10013848:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1001384c:	000530fa 	rdctl	r2,ienable
10013850:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10013854:	e0bfff17 	ldw	r2,-4(fp)
10013858:	00c00044 	movi	r3,1
1001385c:	1884983a 	sll	r2,r3,r2
10013860:	1007883a 	mov	r3,r2
10013864:	e0bffd17 	ldw	r2,-12(fp)
10013868:	1884703a 	and	r2,r3,r2
1001386c:	1004c03a 	cmpne	r2,r2,zero
10013870:	10803fcc 	andi	r2,r2,255
}
10013874:	e037883a 	mov	sp,fp
10013878:	df000017 	ldw	fp,0(sp)
1001387c:	dec00104 	addi	sp,sp,4
10013880:	f800283a 	ret

10013884 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10013884:	defff504 	addi	sp,sp,-44
10013888:	dfc00a15 	stw	ra,40(sp)
1001388c:	df000915 	stw	fp,36(sp)
10013890:	df000904 	addi	fp,sp,36
10013894:	e13ffc15 	stw	r4,-16(fp)
10013898:	e17ffd15 	stw	r5,-12(fp)
1001389c:	e1bffe15 	stw	r6,-8(fp)
100138a0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100138a4:	00bffa84 	movi	r2,-22
100138a8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100138ac:	e0bffd17 	ldw	r2,-12(fp)
100138b0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100138b4:	e0bff817 	ldw	r2,-32(fp)
100138b8:	10800808 	cmpgei	r2,r2,32
100138bc:	1000271e 	bne	r2,zero,1001395c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100138c0:	0005303a 	rdctl	r2,status
100138c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100138c8:	e0fffa17 	ldw	r3,-24(fp)
100138cc:	00bfff84 	movi	r2,-2
100138d0:	1884703a 	and	r2,r3,r2
100138d4:	1001703a 	wrctl	status,r2
  
  return context;
100138d8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100138dc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
100138e0:	008400f4 	movhi	r2,4099
100138e4:	10b2d104 	addi	r2,r2,-13500
100138e8:	e0fff817 	ldw	r3,-32(fp)
100138ec:	180690fa 	slli	r3,r3,3
100138f0:	10c5883a 	add	r2,r2,r3
100138f4:	e0fffe17 	ldw	r3,-8(fp)
100138f8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100138fc:	008400f4 	movhi	r2,4099
10013900:	10b2d104 	addi	r2,r2,-13500
10013904:	e0fff817 	ldw	r3,-32(fp)
10013908:	180690fa 	slli	r3,r3,3
1001390c:	10c5883a 	add	r2,r2,r3
10013910:	10800104 	addi	r2,r2,4
10013914:	e0ffff17 	ldw	r3,-4(fp)
10013918:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1001391c:	e0bffe17 	ldw	r2,-8(fp)
10013920:	10000526 	beq	r2,zero,10013938 <alt_iic_isr_register+0xb4>
10013924:	e0bff817 	ldw	r2,-32(fp)
10013928:	e13ffc17 	ldw	r4,-16(fp)
1001392c:	100b883a 	mov	r5,r2
10013930:	00136f40 	call	100136f4 <alt_ic_irq_enable>
10013934:	00000406 	br	10013948 <alt_iic_isr_register+0xc4>
10013938:	e0bff817 	ldw	r2,-32(fp)
1001393c:	e13ffc17 	ldw	r4,-16(fp)
10013940:	100b883a 	mov	r5,r2
10013944:	00137940 	call	10013794 <alt_ic_irq_disable>
10013948:	e0bff715 	stw	r2,-36(fp)
1001394c:	e0bff917 	ldw	r2,-28(fp)
10013950:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013954:	e0bffb17 	ldw	r2,-20(fp)
10013958:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1001395c:	e0bff717 	ldw	r2,-36(fp)
}
10013960:	e037883a 	mov	sp,fp
10013964:	dfc00117 	ldw	ra,4(sp)
10013968:	df000017 	ldw	fp,0(sp)
1001396c:	dec00204 	addi	sp,sp,8
10013970:	f800283a 	ret

10013974 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10013974:	defff804 	addi	sp,sp,-32
10013978:	dfc00715 	stw	ra,28(sp)
1001397c:	df000615 	stw	fp,24(sp)
10013980:	dc000515 	stw	r16,20(sp)
10013984:	df000604 	addi	fp,sp,24
10013988:	e13ffb15 	stw	r4,-20(fp)
1001398c:	e17ffc15 	stw	r5,-16(fp)
10013990:	e1bffd15 	stw	r6,-12(fp)
10013994:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10013998:	e13ffc17 	ldw	r4,-16(fp)
1001399c:	e17ffd17 	ldw	r5,-12(fp)
100139a0:	e1bffe17 	ldw	r6,-8(fp)
100139a4:	0013c100 	call	10013c10 <open>
100139a8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
100139ac:	e0bffa17 	ldw	r2,-24(fp)
100139b0:	10002216 	blt	r2,zero,10013a3c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100139b4:	040400b4 	movhi	r16,4098
100139b8:	843df304 	addi	r16,r16,-2100
100139bc:	e0bffa17 	ldw	r2,-24(fp)
100139c0:	1009883a 	mov	r4,r2
100139c4:	01400304 	movi	r5,12
100139c8:	0007bcc0 	call	10007bcc <__mulsi3>
100139cc:	8085883a 	add	r2,r16,r2
100139d0:	10c00017 	ldw	r3,0(r2)
100139d4:	e0bffb17 	ldw	r2,-20(fp)
100139d8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100139dc:	040400b4 	movhi	r16,4098
100139e0:	843df304 	addi	r16,r16,-2100
100139e4:	e0bffa17 	ldw	r2,-24(fp)
100139e8:	1009883a 	mov	r4,r2
100139ec:	01400304 	movi	r5,12
100139f0:	0007bcc0 	call	10007bcc <__mulsi3>
100139f4:	8085883a 	add	r2,r16,r2
100139f8:	10800104 	addi	r2,r2,4
100139fc:	10c00017 	ldw	r3,0(r2)
10013a00:	e0bffb17 	ldw	r2,-20(fp)
10013a04:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10013a08:	040400b4 	movhi	r16,4098
10013a0c:	843df304 	addi	r16,r16,-2100
10013a10:	e0bffa17 	ldw	r2,-24(fp)
10013a14:	1009883a 	mov	r4,r2
10013a18:	01400304 	movi	r5,12
10013a1c:	0007bcc0 	call	10007bcc <__mulsi3>
10013a20:	8085883a 	add	r2,r16,r2
10013a24:	10800204 	addi	r2,r2,8
10013a28:	10c00017 	ldw	r3,0(r2)
10013a2c:	e0bffb17 	ldw	r2,-20(fp)
10013a30:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10013a34:	e13ffa17 	ldw	r4,-24(fp)
10013a38:	00124780 	call	10012478 <alt_release_fd>
  }
} 
10013a3c:	e6ffff04 	addi	sp,fp,-4
10013a40:	dfc00217 	ldw	ra,8(sp)
10013a44:	df000117 	ldw	fp,4(sp)
10013a48:	dc000017 	ldw	r16,0(sp)
10013a4c:	dec00304 	addi	sp,sp,12
10013a50:	f800283a 	ret

10013a54 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10013a54:	defffb04 	addi	sp,sp,-20
10013a58:	dfc00415 	stw	ra,16(sp)
10013a5c:	df000315 	stw	fp,12(sp)
10013a60:	df000304 	addi	fp,sp,12
10013a64:	e13ffd15 	stw	r4,-12(fp)
10013a68:	e17ffe15 	stw	r5,-8(fp)
10013a6c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10013a70:	010400b4 	movhi	r4,4098
10013a74:	213df604 	addi	r4,r4,-2088
10013a78:	e17ffd17 	ldw	r5,-12(fp)
10013a7c:	01800044 	movi	r6,1
10013a80:	01c07fc4 	movi	r7,511
10013a84:	00139740 	call	10013974 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10013a88:	010400b4 	movhi	r4,4098
10013a8c:	213df304 	addi	r4,r4,-2100
10013a90:	e17ffe17 	ldw	r5,-8(fp)
10013a94:	000d883a 	mov	r6,zero
10013a98:	01c07fc4 	movi	r7,511
10013a9c:	00139740 	call	10013974 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10013aa0:	010400b4 	movhi	r4,4098
10013aa4:	213df904 	addi	r4,r4,-2076
10013aa8:	e17fff17 	ldw	r5,-4(fp)
10013aac:	01800044 	movi	r6,1
10013ab0:	01c07fc4 	movi	r7,511
10013ab4:	00139740 	call	10013974 <alt_open_fd>
}  
10013ab8:	e037883a 	mov	sp,fp
10013abc:	dfc00117 	ldw	ra,4(sp)
10013ac0:	df000017 	ldw	fp,0(sp)
10013ac4:	dec00204 	addi	sp,sp,8
10013ac8:	f800283a 	ret

10013acc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013acc:	defffe04 	addi	sp,sp,-8
10013ad0:	dfc00115 	stw	ra,4(sp)
10013ad4:	df000015 	stw	fp,0(sp)
10013ad8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013adc:	008400b4 	movhi	r2,4098
10013ae0:	10827704 	addi	r2,r2,2524
10013ae4:	10800017 	ldw	r2,0(r2)
10013ae8:	10000526 	beq	r2,zero,10013b00 <alt_get_errno+0x34>
10013aec:	008400b4 	movhi	r2,4098
10013af0:	10827704 	addi	r2,r2,2524
10013af4:	10800017 	ldw	r2,0(r2)
10013af8:	103ee83a 	callr	r2
10013afc:	00000206 	br	10013b08 <alt_get_errno+0x3c>
10013b00:	008400f4 	movhi	r2,4099
10013b04:	10b2c004 	addi	r2,r2,-13568
}
10013b08:	e037883a 	mov	sp,fp
10013b0c:	dfc00117 	ldw	ra,4(sp)
10013b10:	df000017 	ldw	fp,0(sp)
10013b14:	dec00204 	addi	sp,sp,8
10013b18:	f800283a 	ret

10013b1c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10013b1c:	defffb04 	addi	sp,sp,-20
10013b20:	dfc00415 	stw	ra,16(sp)
10013b24:	df000315 	stw	fp,12(sp)
10013b28:	dc000215 	stw	r16,8(sp)
10013b2c:	df000304 	addi	fp,sp,12
10013b30:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10013b34:	e0bffe17 	ldw	r2,-8(fp)
10013b38:	10800217 	ldw	r2,8(r2)
10013b3c:	10d00034 	orhi	r3,r2,16384
10013b40:	e0bffe17 	ldw	r2,-8(fp)
10013b44:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013b48:	e03ffd15 	stw	zero,-12(fp)
10013b4c:	00002306 	br	10013bdc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013b50:	040400b4 	movhi	r16,4098
10013b54:	843df304 	addi	r16,r16,-2100
10013b58:	e0bffd17 	ldw	r2,-12(fp)
10013b5c:	1009883a 	mov	r4,r2
10013b60:	01400304 	movi	r5,12
10013b64:	0007bcc0 	call	10007bcc <__mulsi3>
10013b68:	8085883a 	add	r2,r16,r2
10013b6c:	10c00017 	ldw	r3,0(r2)
10013b70:	e0bffe17 	ldw	r2,-8(fp)
10013b74:	10800017 	ldw	r2,0(r2)
10013b78:	1880151e 	bne	r3,r2,10013bd0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013b7c:	040400b4 	movhi	r16,4098
10013b80:	843df304 	addi	r16,r16,-2100
10013b84:	e0bffd17 	ldw	r2,-12(fp)
10013b88:	1009883a 	mov	r4,r2
10013b8c:	01400304 	movi	r5,12
10013b90:	0007bcc0 	call	10007bcc <__mulsi3>
10013b94:	8085883a 	add	r2,r16,r2
10013b98:	10800204 	addi	r2,r2,8
10013b9c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013ba0:	10000b0e 	bge	r2,zero,10013bd0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10013ba4:	e13ffd17 	ldw	r4,-12(fp)
10013ba8:	01400304 	movi	r5,12
10013bac:	0007bcc0 	call	10007bcc <__mulsi3>
10013bb0:	1007883a 	mov	r3,r2
10013bb4:	008400b4 	movhi	r2,4098
10013bb8:	10bdf304 	addi	r2,r2,-2100
10013bbc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013bc0:	e0bffe17 	ldw	r2,-8(fp)
10013bc4:	18800226 	beq	r3,r2,10013bd0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10013bc8:	00bffcc4 	movi	r2,-13
10013bcc:	00000a06 	br	10013bf8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013bd0:	e0bffd17 	ldw	r2,-12(fp)
10013bd4:	10800044 	addi	r2,r2,1
10013bd8:	e0bffd15 	stw	r2,-12(fp)
10013bdc:	008400b4 	movhi	r2,4098
10013be0:	10827604 	addi	r2,r2,2520
10013be4:	10800017 	ldw	r2,0(r2)
10013be8:	1007883a 	mov	r3,r2
10013bec:	e0bffd17 	ldw	r2,-12(fp)
10013bf0:	18bfd72e 	bgeu	r3,r2,10013b50 <__alt_data_end+0xf8013b50>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10013bf4:	0005883a 	mov	r2,zero
}
10013bf8:	e6ffff04 	addi	sp,fp,-4
10013bfc:	dfc00217 	ldw	ra,8(sp)
10013c00:	df000117 	ldw	fp,4(sp)
10013c04:	dc000017 	ldw	r16,0(sp)
10013c08:	dec00304 	addi	sp,sp,12
10013c0c:	f800283a 	ret

10013c10 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10013c10:	defff604 	addi	sp,sp,-40
10013c14:	dfc00915 	stw	ra,36(sp)
10013c18:	df000815 	stw	fp,32(sp)
10013c1c:	df000804 	addi	fp,sp,32
10013c20:	e13ffd15 	stw	r4,-12(fp)
10013c24:	e17ffe15 	stw	r5,-8(fp)
10013c28:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10013c2c:	00bfffc4 	movi	r2,-1
10013c30:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10013c34:	00bffb44 	movi	r2,-19
10013c38:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10013c3c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10013c40:	e13ffd17 	ldw	r4,-12(fp)
10013c44:	014400b4 	movhi	r5,4098
10013c48:	29427404 	addi	r5,r5,2512
10013c4c:	0013f2c0 	call	10013f2c <alt_find_dev>
10013c50:	e0bff815 	stw	r2,-32(fp)
10013c54:	e0bff817 	ldw	r2,-32(fp)
10013c58:	1000051e 	bne	r2,zero,10013c70 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10013c5c:	e13ffd17 	ldw	r4,-12(fp)
10013c60:	0013fbc0 	call	10013fbc <alt_find_file>
10013c64:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10013c68:	00800044 	movi	r2,1
10013c6c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10013c70:	e0bff817 	ldw	r2,-32(fp)
10013c74:	10002b26 	beq	r2,zero,10013d24 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10013c78:	e13ff817 	ldw	r4,-32(fp)
10013c7c:	00140d00 	call	100140d0 <alt_get_fd>
10013c80:	e0bff915 	stw	r2,-28(fp)
10013c84:	e0bff917 	ldw	r2,-28(fp)
10013c88:	1000030e 	bge	r2,zero,10013c98 <open+0x88>
    {
      status = index;
10013c8c:	e0bff917 	ldw	r2,-28(fp)
10013c90:	e0bffa15 	stw	r2,-24(fp)
10013c94:	00002506 	br	10013d2c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10013c98:	e13ff917 	ldw	r4,-28(fp)
10013c9c:	01400304 	movi	r5,12
10013ca0:	0007bcc0 	call	10007bcc <__mulsi3>
10013ca4:	1007883a 	mov	r3,r2
10013ca8:	008400b4 	movhi	r2,4098
10013cac:	10bdf304 	addi	r2,r2,-2100
10013cb0:	1885883a 	add	r2,r3,r2
10013cb4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10013cb8:	e0fffe17 	ldw	r3,-8(fp)
10013cbc:	00900034 	movhi	r2,16384
10013cc0:	10bfffc4 	addi	r2,r2,-1
10013cc4:	1886703a 	and	r3,r3,r2
10013cc8:	e0bffc17 	ldw	r2,-16(fp)
10013ccc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10013cd0:	e0bffb17 	ldw	r2,-20(fp)
10013cd4:	1000051e 	bne	r2,zero,10013cec <open+0xdc>
10013cd8:	e13ffc17 	ldw	r4,-16(fp)
10013cdc:	0013b1c0 	call	10013b1c <alt_file_locked>
10013ce0:	e0bffa15 	stw	r2,-24(fp)
10013ce4:	e0bffa17 	ldw	r2,-24(fp)
10013ce8:	10001016 	blt	r2,zero,10013d2c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10013cec:	e0bff817 	ldw	r2,-32(fp)
10013cf0:	10800317 	ldw	r2,12(r2)
10013cf4:	10000826 	beq	r2,zero,10013d18 <open+0x108>
10013cf8:	e0bff817 	ldw	r2,-32(fp)
10013cfc:	10800317 	ldw	r2,12(r2)
10013d00:	e13ffc17 	ldw	r4,-16(fp)
10013d04:	e17ffd17 	ldw	r5,-12(fp)
10013d08:	e1bffe17 	ldw	r6,-8(fp)
10013d0c:	e1ffff17 	ldw	r7,-4(fp)
10013d10:	103ee83a 	callr	r2
10013d14:	00000106 	br	10013d1c <open+0x10c>
10013d18:	0005883a 	mov	r2,zero
10013d1c:	e0bffa15 	stw	r2,-24(fp)
10013d20:	00000206 	br	10013d2c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10013d24:	00bffb44 	movi	r2,-19
10013d28:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10013d2c:	e0bffa17 	ldw	r2,-24(fp)
10013d30:	1000090e 	bge	r2,zero,10013d58 <open+0x148>
  {
    alt_release_fd (index);  
10013d34:	e13ff917 	ldw	r4,-28(fp)
10013d38:	00124780 	call	10012478 <alt_release_fd>
    ALT_ERRNO = -status;
10013d3c:	0013acc0 	call	10013acc <alt_get_errno>
10013d40:	1007883a 	mov	r3,r2
10013d44:	e0bffa17 	ldw	r2,-24(fp)
10013d48:	0085c83a 	sub	r2,zero,r2
10013d4c:	18800015 	stw	r2,0(r3)
    return -1;
10013d50:	00bfffc4 	movi	r2,-1
10013d54:	00000106 	br	10013d5c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10013d58:	e0bff917 	ldw	r2,-28(fp)
}
10013d5c:	e037883a 	mov	sp,fp
10013d60:	dfc00117 	ldw	ra,4(sp)
10013d64:	df000017 	ldw	fp,0(sp)
10013d68:	dec00204 	addi	sp,sp,8
10013d6c:	f800283a 	ret

10013d70 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10013d70:	defffa04 	addi	sp,sp,-24
10013d74:	df000515 	stw	fp,20(sp)
10013d78:	df000504 	addi	fp,sp,20
10013d7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013d80:	0005303a 	rdctl	r2,status
10013d84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013d88:	e0fffc17 	ldw	r3,-16(fp)
10013d8c:	00bfff84 	movi	r2,-2
10013d90:	1884703a 	and	r2,r3,r2
10013d94:	1001703a 	wrctl	status,r2
  
  return context;
10013d98:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10013d9c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10013da0:	e0bfff17 	ldw	r2,-4(fp)
10013da4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10013da8:	e0bffd17 	ldw	r2,-12(fp)
10013dac:	10800017 	ldw	r2,0(r2)
10013db0:	e0fffd17 	ldw	r3,-12(fp)
10013db4:	18c00117 	ldw	r3,4(r3)
10013db8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10013dbc:	e0bffd17 	ldw	r2,-12(fp)
10013dc0:	10800117 	ldw	r2,4(r2)
10013dc4:	e0fffd17 	ldw	r3,-12(fp)
10013dc8:	18c00017 	ldw	r3,0(r3)
10013dcc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10013dd0:	e0bffd17 	ldw	r2,-12(fp)
10013dd4:	e0fffd17 	ldw	r3,-12(fp)
10013dd8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10013ddc:	e0bffd17 	ldw	r2,-12(fp)
10013de0:	e0fffd17 	ldw	r3,-12(fp)
10013de4:	10c00015 	stw	r3,0(r2)
10013de8:	e0bffb17 	ldw	r2,-20(fp)
10013dec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013df0:	e0bffe17 	ldw	r2,-8(fp)
10013df4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10013df8:	e037883a 	mov	sp,fp
10013dfc:	df000017 	ldw	fp,0(sp)
10013e00:	dec00104 	addi	sp,sp,4
10013e04:	f800283a 	ret

10013e08 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10013e08:	defffb04 	addi	sp,sp,-20
10013e0c:	dfc00415 	stw	ra,16(sp)
10013e10:	df000315 	stw	fp,12(sp)
10013e14:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10013e18:	d0a00f17 	ldw	r2,-32708(gp)
10013e1c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10013e20:	d0905b17 	ldw	r2,16748(gp)
10013e24:	10800044 	addi	r2,r2,1
10013e28:	d0905b15 	stw	r2,16748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10013e2c:	00002e06 	br	10013ee8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10013e30:	e0bffd17 	ldw	r2,-12(fp)
10013e34:	10800017 	ldw	r2,0(r2)
10013e38:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10013e3c:	e0bffd17 	ldw	r2,-12(fp)
10013e40:	10800403 	ldbu	r2,16(r2)
10013e44:	10803fcc 	andi	r2,r2,255
10013e48:	10000426 	beq	r2,zero,10013e5c <alt_tick+0x54>
10013e4c:	d0905b17 	ldw	r2,16748(gp)
10013e50:	1000021e 	bne	r2,zero,10013e5c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10013e54:	e0bffd17 	ldw	r2,-12(fp)
10013e58:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10013e5c:	e0bffd17 	ldw	r2,-12(fp)
10013e60:	10800217 	ldw	r2,8(r2)
10013e64:	d0d05b17 	ldw	r3,16748(gp)
10013e68:	18801d36 	bltu	r3,r2,10013ee0 <alt_tick+0xd8>
10013e6c:	e0bffd17 	ldw	r2,-12(fp)
10013e70:	10800403 	ldbu	r2,16(r2)
10013e74:	10803fcc 	andi	r2,r2,255
10013e78:	1000191e 	bne	r2,zero,10013ee0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10013e7c:	e0bffd17 	ldw	r2,-12(fp)
10013e80:	10800317 	ldw	r2,12(r2)
10013e84:	e0fffd17 	ldw	r3,-12(fp)
10013e88:	18c00517 	ldw	r3,20(r3)
10013e8c:	1809883a 	mov	r4,r3
10013e90:	103ee83a 	callr	r2
10013e94:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10013e98:	e0bfff17 	ldw	r2,-4(fp)
10013e9c:	1000031e 	bne	r2,zero,10013eac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10013ea0:	e13ffd17 	ldw	r4,-12(fp)
10013ea4:	0013d700 	call	10013d70 <alt_alarm_stop>
10013ea8:	00000d06 	br	10013ee0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10013eac:	e0bffd17 	ldw	r2,-12(fp)
10013eb0:	10c00217 	ldw	r3,8(r2)
10013eb4:	e0bfff17 	ldw	r2,-4(fp)
10013eb8:	1887883a 	add	r3,r3,r2
10013ebc:	e0bffd17 	ldw	r2,-12(fp)
10013ec0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10013ec4:	e0bffd17 	ldw	r2,-12(fp)
10013ec8:	10c00217 	ldw	r3,8(r2)
10013ecc:	d0905b17 	ldw	r2,16748(gp)
10013ed0:	1880032e 	bgeu	r3,r2,10013ee0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10013ed4:	e0bffd17 	ldw	r2,-12(fp)
10013ed8:	00c00044 	movi	r3,1
10013edc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10013ee0:	e0bffe17 	ldw	r2,-8(fp)
10013ee4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10013ee8:	e0fffd17 	ldw	r3,-12(fp)
10013eec:	d0a00f04 	addi	r2,gp,-32708
10013ef0:	18bfcf1e 	bne	r3,r2,10013e30 <__alt_data_end+0xf8013e30>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10013ef4:	0001883a 	nop
}
10013ef8:	e037883a 	mov	sp,fp
10013efc:	dfc00117 	ldw	ra,4(sp)
10013f00:	df000017 	ldw	fp,0(sp)
10013f04:	dec00204 	addi	sp,sp,8
10013f08:	f800283a 	ret

10013f0c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
10013f0c:	deffff04 	addi	sp,sp,-4
10013f10:	df000015 	stw	fp,0(sp)
10013f14:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10013f18:	000170fa 	wrctl	ienable,zero
}
10013f1c:	e037883a 	mov	sp,fp
10013f20:	df000017 	ldw	fp,0(sp)
10013f24:	dec00104 	addi	sp,sp,4
10013f28:	f800283a 	ret

10013f2c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10013f2c:	defffa04 	addi	sp,sp,-24
10013f30:	dfc00515 	stw	ra,20(sp)
10013f34:	df000415 	stw	fp,16(sp)
10013f38:	df000404 	addi	fp,sp,16
10013f3c:	e13ffe15 	stw	r4,-8(fp)
10013f40:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10013f44:	e0bfff17 	ldw	r2,-4(fp)
10013f48:	10800017 	ldw	r2,0(r2)
10013f4c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10013f50:	e13ffe17 	ldw	r4,-8(fp)
10013f54:	000e4180 	call	1000e418 <strlen>
10013f58:	10800044 	addi	r2,r2,1
10013f5c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013f60:	00000d06 	br	10013f98 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10013f64:	e0bffc17 	ldw	r2,-16(fp)
10013f68:	10c00217 	ldw	r3,8(r2)
10013f6c:	e0bffd17 	ldw	r2,-12(fp)
10013f70:	1809883a 	mov	r4,r3
10013f74:	e17ffe17 	ldw	r5,-8(fp)
10013f78:	100d883a 	mov	r6,r2
10013f7c:	00141f00 	call	100141f0 <memcmp>
10013f80:	1000021e 	bne	r2,zero,10013f8c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10013f84:	e0bffc17 	ldw	r2,-16(fp)
10013f88:	00000706 	br	10013fa8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10013f8c:	e0bffc17 	ldw	r2,-16(fp)
10013f90:	10800017 	ldw	r2,0(r2)
10013f94:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013f98:	e0fffc17 	ldw	r3,-16(fp)
10013f9c:	e0bfff17 	ldw	r2,-4(fp)
10013fa0:	18bff01e 	bne	r3,r2,10013f64 <__alt_data_end+0xf8013f64>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10013fa4:	0005883a 	mov	r2,zero
}
10013fa8:	e037883a 	mov	sp,fp
10013fac:	dfc00117 	ldw	ra,4(sp)
10013fb0:	df000017 	ldw	fp,0(sp)
10013fb4:	dec00204 	addi	sp,sp,8
10013fb8:	f800283a 	ret

10013fbc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10013fbc:	defffb04 	addi	sp,sp,-20
10013fc0:	dfc00415 	stw	ra,16(sp)
10013fc4:	df000315 	stw	fp,12(sp)
10013fc8:	df000304 	addi	fp,sp,12
10013fcc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10013fd0:	008400b4 	movhi	r2,4098
10013fd4:	10827204 	addi	r2,r2,2504
10013fd8:	10800017 	ldw	r2,0(r2)
10013fdc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10013fe0:	00003106 	br	100140a8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10013fe4:	e0bffd17 	ldw	r2,-12(fp)
10013fe8:	10800217 	ldw	r2,8(r2)
10013fec:	1009883a 	mov	r4,r2
10013ff0:	000e4180 	call	1000e418 <strlen>
10013ff4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10013ff8:	e0bffd17 	ldw	r2,-12(fp)
10013ffc:	10c00217 	ldw	r3,8(r2)
10014000:	e0bffe17 	ldw	r2,-8(fp)
10014004:	10bfffc4 	addi	r2,r2,-1
10014008:	1885883a 	add	r2,r3,r2
1001400c:	10800003 	ldbu	r2,0(r2)
10014010:	10803fcc 	andi	r2,r2,255
10014014:	1080201c 	xori	r2,r2,128
10014018:	10bfe004 	addi	r2,r2,-128
1001401c:	10800bd8 	cmpnei	r2,r2,47
10014020:	1000031e 	bne	r2,zero,10014030 <alt_find_file+0x74>
    {
      len -= 1;
10014024:	e0bffe17 	ldw	r2,-8(fp)
10014028:	10bfffc4 	addi	r2,r2,-1
1001402c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10014030:	e0bffe17 	ldw	r2,-8(fp)
10014034:	e0ffff17 	ldw	r3,-4(fp)
10014038:	1885883a 	add	r2,r3,r2
1001403c:	10800003 	ldbu	r2,0(r2)
10014040:	10803fcc 	andi	r2,r2,255
10014044:	1080201c 	xori	r2,r2,128
10014048:	10bfe004 	addi	r2,r2,-128
1001404c:	10800be0 	cmpeqi	r2,r2,47
10014050:	1000081e 	bne	r2,zero,10014074 <alt_find_file+0xb8>
10014054:	e0bffe17 	ldw	r2,-8(fp)
10014058:	e0ffff17 	ldw	r3,-4(fp)
1001405c:	1885883a 	add	r2,r3,r2
10014060:	10800003 	ldbu	r2,0(r2)
10014064:	10803fcc 	andi	r2,r2,255
10014068:	1080201c 	xori	r2,r2,128
1001406c:	10bfe004 	addi	r2,r2,-128
10014070:	10000a1e 	bne	r2,zero,1001409c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10014074:	e0bffd17 	ldw	r2,-12(fp)
10014078:	10c00217 	ldw	r3,8(r2)
1001407c:	e0bffe17 	ldw	r2,-8(fp)
10014080:	1809883a 	mov	r4,r3
10014084:	e17fff17 	ldw	r5,-4(fp)
10014088:	100d883a 	mov	r6,r2
1001408c:	00141f00 	call	100141f0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10014090:	1000021e 	bne	r2,zero,1001409c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10014094:	e0bffd17 	ldw	r2,-12(fp)
10014098:	00000806 	br	100140bc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1001409c:	e0bffd17 	ldw	r2,-12(fp)
100140a0:	10800017 	ldw	r2,0(r2)
100140a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100140a8:	e0fffd17 	ldw	r3,-12(fp)
100140ac:	008400b4 	movhi	r2,4098
100140b0:	10827204 	addi	r2,r2,2504
100140b4:	18bfcb1e 	bne	r3,r2,10013fe4 <__alt_data_end+0xf8013fe4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100140b8:	0005883a 	mov	r2,zero
}
100140bc:	e037883a 	mov	sp,fp
100140c0:	dfc00117 	ldw	ra,4(sp)
100140c4:	df000017 	ldw	fp,0(sp)
100140c8:	dec00204 	addi	sp,sp,8
100140cc:	f800283a 	ret

100140d0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100140d0:	defffa04 	addi	sp,sp,-24
100140d4:	dfc00515 	stw	ra,20(sp)
100140d8:	df000415 	stw	fp,16(sp)
100140dc:	dc000315 	stw	r16,12(sp)
100140e0:	df000404 	addi	fp,sp,16
100140e4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
100140e8:	00bffa04 	movi	r2,-24
100140ec:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100140f0:	e03ffc15 	stw	zero,-16(fp)
100140f4:	00002106 	br	1001417c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
100140f8:	040400b4 	movhi	r16,4098
100140fc:	843df304 	addi	r16,r16,-2100
10014100:	e0bffc17 	ldw	r2,-16(fp)
10014104:	1009883a 	mov	r4,r2
10014108:	01400304 	movi	r5,12
1001410c:	0007bcc0 	call	10007bcc <__mulsi3>
10014110:	8085883a 	add	r2,r16,r2
10014114:	10800017 	ldw	r2,0(r2)
10014118:	1000151e 	bne	r2,zero,10014170 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1001411c:	040400b4 	movhi	r16,4098
10014120:	843df304 	addi	r16,r16,-2100
10014124:	e0bffc17 	ldw	r2,-16(fp)
10014128:	1009883a 	mov	r4,r2
1001412c:	01400304 	movi	r5,12
10014130:	0007bcc0 	call	10007bcc <__mulsi3>
10014134:	8085883a 	add	r2,r16,r2
10014138:	e0fffe17 	ldw	r3,-8(fp)
1001413c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10014140:	008400b4 	movhi	r2,4098
10014144:	10827604 	addi	r2,r2,2520
10014148:	10c00017 	ldw	r3,0(r2)
1001414c:	e0bffc17 	ldw	r2,-16(fp)
10014150:	1880040e 	bge	r3,r2,10014164 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10014154:	008400b4 	movhi	r2,4098
10014158:	10827604 	addi	r2,r2,2520
1001415c:	e0fffc17 	ldw	r3,-16(fp)
10014160:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10014164:	e0bffc17 	ldw	r2,-16(fp)
10014168:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1001416c:	00000606 	br	10014188 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10014170:	e0bffc17 	ldw	r2,-16(fp)
10014174:	10800044 	addi	r2,r2,1
10014178:	e0bffc15 	stw	r2,-16(fp)
1001417c:	e0bffc17 	ldw	r2,-16(fp)
10014180:	10800810 	cmplti	r2,r2,32
10014184:	103fdc1e 	bne	r2,zero,100140f8 <__alt_data_end+0xf80140f8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10014188:	e0bffd17 	ldw	r2,-12(fp)
}
1001418c:	e6ffff04 	addi	sp,fp,-4
10014190:	dfc00217 	ldw	ra,8(sp)
10014194:	df000117 	ldw	fp,4(sp)
10014198:	dc000017 	ldw	r16,0(sp)
1001419c:	dec00304 	addi	sp,sp,12
100141a0:	f800283a 	ret

100141a4 <atexit>:
100141a4:	200b883a 	mov	r5,r4
100141a8:	000d883a 	mov	r6,zero
100141ac:	0009883a 	mov	r4,zero
100141b0:	000f883a 	mov	r7,zero
100141b4:	001426c1 	jmpi	1001426c <__register_exitproc>

100141b8 <exit>:
100141b8:	defffe04 	addi	sp,sp,-8
100141bc:	000b883a 	mov	r5,zero
100141c0:	dc000015 	stw	r16,0(sp)
100141c4:	dfc00115 	stw	ra,4(sp)
100141c8:	2021883a 	mov	r16,r4
100141cc:	00143800 	call	10014380 <__call_exitprocs>
100141d0:	008400b4 	movhi	r2,4098
100141d4:	10826c04 	addi	r2,r2,2480
100141d8:	11000017 	ldw	r4,0(r2)
100141dc:	20800f17 	ldw	r2,60(r4)
100141e0:	10000126 	beq	r2,zero,100141e8 <exit+0x30>
100141e4:	103ee83a 	callr	r2
100141e8:	8009883a 	mov	r4,r16
100141ec:	00145140 	call	10014514 <_exit>

100141f0 <memcmp>:
100141f0:	01c000c4 	movi	r7,3
100141f4:	3980192e 	bgeu	r7,r6,1001425c <memcmp+0x6c>
100141f8:	2144b03a 	or	r2,r4,r5
100141fc:	11c4703a 	and	r2,r2,r7
10014200:	10000f26 	beq	r2,zero,10014240 <memcmp+0x50>
10014204:	20800003 	ldbu	r2,0(r4)
10014208:	28c00003 	ldbu	r3,0(r5)
1001420c:	10c0151e 	bne	r2,r3,10014264 <memcmp+0x74>
10014210:	31bfff84 	addi	r6,r6,-2
10014214:	01ffffc4 	movi	r7,-1
10014218:	00000406 	br	1001422c <memcmp+0x3c>
1001421c:	20800003 	ldbu	r2,0(r4)
10014220:	28c00003 	ldbu	r3,0(r5)
10014224:	31bfffc4 	addi	r6,r6,-1
10014228:	10c00e1e 	bne	r2,r3,10014264 <memcmp+0x74>
1001422c:	21000044 	addi	r4,r4,1
10014230:	29400044 	addi	r5,r5,1
10014234:	31fff91e 	bne	r6,r7,1001421c <__alt_data_end+0xf801421c>
10014238:	0005883a 	mov	r2,zero
1001423c:	f800283a 	ret
10014240:	20c00017 	ldw	r3,0(r4)
10014244:	28800017 	ldw	r2,0(r5)
10014248:	1880041e 	bne	r3,r2,1001425c <memcmp+0x6c>
1001424c:	31bfff04 	addi	r6,r6,-4
10014250:	21000104 	addi	r4,r4,4
10014254:	29400104 	addi	r5,r5,4
10014258:	39bff936 	bltu	r7,r6,10014240 <__alt_data_end+0xf8014240>
1001425c:	303fe91e 	bne	r6,zero,10014204 <__alt_data_end+0xf8014204>
10014260:	003ff506 	br	10014238 <__alt_data_end+0xf8014238>
10014264:	10c5c83a 	sub	r2,r2,r3
10014268:	f800283a 	ret

1001426c <__register_exitproc>:
1001426c:	008400b4 	movhi	r2,4098
10014270:	defffa04 	addi	sp,sp,-24
10014274:	10826c04 	addi	r2,r2,2480
10014278:	dc000315 	stw	r16,12(sp)
1001427c:	14000017 	ldw	r16,0(r2)
10014280:	dc400415 	stw	r17,16(sp)
10014284:	dfc00515 	stw	ra,20(sp)
10014288:	80805217 	ldw	r2,328(r16)
1001428c:	2023883a 	mov	r17,r4
10014290:	10003626 	beq	r2,zero,1001436c <__register_exitproc+0x100>
10014294:	10c00117 	ldw	r3,4(r2)
10014298:	010007c4 	movi	r4,31
1001429c:	20c00e16 	blt	r4,r3,100142d8 <__register_exitproc+0x6c>
100142a0:	1a400044 	addi	r9,r3,1
100142a4:	8800211e 	bne	r17,zero,1001432c <__register_exitproc+0xc0>
100142a8:	18c00084 	addi	r3,r3,2
100142ac:	18c7883a 	add	r3,r3,r3
100142b0:	18c7883a 	add	r3,r3,r3
100142b4:	12400115 	stw	r9,4(r2)
100142b8:	10c7883a 	add	r3,r2,r3
100142bc:	19400015 	stw	r5,0(r3)
100142c0:	0005883a 	mov	r2,zero
100142c4:	dfc00517 	ldw	ra,20(sp)
100142c8:	dc400417 	ldw	r17,16(sp)
100142cc:	dc000317 	ldw	r16,12(sp)
100142d0:	dec00604 	addi	sp,sp,24
100142d4:	f800283a 	ret
100142d8:	00800034 	movhi	r2,0
100142dc:	10800004 	addi	r2,r2,0
100142e0:	10002526 	beq	r2,zero,10014378 <__register_exitproc+0x10c>
100142e4:	01006404 	movi	r4,400
100142e8:	d9400015 	stw	r5,0(sp)
100142ec:	d9800115 	stw	r6,4(sp)
100142f0:	d9c00215 	stw	r7,8(sp)
100142f4:	00000000 	call	10000000 <__alt_mem_sdram>
100142f8:	d9400017 	ldw	r5,0(sp)
100142fc:	d9800117 	ldw	r6,4(sp)
10014300:	d9c00217 	ldw	r7,8(sp)
10014304:	10001c26 	beq	r2,zero,10014378 <__register_exitproc+0x10c>
10014308:	80c05217 	ldw	r3,328(r16)
1001430c:	10000115 	stw	zero,4(r2)
10014310:	02400044 	movi	r9,1
10014314:	10c00015 	stw	r3,0(r2)
10014318:	80805215 	stw	r2,328(r16)
1001431c:	10006215 	stw	zero,392(r2)
10014320:	10006315 	stw	zero,396(r2)
10014324:	0007883a 	mov	r3,zero
10014328:	883fdf26 	beq	r17,zero,100142a8 <__alt_data_end+0xf80142a8>
1001432c:	18d1883a 	add	r8,r3,r3
10014330:	4211883a 	add	r8,r8,r8
10014334:	1211883a 	add	r8,r2,r8
10014338:	41802215 	stw	r6,136(r8)
1001433c:	01000044 	movi	r4,1
10014340:	11806217 	ldw	r6,392(r2)
10014344:	20c8983a 	sll	r4,r4,r3
10014348:	310cb03a 	or	r6,r6,r4
1001434c:	11806215 	stw	r6,392(r2)
10014350:	41c04215 	stw	r7,264(r8)
10014354:	01800084 	movi	r6,2
10014358:	89bfd31e 	bne	r17,r6,100142a8 <__alt_data_end+0xf80142a8>
1001435c:	11806317 	ldw	r6,396(r2)
10014360:	3108b03a 	or	r4,r6,r4
10014364:	11006315 	stw	r4,396(r2)
10014368:	003fcf06 	br	100142a8 <__alt_data_end+0xf80142a8>
1001436c:	80805304 	addi	r2,r16,332
10014370:	80805215 	stw	r2,328(r16)
10014374:	003fc706 	br	10014294 <__alt_data_end+0xf8014294>
10014378:	00bfffc4 	movi	r2,-1
1001437c:	003fd106 	br	100142c4 <__alt_data_end+0xf80142c4>

10014380 <__call_exitprocs>:
10014380:	008400b4 	movhi	r2,4098
10014384:	10826c04 	addi	r2,r2,2480
10014388:	10800017 	ldw	r2,0(r2)
1001438c:	defff404 	addi	sp,sp,-48
10014390:	dd800815 	stw	r22,32(sp)
10014394:	d8800015 	stw	r2,0(sp)
10014398:	10805204 	addi	r2,r2,328
1001439c:	dd000615 	stw	r20,24(sp)
100143a0:	dc800415 	stw	r18,16(sp)
100143a4:	dfc00b15 	stw	ra,44(sp)
100143a8:	df000a15 	stw	fp,40(sp)
100143ac:	ddc00915 	stw	r23,36(sp)
100143b0:	dd400715 	stw	r21,28(sp)
100143b4:	dcc00515 	stw	r19,20(sp)
100143b8:	dc400315 	stw	r17,12(sp)
100143bc:	dc000215 	stw	r16,8(sp)
100143c0:	2025883a 	mov	r18,r4
100143c4:	2829883a 	mov	r20,r5
100143c8:	d8800115 	stw	r2,4(sp)
100143cc:	05bfffc4 	movi	r22,-1
100143d0:	d8800017 	ldw	r2,0(sp)
100143d4:	14c05217 	ldw	r19,328(r2)
100143d8:	98001d26 	beq	r19,zero,10014450 <__call_exitprocs+0xd0>
100143dc:	dd400117 	ldw	r21,4(sp)
100143e0:	98800117 	ldw	r2,4(r19)
100143e4:	173fffc4 	addi	fp,r2,-1
100143e8:	e0000d16 	blt	fp,zero,10014420 <__call_exitprocs+0xa0>
100143ec:	14000044 	addi	r16,r2,1
100143f0:	8421883a 	add	r16,r16,r16
100143f4:	8421883a 	add	r16,r16,r16
100143f8:	84402004 	addi	r17,r16,128
100143fc:	9c63883a 	add	r17,r19,r17
10014400:	9c21883a 	add	r16,r19,r16
10014404:	a0001e26 	beq	r20,zero,10014480 <__call_exitprocs+0x100>
10014408:	80804017 	ldw	r2,256(r16)
1001440c:	15001c26 	beq	r2,r20,10014480 <__call_exitprocs+0x100>
10014410:	e73fffc4 	addi	fp,fp,-1
10014414:	843fff04 	addi	r16,r16,-4
10014418:	8c7fff04 	addi	r17,r17,-4
1001441c:	e5bff91e 	bne	fp,r22,10014404 <__alt_data_end+0xf8014404>
10014420:	00800034 	movhi	r2,0
10014424:	10800004 	addi	r2,r2,0
10014428:	10000926 	beq	r2,zero,10014450 <__call_exitprocs+0xd0>
1001442c:	98800117 	ldw	r2,4(r19)
10014430:	1000311e 	bne	r2,zero,100144f8 <__call_exitprocs+0x178>
10014434:	98800017 	ldw	r2,0(r19)
10014438:	10003426 	beq	r2,zero,1001450c <__call_exitprocs+0x18c>
1001443c:	9809883a 	mov	r4,r19
10014440:	a8800015 	stw	r2,0(r21)
10014444:	00000000 	call	10000000 <__alt_mem_sdram>
10014448:	acc00017 	ldw	r19,0(r21)
1001444c:	983fe41e 	bne	r19,zero,100143e0 <__alt_data_end+0xf80143e0>
10014450:	dfc00b17 	ldw	ra,44(sp)
10014454:	df000a17 	ldw	fp,40(sp)
10014458:	ddc00917 	ldw	r23,36(sp)
1001445c:	dd800817 	ldw	r22,32(sp)
10014460:	dd400717 	ldw	r21,28(sp)
10014464:	dd000617 	ldw	r20,24(sp)
10014468:	dcc00517 	ldw	r19,20(sp)
1001446c:	dc800417 	ldw	r18,16(sp)
10014470:	dc400317 	ldw	r17,12(sp)
10014474:	dc000217 	ldw	r16,8(sp)
10014478:	dec00c04 	addi	sp,sp,48
1001447c:	f800283a 	ret
10014480:	98800117 	ldw	r2,4(r19)
10014484:	80c00017 	ldw	r3,0(r16)
10014488:	10bfffc4 	addi	r2,r2,-1
1001448c:	17001526 	beq	r2,fp,100144e4 <__call_exitprocs+0x164>
10014490:	80000015 	stw	zero,0(r16)
10014494:	183fde26 	beq	r3,zero,10014410 <__alt_data_end+0xf8014410>
10014498:	00800044 	movi	r2,1
1001449c:	1708983a 	sll	r4,r2,fp
100144a0:	98806217 	ldw	r2,392(r19)
100144a4:	9dc00117 	ldw	r23,4(r19)
100144a8:	2084703a 	and	r2,r4,r2
100144ac:	1000061e 	bne	r2,zero,100144c8 <__call_exitprocs+0x148>
100144b0:	183ee83a 	callr	r3
100144b4:	98800117 	ldw	r2,4(r19)
100144b8:	15ffc51e 	bne	r2,r23,100143d0 <__alt_data_end+0xf80143d0>
100144bc:	a8800017 	ldw	r2,0(r21)
100144c0:	14ffd326 	beq	r2,r19,10014410 <__alt_data_end+0xf8014410>
100144c4:	003fc206 	br	100143d0 <__alt_data_end+0xf80143d0>
100144c8:	98806317 	ldw	r2,396(r19)
100144cc:	2084703a 	and	r2,r4,r2
100144d0:	1000061e 	bne	r2,zero,100144ec <__call_exitprocs+0x16c>
100144d4:	89400017 	ldw	r5,0(r17)
100144d8:	9009883a 	mov	r4,r18
100144dc:	183ee83a 	callr	r3
100144e0:	003ff406 	br	100144b4 <__alt_data_end+0xf80144b4>
100144e4:	9f000115 	stw	fp,4(r19)
100144e8:	003fea06 	br	10014494 <__alt_data_end+0xf8014494>
100144ec:	89000017 	ldw	r4,0(r17)
100144f0:	183ee83a 	callr	r3
100144f4:	003fef06 	br	100144b4 <__alt_data_end+0xf80144b4>
100144f8:	98800017 	ldw	r2,0(r19)
100144fc:	982b883a 	mov	r21,r19
10014500:	1027883a 	mov	r19,r2
10014504:	983fb61e 	bne	r19,zero,100143e0 <__alt_data_end+0xf80143e0>
10014508:	003fd106 	br	10014450 <__alt_data_end+0xf8014450>
1001450c:	0005883a 	mov	r2,zero
10014510:	003ffa06 	br	100144fc <__alt_data_end+0xf80144fc>

10014514 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10014514:	defffd04 	addi	sp,sp,-12
10014518:	df000215 	stw	fp,8(sp)
1001451c:	df000204 	addi	fp,sp,8
10014520:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10014524:	0001883a 	nop
10014528:	e0bfff17 	ldw	r2,-4(fp)
1001452c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10014530:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10014534:	10000226 	beq	r2,zero,10014540 <_exit+0x2c>
    ALT_SIM_FAIL();
10014538:	002af070 	cmpltui	zero,zero,43969
1001453c:	00000106 	br	10014544 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10014540:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10014544:	003fff06 	br	10014544 <__alt_data_end+0xf8014544>
